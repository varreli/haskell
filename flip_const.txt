crucify_me, your ff consumes the "c", so the returned function never sees it

the result of (gg (flip const) 1 2) is ((flip const) 1). this is applied to the remaining parameter, "t"

c does not occur after the = in gg . it just goes away, cannot affect anything else at all.

2 , not "t" , is in the c parameter.

f = flip const; a = 1; c = 2; "t" is waiting for a function to be applied to it

	(gg (flip const) 1 2) "t"

  gg is producing a function. in this case it is a partial application: ((flip const) 1)

which is applied to "t"; this becomes 
((flip const) 1 "t") which is (const "t" 1) ,
which is "t"

The 2 ends up as c in `gg f a c`, and as c does not appear after the = it plays no more part in the result.

(flip const) doesn't happen before gg is 
evaluated. Haskell is lazy, it is passed as 
the f parameter, unevaluated yet


the const function is used twice, but only 
in the sense that you could rewrite `gg f a c = f a` 
to use const instead of just not mentioning c

it is not using the const that you gave it as 
part of f.

flip const :: b -> (c -> c)
gg :: (t2 -> t1) -> t2 -> t -> t1

for (t2 -> t1)  to unify with (b -> (c -> c)) :
t2 becomes b, t1 becomes (c -> c)   
Can you write the type of gg substituting b for t2 and c -> c for t1?

In some sense const is happening a second time, 
but it is not related to the const you gave it.
it's implicit in the fact that (\f a c = f a) does not mention c after the = .

This *is* a form of const, and there are ways 
to write it that use something like const, 
but this has nothing to do with the const you 
are giving it separately; it's wired into the 
definition of gg.

consider:
  
(gg (+) 1 7 4) . the 7 will still not show up 
in the result

The 4 will be consumed by the result of (gg (+) 1 7)

the 7 will never have any effect, because when 
applying gg , f = (+), a = 1, c = 7, and c 
does not appear after the =

At this level you should think in terms of 
rewriting / replacement.

gg does not evaluate anything, it just does substitutions.
gg f a c = f a -- none of f, a, c are evaluated, 
just "copied over"

gg (flip const) 1 2 "t"
--(rewrite rreturnAftApply = \f a c -> f a) -->
  
(flip const) 1 "t"
--(rewrite flip = \f a b -> f b a) -->

const "t" 1
--(rewrite const = \a b -> a)-->

"t"

When it stops doing rewriting is when it's left 
with a simple value like 1 or "t", or it has 
a "primop" (something that actually needs to 
be evaluated instead of rewritten, like :

(+) :: Integer -> Integer -> Integer 

which you can't do just by rewriting terms.

So the interpreter doesn't see 4 as bound to a parameter. 7 is bound to c. (+1) is looking for 
another operand, and it is listed just left of 
the = sign ?

Not as a parameter to gg. It is a parameter to 
the function that gg produces. because ((+) 1) 
is partially applied, and needs another 
parameter to be fully applied.

> :t ((+) 1)
Num a => a -> a

ME: its looking for one arg, or operand

gg (+) 1 7 4   
--(rewrite gg = \f a c -> f a)-->   
(+) 1 4   

--((+) @Integer = primop)-->  5

At the time gg is reduced, it does not know that 
f has anything to do with (+)

If you are looking at the behaviour of (+), 
you're ahead of yourself.

how to evaluate ( (\f a c -> f a) const 1 2 "t" ) ? That's what you need to do for gg.

haskell knows from the types that gg produces 
a function that needs a parameter, and is 
holding out the "t" for application to that 
returned function.
