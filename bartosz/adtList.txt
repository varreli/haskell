-- List as algebraic data type:

  L(a) = 1 + a * L(a)
  L(a) - a * L(a) = 1
  L(a) (1 - a) = 1
  L(a) = 1 / (1 - a)

-- This corresponds to the haskell List type :

  data List a = Nil | Cons a (List a)  
  
-- List is a sum with 2 constructors: Nil and Cons
-- Cons is a product type with 2 arguments, head and tail:
-- (a, (List a) )

-- note on cardinality :

-- n=0  ==  a^0  ==  1  ==  []  ==  Nil :
--         so it has the cardinality of 1 + a^n


-- This leads to the summation of all Lists:

--     oo 
--     Sum  a^n
--     n=0       =       
  
--     1 + [singleton] + [a,a] + [a,a,a] ...


-- This is also the sum of a geometric sequence.

-- Using substitution:

  L(a) = 1 + a * L(a)
  L(a) = 1 + a * (1 + a * L(a) ) 
       = 1 + a + 2a (1 + a * L(a) )
       = 1 + a + 2a + 3a (1 + a * L(a) ... OO
