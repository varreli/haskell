Abstraction
Composition
identity

With Abstraction, we want to get rid of
details, like the Assembly and Machine
language levels of computing.
When we abstract away the details, things
that were different seem to become
identical.

This is the notion of identity.
Because of identity, there are things that
are identical, and things almost equal, or,
isomorphic. Are isomorphism and equality
the same, should we treat them the same?

Composition and Identity encompass Category
Theory.

A category is a bunch of objects, and arrows,
called morphisms. An object is just a point,
and the reason for objects is so you can mark
the ends of arrows. Higher and lower level
abstraction is actually a spatial relationship,
like how hunter-gatherers saw the world.
(Arrows !) Morphisms too, are spatial, they
travel from a -> b. A category can be seen as
graphical, a graph, spatial.

Two composable morphisms have arrows where
the end of one is the beginning of the other:
a -> b -> c = a -> c
Objects and arrows contain no information; the
composition contains information. Encode
everything in the composition.

f = a -> b;   id.b . f = f    - left identity
g = a -> b;   g . id.a = g    - right identity

Consider:

f = a -> b
g = b -> c
h = c -> d :

a -> b -> c -> d   =   h . (g . f)
a -> b -> c -> d   =   (h . g) . f

These are associative. Parentheses take
precedence.

Types are sets of values, functions
operate on sets of values, you can define
functions on sets.

Then, the set, with its elements, becomes
just a point. We forget the structure, and
look at only its morphisms (its interface),
to find its nature. This is the ultimate in
abstraction and data hiding.

--------------------------------------------

A pure, or total function between sets is a
function that is defined for all its arguments,
not just some arguments. This is a mathematical
function. In programming functions can be
partial, which fail with some arguments. A pure
function is defined for some type, i.e. Integers,
which means *all* Integers.

Decomposition brings us to the blocks at the
lowest level, the pure functions (atoms).
On top of these, we can build more complex
objects, data types, procedures, or IO.

We look at functions as morphisms between sets.
In two sets there are relations between pairs
of elements. A set of pairs forms a cartesian
product. A subset of a cartesian product is a
relation. Relations have no directionality, but
functions have directionality. (Domain to Codomain.)
The subset in the Codomain, to which the entire
Domain is mapped, is called the image of the
function. Mapping in this way has a directionality.
This is a key intuition. Mapping between categories
are called functors. Mappings between functors are
called natural transformations.

Is the mapping invertible, ie can we go back? In
most cases no. But to illustrate inversion:

f :: a -> b             a and b are sets, or types.
the inverse is:
g :: b -> a

When a function is invertible
we have the definition of isomorphism :

[ g . f = id.a ]    -- g after f, identity on a
[ f . g = id.b ]    -- f after g. identity on b

This is isomorphism in any category - not just in
sets, because its expressed in terms of composition
and identity, nothing else.



