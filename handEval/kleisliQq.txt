When the monad T(a) forms product types T(X)≔ X×Q with 
some fixed type Q that carries the structure of a monoid, 
then a Kleisli function f: X→Y ×Q may be thought of as a 
function X→Y that produces a side effect output of type Q. 

The Kleisli composition of two functions f: X→Y ×Q and 
g: Y→Z ×Q then not only evaluates the two programs in 
sequence, but also combines their Q-output using the monoid 
operation of Q; so if f x = (y,q) and g y = (z,q′) , then the 
final result of (g∘f)(x) will be (z,qq′). For example, Q 
might be the set of strings of characters, and the monoid 
operation that of concatenation of strings (i.e. Q is the 
free monoid on the type of characters). If the program is 
designed such that values of type Q computed in this way 
appear on the user’s screen or are written to memory, then 
this is a way to encode input/output.
