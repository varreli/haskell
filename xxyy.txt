Write the Eq instance for the datatype provided

TisAnInteger

data TisAnInteger =
    TisAn Integer

instance Eq TisAnInteger where
    (==) (TisAn a) (TisAn b) = a == b
TwoIntegers

data TwoIntegers =
    Two Integer Integer

instance Eq TwoIntegers where
    (==) (Two a1 a2) (Two b1 b2) = a1 == b1 && a2 == b2
StringOrInt

data StringOrInt =
    TisAnInt Int
  | TisAString String

instance Eq StringOrInt where
    (==) (TisAnInt a) (TisAnInt b) = a == b
    (==) (TisAString a) (TisAString b) = a == b
    (==) _ _ = False

Pair a

data Pair a =
    Pair a a

instance Eq a => Eq (Pair a) where
    (==) (Pair a1 a2) (Pair b1 b2) = a1 == b1 && a2 == b2
Tuple a b

data Tuple a b =
    Tuple a b

instance (Eq a, Eq b) => Eq (Tuple a b) where
    (==) (Tuple a1 a2) (Tuple b1 b2) = a1 == b1 && a2 == b2
