-- Emulation of Quotient Types

{-# LANGUAGE GADTs #-}
{-# LANGUAGE ConstraintKinds #-}
{-# LANGUAGE AllowAmbiguousTypes #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE ScopedTypeVariables #-}

import GHC.Natural

class Equivalence c where
  eq :: c a => a -> a -> Bool
  --

  class Mod4 a where
    mod4eq :: a -> a -> Bool
    --

    instance Mod4 Natural where
      mod4eq n m = n `mod` 4 == m `mod` 4
      --

      instance Equivalence Mod4 where
        eq = mod4eq
	--

	data Quot c a where
	  Quot :: (Equivalence c, c a) => a -> Quot c a
	  --

	  instance Show a => Show (Quot c a) where
	    show (Quot a) = "Quot " ++ show a
	    --

	    instance Eq (Quot c a) where
	      Quot a == Quot b = eq @c a b
	      --

	      -- Example:
	      -- > (nub . fmap (Quot @Mod4)) ([0..20] :: [Natural])
	      -- [Quot 0,Quot 1,Quot 2,Quot 3]
