[2020-05-22T19:48:03-0700]  
[2020-05-22T19:48:03-0700] ------------- Begin Session -------------
[2020-05-22T19:48:03-0700]  
[2020-05-22T19:48:03-0700] crestfallen (~textual@135-180-13-241.fiber.dynamic.sonic.net) joined the channel
[2020-05-22T19:48:03-0700] Topic is https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: https://gist.github.com/ | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org
[2020-05-22T19:48:03-0700] Set by glguy on January 5, 2019 at 7:21:52 AM PST
[2020-05-22T19:48:04-0700] Website is http://www.haskell.org/
[2020-05-22T19:48:04-0700] Mode is +CLnt
[2020-05-22T19:48:12-0700] <remexre> hm, is there some way to set the value that getArgs returns? (i.e. a setArgs :: [String] -> IO ()?)
[2020-05-22T19:49:07-0700] hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) left IRC (Ping timeout: 260 seconds)
[2020-05-22T19:51:27-0700] nineonine (~nineonine@d75-155-217-186.bchsia.telus.net) joined the channel
[2020-05-22T19:51:37-0700] theDon (~td@muedsl-82-207-238-243.citykom.de) left IRC (Ping timeout: 246 seconds)
[2020-05-22T19:51:39-0700] AndChat255521 (~AndChat25@2a02:c7f:bc61:4200:b189:9380:3132:88b6) left IRC (Ping timeout: 272 seconds)
[2020-05-22T19:51:56-0700] AndChat255521 (~AndChat25@94.3.253.223) joined the channel
[2020-05-22T19:52:07-0700] falafel__ (~falafel@096-041-126-019.res.spectrum.com) joined the channel
[2020-05-22T19:52:08-0700] falafel__ is now known as falafel
[2020-05-22T19:52:31-0700] <dolio> Yes, there's something like that.
[2020-05-22T19:53:11-0700] wei2912 (~wei2912@unaffiliated/wei2912) joined the channel
[2020-05-22T19:53:13-0700] <remexre> dolio: hints as to the name? hoogling for setArgs and putArgs got nothing useful
[2020-05-22T19:53:32-0700] <crestfallen> very sorry why is it so tough to remove .cabal .ghc folders using $ rm -rf .ghc     AND   rm -rf  .cabal.  ? 
[2020-05-22T19:53:33-0700] theDon (~td@94.134.91.166) joined the channel
[2020-05-22T19:53:34-0700] <dolio> Not sure. It could be withArgs, for a scoped thing.
[2020-05-22T19:53:44-0700] <dolio> Did you try hoogling by type?
[2020-05-22T19:53:58-0700] johntalent (~johntalen@unaffiliated/johntalent) left IRC (Quit: leaving)
[2020-05-22T19:54:13-0700] <crestfallen> I need a clean uninstall of cabal and anything hoogle. on a mac
[2020-05-22T19:54:26-0700] <remexre> dolio: [String] -> IO () got nothing, will try withArgs + its type
[2020-05-22T19:54:42-0700] falafel_ (~falafel@2600:6c50:547f:99bb:1c34:9a84:4c5c:c1) left IRC (Ping timeout: 260 seconds)
[2020-05-22T19:55:03-0700] <remexre> ah, withArgs indeed
[2020-05-22T19:56:08-0700] nineonine (~nineonine@d75-155-217-186.bchsia.telus.net) left IRC (Ping timeout: 265 seconds)
[2020-05-22T19:56:18-0700] <crestfallen> I've been using this by begriffs:   https://gist.github.com/begriffs/6408415
[2020-05-22T19:57:49-0700] cole-h (~cole-h@c-67-187-170-40.hsd1.ca.comcast.net) left IRC (Quit: Goodbye)
[2020-05-22T19:58:41-0700] LevelChart8 (~reallymem@pool-100-2-25-229.nycmny.fios.verizon.net) joined the channel
[2020-05-22T19:59:07-0700] <crestfallen> never mind thanks I think I used homebrew to install
[2020-05-22T19:59:47-0700] cole-h (~cole-h@c-67-187-170-40.hsd1.ca.comcast.net) joined the channel
[2020-05-22T20:00:02-0700] TRB1431 (~TRB143@178.162.212.214) left IRC
[2020-05-22T20:00:14-0700] avn (~avn@78-56-108-78.static.zebra.lt) left IRC (Ping timeout: 272 seconds)
[2020-05-22T20:02:42-0700] <crestfallen> I was able to uninstall ghc. any reasonable way to uninstall cabal?
[2020-05-22T20:03:55-0700] fpaulw (~fpaulw@h4.243.131.174.dynamic.ip.windstream.net) left IRC (Ping timeout: 258 seconds)
[2020-05-22T20:03:59-0700] <Welkin> with ghcup
[2020-05-22T20:04:07-0700] <Welkin> or just rm -rf ~/.cabal
[2020-05-22T20:04:25-0700] <Welkin> it depends on how you installed it
[2020-05-22T20:04:32-0700] <Welkin> only install using ghcup
[2020-05-22T20:04:34-0700] <Welkin> it's cleanest
[2020-05-22T20:05:01-0700] <dsal> ezzieyguywuf: Yeah, that's what the maybe monad is all about.
[2020-05-22T20:05:02-0700] <crestfallen> I think that's how I installed it but I removed .ghcup already :(
[2020-05-22T20:05:11-0700] <crestfallen> Welkin 
[2020-05-22T20:05:12-0700] GyroW (~GyroW@unaffiliated/gyrow) left IRC (Ping timeout: 260 seconds)
[2020-05-22T20:05:36-0700] <Welkin> install it again
[2020-05-22T20:05:53-0700] <Welkin> it should just be ~/.cabal and ~/.ghc, I think
[2020-05-22T20:06:01-0700] GyroW (~GyroW@ptr-48ujrfb8c7gfd2lu92q.18120a2.ip6.access.telenet.be) joined the channel
[2020-05-22T20:06:13-0700] <Welkin> but again it depends on how you installed ghc and cabal in the first place
[2020-05-22T20:06:20-0700] <dsal> % :t (>>=) @Maybe
[2020-05-22T20:06:21-0700] <yahb> dsal: Maybe a -> (a -> Maybe b) -> Maybe b
[2020-05-22T20:06:52-0700] <crestfallen> it's odd, ls -a doesn't show .cabal but I can query the version $ cabal --version
[2020-05-22T20:07:01-0700] <Welkin> which cabal
[2020-05-22T20:07:05-0700] <Welkin> try that
[2020-05-22T20:07:10-0700] merijn (~merijn@83-160-49-249.ip.xs4all.nl) left IRC (Ping timeout: 260 seconds)
[2020-05-22T20:07:20-0700] <crestfallen> 3.2.0.0
[2020-05-22T20:07:24-0700] <Welkin> no, not version
[2020-05-22T20:07:28-0700] <Welkin> type: which cabal
[2020-05-22T20:07:28-0700] <crestfallen> ok
[2020-05-22T20:07:40-0700] <Welkin> it tells you the location where it is stored
[2020-05-22T20:07:44-0700] conal (~conal@64.71.133.70) left IRC (Ping timeout: 265 seconds)
[2020-05-22T20:07:48-0700] <crestfallen> ok I'll just nuke that binary?
[2020-05-22T20:07:49-0700] <Welkin> ls -la $(which cabal)
[2020-05-22T20:07:58-0700] <Welkin> it may be symlinked
[2020-05-22T20:09:27-0700] joecordingley (~joecordin@82.28.229.26) joined the channel
[2020-05-22T20:09:42-0700] <crestfallen> test
[2020-05-22T20:09:51-0700] <crestfallen>     /usr/local/bin/cabal
[2020-05-22T20:10:37-0700] mnrmnaugh (~mnrmnaugh@unaffiliated/mnrmnaugh) joined the channel
[2020-05-22T20:11:10-0700] <Welkin> yeah... that's not good
[2020-05-22T20:11:20-0700] <Welkin> how did you install it?
[2020-05-22T20:11:24-0700] <Welkin> you can just delete that
[2020-05-22T20:11:51-0700] <Welkin> it's a bad practice to install into /usr/
[2020-05-22T20:12:09-0700] <Welkin> should be in your home, then put it on your path, like ~/.cabal/bin
[2020-05-22T20:12:33-0700] <crestfallen> ok I deleted it . where do you figure the symlink is hiding?
[2020-05-22T20:13:09-0700] <Welkin> there is no symlink according to you
[2020-05-22T20:13:28-0700] <Welkin> it would say so from that command I gave you
[2020-05-22T20:13:30-0700] Codaraxis (~Codaraxis@ip68-5-90-227.oc.oc.cox.net) left IRC (Remote host closed the connection)
[2020-05-22T20:13:54-0700] <crestfallen> I thought I used homebrew to install the whole thing does that make sense?
[2020-05-22T20:14:01-0700] joecordingley (~joecordin@82.28.229.26) left IRC (Ping timeout: 265 seconds)
[2020-05-22T20:14:39-0700] <Welkin> use ghcup from now on
[2020-05-22T20:15:10-0700] benjamingr__ (uid23465@gateway/web/irccloud.com/x-iqlgebkcbjvnfhba) left IRC (Quit: Connection closed for inactivity)
[2020-05-22T20:15:13-0700] Codaraxis (~Codaraxis@ip68-5-90-227.oc.oc.cox.net) joined the channel
[2020-05-22T20:15:13-0700] <crestfallen> trying that now thanks!
[2020-05-22T20:15:15-0700] <dsal> crestfallen: If you used homebrew, homebrew has an uninstall
[2020-05-22T20:15:52-0700] <crestfallen> dsal I uninstalled ghc successfully but cabal I just did manually
[2020-05-22T20:16:00-0700] <crestfallen> *with brew
[2020-05-22T20:16:42-0700] <dsal> Ah, weird.  I can understand why nix is so appealing when it comes to stuff like this, though.  :)
[2020-05-22T20:20:05-0700] <crestfallen> dsal yeah that keeps coming up. what's nix can I run a vm on mac for haskell study?
[2020-05-22T20:21:32-0700] <dsal> You don't need a vm (nixos is another thing, which is super great).  You can kind of think of nix like a package manager, except you can have different packages running at the same time from simple recipes and not worry about all the other junk.
[2020-05-22T20:22:23-0700] <dsal> e.g., in my gopro project, I can cd into the ui directory, and while I'm there, that shell will have elm and make installed.  Others won't.
[2020-05-22T20:23:16-0700] <crestfallen> thanks you liking elm ?
[2020-05-22T20:23:59-0700] <crestfallen> Welkin hi I assume the gcup put everything in its proper place
[2020-05-22T20:24:05-0700] <dsal> A friend of mine was telling me he's been playing with nushell.  I figured I'd try it.  `nix-shell -p nushell nu` and I'm running nushell without "installing" it.  When I exit nu, it's gone"gone:
[2020-05-22T20:24:16-0700] â€¢ dsal: has a busted keyboard
[2020-05-22T20:24:25-0700] otto_s (~user@p5de2f129.dip0.t-ipconnect.de) joined the channel
[2020-05-22T20:24:38-0700] <dsal> crestfallen: elm is OK.  I've not done much UI lately.
[2020-05-22T20:25:15-0700] <Welkin> elm is my favorite language. I like it better than haskell
[2020-05-22T20:25:21-0700] <Welkin> I've used it for 4 years now
[2020-05-22T20:25:37-0700] <crestfallen> funny I got an older ghci version with the gcup than with the brew install. new is 8.8.3
[2020-05-22T20:26:27-0700] <Welkin> type ghcup list
[2020-05-22T20:26:35-0700] <Welkin> you can install any version you want and switch between them
[2020-05-22T20:27:40-0700] <crestfallen> yeah it looks nice Welkin  8.8.3 is checked as recommended
[2020-05-22T20:28:02-0700] otto_s_ (~user@p4ff27733.dip0.t-ipconnect.de) left IRC (Ping timeout: 265 seconds)
[2020-05-22T20:28:06-0700] zaquest (~notzaques@5.128.210.178) left IRC (Quit: Leaving)
[2020-05-22T20:29:04-0700] <crestfallen> Welkin I'm not a programmer .. gotta stick with haskell can't look at other langs. My friend raves about erlang
[2020-05-22T20:29:29-0700] <crestfallen> thanks kindly for your help
[2020-05-22T20:30:39-0700] <crestfallen> one last thing the reason I had to reinstall: I botched installing hoogle. suggestions?
[2020-05-22T20:32:03-0700] tromp (~tromp@2a02:a210:ca3:2800:8d45:8d0d:8a2c:ca43) joined the channel
[2020-05-22T20:32:19-0700] zaquest (~notzaques@5.128.210.178) joined the channel
[2020-05-22T20:33:40-0700] merijn (~merijn@83-160-49-249.ip.xs4all.nl) joined the channel
[2020-05-22T20:33:45-0700] <Welkin> elm is much easier to pick up than haskell
[2020-05-22T20:34:03-0700] <Welkin> it's a special language just for building web browser applications
[2020-05-22T20:35:53-0700] â€¢ hackage: simple-logger 0.1.0 - A very simple but efficient logging framework  https://hackage.haskell.org/package/simple-logger-0.1.0 (AlexanderThiemann)
[2020-05-22T20:36:33-0700] mcwitt (~user@198-27-190-152.fiber.dynamic.sonic.net) left IRC (Remote host closed the connection)
[2020-05-22T20:36:53-0700] <crestfallen> Welkin yeah I'm going down many rabbit holes with haskell. categories, unification. I like it but I get distracted
[2020-05-22T20:37:15-0700] tromp (~tromp@2a02:a210:ca3:2800:8d45:8d0d:8a2c:ca43) left IRC (Ping timeout: 272 seconds)
[2020-05-22T20:37:19-0700] <crestfallen> S.K.I. calculus etc
[2020-05-22T20:37:58-0700] <dsal> I just read stuff and build stuff.  Occasionally when I'm building something, I get annoyed and realize someone's solved the problem that's annoying me, so I get to use a thing I read aboutg.
[2020-05-22T20:38:44-0700] merijn (~merijn@83-160-49-249.ip.xs4all.nl) left IRC (Ping timeout: 256 seconds)
[2020-05-22T20:38:50-0700] kuriza (43aec9e6@c-67-174-201-230.hsd1.ca.comcast.net) joined the channel
[2020-05-22T20:39:38-0700] <Welkin> I'm currently learning F#, which is a cousin of Ocaml, which is a cousin to Haskell
[2020-05-22T20:39:52-0700] falafel (~falafel@096-041-126-019.res.spectrum.com) left IRC (Ping timeout: 256 seconds)
[2020-05-22T20:39:57-0700] electrostat (~dag@unaffiliated/electrostat) left IRC (Read error: Connection reset by peer)
[2020-05-22T20:39:58-0700] <Welkin> but it has a lot of oop interop features, which are strange
[2020-05-22T20:40:13-0700] <dsal> That's the O in O'Caml.  :)
[2020-05-22T20:40:41-0700] <crestfallen> I tried scheme before haskell. too hard to read I was going blind
[2020-05-22T20:40:57-0700] <dsal> I used to write a lot of scheme on my Palm Pilot.
[2020-05-22T20:41:22-0700] <crestfallen> I did get used to recursion to a degree though
[2020-05-22T20:41:46-0700] <MarcelineVQ> ocaml is the strict but awkward librarian who wants to help you find what you need but would prefer if you were a bit quieter and doesn't really like how you dress
[2020-05-22T20:41:56-0700] fpaulw (~fpaulw@h4.243.131.174.dynamic.ip.windstream.net) joined the channel
[2020-05-22T20:43:46-0700] <crestfallen> well back to the back-breaking state monad.
[2020-05-22T20:43:59-0700] <dsal> state is back breaking?
[2020-05-22T20:44:38-0700] <crestfallen> sort of yeah . the text book has ST for state transformer which is confusing me
[2020-05-22T20:44:48-0700] <dsal> ST is unrelated.
[2020-05-22T20:45:02-0700] HarveyPwca (~HarveyPwc@c-98-220-98-201.hsd1.il.comcast.net) left IRC (Quit: Leaving)
[2020-05-22T20:45:13-0700] <dsal> StateT and ST sound like they do similar things, and you can do similar things with them, but they aren't very similar.
[2020-05-22T20:45:39-0700] <crestfallen> you know a basic tutorial for state or some materials? dsal 
[2020-05-22T20:45:53-0700] <dsal> haskellbook.com is a great path.
[2020-05-22T20:46:20-0700] <dsal> StateT is really quite simple.  You can put values in it and pull values out of it.  That's pretty much it.
[2020-05-22T20:46:30-0700] <Welkin> ST is for safe mutation
[2020-05-22T20:46:38-0700] <MarcelineVQ> ST is unrealted to StateT, in haskell base libraries, but ST is probably related in the textbook given the context.
[2020-05-22T20:46:45-0700] <Welkin> ST and IO are very closely related
[2020-05-22T20:46:47-0700] <Welkin> State is pure
[2020-05-22T20:47:33-0700] <dsal> crestfallen: Are you looking at StateT or ST? 
[2020-05-22T20:48:06-0700] <dsal> The thing a little confusing about ST is that it's only really useful for things it works with.  Mutable vectors, IORefs, etc...   You can push any arbitrary state through a StateT
[2020-05-22T20:48:39-0700] <Welkin> ST is State Thread
[2020-05-22T20:48:41-0700] <crestfallen> hutton has ST and it's super terse. mr kmett suggested I read up on state elsewhere
[2020-05-22T20:48:49-0700] kuriza (43aec9e6@c-67-174-201-230.hsd1.ca.comcast.net) left IRC (Ping timeout: 245 seconds)
[2020-05-22T20:48:59-0700] <MarcelineVQ> That question can only be answered if you already know what the other ST is :>  Better to ask "What is the defintion of the ST you see in your book?"
[2020-05-22T20:49:24-0700] <crestfallen> I essentially understand the thread fairly well, using it is another matter
[2020-05-22T20:49:31-0700] <dsal> haskellbook.com takes you through some simple monads.  ReaderT and StateT are pretty similar.
[2020-05-22T20:50:57-0700] johntalent (~johntalen@unaffiliated/johntalent) joined the channel
[2020-05-22T20:52:13-0700] <crestfallen> thanks dsal I have the book. I could use some chattiness after hutton
[2020-05-22T20:52:26-0700] <crestfallen> thanks MarcelineVQ 
[2020-05-22T20:52:37-0700] <crestfallen> thanks Welkin 
[2020-05-22T20:52:37-0700] Psybur (~Psybur@unaffiliated/psybur) left IRC (Read error: Connection reset by peer)
[2020-05-22T20:53:04-0700] <dsal> Many of these things make way more sense once you need them to write a program.
[2020-05-22T20:53:17-0700] <dsal> Or perhaps, use them.  You don't ever *need* them, but they make some things easier.
[2020-05-22T20:53:52-0700] <crestfallen> yeah I don't know how to go about starting a project. like no clue. dsal
[2020-05-22T20:54:15-0700] zincy_ (~tom@95.147.127.3) left IRC (Read error: Connection reset by peer)
[2020-05-22T20:54:15-0700] <dsal> I use stack, so it's "stack new hotness" and then post to instagram
[2020-05-22T20:54:38-0700] zincy_ (~tom@95.147.127.3) joined the channel
[2020-05-22T20:54:43-0700] <dsal> Then I just keep banging on the keyboard until my problems are all behind me.  It works pretty well most of the time.
[2020-05-22T20:55:12-0700] <crestfallen> I used stack. complicated. members said just use cabal to learn haskell
[2020-05-22T20:55:27-0700] Guest29312 (~head_vict@84.39.116.180) joined the channel
[2020-05-22T20:55:44-0700] <crestfallen> cabal sandbox is sort of cool
[2020-05-22T20:55:46-0700] <dsal> People have opinions.
[2020-05-22T20:56:10-0700] <dsal> I've tried cabal and haven't got completely to the point where it doesn't make things harder for me.
[2020-05-22T20:56:17-0700] <dsal> I forgot what the last hangup I had was.
[2020-05-22T20:56:32-0700] <crestfallen> are you an author of haskellbook? 
[2020-05-22T20:56:39-0700] <dsal> No, just a customer.
[2020-05-22T20:56:57-0700] <crestfallen> cool I should go back to it at this stage
[2020-05-22T20:57:47-0700] <dsal> I'd written a couple of programs I used (and a couple libraries -- one relatively large) before going through the book.  Made a lot of the things I was doing make more sense.
[2020-05-22T20:58:02-0700] <crestfallen> sweet
[2020-05-22T20:58:02-0700] wei2912 (~wei2912@unaffiliated/wei2912) left IRC (Quit: Lost terminal)
[2020-05-22T20:58:53-0700] <dsal> Now any time I want to write a program, I just `stack new ...` and all my dreams come true.
[2020-05-22T20:59:13-0700] <dsal> Except for this last little bit of the most recent thing I started.  Always something slowing me down.  Today, it was the chipper.
[2020-05-22T20:59:31-0700] polyphem_ (~p0lyph3m@ip5f5ac3cc.dynamic.kabel-deutschland.de) left IRC (Ping timeout: 246 seconds)
[2020-05-22T20:59:47-0700] <crestfallen> I like the mathy side of haskell. I'd like to do a project where I can showcase haskell and some number theory for educational purposes
[2020-05-22T21:00:17-0700] <dsal> I don't do much math.
[2020-05-22T21:00:25-0700] <dsal> I don't believe in numbers.  Numbers are just a theory.
[2020-05-22T21:01:17-0700] <crestfallen> pardon?
[2020-05-22T21:01:58-0700] nbloomf (~nbloomf@2600:1700:83e0:1f40:80ac:b98:62fc:b887) left IRC (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[2020-05-22T21:02:03-0700] crestfallen_ (~John@135-180-13-241.fiber.dynamic.sonic.net) joined the channel
[2020-05-22T21:02:47-0700] <dsal> I was mocking my ignorance.
[2020-05-22T21:03:08-0700] zincy__ (~tom@95.147.127.3) joined the channel
[2020-05-22T21:03:25-0700] <dsal> I'm a blue collar haskeller.  It's just the easiest tool to write programs, so I use it for that.
[2020-05-22T21:03:45-0700] zincy__ (~tom@95.147.127.3) left IRC (Remote host closed the connection)
[2020-05-22T21:04:06-0700] zincy__ (~tom@95.147.127.3) joined the channel
[2020-05-22T21:04:11-0700] zincy_ (~tom@95.147.127.3) left IRC (Remote host closed the connection)
[2020-05-22T21:05:43-0700] merijn (~merijn@83-160-49-249.ip.xs4all.nl) joined the channel
[2020-05-22T21:07:51-0700] notzmv (~zmv@unaffiliated/zmv) joined the channel
[2020-05-22T21:08:05-0700] <crestfallen> thanks I like that
[2020-05-22T21:08:09-0700] crestfallen_ (~John@135-180-13-241.fiber.dynamic.sonic.net) left IRC (Ping timeout: 265 seconds)
[2020-05-22T21:10:35-0700] zincy__ (~tom@95.147.127.3) left IRC (Remote host closed the connection)
[2020-05-22T21:11:58-0700] johntalent (~johntalen@unaffiliated/johntalent) left IRC (Quit: Lost terminal)
[2020-05-22T21:12:22-0700] zincy_ (~tom@95.147.127.3) joined the channel
[2020-05-22T21:12:44-0700] zincy_ (~tom@95.147.127.3) left IRC (Read error: Connection reset by peer)
[2020-05-22T21:13:09-0700] sushi1234 (~hungig@17-12-77.cgnat.fonira.net) joined the channel
[2020-05-22T21:13:22-0700] zincy_ (~tom@95.147.127.3) joined the channel
[2020-05-22T21:13:27-0700] crestfallen_ (~John@2600:380:cc14:8f3b:360b:fe40:bcaf:2211) joined the channel
[2020-05-22T21:14:04-0700] Welkin (~Welkin@216.243.35.47) left IRC (Quit: leaving)
[2020-05-22T21:14:40-0700] <MarcelineVQ> "<crestfallen> thanks MarcelineVQ " actually that was directed at dsal who said "<dsal> crestfallen: Are you looking at StateT or ST?"
[2020-05-22T21:14:46-0700] <remexre> if I have something like,    let ys = fmap (foo (head xs)) xs in ...    with -XStrict, is it possible that this becomes non-total?
[2020-05-22T21:15:21-0700] <remexre> and bizarrely, if I replace (head xs) with (head (traceShowId xs)), it becomes total again
[2020-05-22T21:15:21-0700] <MarcelineVQ> But that's only a useful question to ask someone who knows the difference. If a person was looking at data ST s m a = ST (s -> m (s,a))  would they know to answer StateT instead of ST?
[2020-05-22T21:15:32-0700] <dsal> remexre: head is not total
[2020-05-22T21:15:56-0700] <remexre> dsal: er actually it's (\x -> foo (head xs) x)
[2020-05-22T21:16:25-0700] mnrmnaugh (~mnrmnaugh@unaffiliated/mnrmnaugh) left IRC (Ping timeout: 264 seconds)
[2020-05-22T21:16:27-0700] chpatrick (uid239395@gateway/web/irccloud.com/x-zmaumnchaanzanzu) left IRC (Quit: Connection closed for inactivity)
[2020-05-22T21:17:03-0700] <dsal> head is always partial.  I guess I don't understand your question.
[2020-05-22T21:17:22-0700] <remexre> since I'm fmapping over xs, the lambda should only be called when xs is not []
[2020-05-22T21:17:26-0700] <MarcelineVQ> I'd be asking where xs is coming from since that's also where your gurantee comes from
[2020-05-22T21:17:47-0700] sushi1234 (~hungig@17-12-77.cgnat.fonira.net) left IRC (Ping timeout: 260 seconds)
[2020-05-22T21:17:53-0700] <monochrom> This question sounds like easily testable on an actual computer.
[2020-05-22T21:18:19-0700] <remexre> monochrom: I'm getting weird behaviour in my unit tests, hence why I'm asking
[2020-05-22T21:18:56-0700] <remexre> ghcid has it working, if I add the traceShowId it works, but otherwise I get head-of-empty-list
[2020-05-22T21:19:01-0700] <monochrom> Yes if this is 1 line out of a 1000-line file, it is too hard to tell what's the determining factor.
[2020-05-22T21:19:28-0700] <monochrom> Therefore throw away the 1000-line file.  Create a new small file that contains exactly what your question asks, no more.
[2020-05-22T21:19:36-0700] <remexre> I guess I'm asking, is this a known bug/unexpected-behavior w/ -XStrict
[2020-05-22T21:19:40-0700] <monochrom> Scientific least-moving-parts experiment.
[2020-05-22T21:19:41-0700] <remexre> I'll try
[2020-05-22T21:19:53-0700] <dsal> The journey of 1000 lines begins by deleting just one.
[2020-05-22T21:20:03-0700] <remexre> :P
[2020-05-22T21:20:05-0700] <dolio> Don't use -XStrict.
[2020-05-22T21:20:14-0700] zincy__ (~tom@95.147.127.3) joined the channel
[2020-05-22T21:20:16-0700] <monochrom> Programmers need to take a scientific method course, or even a philosophy of science course.
[2020-05-22T21:21:04-0700] <monochrom> Because they have no idea what's "formulate a hypothesis" or "controlled experiment testing said hypothesis, no more no less".
[2020-05-22T21:21:12-0700] Saukk (~Saukk@2001:998:c9:1172:1c59:9bb5:b94c:3) joined the channel
[2020-05-22T21:21:15-0700] <remexre> dolio: is that "it's broken and unmaintained," or "it's unhaskellful"
[2020-05-22T21:21:25-0700] <MarcelineVQ> % :set -XStrict
[2020-05-22T21:21:25-0700] <yahb> MarcelineVQ: 
[2020-05-22T21:21:34-0700] <MarcelineVQ> % map undefined []
[2020-05-22T21:21:34-0700] <yahb> MarcelineVQ: []
[2020-05-22T21:21:47-0700] <remexre> monochrom: my hypothesis is that someone in #haskell would know if it were a common -XStrict unexpected-behavior :P
[2020-05-22T21:21:49-0700] <MarcelineVQ> Now I have to wonder if Strict only works for source files
[2020-05-22T21:21:54-0700] <dolio> I don't know if it's unmaintained. I just think it's a bad idea.
[2020-05-22T21:22:08-0700] <MarcelineVQ> Not that it should matter for that example
[2020-05-22T21:22:35-0700] TakinOver (~quassel@47.150.206.35) left IRC (Remote host closed the connection)
[2020-05-22T21:22:53-0700] dddddd (~dddddd@unaffiliated/dddddd) left IRC (Ping timeout: 258 seconds)
[2020-05-22T21:23:06-0700] <dolio> So that's my advice. :)
[2020-05-22T21:23:50-0700] zincy_ (~tom@95.147.127.3) left IRC (Ping timeout: 272 seconds)
[2020-05-22T21:24:14-0700] <monochrom> Yeah I now recall, even the efficiency-savvy tibbe only recommends strict data, not strict functions. In fact against strict functions.
[2020-05-22T21:26:38-0700] <monochrom> Strict turns "let xs = ..." into "let !xs = ..."
[2020-05-22T21:27:01-0700] <remexre> yeah, I prefer to use ~ where I need laziness
[2020-05-22T21:27:11-0700] <remexre> StrictData does fix this, strangely enough
[2020-05-22T21:27:15-0700] <monochrom> Now you have to dig into BangPatterns for what "let !xs =" means.
[2020-05-22T21:28:14-0700] <dolio> What does it turn `let (x, y) = ...` in to, do you think?
[2020-05-22T21:28:34-0700] <monochrom> haha "data T = C ~X" is a thing.
[2020-05-22T21:28:35-0700] crestfallen_ (~John@2600:380:cc14:8f3b:360b:fe40:bcaf:2211) left IRC (Quit: Leaving)
[2020-05-22T21:28:36-0700] <remexre> something like a `seq` let (x, y) = a in b
[2020-05-22T21:29:09-0700] <monochrom> it turns "let (x,y)" into "let !(x,y)". this case is uninteresting.
[2020-05-22T21:29:12-0700] <remexre> I wonder if Strict is persisting further into desugaring, and (fmap (\x -> foo (head xs) x) xs) gets transformed into (let headXs = head xs in fmap (\x -> foo headXs x) xs) before all the patterns get bangs
[2020-05-22T21:29:32-0700] <remexre> yeah, I meant more semantically, I guess
[2020-05-22T21:29:32-0700] <dolio> Right, so it doesn't make it like a strict language at all.
[2020-05-22T21:29:33-0700] <monochrom> err sorry, that case is still interesting.
[2020-05-22T21:29:52-0700] <monochrom> The uninteresting one is "case ... of (x,y)" -> "case ... of !(x,y)"
[2020-05-22T21:30:12-0700] <monochrom> But take care that the interesting one is "case ... of v" -> "case ... of !v"
[2020-05-22T21:32:03-0700] <remexre> I'm unable to reproduce on a small example with runghc, ghc, nor ghc -O
[2020-05-22T21:32:04-0700] <monochrom> Strict affects function defs, let/where bindings, and pattern matching only.  Even top-level "x = ..." is not turned into "!x = ..."
[2020-05-22T21:32:28-0700] <dolio> Sure. That's not even allowed, I think.
[2020-05-22T21:33:11-0700] <monochrom> and it only adds one seq rather than rnf.
[2020-05-22T21:33:41-0700] <dolio> Well, rnf would be wasteful.
[2020-05-22T21:34:40-0700] zincy__ (~tom@95.147.127.3) left IRC (Remote host closed the connection)
[2020-05-22T21:35:13-0700] zincy__ (~tom@95.147.127.3) joined the channel
[2020-05-22T21:35:43-0700] hc (~hc@bsd.pm) left IRC (Remote host closed the connection)
[2020-05-22T21:35:46-0700] <remexre> hm, manually doing let ~headXs = ... doesn't help, though the ... expression in the real code does involve a strict data constructor
[2020-05-22T21:36:06-0700] <remexre> (adding a strict data constructor to the small example doesn't make it get an exception, though)
[2020-05-22T21:37:19-0700] urodna (~urodna@unaffiliated/urodna) left IRC (Quit: urodna)
[2020-05-22T21:38:38-0700] xerox_ (~xerox@unaffiliated/xerox) left IRC (Ping timeout: 260 seconds)
[2020-05-22T21:39:34-0700] merijn (~merijn@83-160-49-249.ip.xs4all.nl) left IRC (Ping timeout: 260 seconds)
[2020-05-22T21:40:57-0700] theelous3 (~theelous3@unaffiliated/theelous3) left IRC (Read error: Connection reset by peer)
[2020-05-22T21:41:30-0700] kunningd (~qwe@unaffiliated/kunningd) left IRC (Ping timeout: 265 seconds)
[2020-05-22T21:41:51-0700] revprez_anzio (~revprez_a@pool-108-49-103-65.bstnma.fios.verizon.net) left IRC (Ping timeout: 256 seconds)
[2020-05-22T21:42:13-0700] machinedgod (~machinedg@hlfxns018gw-134-41-50-0.dhcp-dynamic.fibreop.ns.bellaliant.net) left IRC (Ping timeout: 264 seconds)
[2020-05-22T21:42:21-0700] revprez_anzio (~revprez_a@pool-108-49-103-65.bstnma.fios.verizon.net) joined the channel
[2020-05-22T21:42:48-0700] <remexre> hm, in Core, no sigils would indicate that a case ... of { (x) -> ... } is lazy, right?
[2020-05-22T21:43:11-0700] <dolio> In core case always evaluates.
[2020-05-22T21:44:05-0700] <remexre>  hm, okay, then GHC is making the (let ~x = ... in ...) strict, then
[2020-05-22T21:45:13-0700] <remexre> as of the -ddump-ds stage
[2020-05-22T21:46:21-0700] tabaqui1 (~tabaqui@46.39.45.189) left IRC (Quit: WeeChat 2.8)
[2020-05-22T21:47:09-0700] tabaqui1 (~tabaqui@46.39.45.189) joined the channel
[2020-05-22T21:47:21-0700] <remexre> meh, I'll just switch to -XStrictData for now, and profile later
[2020-05-22T21:48:07-0700] tabaqui1 (~tabaqui@46.39.45.189) left IRC (Client Quit)
[2020-05-22T21:48:24-0700] tabaqui1 (~tabaqui@46.39.45.189) joined the channel
[2020-05-22T21:50:09-0700] zincy__ (~tom@95.147.127.3) left IRC (Remote host closed the connection)
[2020-05-22T21:50:19-0700] <remexre> I guess I care less about efficiency, more that (not to sound too inflammatory) thunks that contain exceptions always felt like null in OO languages
[2020-05-22T21:50:20-0700] tabaqui1 (~tabaqui@46.39.45.189) left the channel
[2020-05-22T21:50:26-0700] ddellacosta (~dd@86.106.121.168) left IRC (Ping timeout: 272 seconds)
[2020-05-22T21:50:48-0700] tabaqui1 (~tabaqui@46.39.45.189) joined the channel
[2020-05-22T21:51:26-0700] <Cale> remexre: I haven't been following closely, are you having trouble tracking down an incorrect use of head?
[2020-05-22T21:51:31-0700] zincy_ (~tom@95.147.127.3) joined the channel
[2020-05-22T21:51:55-0700] <remexre> Cale: I think GHC is misoptimizing my -XStrict code, lifting what /should/ be a safe use of head out of a lambda to where it's unsafe
[2020-05-22T21:52:05-0700] <Cale> That's... odd
[2020-05-22T21:52:27-0700] <Cale> remexre: One trick that I'd recommend is to always write head as (\(x:_) -> x) instead
[2020-05-22T21:52:47-0700] <Cale> which will at least give you a line number when it fails
[2020-05-22T21:53:46-0700] <remexre> oh, huh, that actually causes the exception to disappear
[2020-05-22T21:53:59-0700] <Cale> hm
[2020-05-22T21:54:18-0700] <remexre> changing (head xs) to (case xs of { [] -> error "sad"; (x:_) -> x })
[2020-05-22T21:54:18-0700] day_ (~Unknown@unaffiliated/day) joined the channel
[2020-05-22T21:54:36-0700] <Cale> Well, -XStrict is something that essentially nobody uses, so I'm not too surprised if it sucks
[2020-05-22T21:56:01-0700] <remexre> rip
[2020-05-22T21:57:14-0700] day (~Unknown@unaffiliated/day) left IRC (Ping timeout: 240 seconds)
[2020-05-22T21:57:14-0700] day_ is now known as day
[2020-05-22T21:59:00-0700] tabaqui1 (~tabaqui@46.39.45.189) left IRC (Quit: WeeChat 2.8)
[2020-05-22T21:59:32-0700] justanotheruser (~justanoth@unaffiliated/justanotheruser) left IRC (Ping timeout: 260 seconds)
[2020-05-22T22:02:55-0700] jonathan_ (~jonathan@h-98-128-181-217.NA.cust.bahnhof.se) joined the channel
[2020-05-22T22:05:19-0700] xerox_ (~xerox@unaffiliated/xerox) joined the channel
[2020-05-22T22:06:13-0700] jsomedon (~jsomedon@222.131.154.239) joined the channel
[2020-05-22T22:06:55-0700] horatiohb (~horatiohb@167.172.157.239) left IRC (Ping timeout: 272 seconds)
[2020-05-22T22:07:06-0700] merijn (~merijn@83-160-49-249.ip.xs4all.nl) joined the channel
[2020-05-22T22:07:30-0700] <jsomedon> so I came across with online discussion that `Maybe` was made to solve NULL's problem?
[2020-05-22T22:08:14-0700] <jsomedon> never realized such simple type had been carrying such a big role 
[2020-05-22T22:10:45-0700] <gcoakes[m]> Hey, I'm hoping someone can help me with something. Is haskell capable of listing all types which are an instance of some type class?
[2020-05-22T22:11:56-0700] <c_wraith> gcoakes[m]: in a global sense, no.  classes are open, so there might always be another instance defined somewhere it hasn't imported.  In a local sense, yes.  ghci can list all instances of a class that are currently in scope.
[2020-05-22T22:12:12-0700] lizzard (uid440745@gateway/web/irccloud.com/x-trnfxxksetjtbkfg) left IRC (Quit: Connection closed for inactivity)
[2020-05-22T22:12:21-0700] electrostat (~dag@unaffiliated/electrostat) joined the channel
[2020-05-22T22:12:28-0700] merijn (~merijn@83-160-49-249.ip.xs4all.nl) left IRC (Ping timeout: 256 seconds)
[2020-05-22T22:13:36-0700] <Cale> jsomedon: I mean, I don't know if that could be said to be *the* motivation for its existence, but it's certainly some motivation.
[2020-05-22T22:13:42-0700] electrostat (~dag@unaffiliated/electrostat) left IRC (Client Quit)
[2020-05-22T22:13:44-0700] zincy_ (~tom@95.147.127.3) left IRC (Remote host closed the connection)
[2020-05-22T22:14:09-0700] zincy_ (~tom@95.147.127.3) joined the channel
[2020-05-22T22:14:15-0700] <Cale> gcoakes[m]: In ghci, :info SomeClass
[2020-05-22T22:14:30-0700] crobbins (~crobbins@2601:2c1:380:ec40:5d7c:ead5:e6aa:eb7e) joined the channel
[2020-05-22T22:14:33-0700] <Cale> (will show you the instances which are available via imported modules)
[2020-05-22T22:14:56-0700] <gcoakes[m]> c_wraith: Local is fine, but I mean at runtime. I want to call a particular function on all instances which have been imported.
[2020-05-22T22:14:58-0700] MQ-17J (~MQ-17J@8.48.133.26) left IRC (Quit: Quit)
[2020-05-22T22:14:58-0700] electrostat (~dag@unaffiliated/electrostat) joined the channel
[2020-05-22T22:15:11-0700] <c_wraith> gcoakes[m]: types don't exist at runtime, so that might be a problem...
[2020-05-22T22:15:14-0700] MQ-17J (~MQ-17J@8.48.133.26) joined the channel
[2020-05-22T22:15:25-0700] <c_wraith> gcoakes[m]: but I think you really mean at compile time
[2020-05-22T22:15:38-0700] <c_wraith> gcoakes[m]: which I think you can manage with template haskell
[2020-05-22T22:16:00-0700] johntalent (~johntalen@unaffiliated/johntalent) joined the channel
[2020-05-22T22:17:01-0700] â€¢ gcoakes[m]: sent a long message:  < https://matrix.org/_matrix/media/r0/download/matrix.org/aDOtfgqvluPsesiIMvJyrrRC >
[2020-05-22T22:18:44-0700] <Cale> gcoakes[m]: I don't think that completely makes sense. But it's easy enough to construct a Data.Map String (... some function type ...)
[2020-05-22T22:19:06-0700] <Cale> I guess that should be Data.Map.Map, lol
[2020-05-22T22:19:27-0700] â€¢ gcoakes[m]: sent a long message:  < https://matrix.org/_matrix/media/r0/download/matrix.org/TAONEPpIERZFUCrJEjxotEjv >
[2020-05-22T22:19:56-0700] <Cale> I mean, you can use something like hint if you want
[2020-05-22T22:20:09-0700] <Cale> https://hackage.haskell.org/package/hint
[2020-05-22T22:20:19-0700] tromp (~tromp@2a02:a210:ca3:2800:8d45:8d0d:8a2c:ca43) joined the channel
[2020-05-22T22:20:58-0700] <Cale> That's basically a nicer wrapper around GHC-as-a-library
[2020-05-22T22:21:14-0700] <Cale> that you can use to load Haskell code at runtime, if you really want
[2020-05-22T22:21:37-0700] <gcoakes[m]> But, that eliminates the possibility of distributing the project as a single file executable, right?
[2020-05-22T22:21:53-0700] <gcoakes[m]> I would have to have the .hs files available at runtime?
[2020-05-22T22:22:02-0700] <c_wraith> I mean, if you want to compile haskell code at runtime, you need a haskell compiler.
[2020-05-22T22:22:39-0700] <Cale> I mean, if you compare it with the situation with python, you still need a python implementation there
[2020-05-22T22:22:44-0700] zincy_ (~tom@95.147.127.3) left IRC (Remote host closed the connection)
[2020-05-22T22:23:06-0700] zincy_ (~tom@95.147.127.3) joined the channel
[2020-05-22T22:23:31-0700] <gcoakes[m]> Cale: Absolutely, that's one of my biggest headaches and seemingly one of the reasons why python is so easy to collaborate with other teams.
[2020-05-22T22:24:04-0700] <gcoakes[m]> c_wraith: The intention wasn't runtime compilation, but using a string to define the next function to call.
[2020-05-22T22:25:23-0700] <awpr> the Haskell runtime doesn't provide lookup of functions by name, but if you have a particular set of functions in mind that you want users to be able to call, you can actually type in a Map of them
[2020-05-22T22:25:33-0700] tromp (~tromp@2a02:a210:ca3:2800:8d45:8d0d:8a2c:ca43) left IRC (Ping timeout: 272 seconds)
[2020-05-22T22:26:01-0700] <Cale> ^^
[2020-05-22T22:26:04-0700] <awpr> being able to call /any function in the program/ by name is problematic, though, since lots of functions (e.g. unexported ones) will disappear entirely
[2020-05-22T22:26:19-0700] <gcoakes[m]> awpr: like a big `case` expression, right?
[2020-05-22T22:26:30-0700] <Cale> Yeah, that's probably what I'd do -- work out some system by which I associate strings with actual functions/IO actions
[2020-05-22T22:26:37-0700] <awpr> the particulars ultimately depend on what you mean by "call" and "function"
[2020-05-22T22:26:43-0700] <Cale> You could use a case expression, or you could use a Map
[2020-05-22T22:27:05-0700] <Cale> What type of functions are these?
[2020-05-22T22:27:42-0700] <gcoakes[m]> https://gitlab.com/gcoakes/sys-expect/-/blob/master/sys_expect/plugin/nvme_cli.py
[2020-05-22T22:28:25-0700] <gcoakes[m]> I want to ultimately be able to read a file like this: https://gitlab.com/gcoakes/sys-expect/-/blob/master/examples/trivial_reset.yaml
[2020-05-22T22:28:25-0700] <gcoakes[m]> And, have it make certain assertions about system state which are defined in that file.
[2020-05-22T22:28:57-0700] justanotheruser (~justanoth@unaffiliated/justanotheruser) joined the channel
[2020-05-22T22:29:01-0700] <Cale> oh, this sounds kind of propellor-ish
[2020-05-22T22:29:14-0700] <gcoakes[m]> propeller?
[2020-05-22T22:29:15-0700] <Cale> https://hackage.haskell.org/package/propellor
[2020-05-22T22:29:54-0700] <gcoakes[m]> Oooh, that looks cool. Kinda like ansible?
[2020-05-22T22:30:10-0700] <gcoakes[m]> Ansible was part of the inspiration for this project.
[2020-05-22T22:32:51-0700] fabianhjr (~fabian@2806:106e:18:c68:c8b5:31bd:512a:527c) joined the channel
[2020-05-22T22:34:13-0700] <kaol> I'm tempted to replace every return in my code with pure.
[2020-05-22T22:34:27-0700] <Cale> I don't know these tools all that well, but I think so. The idea is that you write a bunch of properties of a system (in Haskell), and it takes steps as necessary to ensure that those properties are satisfied
[2020-05-22T22:34:42-0700] <Cale> kaol: That seems to be a trend. I don't particularly like it, but it's happening.
[2020-05-22T22:36:46-0700] <Cale> It loses a small amount of information which can help a human reader figure out what's going on
[2020-05-22T22:37:35-0700] <Cale> When I see 'pure' it slightly suggests to me that no Monad instance is available, and when that's not the case, it's kind of annoying.
[2020-05-22T22:38:39-0700] heatsink (~heatsink@2600:1700:bef1:5e10:94c1:def3:5d8d:d8f) left IRC (Remote host closed the connection)
[2020-05-22T22:41:04-0700] nineonine (~nineonine@d75-155-217-186.bchsia.telus.net) joined the channel
[2020-05-22T22:42:17-0700] <fpaulw> does 'pure' equate to 'return' for every monad because monads are subclasses of applicatives?
[2020-05-22T22:42:38-0700] <suppi> Do you also prefer liftM over fmap?
[2020-05-22T22:43:34-0700] falafel (~falafel@2600:6c50:547f:99bb:1c34:9a84:4c5c:c1) joined the channel
[2020-05-22T22:43:59-0700] merijn (~merijn@83-160-49-249.ip.xs4all.nl) joined the channel
[2020-05-22T22:45:14-0700] nineonine (~nineonine@d75-155-217-186.bchsia.telus.net) left IRC (Ping timeout: 240 seconds)
[2020-05-22T22:45:17-0700] <Cale> suppi: Not unless I'm writing a functor instance, or there are liftM2's adjacent
[2020-05-22T22:46:03-0700] <Cale> fpaulw: Pretty much, yeah
[2020-05-22T22:46:14-0700] <Cale> Or, Monad is a subclass of Applicative
[2020-05-22T22:46:17-0700] <suppi> Isn't the two cases pretty similar though? liftM / fmap and return / pure
[2020-05-22T22:46:23-0700] â€¢ hackage: calamity 0.1.9.1 - A library for writing discord bots  https://hackage.haskell.org/package/calamity-0.1.9.1 (nitros12)
[2020-05-22T22:46:41-0700] <suppi> Aren't*
[2020-05-22T22:47:19-0700] <Cale> Somewhat, though liftM isn't guaranteed to be as efficient as fmap (though usually the difference will be trivial)
[2020-05-22T22:47:39-0700] <Cale> liftM is a possible implementation of fmap, using the Monad operations
[2020-05-22T22:48:05-0700] <Cale> fmap will often be implemented more directly
[2020-05-22T22:48:10-0700] <dsal> jsomedon: I wouldn't say Maybe was made to solve NULL's problem.  Maybe was made to solve the problem where you may not have a value.  null is used for that in some languages as well and then that has problems.
[2020-05-22T22:48:17-0700] dagit (~dagit@2001:558:6025:38:6476:a063:d05a:44da) left IRC (Quit: dagit)
[2020-05-22T22:49:09-0700] <Cale> dsal: Yeah, that's a nice way to put it. Though I think the problems of null being used for that in other languages is something that the people who defined Maybe in Haskell (and similar types in ML) were well aware of.
[2020-05-22T22:49:14-0700] zebrag (~inkbottle@aaubervilliers-654-1-104-58.w86-212.abo.wanadoo.fr) left IRC (Quit: Konversation terminated!)
[2020-05-22T22:49:20-0700] jao- (~jao@pdpc/supporter/professional/jao) left IRC (Ping timeout: 272 seconds)
[2020-05-22T22:50:43-0700] <dolio> Also it's not so much using null for that, but making every type contain null just for that.
[2020-05-22T22:50:54-0700] cole-h (~cole-h@c-67-187-170-40.hsd1.ca.comcast.net) left IRC (Quit: Goodbye)
[2020-05-22T22:51:05-0700] LevelChart8 (~reallymem@pool-100-2-25-229.nycmny.fios.verizon.net) left IRC (Quit: LevelChart8)
[2020-05-22T22:51:39-0700] <dsal> Yeah, I suspect they'd heard of Dijkstra.
[2020-05-22T22:52:46-0700]  
[2020-05-22T22:52:46-0700] ------------- End Session -------------
[2020-05-22T22:52:46-0700]  
