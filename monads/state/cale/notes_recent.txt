ST is just a particular State monad, without a polymorphic state type parameter. Also, ST in the Haskell standard library is not a monad transformer either, it's just a very different monad, which allows for imperative mutable references

What Hutton is calling ST there is the same thing as State Int in your new code.

So, to run it, you can use runState on it, and then you'd get a function to which you can pass the initial state you want to use

ghci> runState increment 5
(6,())

The final state will be one more than the provided initial state, and the result will be () because the last action was a put, and put always produces () as its result

<ski>  you understand `reLabel' on Hutton version ?

--------------------------------------------------------------------
newtype State s a = S { runState :: s -> (s,a) }  

that result is reversed, compared with the hutton declaration of ST: 

newtype ST a = S (State -> (a,State))       

--------------------------------------------------------------------

In Hutton, fresh is the increment action

In this case they were applied to an identifier (put).

the state is not touched by return/pure.
 
<Cale> Well, the pure' function gets the current state and then, if the current state was n, it returns (n+1).

pure' = fmap (+1) get

generally, `ma >>= \a -> return (f a)' is equal to `fmap f ma'

Currently your Monad instance is missing a definition for return, even though the Applicative instance defines pure to be the same as whatever return is. There are two methods in Monad :

  (>>=) 
  return

2-space indentation is crucial here because both definitions are part of the 'where' clause for the instance.

The pure' function returns the incremented state in the second position of the tuple.

the second position (for the definition of `State' you have there) is the "result value" (as opposed to the "output state")

note that 'put' replaces the state. It discards the input state, letting the output state be the explicit parameter of 'put.'

(and for `put', the "result value" is just `()', a "nothing interesting here" value)

While return/pure  keeps the state, using the input state as the output state. while using the explicit parameter of `return' as the "result value"
