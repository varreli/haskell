actions that do something interesting, to test with
tick :: ST Int; tick = S (\n -> (n,n+1))

map (app (fmap even tick)) [0 .. 9]
app tick 0   vs.  app (liftA2 (,) tick tick) 0
liftA2  sequence sequenceA replicateM 

app is used to run an ST-action. 
Note that we need an initial state to compute a result 
of type `T' and a final state.

tick == increment
it's a counter that moves the "clock" along one step; also 
giving back as result the previous value of the state.

it is allocating 'Int' values, and the state is the next 
unused 'Int' that hasn't been allocated yet.

if you start by calling 'app' on an action, with initial state 0, 
the first execution of 'tick' will give back zero as first result. 
next execution will give back one, and so on

e.g. you might be generating assembler code to work on a stack machine, 
and each time you need a new temporary (e.g. mutable) variable, you want 
a new position on the stack to hold it. so `tick' could be used to give 
the next unused position. and the final state is then the number of 
allocated stack slots, assuming you started counting at zero

any time you want to generate a fresh something, that's not equal to any 
previously generated thing, you could use something like `tick'

another example is to write a function `Tree a -> ST (Tree (a,Int))', 
where you label the elements of a Tree

writing such a function, using `ST', is less tedious (and less errorprone), 
than writing it explicitly (not hiding the state passing plumbing, that the 
operations at the link you provided performs)

tick here would be an ST-action, and 'fmap even tick' another 
ST-action
fmap here takes a function (on action execution results), and an action, 
and produces another action. when executed, the returned action will 
first execute the input action. then, it will call the callback 
post-processing function on the result of that, giving back the output 
of that as result of executing the returned action)

it's more common to use the "collection" terminology/analogy with 
types `F' that are instances of `Functor'. however, your `ST' is 
already also an instance of `Applicative' and `Monad'. and, it's 
harder (or more of a stretch, if you prefer), to think of `ST T' as 
some kind of "collection" of `T's

the action/recipe analogy/terminology is better to use, with `ST' here, 
even when only using the `Functor' instance, not the `Applicative' or 
`Monad' one

ghci> replicate 7 '*'
"*******"

replicateM :: Applicative i => Int -> i a -> i [a]
replicateM n act = sequenceA (replicate n act)
ghci> replicate 4 tick
[tick,tick,tick,tick]     -- type [ST Int]

sequenceA has type `Applicative i => [i a] -> i [a]'. In this case, 
calling sequenceA on that list, the argument type [i a] would have to 
be equal to '[ST Int]', so 'i' would be 'ST' and 'a' would be 'Int', 
in this case.

We know Applicative ST holds, because you made such an instance, so 
we're allowed to call 'sequenceA' in this case.

the result of calling it would have type `i [a]', which here would then 
be ST [Int]
replicateM 4 tick is sequenceA (replicate 4 tick) is 
sequenceA [tick,tick,tick,tick]', and that last function call takes us 
from `[ST Int]' to `ST [Int]'

this last call, to `sequenceA', takes us from a list of actions 
(which haven't been performed/executed/run yet, remember. they're just 
inert descriptions of something that could be executed, in the future. 
perhaps out of order, perhaps multiple times, perhaps none)

it takes us from a list of actions, to a single action -- whose execution 
will yield a result that is a list of `Int's

sequenceA takes its list of actions, and "glues" them together into a 
single large action. when (if) later executed, this action will execute, 
in the order given, all the actions in the list. and it will collect all 
the individual results of those executions, into a list, and yield this 
list as the final result of executing the `sequenceA [...]' action

sequenceA [tick,tick,tick,tick]' will simply execute `tick' four times, 
and give back a list of the four results of each such execution

ghci> app (replicateM 4 tick) 10

(starting at ten rather than zero, just for variety)
