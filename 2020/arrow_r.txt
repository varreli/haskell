((->) r) 

doesn't represent partial application of functions to values.

((->) r) is all functions which can accept an r
This is why ((->) r) is a functor, not (->).

data Foo f = Foo { bar :: f Int, baz :: f Bool } 
type ReadFoo = Foo ((->) String)                     

-- ReadFoo ~= 

Foo {bar :: r -> Int, baz :: r -> Bool}. 
((->) String) is the functor for functions which can accept 
Strings.

---------------------------------------------------------------------

fmap for      Functor (->) r      is composition:


ar ab ra r = ab (ra r)

ar  :: (a -> b) -> ((r -> a) -> (r -> b))

(.) :: (b -> c) ->  (a -> b) -> (a -> c) 

so:

instance Functor (->) r where
    fmap = (.)


Look at the more general fmap:

class Functor f where
    fmap :: (a -> b) ->     f    a  ->    f    b

    fmap :: (a -> b) ->  ((->) r a) -> ((->) r b)
--------------------------------------------------------------
read about (->) r

http://learnyouahaskell.com/functors-applicative-functors-and-monoids
