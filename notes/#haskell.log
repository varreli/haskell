**** BEGIN LOGGING AT Sun Aug 13 15:08:52 2017

*	ltielen has quit (Quit: WeeChat 1.9)
*	t4nk342 (584bb9a6@gateway/web/freenode/ip.88.75.185.166) has joined
*	begriffs has quit (Quit: Leaving...)
<erisco>	Donovan, lets start from the top... does this make sense? http://lpaste.net/357658
<Donovan>	yep
*	t4nk342 has quit (Client Quit)
*	VitorCBSB has quit (Quit: Page closed)
<mbw>	So, basically, I (as of now) have to type parameters. One stands for whether an url is absolute ("https://www.example.com/foo/bar"), relative to a host ("/foo/bar") or some general path ("/bar"). The other parameter stands for the actual problem. I parse starting from the top-level, then extract a link and follow it, until I get what I actually want. So for parsing pictures, I have something like "data 
<mbw>	PointsTo = TheHost | TopLevel | PreviewPage | AThumbnailPic | TheActualPic".
<Donovan>	oh wait
<mbw>	s/to/two
<Donovan>	erisco: so the problem is my definition of Matrix?
*	kadoban is now known as mud
<erisco>	Donovan, no
<erisco>	Donovan, just a second why I write the types out
<jle`>	what's the actual problem?
<mbw>	jle`: So I have parsing functions of type getThumbNails :: Doc (and XML document tree) -> [Either URLError (URL 'HostRelative 'AThumbnailPic)], for instance.
<erisco>	Donovan, http://lpaste.net/357658 does the annotation make sense?
<jle`>	and what are the append functinos that you want to unite?
*	robertc (~robertchr@159.203.33.60) has joined
*	slacko_ has quit (Ping timeout: 276 seconds)
<mbw>	The problem is that if I expand on this, it will get complicated quickly. On the other hand, just passing some additional data type around and do vanilla pattern matching, I have to basically write an analogue to error "urk" in a lot of places, since the functions would all become partial again.
*	_asc has quit (Ping timeout: 260 seconds)
*	seanzheng (~Mutter@123.117.170.112) has joined
<jle`>	this last part i can't understand without any examples
<jle`>	of how things get complicated
<jle`>	or of how things become partial
*	seanzheng has quit (Remote host closed the connection)
<mbw>	The append example was one thing. The other would be parsing functions "parseURLAbsolute :: String -> Maybe (URL 'Absolute p), parseURLRelative -> Maybe (URL 'HostRelative/PathRelative p) or some such.
*	seanzheng (~Mutter@45.77.99.26) has joined
<jle`>	the append example was not a complete example, though?  i wasn't sure what you meant in the '...'s
<mbw>	And like I said, I am not sure if GADTs are the way to go, it was just an idea.
<erisco>	Donovan, that is why GHC is complaining 'a' is not 'Vector a', because that is precisely what has to be true to make your definition work
<erisco>	[a] ~ Vector a  only if  a ~ Vector a
<jle`>	i'm not even sure what your problem/issues are, sorry
*	db8093246 has quit (Remote host closed the connection)
<erisco>	sorry,  [a] ~ [Vector a] only if  a ~ Vector a
<Donovan>	it makes sense erisco, I just dont understand how I can tell it to expect Vector a, instead of a
<jle`>	parseURLAbsolute :: String -> Maybe (URL 'Absolute p) seems very reasonable?
*	robertc has quit (Ping timeout: 240 seconds)
<jle`>	or do you wan tone function that can parse *all* url types?
*	seanzheng has quit (Client Quit)
<erisco>	Donovan, that just does not make sense :P
<jle`>	in that case you can do something using singletons there
<Donovan>	-_-
<Donovan>	none of this makes sense!
<jle`>	parseURL :: Sing type -> String -> Maybe (URL type p)
<jle`>	so if the user passed in a 'Sing 'Absolute', it'd return a Maybe (URL 'Absolute p)
<mbw>	The append problem at the moment are just two functions, "appendToHost :: URL 'HostRelative p -> URL 'Absolute p -> URL 'Absolute p" and "appendToPath :: URL 'PathRelative p -> URL 'Absolute p -> URL 'Absolute p", but other similar ones would probably be possible.
<jle`>	and if the user passed in a 'Sing 'HostRelative', it'd return a Maybe (URL 'HoseRelative p)
<erisco>	Donovan, that is like saying if you were writing the implementation for id :: a -> a that you want it to expect 'Vector a' instead of 'a'
<erisco>	Donovan, well, that just isn't what the type of id is
<wilornel>	Hey #haskell! I have `let uriPath = uriPath uri; putStrn uri_path`, and it does not work because IO does not match with Maybe, which I understand. However, I was wondering, how could I circumvent this issue?
<jle`>	and yeah that full append thing can be combined using singletons too
<jle`>	append :: Sing type -> URL type p -> URL 'Absolute p -> URL 'Absolute p
<wilornel>	 `uri <- parseURI fullpath; let uriPath = uriPath uri; putStrn uri_path`, 
<Donovan>	erisco: thats why I think my definition of matrix might be a problem
<erisco>	Donovan, it isn't
*	safe (~safe@unaffiliated/safe) has joined
<erisco>	your implementation of foldr for Matrix is a problem though
<mbw>	jle` But in the parseURL example, the decision on 'type' would be dependent on the actual contents of the String. (I'm thinking foralls...)
<Donovan>	then i dont get it, a is supposed to be anything, right?
<erisco>	correct
<jle`>	these both emulate having a Appendable typeclass and a Parseable typeclass for things of kind URLTYpe
<jle`>	mbw: oh, you don't want the user to decide
<jle`>	you want the function to decide
<erisco>	so you can't just decide to make it Vector a, it has to be any type
<jared-w>	Donovan: the fact that 'a' could be anything also means you can assume nothing about 'a'
<mbw>	jle`: The user is me, and I don't trust myself :)
<jle`>	yeah, there's two types of quantification that people oftne mix up
<jle`>	for universal qualification, the caller gets to pick what the type variables are instantiated as
<jle`>	for existential quantifcation, the function decides what the type variables become instantiated as
<erisco>	Donovan, if the type of id is a -> a then that means it works for all types
<jle`>	and the caller has to handle whatever choice
<mbw>	In the parseURL example, if the String was "/hello", a Sing 'Absolute would be a logic error.
<erisco>	Donovan, if in the definition of id you assumed 'a' was 'Vector a' then your definition would only work for Vector a
<wilornel>	Is there a concept that could solve this?
<jle`>	well the String might not be parseable anyway
<erisco>	Donovan, and if that were the case, giving id the type of a -> a would no longer make sense
<wilornel>	It would be nice if I got a pointer to a name or a book's chapter
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
<Donovan>	right
*	matael1 (~matael@89.249.74.218) has joined
*	nhandler1 has quit (Remote host closed the connection)
<jle`>	mbw: but yeah, you can have the function decide what type to give by returnig it existentially quanified
<Donovan>	but i -know- my Matrix is a [Vector a]
<jle`>	one way to do this is to have a dependent pair like SomeUrl
<erisco>	no, you don't, that is wrong
<Donovan>	and once i unwrap it, i dont understand why i cant just foldr through it like a normal list
<jle`>	data SomeURL p = forall t. SomeUrl (Sing t) (URL t p)
<erisco>	the 'a' is the 'a' inside of [Vector a]
<Donovan>	yes
<erisco>	the 'a' is in the list, in the vector
<jle`>	then you'd have parse :: String -> Maybe (SomeURL p)
<Donovan>	and this is the issue im struggling with
<Donovan>	which is why i think my types are wrong
<mbw>	wilornel: If you're inside IO, the simplest solution would be to pattern match against the result of parseURI, i.e. case parseURI str of Nothing -> error "urk"; Just uri -> ...
<erisco>	Donovan, sorry I misread slightly what you were asserting... 'a' the variable and 'a' the word got mixed up
*	slack1256 has quit (Remote host closed the connection)
<jle`>	alternatively you can also squish your URL type and your singleton together so you don't need to pass an explicit singleton, but they're basically two ways of doing the same thing
<erisco>	Donovan, you just have to get into the 'a' in your list of vectors. You can do that :)
<erisco>	Donovan, start this way... say you just had  Vector a  rather than  [Vector a]   then how would you define foldr?
<jle`>	mbw: with String -> Maybe (SomeURL p), if the parsing function decides it's an absolute url, it can return SomeURL SAbsolute theUrl
<wilornel>	thanks mbw. I remember reading about case matching in Haskell programming from First Principles but I thought he explained that it was not so nice to work with
<mbw>	jle`: I get the usage of existentials in this, I think. However, the Singleton type is still not clear to me. Since you said it is defined via GADTs, what would be an example definition?
<jle`>	case matching is literally the best part about haskell, heh
<wilornel>	He had nested a lot of cases one into another
<wilornel>	He was able to get rid of them specifically because all his functions were all using the Maybe monad?
<jared-w>	Donovan: you had an older version of the Foldable for Matrix that worked but was wrong. Can you update your paste with that older version as well?
<jle`>	data SURLType :: URLType -> Type; SAbsolute :: SURLType 'Absolute; SHostRelative :: SURLType 'HostRelative; SPathRelative :: SURlType 'PathRelative
<erisco>	Donovan, or alternatively think about how you can take [Vector a] to [a]
<mbw>	wilornel: When starting a new function from scratch, I often start off using case matching, and only afterwards simplify if it makes sense, for instance by using a particular monad instance.
<wilornel>	thank you!
*	robotrolll (~robotroll@unaffiliated/robotroll) has joined
<jared-w>	wilornel: the example in that one was intended to show off the 'composition of effects' that monads allow and how it combines really powerfully with do notation
<erisco>	Donovan, for the first approach it is actually easier to define foldMap instead of foldr
*	hiratara has quit (Quit: ZNC - http://znc.in)
<jle`>	a lot of this exact thing is actually covered in my singletons tutorial
<jle`>	that i haven't released yet
<wilornel>	and the 'composition of effects' works well when you use one monad within a do notation, right?
*	xaviergmail has quit (Quit: WeeChat 1.4)
*	robotroll has quit (Ping timeout: 255 seconds)
*	robotrolll is now known as robotroll
*	hiratara (~hiratara@240f:7:4708:1:8467:4270:9167:f6ac) has joined
<mbw>	lol
*	shangxiao (~shangxiao@124-149-153-77.dyn.iinet.net.au) has joined
*	newhoggy has quit (Remote host closed the connection)
<jared-w>	wilornel: the amazing thing about it is that it works with all monads pretty nicely; that's one of the most powerful aspects of monads
<jle`>	mbw: it's "combplete" but i still need to rewrite a lot of it to get it to flow better, but maybe it will help
<jle`>	mbw: https://gist.githubusercontent.com/Cedev/3ef669f809b3c2e771e57efb8771899e/raw/611f333364158b95e000a917c8f7ea7dd4142987/structrally-free-alternative.hs
<jle`>	oh sorry, wrong link
<jle`>	mbw: https://blog.jle.im/entry/introduction-to-singletons-1
*	texasmynsted has quit (Ping timeout: 240 seconds)
<jle`>	do not distribute please :)
*	newhoggy (~newhoggy@1.129.96.245) has joined
<mbw>	It's a promise ;)
<jared-w>	"Some things are so private they can only be shared with your therapist or with 10,000 other people on #haskell"
<wilornel>	jle` but it would have to be one specific modal within a do block, right?
<jle`>	"do not distribute" i say, to the most active channel on freenode
<mbw>	jle`: This use very useful, thanks for (really) sharing (soon?)!
<wilornel>	you could not have composition of effects work nicely with two different monads in a do block
<jle`>	no problem! let me know if you have any feedback too :)
*	t7 has quit (Remote host closed the connection)
*	texasmynsted (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has joined
<erisco>	:t \f acc xs -> foldr (.) id (fmap (flip (foldr f)) xs) acc
<lambdabot>	(Foldable t, Foldable t1, Functor t1) => (a -> b -> b) -> b -> t1 (t a) -> b
<erisco>	I feel like there should be a better way to compose foldrs than that ... sounds like a lens thing
*	thc202 has quit (Ping timeout: 246 seconds)
<jared-w>	wilornel: you're right that you can only use one monad at a time in a do block. However, plenty of monads can be 'converted' into other monads quite nicely. Doing so is done with monad transformers
<pacak>	:t foldl
<lambdabot>	Foldable t => (b -> a -> b) -> b -> t a -> b
<mbw>	jle`: Does your definition of SURLType ... correspond to a particular part of the tutorial? (You said it did, but which one, in case I miss it and you're not around anymore)?
<pacak>	:t foldl . foldl
<lambdabot>	(Foldable t, Foldable t1) => (b -> a -> b) -> b -> t1 (t a) -> b
<jle`>	mbw: yeah SURLType is the singleton pattern for URLType
*	peterbecich (~peterbeci@75-142-96-216.static.mtpk.ca.charter.com) has joined
<jle`>	like data SBool :: Bool -> Type where STrue :: SBool 'True, SFalse :: SBool 'False
*	newhoggy has quit (Ping timeout: 240 seconds)
<jle`>	s/singleton pattern/singleton
<erisco>	:t foldr . flip . foldr . flip . flip
<lambdabot>	(Foldable t, Foldable t1) => (a -> b -> b) -> b -> t1 (t a) -> b
<mniip>	jle`, you should expand a bit on the "exactly one inhabitant"
<erisco>	pacak, does that really work out to the same thing? amazing
<mniip>	that 'SingDS s' is inhabited by exactly one inhabitant *once we pick the s*
<jle`>	thanks , good note :)
<mbw>	Is there also an example for the correspondence between the use for existentials and singletons? You implied that they both could be used to express the same thing?
<jle`>	but yeahmost of this will be rewritten with a different introduction/conclusion
<jle`>	and flow
<mniip>	also typo doorStats
<erisco>	pacak, so you can compose  foldr . flip  but you need an extra flip in front
<jle`>	mbw: hm i mean that we usually implement singletons using GADTs in haskell
<jared-w>	Seems ugly, honestly. I don't really like tons of flips in my equations :p
<jle`>	well, in modern times, we use the template haskell from the singletons library
<jle`>	which generates the GADT
*	coot___________ has quit (Quit: coot___________)
<pacak>	:t foldr >>> foldr . flip
<lambdabot>	(Foldable t1, Foldable t) => (a -> b -> b) -> b -> t1 (t a) -> b
<jle`>	and existentials and singletons are two different tools for differnt purposes
<Donovan>	jared-w: I've updated the paste with the older definition that typechecked, but didnt do what i wanted
<pacak>	Or is it <<<....
<jared-w>	>>> is flipped (.), <<< is just (.) iirc
<jared-w>	erisco: can you take a peak at Donovan's paste again?
*	chase has quit (Ping timeout: 246 seconds)
*	wespiser (~wespiser@2601:197:a80:19e4:54d5:db54:80aa:9551) has joined
<mbw>	jle`: Ok, I scrolled back and I think I just misread "alternatively you can also squish your URL type and your singleton together so you don't need to pass an explicit singleton, 
<jared-w>	also, Donovan, did you catch what erisco was mentioning about the foldMap earlier?
<mbw>	but they're basically two ways of doing the same thing"
<Donovan>	yeah i did thanks jared-w, I'll look into it a guess, seeing as im struggling this much with foldr
*	trigone (5a374e9f@gateway/web/freenode/ip.90.55.78.159) has joined
<erisco>	Donovan, I think you'd have a much easier time defining foldMap instead of foldr
**** BEGIN LOGGING AT Mon Aug 14 18:53:34 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:46:51 2017)
*	Channel #haskell url: http://www.haskell.org/
<Welkin>	hm
<c_wraith>	Welkin: and you wanted to use it in one branch of a case, but not the other
*	DexterLB has quit (Quit: So long and thanks for all the fish)
*	tsaka__ has quit (Ping timeout: 255 seconds)
<Welkin>	I don't get it
*	Puggy (~FASDFSF@unaffiliated/fasdfsf) has joined
<c_wraith>	Welkin: So you need something like the above vacuous function to get the types to work.  vacuous = fmap absurd
<Welkin>	how would you get an `a` from Void?
<c_wraith>	You can't.  The thing is, you can't get a Void, either.
*	Fekinox (~Fekinox@cpe-74-72-183-234.nyc.res.rr.com) has joined
<c_wraith>	So it's just as useful to say you have a function of type Void -> a  as it is to say you have a value of type Void
*	Puggy has quit (Max SendQ exceeded)
*	halil has quit ()
<f-uckboi>	puggy was here ?
*	Puggy (~FASDFSF@unaffiliated/fasdfsf) has joined
*	Wast has quit (Quit: Connection closed for inactivity)
*	dan_f has quit (Quit: dan_f)
*	jasonszhao (~Jason@cpe-107-185-162-79.socal.res.rr.com) has joined
*	u0_a153 (~u0_a153@103.58.11.86) has joined
<u0_a153>	yo
<f-uckboi>	ay man what up
<erisco>	I dunno, I don't know how to derive it but I can't fault the idea of your equivalence mnoonan_
<u0_a153>	i need help
<crucify_me>	hi quick question. here, we can test for equality between the two type constructors: ThisOne and ThatOne. ie. ThisOne 5 == ThatOne 5 -> False. Does this go to the ignore case to return False ? https://ptpb.pw/IPJG  
*	dan_f (~dan@24.148.32.207) has joined
<u0_a153>	i need help
*	peglong (~dskfjki@36.78.141.75) has joined
<mnoonan_>	crucify_me: yes
<u0_a153>	i need helo
<u0_a153>	help
*	iqubic (~iqubic@2601:602:8a00:1bd7::9d29) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<c_wraith>	:t let { forever' :: Applicative f => f a -> f Void ; forever' f = let { x = f *> x} in x } in forever' -- Welkin, you can't have a value of type Void, so the Void in the signature indicates a value that can never be produced.  In this case, that means forever' never returns
<lambdabot>	Applicative f => f a -> f Void
<peglong>	!help
<u0_a153>	ill pay
<crucify_me>	mnoonan_, thanks, where in the code do we get behavior that allows us to test ThisOne and ThatOne for equality? is it in the first line?
*	banc has quit (Quit: ZNC - http://znc.in)
*	hexadecimal-1540 (~hexadecim@2601:282:a03:f1f0:5d25:c1be:4fa0:5511) has joined
<crucify_me>	I would have thought they were separate
<mnoonan_>	crucify_me: no, the first like is when both sides are ThisOnes, the second is when both are ThatOnes, and the last catches the rest of the cases
*	hucksy_ (~hucksy@p4FD1F8DE.dip0.t-ipconnect.de) has joined
<mnoonan_>	*line
*	stoopkid_ has quit (Quit: Connection closed for inactivity)
<crucify_me>	so really, they are not "allowed" to be tested, that statement gets passed to the last case. mnoonan_ 
<f-uckboi>	im back
*	u0_a153 has quit (Quit: leaving)
<mnoonan_>	crucify_me: right, (==) on the inner a/b will never get called in that case
<crucify_me>	technically, it doesn't even test them for equality
*	halogenandtoast (~matthew-m@122x220x193x82.ap122.ftth.ucom.ne.jp) has joined
*	f-uckboi (~u0_a153@103.58.11.76) has left
<crucify_me>	the inner a/b ?
*	algebra (~amarpotgh@p57967EEF.dip0.t-ipconnect.de) has joined
<crucify_me>	I thought my moniker was out there...
*	harfangk (~quassel@222.110.160.66) has joined
<crucify_me>	oh boi
<mnoonan_>	you can write “ThisOne (error “Barf”) == ThatOne (error “argh”)” and your program won’t throw an error, because the stuff inside the ThisOne and ThatOne don’t need to be inspected
*	path[l] has quit (Quit: path[l])
*	hucksy has quit (Ping timeout: 240 seconds)
<nshepperd>	getting an 'a' for Void is easy. let's enumerate the cases:
<nshepperd>	*from Void
<mnoonan_>	nshepperd: :)
<Welkin>	nshepperd: how come you always remind me of mass effect?
<nshepperd>	because i'm jane shepard, saviour of the galaxy
*	twandy has quit (Ping timeout: 240 seconds)
*	Wizek has quit (Quit: Connection closed for inactivity)
<crucify_me>	right, its not inspected at all . thanks mnoonan_ .. but the "or" operator here '|' is not what prohibits the prog. from inspecting one against the other
*	algebra has quit (Ping timeout: 240 seconds)
<nshepperd>	a slightly more advanced way of enumerating the cases would be: ⊥ -> ⊥
*	isomarcte has quit (Remote host closed the connection)
<erisco>	you only get to do that if you're the semantics
<crucify_me>	nshepperd, bottoms ? not there yet, you referring to my inquiries?
<nshepperd>	crucify_me: no, i'm talking about the meaning of the 'vacuous' and 'absurd' functions
*	taktoa has quit (Remote host closed the connection)
<crucify_me>	I know a vacuous girl
*	cdg (~cdg@2600:1700:3120:40e0:a9fa:14ad:17c3:a863) has joined
<nshepperd>	erisco: i can map bottoms to things if I want! you can't tell me what to do!
<pacak>	:t absurd
<lambdabot>	Void -> a
<pacak>	-- give me nothing and I'll return anything
<pacak>	:t vacuous
*	CoderPuppy has quit (Ping timeout: 246 seconds)
<lambdabot>	Functor f => f Void -> f a
<pacak>	-- give me object containing nothing - I'll fill it with anything
<dsal>	Hmm...  I've got two of these things:  t :: Monad f => f LocalTime    -- how do I subtract them?  :(
*	chlong_ has quit (Ping timeout: 260 seconds)
<erisco>	> vacuous myWallet
<lambdabot>	 error: Variable not in scope: myWallet :: f Void
*	CoderPuppy (~cpup@32.218.114.15) has joined
<erisco>	hang on while I mail it...
<nshepperd>	'give me an object containing the impossible' would maybe be more to my taste
*	broccolistem (~broccolis@gateway/vpn/privateinternetaccess/broccolistem) has joined
*	banc (~master@217.151.98.168) has joined
<pacak>	nshepperd: Or that.
<pacak>	Words are hard.
*	darjeeling_ has quit (Ping timeout: 240 seconds)
*	nect has quit (Remote host closed the connection)
<pacak>	Ex falso quodlibet .
<pacak>	For me is something ghc tells when it can figure out my code.
<pacak>	impossible is
*	capn_freako (~dbanas@2602:306:b8a2:a220:197c:dfca:72ce:dac3) has joined
<nshepperd>	or perhaps what you are doing is replacing nothing with the absence of something specific :)
<nshepperd>	absurd :: Void -> Int -- if you don't have anything, you don't have an Int
<pacak>	Prove me wrong. It will give you int if you pass it Void. You just can't pass it Void since it's not a thing. Assuming bottom-less category.
<crucify_me>	may I ask again to be certain: the "|" symbol .. call it "OR" in this use? .. disallow the ThisOne and ThatOne. nip it in the bud so to speak..by passing ThisOne 5 == ThatOne 5 , directly to the ignore case, or does it happen elsewhere? do you see my point? https://ptpb.pw/IPJG
*	newhoggy_ has quit (Remote host closed the connection)
*	newhoggy (~newhoggy@2405:9000:1400:120:eca4:54c7:a7d5:cd67) has joined
*	newhoggy has quit (Remote host closed the connection)
<crucify_me>	disallow .... *from being compared*
*	newhoggy (~newhoggy@2405:9000:1400:10:1908:ab4f:f0fd:7734) has joined
*	pacak fails to parse the question
<crucify_me>	sorry. pacak
<crucify_me>	I wish I could phrase it better
<jared-w>	crucify_me: you wrote that instance correctly
<pacak>	You create a datatype that contains something of type a
<nshepperd>	crucify_me: the meaning of | in a data declaration is simply to enumerate the possible cases
<pacak>	container can be either of those two things.
<pacak>	Code and instance seems correct.
<pacak>	ghc can derive the same instance though.
*	sellout- has quit (Quit: Leaving.)
*	capn_freako has quit (Client Quit)
<jared-w>	crucify_me: also, the pattern matching of the function is what brings it to the ignore case
<crucify_me>	but those are two separate cases, yet ThisOne and ThatOne are "allowed" to be compared, because there is no error
<nshepperd>	crucify_me: a value of type 'Which a' is either ThisOne x for some x :: a OR ThatOne y for some y :: a
*	albeit (44e7d974@gateway/web/cgi-irc/kiwiirc.com/ip.68.231.217.116) has joined
<jared-w>	If the eq instance is "passed"   ThisOne 5 == ThatOne 5, what will happen is that first: You have the line (==) (ThisOne a) (ThisOne b); you have a ThatOne in the second parameter so it doesn't match and it tries the second line
*	pfurla has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<jared-w>	The second line has a ThatOne as the first parameter and so it doesn't match the comparison you "passed in", so it goes to the third line. The third line says "return False for anything you give me" so it returns false
<crucify_me>	jared-w, excellent got it. thanks ALL !
*	jfischoff (~jonathanf@pool-74-101-197-223.nycmny.fios.verizon.net) has joined
<dsal>	I don't understand this thing I'm getting for time.   t :: Monad f => f LocalTime
<dsal>	repl prints it, but "show t" blows up
*	shangxiao (~shangxiao@106-68-89-169.dyn.iinet.net.au) has joined
<pacak>	dsal: repl is more magical.
<jared-w>	repl is very magic
<pacak>	dsal: blows up in what way?
<dsal>	I guess I don't understand why it returns a function.
<dsal>	I kind of understand it now.   show doesn't know how to deal with the function thing.
<pacak>	f LocalTime looks like a value in a monad to me.
<pacak>	You can't get current LocalTime from a pure function.
<pacak>	At least not unless you pass it in.
<dsal>	It's not current time.
<dsal>	parseTime is deprecated and suggests calling parseTimeM True
<dsal>	Which returns a monad instead of Maybe
*	harfangk has quit (Ping timeout: 240 seconds)
<mnoonan_>	dsal: ghci is specializing “f” to “IO”, and it knows how to show anything of type “IO t”, as long as it also knows how to show “t” 
<mnoonan_>	it’s kind of cheating, because it knows how to show “IO t” only by running the action, and then showing the result
<pacak>	dsal: Maybe is Monad.
*	CoderPuppy has quit (Ping timeout: 248 seconds)
*	frankpf (~frankpf@unaffiliated/frankpf) has joined
<pacak>	:t parseTimeM
*	pera has quit (Quit: leaving)
<lambdabot>	error: Variable not in scope: parseTimeM
<pacak>	Meh.
<mnoonan_>	(I think)
<dsal>	It's just weird to me that parsing returns a function I need to call.
<pacak>	it returns a wrapped value
*	cpennington has quit (Ping timeout: 255 seconds)
<dsal>	But why is it wrapped?
*	chao-tic (~chao@218.101.54.122) has joined
<dsal>	It's also slightly confusing to me how to call a nullary function vs. accidentally passing its value.
<dsal>	(er, it *as* a value)
*	CoderPuppy (~cpup@32.218.114.31) has joined
*	jmcarthur has quit (Ping timeout: 246 seconds)
<pacak>	Result might not be there for example.
<mnoonan_>	dsal: for warty reasons, the Monad interface includes the ability to fail
<koz_>	mnoonan_: Did they not break it out into MonadFail yet?
<geekosaur>	for most functions there is no difference. if it's a monad, you use >>= (or <- in do)
<geekosaur>	*a monadic value
<mnoonan_>	dsal:  parseTimeM can fail, but since they leave the Monad instance polymorphic, the *caller* gets to pick what failing should mean
<geekosaur>	I think people have snarked about parseTimeM before... it's a bit of a throwback
<mnoonan_>	so if you use parseTimeM in a way where it results in a “Maybe time”, you’ll get Nothing in the failure case, or Just theTime in the successful case
<pacak>	:t fail
<lambdabot>	Monad m => String -> m a
<pacak>	fail is bad.
*	algebra (~amarpotgh@p57967EEF.dip0.t-ipconnect.de) has joined
<geekosaur>	back in the day. Data.Map.lookup used the same trick. (think it changed in 6.6)
<dsal>	fail fores the monad?
<dsal>	er, forces
<geekosaur>	using fail requires a Monad context, yes
<geekosaur>	note that Maybe is a Monad, so supplies the correct context already
<geekosaur>	and you get back Nothing on error or Just theParseResult
<geekosaur>	but you could force a monad that lets it tell you *what* failed
<pacak>	 fail defaults to this
<pacak>	fail        :: String -> m a     
<pacak>	fail s      = errorWithoutStackTrace s
*	mson has quit (Quit: Connection closed for inactivity)
*	mizu_no_oto has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
Python interface unloaded
**** ENDING LOGGING AT Mon Aug 14 19:38:17 2017

**** BEGIN LOGGING AT Tue Aug 15 11:01:37 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<Aruro>	it generates list
<Aruro>	from seed
<ertes-w>	unfoldr is the epitome of stateful sequences =)
*	Achylles (~Achylles@2804:431:d724:ec3e:2f4a:8bb1:95d8:6afc) has joined
*	caumeslasal has quit (Ping timeout: 240 seconds)
*	takle has quit (Remote host closed the connection)
*	db8093246 (~db8093246@c-62-220-168-181.cust.bredband2.com) has joined
*	robertc has quit (Ping timeout: 260 seconds)
*	takle (~takle@62.190.88.242) has joined
*	rribeiro has quit (Remote host closed the connection)
*	C0_c0ax_ (~C0_c0ax_@ool-18bcd93c.dyn.optonline.net) has joined
*	alios has quit (Remote host closed the connection)
*	rribeiro (~rribeiro@2804:d45:2b06:2900:19bd:f7c:e9de:bd42) has joined
*	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined
*	hulufei has quit (Ping timeout: 260 seconds)
*	mud has quit (Ping timeout: 255 seconds)
*	chaosmasttter (~chaosmast@p200300EB7BD65B51021FE2FFFE8BD789.dip0.t-ipconnect.de) has joined
*	mud (~mud@unaffiliated/kadoban) has joined
*	rlj has quit (Ping timeout: 260 seconds)
*	Achylles has quit (Ping timeout: 246 seconds)
*	freusque (~fre@69-231-190-109.dsl.ovh.fr) has joined
*	zoey (~zoey@2601:448:8001:494a:c11c:ce85:8732:e5d9) has joined
*	takle has quit (Ping timeout: 255 seconds)
<nshepperd_>	dsal: you *can* define a list type where the recursion goes the "other way". They're called snoc lists https://mail.haskell.org/pipermail/haskell-cafe/2007-July/029485.html
*	rribeiro has quit (Ping timeout: 246 seconds)
<nshepperd_>	snoc = backwards cons
*	newhoggy (~newhoggy@ppp118-211-222-35.bras1.syd2.internode.on.net) has joined
<nshepperd_>	Anyway, it's just the same as a normal list, but you imagine the list growing to the left instead of the right :p
*	caumeslasal has quit (Ping timeout: 246 seconds)
*	tobhe has quit (Ping timeout: 240 seconds)
*	uglyfigurine (~uglyfigur@131.228.197.34) has joined
<nshepperd_>	Nil :> 1 :> 2 :> 3
*	samrat has quit (Ping timeout: 240 seconds)
*	toblorone has quit (Read error: Connection reset by peer)
*	coot____________ has quit (Read error: No route to host)
*	toblorone (~toblorone@162.246.216.28) has joined
*	coot____________ (~coot@188.146.168.107.nat.umts.dynamic.t-mobile.pl) has joined
*	aphorisme has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	wrengr_away is now known as wrengr
*	newhoggy has quit (Ping timeout: 248 seconds)
*	KongWubba (~yaaic@a89-182-145-225.net-htp.de) has joined
*	emilypi has quit (Remote host closed the connection)
*	frankpf (~frankpf@unaffiliated/frankpf) has joined
*	takle (~takle@62.190.88.242) has joined
*	jfredett has quit (Read error: Connection reset by peer)
*	maddybutt has quit (Ping timeout: 260 seconds)
*	kav has quit (Read error: Connection reset by peer)
*	newhoggy (~newhoggy@ppp118-211-222-35.bras1.syd2.internode.on.net) has joined
*	jfredett_ (~quassel@2601:189:c380:c25:7884:212c:17b7:5c2c) has joined
*	kav (~kari@dsl-hkibng42-5673d7-15.dhcp.inet.fi) has joined
*	maddybutt (~maddy@72.18.233.74) has joined
*	prietoj (~user@host86-181-90-77.range86-181.btcentralplus.com) has joined
*	kvda has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	Achylles (~Achylles@200-100-219-238.dial-up.telesp.net.br) has joined
*	takle has quit (Ping timeout: 240 seconds)
*	lambdaGrp has quit (Quit: leaving)
*	prietoj2 (56b55a4d@gateway/web/freenode/ip.86.181.90.77) has joined
*	CoderPuppy has quit (Ping timeout: 240 seconds)
*	eazar001 (~ebrahim@2602:304:cf7b:efb0:92c9:e760:3b19:1e32) has joined
*	ubsan_ has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	newhoggy has quit (Ping timeout: 240 seconds)
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
<prietoj>	Hello! I was wondering what's the idiomatic way of using lenses conditionally (i.e. modifying a value in a given path only if the value in another path satisfies certain condition)
*	FreeBirdLjj has quit (Remote host closed the connection)
*	davama (~davama@208.74.142.117) has joined
*	algebra has quit (Remote host closed the connection)
*	davama (~davama@208.74.142.117) has left
*	CoderPuppy (~cpup@32.218.116.181) has joined
*	newhoggy (~newhoggy@ppp118-211-222-35.bras1.syd2.internode.on.net) has joined
*	_ja_ (cdadd90a@gateway/web/freenode/ip.205.173.217.10) has joined
*	mou (~donwillia@188.228.46.39) has joined
*	eacameron has quit (Ping timeout: 248 seconds)
<Aruro>	btw probably there are also bidirectional lists where (:) adds elements from both sides :)
<Akii>	anyone has an idea how to add a request header to servant client?
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	werner291 (~werner@ip-80-236-242-67.dsl.scarlet.be) has joined
*	newhoggy has quit (Ping timeout: 255 seconds)
*	Scip (~scip@76.121.6.102) has joined
<cocreature>	Akii: afaik you should just use https://hackage.haskell.org/package/servant-0.11/docs/Servant-API-Header.html#t:Header in your api endpoint and then you have to pass an additional argument representing the header
<phadej>	Akii: http://haskell-servant.readthedocs.io/en/stable/tutorial/ApiType.html#request-headers
<phadej>	cocreature: +1
*	Frans-Willem has quit (Remote host closed the connection)
<Akii>	thanks!
*	newhoggy (~newhoggy@ppp118-211-222-35.bras1.syd2.internode.on.net) has joined
*	Myrl-saki has quit (Ping timeout: 240 seconds)
*	albertus1 has quit (Ping timeout: 260 seconds)
*	wonko7 (~wonko7@2a01:e34:ec14:5250:3d22:e39a:969c:45bb) has joined
*	newhoggy has quit (Ping timeout: 240 seconds)
*	Arcaelyx (~Arcaelyx@pool-98-116-59-163.nycmny.fios.verizon.net) has joined
*	newhoggy (~newhoggy@ppp118-211-222-35.bras1.syd2.internode.on.net) has joined
*	keemyb has quit (Ping timeout: 240 seconds)
*	quobo (uid178934@gateway/web/irccloud.com/x-uxteddbtwsmdueiy) has joined
<ertes-w>	prietoj: lenses can be multi-"path", but the paths are isolated from each other…  however, you can use something like 'filtered'
<ertes-w>	> (traverse . filtered even *~ 10) [1..]
<lambdabot>	 [1,20,3,40,5,60,7,80,9,100,11,120,13,140,15,160,17,180,19,200,21,220,23,240,...
*	Unhammer has quit (Remote host closed the connection)
<ertes-w>	prietoj: well, i messed up terminology…  traversals focus on arbitrarily many points…  lenses are traversals that focus exactly one point
*	osa1_ (~omer@91.93.255.57) has joined
*	gawen has quit (Remote host closed the connection)
*	sellout- has quit (Quit: Leaving.)
*	Ulabanderos (~matias@mobile-access-bcee70-35.dhcp.inet.fi) has joined
<ertes-w>	prietoj: now within the predicate of 'filtered' you could use another lens/traversal
*	gawen (~gawen@movzbl.root.sx) has joined
*	albertus1 (~seb@x4e35914b.dyn.telefonica.de) has joined
*	QF-MichaelK has quit (Quit: Leaving.)
<prietoj>	Ah, makes sense. I'll give it a try, thanks!
*	newhoggy has quit (Ping timeout: 240 seconds)
*	valica (~valica@2a02:2f0c:b000:1e5:780f:6867:740b:a2ba) has joined
<ertes-w>	> (traverse . filtered (even . view _1) . _2 . traverse %~ toUpper) (zip [1..] ["abc", "def", "ghi", "jkl", "mno"])
<lambdabot>	 [(1,"abc"),(2,"DEF"),(3,"ghi"),(4,"JKL"),(5,"mno")]
<ertes-w>	prietoj: example ^
*	Scip has quit (Ping timeout: 240 seconds)
<prietoj>	Great!
*	osa1_ has quit (Client Quit)
*	osa1 has quit (Remote host closed the connection)
*	rlj (5eea37cd@gateway/web/freenode/ip.94.234.55.205) has joined
*	newhoggy (~newhoggy@ppp118-211-222-35.bras1.syd2.internode.on.net) has joined
*	aarvar (~foewfoiew@50.34.105.170) has joined
*	osa1 (~omer@haskell/developer/osa1) has joined
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
*	dcoutts_ has quit (Ping timeout: 246 seconds)
<Akii>	cocreature, phadej: that was exactly it xD Was away too long from Haskell again
<ahihi>	is there some tool for monitoring thread creation/destruction in a haskell program?
<Akii>	love how servant forces you to encode request headers into your apis
*	Frans-Willem (~quassel@5468F048.cm-12-1d.dynamic.ziggo.nl) has joined
<geekosaur>	ahihi, ThreadScope? btu building it can be painful on some platforms I gather
*	newhoggy has quit (Ping timeout: 240 seconds)
*	Xion_ has quit (Ping timeout: 240 seconds)
<ahihi>	geekosaur: I will have a look, thanks :)
*	newhoggy (~newhoggy@ppp118-211-222-35.bras1.syd2.internode.on.net) has joined
*	rossberg_ has quit (Ping timeout: 255 seconds)
*	mud has quit (Ping timeout: 255 seconds)
*	osa1 has quit (Ping timeout: 240 seconds)
*	osa1 (~omer@haskell/developer/osa1) has joined
*	freusque has quit (Ping timeout: 240 seconds)
*	hulufei (~hulufei@14.28.139.99) has joined
*	newhoggy has quit (Ping timeout: 240 seconds)
*	bennofs1 (~benno@v0044.dip.tu-dresden.de) has joined
<kgadek>	hi all. I'm using lens' makeFields, but that forces me into single module (otherwise I get name lash of classes). Any clever way around it?
*	DTZUZO (~DTZUZO@S0106bcd16584b0aa.vs.shawcable.net) has joined
*	mud (~mud@unaffiliated/kadoban) has joined
*	eazar001 has quit (Quit: WeeChat 1.9)
*	mstruebing (~mstruebin@p200300E3DBD6B6831581C6DDD3B6720F.dip0.t-ipconnect.de) has joined
*	hulufei has quit (Ping timeout: 240 seconds)
**** ENDING LOGGING AT Tue Aug 15 11:57:28 2017

**** BEGIN LOGGING AT Tue Aug 15 18:48:47 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<ab9rf>	uiuc is about two hours south of me, but i don't have a car 
*	relrod (~relrod@origin.elrod.me) has joined
*	relrod has quit (Changing host)
*	relrod (~relrod@redhat/relrod) has joined
*	esph (~weechat@unaffiliated/esph) has joined
*	Disconnected ()
**** ENDING LOGGING AT Tue Aug 15 18:51:39 2017

**** BEGIN LOGGING AT Tue Aug 15 18:52:10 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	algebra (~amarpotgh@p57967E6B.dip0.t-ipconnect.de) has joined
*	Youmu (uid129469@gateway/web/irccloud.com/x-bpzzdiiyaoavgtfy) has joined
*	jmcarthur (~jmcarthur@2601:86:100:1620:11f3:5a14:fc98:ceb1) has joined
*	prophile has quit (Ping timeout: 246 seconds)
*	Costar (~Costar@2804:14d:7e85:305:6535:6e8f:7fba:1405) has joined
*	renzhi (~renzhi@114.84.168.12) has joined
*	prophile (~alynn@oftn/oswg-member/prophile) has joined
*	algebra has quit (Ping timeout: 240 seconds)
*	albertid_ (~albertid_@p5DC4D34F.dip0.t-ipconnect.de) has joined
*	banc has quit (Quit: ZNC - http://znc.in)
*	hucksy (~hucksy@p4FD1FFDD.dip0.t-ipconnect.de) has joined
*	Myrl-saki has quit (Ping timeout: 248 seconds)
*	dddddd has quit (Remote host closed the connection)
<erisco>	well I have the library ready but now I figure I need to generalise to Category
*	louispan has quit (Quit: louispan)
*	albertid__ has quit (Ping timeout: 240 seconds)
*	prophile has quit (Ping timeout: 248 seconds)
<erisco>	though I am not sure that is possible, hm
*	hanslo-Wesson (~hanslo-W@pool-100-38-74-239.nycmny.fios.verizon.net) has joined
<penteract>	What library are you working on?
*	hucksy_ has quit (Ping timeout: 240 seconds)
<erisco>	:t (.).(.)
<lambdabot>	(b -> c) -> (a1 -> a -> b) -> a1 -> a -> c
<erisco>	the question is if you can generalise that to category, but I don't think so
*	prophile (~alynn@oftn/oswg-member/prophile) has joined
*	frankpf (~frankpf@unaffiliated/frankpf) has joined
*	nykros (c9b100f1@gateway/web/freenode/ip.201.177.0.241) has joined
<nykros>	hi
<cheater>	hi, does anyone know why i would be having this issue with the DCP solver? https://github.com/chrisnc/hvx/issues/10
*	tommd (~tommd@75-164-224-54.ptld.qwest.net) has joined
<nykros>	no idea, sorry
*	cpup has quit (Ping timeout: 240 seconds)
<nykros>	do u know how to enumerate an infinite matrix? My solution gave me only half a matrix
*	banc (~master@217.151.98.168) has joined
*	ackpacket (~ackpacket@unaffiliated/ackpacket) has joined
<nykros>	[(x, y) | x<- [0..], y<- [0..x]]
<erisco>	:t fmap . (.)
<lambdabot>	Functor f => (b -> c) -> f (a -> b) -> f (a -> c)
*	hanslo-Wesson has quit (Ping timeout: 248 seconds)
<erisco>	well, for generalised (.) that will work for  cat a b  if  cat a  is a Functor
*	CoderPuppy (~cpup@32.218.118.87) has joined
<erisco>	I am not sure how niche that becomes, though
<penteract>	:t fmap `fmap` fmap
<lambdabot>	(Functor f, Functor f1) => (a -> b) -> f1 (f a) -> f1 (f b)
*	tlaxkit has quit (Quit: Saliendo...)
<erisco>	:t fmap . (Control.Category..)
<lambdabot>	forall k (a :: k) (f :: * -> *) (b :: k) (cat :: k -> k -> *) (c :: k). (Category cat, Functor f) => cat b c -> f (cat a b) -> f (cat a c)
*	MarcelineVQ has quit (Quit: q)
*	dual (~bonafide@cpe-74-75-153-119.maine.res.rr.com) has joined
*	samrat (~samrat@202.51.76.80) has joined
<Welkin>	:t (Control.Category..) (Control.Category..) (Control.Category..)
<lambdabot>	forall k (a :: k) a1 (b :: k) (cat :: k -> k -> *) (c :: k). Category cat => cat b c -> (a1 -> cat a b) -> a1 -> cat a c
*	bencryption (~bencrypti@unaffiliated/bencryption) has joined
*	bandit145 (~bandit145@24-151-12-38.dhcp.nwtn.ct.charter.com) has joined
*	chao-tic (~chao@218.101.54.122) has joined
<erisco>	obviously it works for (->) ... seems to work for Kleisli as well, so maybe it is worth it
Python interface unloaded
**** ENDING LOGGING AT Tue Aug 15 19:22:48 2017

**** BEGIN LOGGING AT Wed Aug 16 18:07:14 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<koz_>	edwardk: Thank you - shall watch/read/understand.
<edwardk>	the short version is that kfix uses exactly the same structure of argument as the classic loeb's theorem proof.
*	tsaka_ has quit (Ping timeout: 240 seconds)
*	CoderPuppy (~cpup@32.218.118.147) has joined
<edwardk>	dan piponi's loeb function on the other hand just kinda squints at the type and replaces the 'is provable' modality with a functor and tries to write it using fmap and fixed points
*	_asc has quit (Ping timeout: 240 seconds)
*	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined
*	Apocalisp has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<edwardk>	so kfix is closer to loeb than either of the two 'comonadic fixed points' that always exist for all comonads and can actually be much faster due to it having nice structure
*	esssing has quit (Ping timeout: 255 seconds)
*	pera has quit (Ping timeout: 248 seconds)
<epoitras>	Can someone explain to me why this simple monad transformer example seems to violate haskell's type system?
<epoitras>	http://lpaste.net/357755
<edwardk>	If you look at the definition kfix is sort of like the bastard child of wfix and cfix, it shoves the 'w' in all the places that either of the other two do, but its able to exploit 'ComonadApply' to compute efficiently
*	robertc (~robertchr@162.243.22.32) has joined
<epoitras>	'ask' seems to return a Reader instead of State
*	esssing (~quassel@2001:41d0:52:d00::1e6) has joined
<koz_>	epoitras: Yeah, because ask is the Reader monad's shindig.
<koz_>	For pulling out the state, there's a different function.
<koz_>	(get I think)
<koz_>	:t get
<edwardk>	epoitras: 'ask' is for accessing the reader. 'get' is for accessing the state
<lambdabot>	MonadState s m => m s
<epoitras>	oh god...
<epoitras>	Thanks friends
<koz_>	epoitras: No worries - happens to all of us.
*	xcmw (~textual@2605:a000:132b:20d8:40e4:ac62:d7d2:e76e) has joined
*	takle has quit (Ping timeout: 264 seconds)
*	uglyfigurine (~uglyfigur@73.110.34.152) has joined
*	danthemyth has quit (Remote host closed the connection)
*	kvda has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	robertc has quit (Ping timeout: 246 seconds)
*	mnoonan__ (~mnoonan@cpe-69-201-46-148.twcny.res.rr.com) has joined
<koz_>	edwardk: I'm watching the talk, just got to Loeb's Theorem in Haskell, and my reaction to it was: https://vignette2.wikia.nocookie.net/glee/images/e/eb/What-kind-of-sorcery-is-this.jpg/revision/latest?cb=20130422032527
*	kvda (~kvda@unaffiliated/kvda) has joined
*	uglyfigurine has quit (Ping timeout: 240 seconds)
*	cobreadmonster has quit (Quit: Connection closed for inactivity)
*	search (~redmileki@S0106ac202ec5e763.ed.shawcable.net) has joined
*	chao-tic has quit (Ping timeout: 248 seconds)
*	jsph (~jjjjjj@2001:19f0:6000:4001::6e) has joined
<edwardk>	koz_: http://blog.sigfpe.com/2006/11/from-l-theorem-to-spreadsheet.html <- is the original intro to loeb's theorem that piponi write a decade ago
*	cranej (~cranej@42.120.74.204) has joined
*	eacameron has quit (Remote host closed the connection)
<koz_>	edwardk: I'll add it to my reading queue. Thanks!
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
<pacak>	koz_: How long is your reading queue and what's in there?
<edwardk>	also note that kfix requires just a bit too much of 'w' it requires ComonadApply but never exploits extract. it really should be for some "SemicomonadApply' class that we don't have, or 'ExtendApply' whatever you want to call it
*	uglyfigurine (~uglyfigur@73.110.34.152) has joined
<koz_>	pacak: For this topic, or in general?
<edwardk>	that would permit it to handle piponi's [] based examples
<pacak>	In general
<pacak>	just curious
<koz_>	edwardk: What would ExtendApply's operations be?
<edwardk>	as [] can be extended and has a zipping operation, but can't be extracted
*	mnoonan__ has quit (Quit: mnoonan__)
<edwardk>	koz_: ComonadApply minus extract
*	justan0theruser (~justanoth@unaffiliated/justanotheruser) has joined
<koz_>	edwardk: So that would be something like (Functor w) => ExtractApply w where ... ?
<edwardk>	fmap, (<*>), and duplicate
*	search has quit (Ping timeout: 240 seconds)
<koz_>	edwardk: <*> being applicative splat?
<edwardk>	class Extend f => ExtendApply f where (<@>) :: f (a -> b) -> f a -> f b
*	beekill (~beekill@27.78.201.180) has joined
<edwardk>	yeah
<edwardk>	(<@>) has (<*>) like associativity
*	justanotheruser has quit (Ping timeout: 264 seconds)
*	dec0n (~dec0n@draugas.gis-centras.lt) has joined
*	louispan (~textual@203.38.203.134) has joined
*	louispan has quit (Client Quit)
<edwardk>	a strong lax symmetric semi-monoidal semi-comonad -- say that three times real quick
<koz_>	edwardk: Describing something as 'strong lax' always threw me.
<edwardk>	likewise
<koz_>	I know that they refer to very different things, but it still sounds weird.
<edwardk>	i've just taken to dropping both words and letting the people who actually know category theory shake out what i mean =)
<koz_>	edwardk: Which basically means 'people who aren't me'. :P
<koz_>	(since I don't actually know category theory)
*	amut has quit (Quit: AtomicIRC: The nuclear option.)
<koz_>	edwardk: So would it make sense to have 'Applicative w => ExtractApply w' then?
*	uglyfigurine has quit (Ping timeout: 260 seconds)
*	louispan (~textual@203.38.203.134) has joined
*	louispan has quit (Client Quit)
*	Gurkenglas_ has quit (Ping timeout: 264 seconds)
<edwardk>	koz_: no requirement of pure
<koz_>	edwardk: Ah, I see.
*	wespiser (~wespiser@2601:197:a80:19e4:b939:cb50:e66b:7f1b) has joined
<koz_>	(hence the 'semi-monoidal' part?)
<edwardk>	its the same operations as Extend and Apply but with an extra requirement of symmetry
*	boxscape has quit (Ping timeout: 260 seconds)
*	xplat has quit (Ping timeout: 240 seconds)
*	replay has quit (Quit: Textual IRC Client: www.textualapp.com)
*	dennisvennink has quit (Max SendQ exceeded)
*	cdg (~cdg@2600:1700:3120:40e0:5869:c1fa:500d:bb82) has joined
*	bandit145 (~bandit145@24-151-12-38.dhcp.nwtn.ct.charter.com) has joined
*	dennisvennink (~dv@095-096-179-040.static.chello.nl) has joined
*	halogenandtoast (~matthew-m@73.94.13.160.dy.iij4u.or.jp) has joined
*	juhp (~juhp@redhat/juhp) has joined
*	emilypi has quit (Remote host closed the connection)
<edwardk>	koz_: for reference, the 'comonadapply' class that is referenced there is based on the ComonadZip class from Uustalu and Vene's "Essence of Dataflow Programming" https://pdfs.semanticscholar.org/ad77/ebcb739925559b48adc441d86ea45e7b9900.pdf -- that paper is quite good up until it starts mucking about with Bikleisli
*	Johannes13 (~Johannes1@unaffiliated/johannes13) has joined
*	rblaze (~Adium@209.6.152.108) has joined
<koz_>	edwardk: Ah, I see. Yeah, I didn't get the whole Bikleisli thing either.
<koz_>	(otherwise, that's a really cool paper)
*	filterfish (~rgh@2001:44b8:3162:5200:5ee0:c5ff:fea4:e764) has joined
<edwardk>	its a bad idea that got a lot of traction at the time
*	uglyfigurine (~uglyfigur@73.110.34.152) has joined
*	silverjam (~Mutter@c-24-4-236-171.hsd1.ca.comcast.net) has joined
<koz_>	Also, as a side note - could you please remind me of the different tradeoffs for the various free(er) monads? You mentioned reflection without remorse, machines, and one other one.
<koz_>	And I think the machines one has a large overhead in general, but I can't recall the other two.
*	hulufei (~hulufei@38.121.61.254) has joined
*	cdg has quit (Ping timeout: 246 seconds)
*	rblaze1 (~Adium@2620:10d:c091:180::1:32ca) has joined
*	DasBrain has quit (Ping timeout: 240 seconds)
<edwardk>	there are 4 approaches to free to get from functor up to monad. there is the naive adt encoding that has problems with left associated binds, Codensity (Free f) that has the problem of being too big, but having an embedding and a retraction of that embedding from Free f. There is the "Church free" monad "F" i have in the free package that has the correct size (same size as "Free f") unlike Codensity (Free f), while maintaining the
<edwardk>	benefits for left associated binds, but both of these latter two solutions have problems when it comes to inspecting and continuing on to do more binding. Reflection without remorse handles both left associated binds and continued binding in exchange for terrible constants.
*	rblaze has quit (Ping timeout: 240 seconds)
<koz_>	edwardk: And Oleg's latest paper on extensible effects uses which of these?
<edwardk>	you can choose to optionally compose this with Coyoneda to get from a type constructor of kind * -> * to monad instead. and then people start throwing around names like operational or 'freer'
<koz_>	(reflection without remorse?)
<edwardk>	thats it
*	uglyfigurine has quit (Ping timeout: 240 seconds)
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	silverjam has quit (Remote host closed the connection)
<edwardk>	freer = reflection without remorse based free on top of coyoneda of f
<koz_>	edwardk: Ah, OK. So basically, it's OK asymptotically, but in practice those constants bite?
<koz_>	(and I assume it's the FTCQueue they're using that gives those constants?)
*	Axman6 has quit (Ping timeout: 240 seconds)
<edwardk>	now, for effect systems there comes a hurdle that every effect system gets caught up on the horns of a dilemma. (trilemma? quadlemma?) they have to give up something and they all basically fall into one of 4 bins in my experience.
<edwardk>	well once you bake in the assumption that you're using the free monad to talk about an effect system you get some other problems
*	hanslo-Withams (~hanslo-W@pool-100-38-74-239.nycmny.fios.verizon.net) has joined
*	Axman6 (~Axman6@pdpc/supporter/student/Axman6) has joined
<edwardk>	oleg's first stab at doing effect system stuff was based on more or less a codensity of free of a data types a la carte set of base effect functors.
*	Welkin (~Welkin@107-147-90-29.res.bhn.net) has joined
<edwardk>	later he replaced the codensity of free part with reflection without remorse and hit everything with coyoneda. (not that he tends to talk about codensity/coyoneda)
*	pparkkin (~pparkkin@203.143.158.140) has joined
<koz_>	Yeah - he never mentions either of those anywhere I've seen.
<edwardk>	but the thing with codensity (free f) is that its bigger than free f. so its capable of handling "effects" such as Cont.
<edwardk>	unfortunately once you're big enough to handle Cont you are big enough that you can't compose your "handlers" and preserve laws.
<Welkin>	oh hi edwardk 
*	pera (~pera@unaffiliated/pera) has joined
<Welkin>	I was just learning about Free and Cont
<edwardk>	combining the handlers for Cont and the laws for monad writer doesn't work in one direction. "handling" Cont silently breaks your use of Writer!
*	uglyfigurine (~uglyfigur@73.110.34.152) has joined
<Welkin>	and wanted something about Cofree and Comonad (and Yoneda/Coyoneda). Any suggested papers/essays/talks?
<edwardk>	this is a sign that there is something rotten in the state of denmark
*	rickerbh (~rickerbh@1.129.96.174) has joined
*	YellowOnion (~dddddd@118-93-169-185.dsl.dyn.ihug.co.nz) has joined
<Welkin>	I started reading gabriel's blog post on comonads which looks good
<edwardk>	if you start with the Codensity (Free f) approach you have a problem. Codensity (Reader e) a is isomorphic to State e a! It is too big an effect. if you replace the codensity bits with a right kan extension of some response type along some request type you can 'shrink' the effect system down enough that it can handle reader, but now binding it becomes a chore
*	epoitras has quit (Quit: Leaving)
*	tommd has quit (Ping timeout: 246 seconds)
<edwardk>	welkin: the old sorta nonsensical comonads are objects post?
*	orcus has quit (Ping timeout: 246 seconds)
<orion>	edwardk: What's the takeaway?
<Welkin>	edwardk: yes
<koz_>	The takeaway is that while extensible effects look nice, they're hiding some sins that they aren't escapign from/.
*	orcus (~orcus@unaffiliated/orcus) has joined
<koz_>	I believe Edward did a talk about lenses + monad transformers which elaborated on the very same topic Edward is expounding on now.
<koz_>	(that was some time last year I think?)
<orion>	https://www.youtube.com/watch?v=Bxcz23GOJqc -- this?
*	uglyfigurine has quit (Ping timeout: 264 seconds)
<koz_>	orion: Yeah, that one.
*	joomy has quit (Quit: joomy)
<orion>	Thanks for the tip. I'm watching now.
<koz_>	orion: I might be wholly off-base here.
<koz_>	That's just me trying to relate various bits of Edward wisdom to each other while heavily caffeinated.
<edwardk>	orion: you have pick your poison if you want an effect system: either you can't have Cont, or your "handlers" don't compose, almost everybody who does share a request/response type is too big to handle 'reader' properly, every 'free' based solution is based on a request/response model that fundamentally can't handle lazy state or lazy writer, or you're basically using the mtl and have to write the n^2 instances. oh, and then you get
<edwardk>	languages that build their entire effect system on the naive encoding (*cough* idris) because it can be given types in their type system so that left associated binds mean that performing long chains of IO can incur a quadratic cost.
*	Disconnected ()
**** ENDING LOGGING AT Wed Aug 16 18:53:37 2017

**** BEGIN LOGGING AT Wed Aug 16 19:06:38 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<koz_>	(modulo the Bikleisli thing, as per edwardk's comment)
<Welkin>	thanks, I think I found it
<edwardk>	another fun starting point is just asking yourself. how do i define the instances for (,) e    or for data Store s a = Store (s -> a) s
<Cale>	Did everyone see my printf thing? :)
<edwardk>	writing the instances is fun
<Welkin>	Cale: nope
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<koz_>	edwardk: I need a motivation for Store - I'm still a bit unclear what to use it for or with.
<Cale>	https://hackage.haskell.org/package/category-printf
<edwardk>	instance Monoid e => Comonad ((->) e) -- is also fun
<edwardk>	koz_: kenny's talk is all about spreadsheets and stuff, right?
<koz_>	edwardk: It mentions them, yes; right now I'm on the 'function swapper thing' and he's laying out why Traversable and infinite streams don't mix.
<edwardk>	Store (Int, Int) a -- is a 2d sheet of 'a's with a cursor on it
<koz_>	OOOOOOOOOOH.
*	rickerbh (~rickerbh@1.129.96.174) has joined
<koz_>	The penny just dropped hard.
*	_asc has quit (Ping timeout: 264 seconds)
*	rickerbh has quit (Client Quit)
<edwardk>	Store Integer a  -- is a 1 dimensional array stretching out to infinity in either direction with a cursor that lets you know where you are on it.
<koz_>	edwardk: So a Turing tape?
<edwardk>	Now you can define a function like blur :: Store Integer a -> a; blur (Store f s) = (f (s - 1) + f (s + 1)) / 2
<edwardk>	then extend blur will 'blur' the contents of the whole 'sheet' by averaging your neighbors and give you a new 'sheet' by applying that function virtually to all of the positions.
<Cale>	I was watching a talk by Dan Patterson at the NY Haskell Meetup at one point, and he was talking about a sort of continuation-passing-style sort of way to handle printf (and it was really unfortunate that his slides were broken, and I think most of the room was tuned out)
*	banc (~master@217.151.98.168) has joined
*	mnoonan_ (~mnoonan@cpe-69-201-46-148.twcny.res.rr.com) has joined
*	MichaelBurge has quit (Remote host closed the connection)
<edwardk>	data Stream a = a :- Stream a; data Tape a = Tape (Stream a) a (Stream a) acts similarly. you can make a comonad for Tape, it is tricky
<koz_>	edwardk: Kenny showed that, and it seemed quite straightforward.
*	jfischoff (~jonathanf@pool-74-101-197-223.nycmny.fios.verizon.net) has joined
*	thc202 has quit (Ping timeout: 240 seconds)
<Welkin>	oh haha, I watched Kenny's talk a few days ago
<edwardk>	data Pointer i a = Pointer (Array i a) i -- acts the same sort of way as data Zipper a = Zipper [a] a [a] when i is Int or something
*	MichaelBurge (~quassel@2603:3004:620:5c00:f460:3c5d:163:a424) has joined
<edwardk>	all of these are 'store-like'
<Welkin>	I didn't understand it all
<Cale>	But I noticed that he was defining this composition operator of type (String -> b -> c) -> (String -> a -> b) -> (String -> a -> c) for composing these "CPS format specifier things", and I thought "I bet that's just the composition for an already-existing category", and thought about it a bit.
<koz_>	edwardk: I assume 'Store' is more general?
*	uglyfigurine (~uglyfigur@73.110.34.152) has joined
<koz_>	Welkin: I'm pleased to say the talk is making sense, aside from Edward's categorical interjections. :P
<edwardk>	data Fold a b where Fold :: (r -> b) -> (r -> a -> r) -> r -> Fold a b -- is also a comonad
<edwardk>	extract (Fold k _ z) = k z; duplicate (Fold k f z) = Fold (Fold k f) f z; 
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<edwardk>	store is also related to lenses. lenses are 'store comonad coalgebras'
<koz_>	edwardk: I *kinda* see that intuitively.
<edwardk>	f :: s -> Store a s -- such that f is a store comonad coalgebra is a lens.
<Cale>	So turns out it's the composition for the co-Kleisli category for the comonad of functions out of a fixed monoid (in our case, String)
<edwardk>	why? lets look at store a bit
<edwardk>	(s -> a, s)
<edwardk>	so lets go back tot he common sense definition of a lens  data Lens s a = Lens { get :: s -> a, set :: s -> a -> s } 
<edwardk>	then factor those two functions (s -> a,  s -> a -> s) because they have a common prefix
<edwardk>	s -> (a, a -> s)
<edwardk>	and alpha rename to get the store above.
<koz_>	Damn, that's slick.
<edwardk>	in the van laarhoven representation, we usually pick two comonads, Identity and Const to read off the parts
<edwardk>	type Lens s t a b = forall f. Functor f => (a -> f b) -> s -> f t 
<edwardk>	pick f = Const a, then  Const :: a -> Const a b can be passed as an argument
*	uglyfigurine has quit (Ping timeout: 240 seconds)
<edwardk>	to get s -> Const a t
<edwardk>	then remove the Const wrapper and you get 'get :: s -> a'
<edwardk>	pick f = Identity and you can 'map' over a lens.
*	hexadecimal-1540 (~hexadecim@2601:282:a03:f1f0:5d25:c1be:4fa0:5511) has joined
<edwardk>	(a -> Identity b) -> s -> Identity t -- squint and you can remove the Identity newtypes and see it as (a -> b) -> s -> t
<edwardk>	then just pass it a constant function to get the   s -> b -> t   function that is 'set' in its full generality
*	gpbaran (~gpbaran@c-24-12-186-105.hsd1.il.comcast.net) has joined
<crucify_me>	hi re: the typeclass def 'class (Real a , Enum a) => Integral a where     a textbook says this " In a very real sense the tuple syntax here denotes the conjunction of typeclass constraints on your type variables. the idea of constraints has been covered for a while, but I feel I'm missing something from the way that is written.
<edwardk>	alternately you can do both of these in one pass by fixing f = Store a
<koz_>	edwardk: Consider myself sufficiently motivated with regard to Store. Thank you! :)
<crucify_me>	sorry if I may repost that ...
<edwardk>	koz_: as a fun exercise you can convert the definition of van laarhoven lenses into a viable definition for a 'store' comonad as well
<edwardk>	flip the definition of your lens
<Cale>	crucify_me: The wording of that sense is a bit strange, but it's not wrong. There's not much to miss.
<Cale>	oops
*	marvin2 has quit (Quit: quit)
<Cale>	sentence*
<edwardk>	forall f. Functor f => (a -> f a) -> s -> f s -- i'll fix a = b, s = t while i'm at it
<Welkin>	crucify_me: it looks like it may be referring to the fact that the constraints are a product (AND) instead of a sum (OR)
<edwardk>	to get s -> (a -> f a) -> f s
<edwardk>	then pull the forall f. Functor f =>    across tot he right hand side
*	tlaxkit has quit (Quit: Saliendo...)
*	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined
<edwardk>	s -> forall f. Functor f => (a -> f a) -> f s
<edwardk>	ball up the right hand side with a newtype
*	Costar (~Costar@179.215.124.226) has joined
<Cale>	crucify_me: If you're implementation-minded, you can regard the type class constraints as referring to records of methods of the type class operations which are going to arrive as a secret additional parameter to your function.
<Cale>	crucify_me: and then the tupling is really just tupling those records together (perhaps)
<edwardk>	newtype Context a s = Context { runContext :: forall f. Functor f => (a -> f a) -> f s }        and a Lens' s a is a 'Context comonad coalgebra' -- and you can show it is a comonad, etc. and can do the same things as store!
<dsal>	What does '\FS' mean?  (character literal)
<koz_>	edwardk: I can see why you're so excited by comonads.
<edwardk>	its worth converting back and forth from Context <-> Store to get used to the two encodings
<Cale>	> fromEnum '\FS'
<lambdabot>	 28
<koz_>	Hearing (reading?) you talk about them now, I'm excited about them too.
<edwardk>	replace Functor with Applicative in the above definition and you get the notion of 'Bazaar' from lens.
<crucify_me>	Cale Welkin thanks, please let me digest that...
*	algebra (~amarpotgh@p57967E10.dip0.t-ipconnect.de) has joined
<glguy>	dsal: FS means "file separator"
<edwardk>	which is used to characterize a traversal without introducing extra _|_'s unlike the "FunList" encoding will
<glguy>	http://www.theasciicode.com.ar/ascii-control-characters/file-separator-ascii-code-28.html
<dsal>	Oh, yeah.  I just looked it up in man ascii
*	mizu_no_oto has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<edwardk>	(infinite) moore machines are comonads, data Moore a b = Moore b (a -> Moore a b) -- but that is actually the same as the Fold definition I gave! (just less efficient)
<edwardk>	koz_: https://www.schoolofhaskell.com/user/edwardk/cellular-automata <- did you see this series?
*	jfischoff has quit (Quit: jfischoff)
<edwardk>	i seem to keep referencing it on here lately
*	xcmw (~textual@2605:a000:132b:20d8:40e4:ac62:d7d2:e76e) has joined
<koz_>	edwardk: No, I haven't. Time to append to my reading list again!
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
<Welkin>	didn't jle` write a series on Auto?
<Welkin>	is that the same thing? (I think this was based on Arrow)
<edwardk>	https://www.schoolofhaskell.com/user/edwardk/parallel-crc builds on the second part. https://www.schoolofhaskell.com/user/edwardk/conquering-folds builds further on the approach talked about there to tackle the third homomorphism theorem
*	uglyfigurine (~uglyfigur@73.110.34.152) has joined
<crucify_me>	going to arrive as a secret additional parameter to your function ? so you mean that, in this case a product is calculated from the two tuple values, which adds functionality ?
<Cale>	crucify_me: Or it could just be multiple arguments
<Welkin>	crucify_me: from your example, it means that `a` must be an instance of both Real AND Enum, not just one or the other
*	algebra has quit (Ping timeout: 260 seconds)
*	erisco (~erisco@198-84-159-71.cpe.teksavvy.com) has joined
<Cale>	and the way the compiler's going to deal with that is by passing along a couple of records: one containing the operations for the Real type class (for a), and the other containing the operations for Enum (for a)
<Welkin>	erisco: did anyone use your package yet?
*	tommd (~tommd@75-164-224-54.ptld.qwest.net) has joined
<Cale>	Welkin: which package?
<Welkin>	Cale: lol :D
<erisco>	14 downloads, so maybe
<Welkin>	http://hackage.haskell.org/package/control-dotdotdot
<Cale>	oh no...
<Cale>	hahaha
*	Wizek_ has quit (Ping timeout: 240 seconds)
<Cale>	This should be Acme.DotDotDot
*	dec0n has quit (Ping timeout: 246 seconds)
<erisco>	yeah but I can actually see myself using it in the right situation :P
*	uglyfigurine has quit (Ping timeout: 246 seconds)
*	path[l] has quit (Ping timeout: 248 seconds)
<crucify_me>	Cale so do both Real and Enum have numeric / algebraic values there, that are multiplied and / or used on arguments 
<crucify_me>	?
<Cale>	crucify_me: Multiplied?
*	dec0n (~dec0n@draugas.gis-centras.lt) has joined
<Cale>	crucify_me: The sense of the word "product" is that of "Cartesian product" 
<Cale>	i.e. if A and B are sets, then A × B is the set of all pairs (a,b) with a in A and b in B.
*	chocopuff (~chocopuff@unaffiliated/chocopuff) has joined
*	mmhat has quit (Quit: WeeChat 1.9)
<Cale>	Note that if A and B happen to be finite sets, then if A has n elements and B has m elements, A × B will have n*m elements, hence the name "product"
<jchia>	Question about containers package. Since 1. there is Enum instance for Int, 2. there is toEnum & fromEnum to freely convert between Int & Enum, 3. Enum is more general than Int, why don't they define EnumMap instead of IntMap to serve more use cases? Functions that depend on the numeric properties (like the Ordered instance) like lookupLT & lookupGT can have an Ordered constraint.
<koz_>	jchia: Implementation-specific stuff for Ints.
<koz_>	Basically, IntMap is done in a way that only makes sense on Ints.
<Cale>	koz_: jchia is asking why not use the Enum operations to automatically convert back and forth from Int
<jchia>	koz_: For example? It seems that under the hood, an Enum can be treated as an Int.
*	chao-tic (~chao@218.101.54.122) has joined
<koz_>	jchia: I guess you're right.
<koz_>	Spoke too soon, it would appear. :P
*	kvda has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<Cale>	This would work, but unfortunately, failure to specialise might result in everything being a whole lot slower even in cases where the type of index actually is Int
*	jmcarthur (~jmcarthur@2601:86:100:1620:11f3:5a14:fc98:ceb1) has joined
<Cale>	But EnumMap could easily be provided anyway
*	jfischoff (~jonathanf@pool-74-101-197-223.nycmny.fios.verizon.net) has joined
<koz_>	Cale: Someone should.
<Cale>	I bet it's on Hackage already
<Cale>	http://hackage.haskell.org/package/EnumMap yep
<jchia>	I suppose if the Enum's toEnum & fromEnum are expensive, then an EnumMap implementation that effectively wraps around the IntMap implementation using toEnum & fromEnum would have poor performance, but it doesn't hurt the Int case.
<crucify_me>	Cale thank you, so we are dealing with a finite set since enumerable is finite..
<Cale>	jchia: You could have polymorphic code which defers the decision about which instance gets used, and that might result in failure to inline and then unbox the eventual Int arguments...
*	silverjam (~Mutter@c-24-4-236-171.hsd1.ca.comcast.net) has joined
<jchia>	Cale: Yeah, but I wonder why it's not in container, which is more commonly used.
*	YellowOnion has quit (Read error: Connection reset by peer)
*	jfischoff has quit (Client Quit)
<jchia>	Cale: Do you mean that that EnumMap may suffer from failure-to-optimize problems that IntMap wouldn't?
<Cale>	jchia: Actually, we've been struggling with that kind of thing a whole lot in one of our projects where I work, and we've got some benchmarks where if Monad instances fail to be specialised, code runs 60x slower.
*	pparkkin has quit (Read error: Connection reset by peer)
*	kvda (~kvda@unaffiliated/kvda) has joined
<crucify_me>	sorry no reals are infinite
*	kvda has quit (Client Quit)
<Cale>	crucify_me: Well, you're talking about the type of all implementations of the Real typeclass operations
<Cale>	(Real is poorly named, it's really for types which can be converted to Rational numbers)
<Cale>	(i.e. most approximate numeric types which aren't complex)
*	silverjam has quit (Client Quit)
<Cale>	(but ironically, not actual computable real types)
*	jfischoff (~jonathanf@pool-74-101-197-223.nycmny.fios.verizon.net) has joined
*	shafox (~textual@106.51.130.198) has joined
<Cale>	:t toRational
<lambdabot>	Real a => a -> Rational
*	Zenghui (~Zenghui@104.207.155.180) has joined
*	kvda (~kvda@unaffiliated/kvda) has joined
*	toblorone (~toblorone@mail.puretechit.com) has joined
<Cale>	class (Num a, Ord a) => Real a where toRational :: a -> Rational
<Cale>	So you can imagine that the compiler is going to implement this type class with a record type like:
<xa0>	@pl \x -> a (b $ c x)
<lambdabot>	a . b . c
*	harfangk (~quassel@222.110.160.66) has joined
*	kvda has quit (Client Quit)
<Cale>	data RealD a = RealD { toRational :: a -> Rational, numDict :: NumD a, ordDict :: OrdD a }
<crucify_me>	Cale can't really follow but really appreciate your efforts..
<Cale>	and then whenever your definition has a constraint like  Real a => ...
*	jmcarthur has quit (Ping timeout: 246 seconds)
<Cale>	that gets compiled into a function parameter like
<Cale>	RealD a -> ...
<Cale>	and wherever you might use toRational, it extracts the corresponding field of the record that was passed in to obtain the operation
*	sellout- has quit (Quit: Leaving.)
<Cale>	(and if you use Ord or Num operations, it can unpack those as well)
*	pavonia (~user@unaffiliated/siracusa) has joined
*	pfurla has quit (Quit: Textual IRC Client: www.textualapp.com)
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<crucify_me>	so in layman's terms, when you have a product type (indicated by the tuple construction) you generate values through multiplication that are used by haskell to calculate / evaluate more efficiently, for example?
*	pfurla (~textual@ool-182ed51a.dyn.optonline.net) has joined
<crucify_me>	Cale
<xa0>	@pl \x -> map (a . map $ flip c x) d
<lambdabot>	flip map d . a . map . flip c
<Cale>	It's not numerical multiplication
<Cale>	It's only an abstract sort of "multiplication" of types
<crucify_me>	Cale, dang ,can't wait to understand it. thanks!!
<Cale>	Where the product of two types A and B is the type of pairs (a,b) where a has type A, and b has type B
<Cale>	That's all it means
<erisco>	count the inhabitants
*	s3mi0 has quit ()
*	louispan (~textual@203.38.203.134) has joined
*	jathan (~jathan@189.216.181.191) has joined
*	lambduh has quit (Ping timeout: 260 seconds)
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
<crucify_me>	so its a third type that is generated, that has a sort of signature that is used by the interpreter/ compiler 
*	jathan has quit (Remote host closed the connection)
*	mizu_no_oto has quit (Quit: Computer has gone to sleep.)
*	crobbins has quit (Remote host closed the connection)
<Cale>	Yeah, maybe we're talking about too many things at once here. I was talking about the implementation of type classes, but you can also just talk about product or tuple types of ordinary types separately.
*	ldd001 has quit ()
*	jathan (~jathan@189.216.181.191) has joined
<Cale>	So if we have data Colour = White | Black and data Piece = Pawn | Knight | Bishop | Rook | Queen | King
<Cale>	Then the type which in Haskell we'd write as (Colour, Piece)
*	shafox has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<Cale>	Or more generally, might be written Colour × Piece
*	uglyfigurine (~uglyfigur@73.110.34.152) has joined
*	ackpacket (~ackpacket@unaffiliated/ackpacket) has joined
<Cale>	will consist of the pairs (c,p) where c :: Colour and p :: Piece
*	justanotheruser has quit (Client Quit)
<Cale>	e.g. (Black, Knight)
*	jathan has quit (Client Quit)
<Cale>	Colour has two (defined) elements, and Piece has 6
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
<crucify_me>	Cale thanks so much . getting kicked out of cafe. more drama later. pax
<Cale>	Notice that (Colour, Piece) has 12
<Cale>	= 2 * 6
*	renzhi has quit (Quit: WeeChat 1.9)
<Cale>	see you!
*	joe9_ has quit (Remote host closed the connection)
<crucify_me>	got that 6 pieces. thanks again
*	jathan (~jathan@189.216.181.191) has joined
*	justan0theruser has quit (Ping timeout: 264 seconds)
*	joe9 (~user@ip72-200-72-19.tc.ph.cox.net) has joined
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Wed Aug 16 19:56:47 2017

**** BEGIN LOGGING AT Thu Aug 17 19:24:47 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:46:51 2017)
*	Channel #haskell url: http://www.haskell.org/
*	SkyPatrol_ has quit (Ping timeout: 240 seconds)
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	alasi (uid197723@gateway/web/irccloud.com/x-avkjozqdmsgzibys) has joined
<crucify_me>	https://ptpb.pw/Hh3K  hi this won't work. I'm getting error : No explicit implementation for either ‘Prelude.compare’ or ‘<=’   .. anything wrong? it's precisely the book's example
*	MoarSpaceFi (~Forgot_my@65.126.126.193) has joined
<pacak>	crucify_me: move compare to the right
*	Jonno_FTW (~come@zion.sx) has joined
<glguy>	crucify_me: same problem as your previous (==) implementation
<pacak>	crucify_me: That is if we are talking about syntax. Other than that - this instance is wrong in some other ways. You won't be able to use type as a key in a Map.
*	rblaze (~blaze@209.6.152.108) has joined
<crucify_me>	glguy, pacak sorry not following. its a book example to the T
<pacak>	crucify_me: https://pics.me.me/impossibru-16341104.png
<glguy>	crucify_me: It doesn't matter what's in the book, pacak told you how to fix it
<penteract>	they mean indent it
<crucify_me>	penteract dang thanks ALL -- stupid of me. pacak other problems. ?
<pacak>	crucify_me: Haskell is somewhat indentation sensitive.
*	rblaze has quit (Client Quit)
<pacak>	crucify_me: It claims that Tue `compare` Wed = EQ
*	rblaze (~blaze@209.6.152.108) has joined
*	juhp (~juhp@redhat/juhp) has joined
<pacak>	And a bunch of other combinations.
<pacak>	Eq and Ord instances disagree on that in fact.
*	dec0n (~dec0n@draugas.gis-centras.lt) has joined
*	fiyahbun (~kalypzo@c-73-85-160-4.hsd1.fl.comcast.net) has joined
<crucify_me>	sorry gl*guy referred to earlier confusion I had with indents. I couldn't glean that from our conversation, yeah pacak I foresaw that, the example is trying to show that Friday is the "best" day. but that last compare is confusing
<pacak>	Friday is the best day? What kind of herecy is it????
<pacak>	I'd go with Saturday
<crucify_me>	heresy ! I like tuesday since no tourists are around
<pacak>	If you want to put it first in sorting order - reorder constructors
*	fiyahbun (~kalypzo@c-73-85-160-4.hsd1.fl.comcast.net) has left ("WeeChat 1.9")
<pacak>	Those basic instances are used in many places and it's nice to have them correct.
<crucify_me>	pacak but isn't that last entry illogical for the purpose of the prog?
*	rickerbh (~rickerbh@1.129.97.193) has joined
<pacak>	Last entry is wrong
<penteract>	The code will run, but you better not try to sort a list of them.
*	remexre_ (~remexre@c-107-4-203-126.hsd1.mn.comcast.net) has joined
*	theelous3 has quit (Ping timeout: 240 seconds)
<crucify_me>	oh, but it goes on to say that all other comparisons are equal, since Friday alone is the 'best' day
<crucify_me>	so its just clever to put that there
*	remexre has quit (Ping timeout: 260 seconds)
<penteract>	but the automatically derived instance for Eq contradicts that
<pacak>	Put them in Map as keys and will be surprised.
*	mayhew has quit (Remote host closed the connection)
<pacak>	Words are hard.
<penteract>	so if code uses (==), it will think they're different
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:415:82be:b2de:25c7) has joined
<crucify_me>	penteract, re: that, why won't this work if Ord is added to the data declaration in the parens .. such as ...
<crucify_me>	ie in the previous example..
<crucify_me>	we have deriving (Eq, Ord, Show)
<pacak>	crucify_me: How about data DayOfWeek = Friday | InferiourDays InferiourDay ; data InferiourDay = Mon | Tue ...
*	remexre_ is now known as remexre
<penteract>	Tf you derive Ord like that, you can't redefine it later.
<crucify_me>	this is encapsulated in a where statement, so at least it makes some sense to this beginner
<crucify_me>	so thanks kindly everyone
*	juhp has quit (Quit: juhp)
*	fcpga_te (~fcpga_te@203-174-128-178.syd.static-ipl.aapt.com.au) has joined
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	beekill has quit (Remote host closed the connection)
*	halogenandtoast has quit (Ping timeout: 240 seconds)
*	pavonia (~user@unaffiliated/siracusa) has joined
*	minn (~dportin@pool-71-163-97-83.washdc.fios.verizon.net) has joined
*	juhp (~juhp@redhat/juhp) has joined
<remexre>	Is there a way to get stack to create an executable in the working directory?
*	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined
*	rickerbh (~rickerbh@1.129.97.193) has joined
<penteract>	I've created symlinks.
<remexre>	In what manner?
**** ENDING LOGGING AT Thu Aug 17 19:52:43 2017

**** BEGIN LOGGING AT Sun Aug 20 11:13:45 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<srhb>	mustafa_: I think you should probably consider doing a better benchmark. Are you sending the same headers etc.
<srhb>	mustafa_: Testing out on a 100MB binary (already compressed) file from elsewhere, I can detect no noticeable difference between wreq and curl.
*	epsilonhalbe (~epsilonha@84-113-106-42.cable.dynamic.surfer.at) has left
<srhb>	mustafa_: My guess is you're measuring different things.
*	kadoban (~mud@unaffiliated/kadoban) has joined
*	eacameron has quit (Ping timeout: 240 seconds)
<mustafa_>	srhb, this difference only relevant with the given url, for example both of them gives close result what I try with https://google.com, https://twitter.com 
<mustafa_>	shrb, please look at the comments
*	zero_byte (~zer0@cst-prg-236-254.cust.vodafone.cz) has joined
*	teggi has quit (Quit: Leaving...)
*	atec (~Mutter@pool-71-162-215-141.phlapa.fios.verizon.net) has joined
<srhb>	mustafa_: Yes, I've seen the comments.
*	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has joined
*	atec has quit (Client Quit)
*	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined
<mustafa_>	srhb, erisco, I'm going to try another library
<mustafa_>	srhb, erisco, I tried with http-conduit package, nothing changed.
*	toblorone (~toblorone@142-254-30-254.dsl.dynamic.fusionbroadband.com) has joined
*	toblorone has quit (Remote host closed the connection)
*	toblorone (~toblorone@142-254-30-254.dsl.dynamic.fusionbroadband.com) has joined
<srhb>	mustafa_: You could try dumping the TCP data and try to figure out if the http communication is actually identical in both cases.
<erisco>	well cool, then either they are mutually using the same dependency that is messed up or it is something other than libraries (likely)
*	Jeanne-Kamikaze (~Jeanne-Ka@2601:647:4300:f30f:8ceb:21ee:64e3:e4d6) has joined
*	xcmw (~textual@2605:a000:132b:20d8:b0ce:4ca2:ab2e:1bee) has joined
<Zemyla>	So how do I introduce changes to base?
<erisco>	connections
<mustafa_>	srhb, I'll try tcp dump
<srhb>	mustafa_: Good idea. Unfortunately I can't check since I appear to be blocked from the site.
<platz>	Is it possible to give a data declaration with no type parameters a kind other than *? e.g. something like "data K; data M :: K"
<[exa]>	erisco, mustafa_, you were talking about some paper that flattens the transformer-induced stacks of effect systems, could you please share a link? I can't find it in scrollback :(
<platz>	ghc says "Kind signature on data type declaration has non-* return kind"
*	toblorone has quit (Ping timeout: 240 seconds)
<erisco>	[exa], do you use DDG?
<lyxia>	Zemyla: ask on the libraries ML
<[exa]>	nope, I just like the general idea of that.
*	toblorone (~toblorone@142-254-30-254.dsl.dynamic.fusionbroadband.com) has joined
<[exa]>	(what's DDG acronym anyway?)
<erisco>	platz, if you want to have a custom kind then use DataKinds
*	albertus1 has quit (Ping timeout: 240 seconds)
<erisco>	[exa], DuckDuckGo, the search engine that doesn't track you (they promise)
*	shafox has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<[exa]>	yeah, how do you know? :D
<SansFr[m]>	also ddg is not really good
<platz>	erisco: the error seems to occurs even with DatKinds?
<erisco>	DDG does fine for me, and if I don't get what I want then Google is just a bang pattern ;)
<hpc>	i tend to use bang patterns first
<SansFr[m]>	I found myself using !g all the time
<hpc>	ddg is great as a search engine consolidator
<SansFr[m]>	and then switched to searx
<erisco>	platz, because that notation is not what DataKinds supports. With DataKinds you write an ordinary data type and then it will promote it to the type level.
<SansFr[m]>	searx.me
<hexagoxel>	cocreature: only the "boring" version makes sense for `rewrite`, i am mildly certain now: (Exp2 a a -> Maybe (Exp2 a a)) -> Exp2 a a -> Exp2 a a
<hpc>	before i resort to !g, i will use !a or !hoogle or whatever
<erisco>	[exa], anyways here it is http://cseweb.ucsd.edu/~rtate/effectstr.pdf
<[exa]>	thanks :]
<erisco>	the paper is not explicitly on flattening monad transformer stacks but I think the application to that is clear
<hexagoxel>	if the transformation function is supposed to be applicable multiple times, so other approaches don't work out too well.
*	werner291 (~werner@ip-213-49-58-10.dsl.scarlet.be) has joined
*	mustafa_ has quit (Quit: Page closed)
<platz>	erisco: I understand with DataKinds "data K" promotes K to the type level.  then i want to say that "data M" has kind "K"
<platz>	instead of kind "*"
<erisco>	platz, the type constructor becomes a kind constructor and the data constructors become type constructors. That is how the promotion works.
<monochrom>	platz, promotes K to the kind level.
*	argent0 has quit (Ping timeout: 248 seconds)
<monochrom>	Next, you should start with "data K = M". Then you have type M of kind K.
<[exa]>	erisco: it's very related to my problem here, contains a lot of naming I'd otherwise need to reinvent badly.
*	Wizek has quit (Quit: Connection closed for inactivity)
*	simukis has quit (Read error: Connection reset by peer)
<erisco>	[exa], what problem is that? I was reading it because I wanted some idea where language research is at
<remexre>	I'm trying to "lift" an (ExceptT Error IO Foo) to a (ExceptT Error (StateT Bar IO) Baz); I've tried lift, fmap lift, and fmap return, and still nothing; is there a standard idiom I'm missing here?
*	mustafa_ (b0580d9e@gateway/web/freenode/ip.176.88.13.158) has joined
<monochrom>	It is also the only way to declare types to be of your kind.
*	simukis (~simukis_@78-60-58-6.static.zebra.lt) has joined
*	Deide (~Deide@94.12.221.62) has joined
<erisco>	and it caught my eye because a lot of papers are talking about effect systems, and this paper purports to give a semantics, great
<[exa]>	erisco: trying to destroy the implicit GC for good :D
<erisco>	regions?
*	jellowj_ has quit (Ping timeout: 240 seconds)
<[exa]>	linearity, defunctionalization, some c++style wrapping of the painful parts
<mustafa_>	shrb, erisco, I tried tcpdump, and it only prints when I started to run executable, after a while tcpdump prints nothing, but program continues to work.
<erisco>	mustafa_, I can't help you debug SSL and HTTPS... I know a little about it but not enough
<mustafa_>	shrb, erisco, can it be related with encoding of the html page? it is utf-8 page and it has turkish characters....
<[exa]>	mustafa_: you might want to try ettercap, it can un-encrypt https if you provide keys
<[exa]>	(no idea whether it's still maintained though)
<erisco>	un-encrypt... if only there was a single word for that
<[exa]>	it's actually not decryption, just a weird hack
<mustafa_>	exa, I think it is not related with https, as I can see from the tcpdump it receives the data perfectly, but i think it is related with the content of the page
<[exa]>	it was an idea :]
<mustafa_>	do haskell have any problem with latin-extended characters?
*	ziocroc (~ziocroc@151.74.40.10) has joined
<erisco>	mustafa_, I can only see the encoding being relevant if it is being passed through a decoder, but if you're just saving it to file I don't see why that would be happening
<mustafa_>	erisco, hımmm yes you are right
<hpc>	mustafa_: as in latin-1 encoding, or unicode characters?
<erisco>	it comes in as ByteString and is written to file as a ByteString
<hpc>	oh, nvm
*	lkolstad has quit (Ping timeout: 240 seconds)
<monochrom>	Haskell does not have a problem. But your OS may.
*	albertus1 (~seb@x55b4d7dd.dyn.telefonica.de) has joined
<monochrom>	For example Windows console has an anti-Unicode default setting.
<naddeoa>	If I have a type class of Foo and  two instances of it, Bar and Baz, can I pass Bar and Baz in where a Foo is expected?
<naddeoa>	particularly in lists
*	gawen_ has quit (Remote host closed the connection)
<mustafa_>	erisco, I also tried with another turkish website, and I don't see this problem, it fetched the page under 200ms (real).
<[exa]>	naddeoa: "pass Bar in" is like "argument is of type in class Bar" or "function has Bar in type signature" ?
<mustafa_>	This very interesting, by the way thanks for the comments :)
*	Garreett (5ce8f14a@gateway/web/freenode/ip.92.232.241.74) has joined
*	merijn has quit (Ping timeout: 240 seconds)
<[exa]>	naddeoa: first one should work, second one will probably complain about "context too weak"
*	simukis_ (~simukis_@78-60-58-6.static.zebra.lt) has joined
<naddeoa>	Why doesn't this work "myShowable :: Show a => a
<naddeoa>	myShowable = "string""
<remexre>	naddeoa: that declares that myShowable is a member of *every* type that is Show
<remexre>	rather than *any* type that is Show
<[exa]>	the type signature is too general, it's actually monomorphic.
<monochrom>	Because I'm going to use myShowable as (myShowable :: Int) and you can't stop me.
*	simukis has quit (Ping timeout: 248 seconds)
<naddeoa>	because Int is showable
<monochrom>	The type variable means the user (me) choose. You, the author, does not choose.
<naddeoa>	what is the any syntax?
<monochrom>	There is no "any syntax".
<hpc>	just press the any key
<monochrom>	"any" is ambiguous.
*	arthurwong has quit (Remote host closed the connection)
<naddeoa>	What is the equivalent of an OOP language's interface types where subypes can be in collection of the interface type?
<monochrom>	"any" is ambiguous because it still doesn't say which side (the user? the author?) makes the choice, which is the whole point.
*	Icewing (~Icewing@unaffiliated/icewing) has joined
<[exa]>	naddeoa: can you provide c++/java equivalent of that idea?
<naddeoa>	Sure
<monochrom>	There is none.
<naddeoa>	So, I can't have a List of things that I can call showable on in Haskell for example?
<monochrom>	Right.
<naddeoa>	if all I care about is showing them?
*	tomphp (~tomphp@cpc73822-dals21-2-0-cust404.20-2.cable.virginm.net) has joined
<monochrom>	@quote monochrom river
<lambdabot>	monochrom says: You are to send a boolean, a character, and an integer across the river. The list for transporting across the river can hold 3 items, in fact any number of items you like, but they
<lambdabot>	must all be of the same type. On the bright side, after crossing the river, the boolean, the character, and the integer need only be put on show. How many trips do you need? Solution: one trip, [
<lambdabot>	show the_boolean, show the_character, show the_integer]
<naddeoa>	so then there is no type inheritance 
<monochrom>	Right. None.
<naddeoa>	interesting
<monochrom>	Haskell is not a subtyping language.
<naddeoa>	I guess somehow that's ok
*	grbtzl_ has quit (Ping timeout: 260 seconds)
*	zero_byte has quit (Ping timeout: 240 seconds)
<ignamv>	the objects are immutable so why delay showing them?
<monochrom>	Subtyping is clearly not the only solution to any of the world's software engineering problems.
*	kadoban has quit (Ping timeout: 246 seconds)
*	tholen (~mo@2001:5b0:50d9:88e8:7bbc:932e:3486:3cdf) has left
*	mustafa_ has quit (Quit: Page closed)
<naddeoa>	So, in cases where I want people to be able to make stuff and I provide functionality on that stuff, what would we do in haskell?
<naddeoa>	Tell them to remember to implement a class on that type?
<monochrom>	No. A record of values and functions.
<naddeoa>	Can you elaborate?
<Tuplanolla>	:t filter -- Like this, naddeoa.
<lambdabot>	(a -> Bool) -> [a] -> [a]
<erisco>	monochrom do you have a riddle saved for every dilemma?
<monochrom>	Not yet.
<naddeoa>	lol
<[exa]>	:]
<naddeoa>	Tuplanolla: you're saying just use the generic parameters?
*	hexadecimal-1541 (~hexadecim@2601:282:a03:f1f0:3830:48a0:cee6:54fa) has joined
<[exa]>	naddeoa: if I get you correctly, you want to write generic code that will work on other people's data structures?
*	hexadecimal-1540 (~hexadecim@2601:282:a03:f1f0:3830:48a0:cee6:54fa) has joined
<naddeoa>	right
<naddeoa>	well, not specifically, but it would mean that as well
<naddeoa>	basically, an OOP interface
*	shangxiao has quit (Ping timeout: 240 seconds)
<[exa]>	naddeoa: then either don't give type signatures (and your will be generic enough for free), or call the required property a class name and require that classes' members
<[exa]>	naddeoa: similar approach is e.g. "Foldable"
<[exa]>	(at least it has more useful examples than Show)
*	gawen (~gawen@movzbl.root.sx) has joined
<monochrom>	Maybe a class is good. It depends on what you mean by "make stuff" and "functionality on stuff". At this point it's all fluff, not stuff.
<monochrom>	The problem with how most people approach software engineering.
<Tuplanolla>	You might need a class, but often a function as an argument is enough, naddeoa.
*	lkolstad (~ljk@c-24-16-12-195.hsd1.wa.comcast.net) has joined
<[exa]>	naddeoa: btw I guess that by "OOP interface" you mean something like purely virtual class from C++?
*	tobloron_ (~toblorone@142-254-30-254.dsl.dynamic.fusionbroadband.com) has joined
<naddeoa>	Closer to Java
<[exa]>	so the concept "Objects of type X have this interface implemented"
<nshepperd>	oop is only necessary in languages that don't have first class functions
*	pavonia has quit (Quit: Bye!)
*	kirillow_ has quit (Ping timeout: 248 seconds)
<naddeoa>	It just says "this type has these things" and I can do this "List<Interface> bigList = sutypeAList ++ subtypeBList"
<naddeoa>	I'm thinking this is a side effect of my choice to use a type class instead of a big data
<Tuplanolla>	Contrast `HasInt s => s -> Result` with `(s -> Int) -> s -> Result`, naddeoa.
*	khatri (~khatri@106.51.39.217) has joined
*	hackagebot executor 0.0.2 – Shell helpers – https://hackage.haskell.org/package/executor
*	hackagebot currencies 0.1.1.0 – Currencies representation, pretty printing and conversion – https://hackage.haskell.org/package/currencies
*	tomphp has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<naddeoa>	lol I think that's above me Tuplanolla
*	toblorone has quit (Ping timeout: 240 seconds)
<[exa]>	naddeoa: well multi-type lists are doable with existential types AFAIK, but it's usually an overkill (observe that this is the reason for RTTI in otherwise pretty much purified C++)
*	tobloron_ has quit (Ping timeout: 240 seconds)
*	toblorone (~toblorone@142-254-30-254.dsl.dynamic.fusionbroadband.com) has joined
<[exa]>	the usual style is to name all the possibilities of the list contents as variants of a single datatype. Not very module-extensible, but usually brings some clarity to the code.
<naddeoa>	So I'll make a new 'data' for this purpose essentially
<nshepperd>	naddeoa: your function on the user's type can just accept extra arguments for all the "methods" that you need on that type
<naddeoa>	Haskell is pretty old and people don't seem to miss that ability. I'll have to just think about it differently I guess
<naddeoa>	It seems like all the pieces are there
*	toblorone has quit (Remote host closed the connection)
<remexre>	naddeoa: this might be helpful to read: https://two-wrongs.com/dynamic-dispatch-in-haskell-how-to-make-code-extendable
<monochrom>	No, OOP is older.
<naddeoa>	thanks I'll check that out
<[exa]>	naddeoa: also, functional trick is to use the functions. Do you know you caan transparently "save" any kind of information in interface functions?
*	vlatkoB_ has quit (Remote host closed the connection)
<naddeoa>	exe, can you go on?
<naddeoa>	remexre, that looks like exactly what I was doing
<remexre>	naddeoa: the third ("Dynamic Dispatch in Haskell") section?
<[exa]>	naddeoa: the funny example is something like this:  addToList l a = \s -> if s==a then True else l s  ;  emptyList = False ;  isInList l a = l a
*	M6dEEp (~deepies@ip68-227-98-157.ok.ok.cox.net) has joined
<naddeoa>	remexre just the setup so far, I haven't gotten to the solutions. I started with a big data, then moved to type classes and then ran into the issue he's talking gabout
<remexre>	Yeah, the third section basically describes the idiomatic solution
*	raynold (uid201163@gateway/web/irccloud.com/x-hozpaizcpgrtbkcn) has joined
<nshepperd>	naddeoa: in java you might do 'printAListOfThings(List<Showable>)', in haskell you might do 'printAListOfThings :: (a -> String) -> [a] -> IO ()'
<nshepperd>	or indeed 'Show a => [a] -> IO ()', or '[String] -> IO ()'
*	darlan (~darlan@191.191.127.66) has joined
<[exa]>	naddeoa: in other words, if the interface is the same and only the form of data differs, save the data in the interface and, instead of changing the data, modify the interface to reflect these changes
*	darlan has quit (Client Quit)
<nshepperd>	all that java interfaces do really is provide functions. you can just give those as arguments instead
<[exa]>	naddeoa: looks terribly wrong from java point of view, but it's surprisingly efficient in Haskell
*	takle_ has quit (Remote host closed the connection)
<naddeoa>	nshepperd, yeah that seems ok, but I was hoping to combine different collections of Show into a single one and then just run map on it
*	chaosmasttter (~chaosmast@p4FF1C1B0.dip0.t-ipconnect.de) has joined
*	Zialus has quit (Ping timeout: 240 seconds)
*	marvin2 (~m@cpe-188-129-117-22.dynamic.amis.hr) has joined
*	mk_modrzew (~Michal@83.220.118.66.umts.static.t-mobile.pl) has joined
<Logio>	naddeoa: only collections of a single concrete type are possible, so you'll need to apply show on the collections beforehand
*	Zialus (~RMF@174.203.60.94.rev.vodafone.pt) has joined
<Logio>	(or possibly something else that maps each collection to its')
<Logio>	*to a single type, I meant
*	lkolstad has quit (Ping timeout: 248 seconds)
<naddeoa>	So this must mean that when you make a type class you don't actually create a new type right
*	SpinTensor has quit (Quit: WeeChat 1.9)
<Logio>	correct
*	werner291 has quit (Ping timeout: 240 seconds)
<naddeoa>	Would that be bad?
<naddeoa>	Do people specifically not want Haskell to be able to do that/
<naddeoa>	(use type classes as types in and of themselves)
*	slacko_ (~davi@151.45.37.80) has joined
<tdammers>	how would that even work?
*	Camm (~camm@186.69.141.31) has joined
<erisco>	there is something called existential type classes where classes are types
<dolio>	Type classes aren't types.
<geekosaur>	typeclasses are not intended to be OOP types
<geekosaur>	@google making ad hoc polymorphism less ad hoc
<lambdabot>	https://people.csail.mit.edu/dnj/teaching/6898/papers/wadler88.pdf
<erisco>	which makes them like OO types
<geekosaur>	it's a way to constrain polymorphism
<nshepperd>	usually you do not actually need to put different types of object in the same list. Generally 'a list of what?' has a single answer once you think about it harder
<tdammers>	erisco: if you squint a lot
*	howdoi has quit (Quit: Connection closed for inactivity)
<tdammers>	nshepperd: that, or else you can reformulate the problem as 'what are you going to do with the things in the list?'
<erisco>	always wear your safety squints before looking at bad analogies
<naddeoa>	Well, if type classes made types then those questions wouldn't be hard to answer right? Its a type and the only functions that work on it are ones defined in the type class
<naddeoa>	Would it be any different from data types?
*	Big_G (~Big_G@75-165-48-101.tukw.qwest.net) has joined
*	MaxDeepfield (~MaxDeepfi@91.105.53.239) has joined
<nshepperd>	these questions aren't hard to answer, you just need to unlearn oop
<nshepperd>	type classes aren't types, they are predicates
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<tdammers>	naddeoa: that's not even how types work, actual types that is, not the stuff they teach you in OOP
<nshepperd>	'type a is Showable' is a fact
*	M6dEEp has quit (Remote host closed the connection)
<Zemyla>	But yeah, I was thinking that there really should be a type constructor added to the internal P type in Text.ParserCombinators.ReadP.
*	Achylles (~Achylles@152.249.35.133) has joined
*	MaxDeepfield has quit (Remote host closed the connection)
<Zemyla>	It'd be data P a = ... {- stuff from before -} | Skip {-# UNPACK #-} !Int (P a).
*	M6dEEp (~deepies@ip68-227-98-157.ok.ok.cox.net) has joined
*	chaosmasttter has quit (Ping timeout: 240 seconds)
*	cerozool (~kafke@ip68-227-98-157.ok.ok.cox.net) has joined
*	Garreett has quit (Quit: Page closed)
*	slacko_ has quit (Ping timeout: 240 seconds)
*	gugah (~gugah@181.28.218.205) has joined
<erisco>	naddeoa, in OOP you can define functions which work on a class that are not methods of that class
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
<naddeoa>	right, because of inheritance
*	Gurkenglas_ (~Gurkengla@dslb-178-008-180-030.178.008.pools.vodafone-ip.de) has joined
<erisco>	no, because you can just define a function that has a parameter type of a particular class
*	kadoban (~mud@unaffiliated/kadoban) has joined
<erisco>	mind you instead of "function" they might call it "class method" or "static method" but it is close enough
<Zemyla>	And I think skipping that way is more efficient than doing Get repeatedly.
*	rrode has quit (Ping timeout: 240 seconds)
<nshepperd>	iirc rust has syntactic sugar for pretending that traits (the equivalent of type clases) are types. imo this is a bad feature that encourages the bad habit of not unlearning oop. and also makes accidental existentials too easy to write
<naddeoa>	oh you're talking about class methods erisco. In something like python it just passes the self variable to itself for you 
<erisco>	you do this all the time anyways... you have methods which have parameter types of classes other than the one the method belongs
*	tomphp (~tomphp@cpc73822-dals21-2-0-cust404.20-2.cable.virginm.net) has joined
<erisco>	in Python you can just define a function... doesn't have to be in a class
<erisco>	in Java and C# everything has to be stuck into a class, for some reason
*	cloudhead (~cloudhead@ip5f5bf105.dynamic.kabel-deutschland.de) has joined
*	lkolstad (~ljk@c-24-16-12-195.hsd1.wa.comcast.net) has joined
<erisco>	so you essentially have classes serving as no more than namespaces, but whatever
<tdammers>	erisco: the reason being that "OOP is good for you, you must use it at all times"
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sun Aug 20 12:40:54 2017

**** BEGIN LOGGING AT Mon Aug 21 12:33:29 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
<erisco>	drop (toIntegral x) (cycle [minBound..maxBound])  maybe?  or  [x..maxBound] ++ cycle [minBound..maxBound]
*	wildsebastian has quit (Ping timeout: 248 seconds)
<cocreature>	manek: sounds like you might be better off with a full-blown dsl rather than an edsl
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	zariuq (~zar@0x3e2c8759.mobile.telia.dk) has joined
<erisco>	oh I am thinking "fromEnum" ... apparently they think you can't have an enum of more than 2^63-1 items or whatever it is
*	wespiser (~wespiser@50.226.42.194) has joined
<erisco>	the drop version sure don't work XD
<asthasr>	looks like [el .. maxBound] ++ cycle [minBound .. maxBound] :: [Type] will work
<mud>	Yeah, that one seems like the best version. I was thinking: dropWhile (/= whatever) (cycle [minBound .. maxBound]), but I'd be a little worried using that on like Int for example.
<mud>	In that it'll probably take forever for no reason unless GHC is magic
*	BernhardPosselt has quit (Quit: Leaving.)
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
*	cdg (~cdg@65.50.0.4) has joined
*	Thra11 has quit (Quit: IRC for Sailfish 0.9)
*	vikram__________ has quit (Ping timeout: 255 seconds)
*	trigone (5a78a2d7@gateway/web/freenode/ip.90.120.162.215) has joined
*	S11001001 has quit (Ping timeout: 255 seconds)
*	amatecha has quit (Ping timeout: 246 seconds)
*	edwardk has quit (Read error: Connection reset by peer)
*	LnL has quit (Quit: exit 1)
*	tjpeden has quit (Ping timeout: 255 seconds)
<johnw>	Has anyone ever used CMake to build a C++ project that links in a Haskell-built library that was cabal install'd?
*	vikram__________ (sid62188@gateway/web/irccloud.com/x-fyznykzgbpehjbsf) has joined
*	S11001001 (sid42510@fsf/member/S11001001) has joined
*	cdg has quit (Ping timeout: 240 seconds)
*	wedens has quit (Ping timeout: 240 seconds)
*	relax (~john@c-76-24-9-4.hsd1.ma.comcast.net) has joined
*	dkov (~dkov@84-114-31-82.cable.dynamic.surfer.at) has joined
*	edwardk (sid47016@haskell/developer/edwardk) has joined
*	zph has quit (Ping timeout: 246 seconds)
*	relax (~john@c-76-24-9-4.hsd1.ma.comcast.net) has left
<trigone>	hi! which do you think would work fastest: f :: Word -> Word -> Word; f x y = max x y - min x y, or f x y = min (x - y) (y - x), or f x y = if x < y then y - x else x - y
*	big_num (~big_num@12.51.196.147) has joined
*	Tspoon (tlarjoma@hilla.kapsi.fi) has joined
*	amatecha (sid10006@gateway/web/irccloud.com/x-gsrhuldoiizxrkfy) has joined
*	wedens (uid222242@gateway/web/irccloud.com/x-qvvkuysigpjevmmh) has joined
*	LnL (~L0CKnL0aD@78-23-24-36.access.telenet.be) has joined
*	wizonesolutions has quit (Ping timeout: 276 seconds)
*	posco has quit (Ping timeout: 240 seconds)
*	thoradam has quit (Ping timeout: 255 seconds)
*	crownose has quit (Quit: WeeChat 1.7.1)
*	tjpeden (sid42254@gateway/web/irccloud.com/x-mpfnftwvikclojof) has joined
*	posco (sid14832@gateway/web/irccloud.com/x-tzcarevgabqeaeuq) has joined
*	zph (sid26878@gateway/web/irccloud.com/x-rxnplwpmuheqzzno) has joined
<shapr>	Any recommended tutorials on monad transformers?
*	wizonesolutions (sid27627@drupal.org/user/739994/view) has joined
<manek>	cocreature: I dont think so. Why based ony on question regarding callstacks you think this edsl is wrong approach ?
<asthasr>	trigone: I think the last is best. Fewer comparisons.
<manek>	shapr: https://en.wikibooks.org/wiki/Haskell/Monad_transformers
<manek>	shapr: its the best one
*	thoradam (sid154141@gateway/web/irccloud.com/x-yudjkicrihaqrpyb) has joined
*	eacameron has quit (Remote host closed the connection)
<trigone>	asthasr: hm yeah i guess you're right...
<asthasr>	trigone: but why not just abs $ x - y
<trigone>	asthasr: Word is unsigned
<asthasr>	oh, of course.
<Tuplanolla>	I'd expect the second one to be the best, trigone.
<trigone>	Tuplanolla: why?
<Tuplanolla>	Branching is usually the biggest cost and you can define a branchless minimum on unsigned integers, trigone.
<cocreature>	manek: users who are not proficient in Haskell and the requirement to produce good error messages suggest that a full-blown dsl might be better to satisfy your requirements
<Tuplanolla>	Then again, you're writing Haskell, so nothing is conclusive, trigone.
<trigone>	Tuplanolla: hm... and it's cheaper to substract than to compare?
<Tuplanolla>	I didn't say that, trigone.
<manek>	cocreature: I want it to be USABLE by such users. Moreover, I strongly believe in spreading knowledge about haskell, so any EDSL that is easy to grasp, yet brings you the power of HAskell allows us (as a Haskell community) to introduce Haskell to broader audience
<shapr>	my experience is that programmers of languages other than Haskell have to get over the "weird syntax" and then it's all doable.
<trigone>	Tuplanolla: oh... well in the first version, there's one substraction, and two comparison (at least i guess, unless there's some reduction of graph or sth), and in the second, two substractions and one comparison...
*	mnoonan__ (~mnoonan@cpe-69-201-46-148.twcny.res.rr.com) has joined
<Tuplanolla>	None of that matters, trigone.
*	robotroll has quit (Read error: Connection reset by peer)
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
<Tuplanolla>	@google what is branch prediction
<lambdabot>	https://en.wikipedia.org/wiki/Branch_predictor
*	_asc_ has quit (Ping timeout: 240 seconds)
*	argent0 (~aner@186.133.237.178) has joined
<ertes-w>	shapr: the best tutorial on monad transformers is your own editor: if you know how to implement State, now would be a good time to implement StateT
*	cdg (~cdg@157.166.173.4) has joined
*	LnL has quit (Quit: exit 1)
*	big_num has quit (Quit: WeeChat 1.7)
<trigone>	btw, what's the simplest way to force evaluation of the elements of a list, in constant memory?
<ertes-w>	trigone: full or WHNF?
<trigone>	Tuplanolla: can you just tell me why the second version would work better than the first? both lack conditionals, at least as far as i can see.
*	cdg_ (~cdg@157.166.173.4) has joined
<trigone>	ertes-w: i'd say WHNF though it's probably the same in my particular case
<trigone>	nevermind, yes WHNF
<ertes-w>	trigone: in the former case just use deepseq, in the latter the easiest way is to use a strategy
*	eacameron has quit (Ping timeout: 248 seconds)
<trigone>	ertes-w: hm which is the former ^^
<trigone>	?
<ertes-w>	full evaluation
<ertes-w>	partial evaluation with strategies: https://hackage.haskell.org/package/parallel-3.2.1.1/docs/Control-Seq.html
<trigone>	ertes-w: won't it save in memory the whole list?
<trigone>	*to memory
*	peterbecich (~peterbeci@75-142-96-216.static.mtpk.ca.charter.com) has joined
<ertes-w>	trigone: it will
*	ixti (~ixti@139.red-83-52-4.dynamicip.rima-tde.net) has joined
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	drewbert has quit (Remote host closed the connection)
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
<shapr>	by constant memory do you mean contiguous?
<Tuplanolla>	"Branching is usually the biggest cost and you can define a branchless minimum on unsigned integers, trigone."
*	LnL (~L0CKnL0aD@78-23-24-36.access.telenet.be) has joined
<trigone>	ertes-w: well when i said "in constant memory" i meant, without having to keep the whole list, just doing the job and discarding each element as soon as it's evaluated...
*	wildsebastian (~sebastian@ip5f5bf921.dynamic.kabel-deutschland.de) has joined
<ertes-w>	trigone: well, you could just fold the list
<ertes-w>	:t foldl' (\_ x -> x `seq` ()) ()
<lambdabot>	Foldable t1 => t1 t -> ()
<dolio>	Why even force the elements if you're just going to throw them away?
*	cdg has quit (Ping timeout: 248 seconds)
<trigone>	Tuplanolla: oh sorry i misread you, i understand! but how can i tell if min was written without branches? unless i have to define one by myself?
<trigone>	dolio: perf measurement
<Tuplanolla>	"Then again, you're writing Haskell, so nothing is conclusive, trigone."
<trigone>	Tuplanolla: so, i do have to define one by myself...
<ertes-w>	trigone: just be strict in the resulting ()
<ertes-w>	then you'll have evaluated each element
<trigone>	ertes-w: be strict in the resulting ()? i don't understand your sentence
<ertes-w>	sorry, i have to leave…  someone please fill in for me =)
<ertes-w>	bye
<trigone>	ertes-w: thx :) bye
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Mon Aug 21 13:04:05 2017

**** BEGIN LOGGING AT Tue Aug 22 11:56:38 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<Cale>	dminuoso: Generally lambdas extend as far to the right as possible
<dminuoso>	Oh hey Cale. Thank you for your lazy explanation yesterday, it was really helpful. :)
*	bodisiw (~bodiskw@128.163.237.36) has joined
*	London_jack (~user@2.26.164.178) has joined
<erisco>	a compliment only a programmer could appreciate
*	bodisiw has quit (Client Quit)
*	a3Dman has quit (Ping timeout: 240 seconds)
<London_jack>	How to translate this https://gist.github.com/nickspinale/27e63107bbe7890d17b2bf30d181c1f6 into Haskell using /singletons/
*	zorin-os has quit (Ping timeout: 255 seconds)
<erisco>	London_jack, what does the underscore mean on line 4?
*	hc_ (~ircd@unaffiliated/hc) has joined
<London_jack>	That it's inferred by the compiler
<London_jack>	or not used
<London_jack>	I'm primarily concerned with how to reflect term-level functions to the type level and back
*	leat has quit (Quit: leat)
<London_jack>	but I haven't really used the /singletons/ library 
<crucify_me>	hi the second function here seems to override the sort func. but still returns the head of a string. I don't understand what happens there, its like Ord class and sort cancel eachother out.
<crucify_me>	https://ptpb.pw/_y2P
<erisco>	I don't get that about the underscore
<erisco>	singletons has some TH facilities to translate term functions to type functions, but the capability is limited
<erisco>	and afaik you don't get to go from type functions back to term functions
*	hc has quit (Ping timeout: 240 seconds)
*	leat (~leat@188.162.49.215) has joined
<London_jack>	Will that be a restriction of -XDependentTypes as well?
<London_jack>	*on
<erisco>	there is possibly something in here (and related paper) for you but I only looked for a moment a couple days ago http://hackage.haskell.org/package/reflection-2.1.2/docs/Data-Reflection.html
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	hc_ has quit (Ping timeout: 248 seconds)
*	argent0 (~aner@201.180.112.104) has joined
<London_jack>	That would work but I did nae expect to have to go outside of singletons
<erisco>	and there could be facilities in singletons that I am not aware of
*	hc (~ircd@unaffiliated/hc) has joined
*	cyborg-one has quit (Ping timeout: 240 seconds)
*	iomotoko has quit (Ping timeout: 260 seconds)
<erisco>	you could presumably translate lambdas to biCCCs and then have a promotion to types and back again
<erisco>	I have also used GADTs to represent the desired functional relation
*	mmhat has quit (Quit: WeeChat 1.9)
*	freeman42z[m] has quit (Ping timeout: 240 seconds)
*	tobhe (~tobhe@141.84.69.68) has joined
*	hc has quit (Ping timeout: 240 seconds)
*	Fekinox has quit (Read error: Connection reset by peer)
*	JuanMiguel (~JuanMigue@251.red-88-9-136.dynamicip.rima-tde.net) has joined
*	JuanMiguel has quit (Remote host closed the connection)
*	Fekinox (~Fekinox@cpe-74-72-183-234.nyc.res.rr.com) has joined
*	hc (~ircd@unaffiliated/hc) has joined
<London_jack>	thanks, reflection will do for me
*	dhil has quit (Ping timeout: 240 seconds)
<bobismijnnaam>	hey everyone, I hope it's not inappropriate but i've been struggling with a problem for 2 days and I could use a pointer or two. Anyone here mind taking a look? https://www.reddit.com/r/haskell/comments/6vco7r/problem_with_uniplate_and_a_polymorphic_type/
<cocreature>	bobismijnnaam: that post shows only "[removed]"
<London_jack>	I don't know why it was removed
<dminuoso>	Okay, so a WHNF is if the body of the abstraction is not in normal form?
<erisco>	maybe that is the problem
<London_jack>	I'll approve it
<Tuplanolla>	It would probably fit Stack Overflow better.
<bobismijnnaam>	Wow, really? Did I do that? I certainly hope not
<bobismijnnaam>	I thought it would be interesting cause it seems kind of a fundamental problem
*	juanpauc_ (~juanpauca@host-186-101-150-143.netlife.ec) has joined
<bobismijnnaam>	Thanks London_Jack
*	xcmw (~textual@2605:a000:132b:20d8:30f4:f0f6:5be:cd9b) has joined
*	peacememories (~textual@e245-202.eduroam.tuwien.ac.at) has joined
*	toblorone (~toblorone@162.246.216.202) has joined
*	ccomb has quit (Ping timeout: 255 seconds)
<bobismijnnaam>	as a taster, it involves using a polymorhpic function with transformBi from uniplate. it seems that I've made a very stupid design decision, but maybe not all is lost!
*	iomotoko (~iomotoko@unaffiliated/iomotoko) has joined
*	eelster (~eelster@98.115.54.73) has joined
*	ertes (~ertes@haskell/developer/ertes) has joined
*	freeman42x[m] (~Freeman42@83.136.43.94) has joined
*	juanpaucar has quit (Ping timeout: 248 seconds)
*	a3Dman has quit (Ping timeout: 248 seconds)
*	jaseemabid has quit (Ping timeout: 248 seconds)
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	b005 (~b005@ip923460d2.dynamic.kabel-deutschland.de) has joined
*	raichoo has quit (Read error: Connection reset by peer)
*	patbecich (~user@75-142-96-216.static.mtpk.ca.charter.com) has joined
*	tabemann has quit (Quit: Leaving)
*	Associat0r_ has quit (Read error: Connection reset by peer)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	kody has quit (Quit: WeeChat 1.9)
*	eacameron has quit (Ping timeout: 255 seconds)
*	dfssner has quit (Quit: Page closed)
*	_asc has quit (Ping timeout: 255 seconds)
*	Costar (~Costar@179.215.124.226) has joined
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Tue Aug 22 12:28:00 2017

**** BEGIN LOGGING AT Tue Aug 22 12:28:19 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	a3Dman has quit (Ping timeout: 240 seconds)
*	Ojd has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	sfcg (~sfcg@79.97.176.188) has joined
<lyxia>	Is London_jack Iceland_jack 
*	Costar has quit (Ping timeout: 255 seconds)
*	crucify_me has quit (Ping timeout: 240 seconds)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	ccomb (~ccomb@ctr45-1-88-182-26-59.fbx.proxad.net) has joined
*	spaceships (spaceships@nome01.eecs.oregonstate.edu) has joined
*	peacememories has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	numee has quit (Ping timeout: 255 seconds)
*	aarvar (~foewfoiew@50.34.105.170) has joined
<London_jack>	lyxia: yes
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	replay_ (~replay@pdpc/supporter/student/replay) has joined
*	samrat has quit (Ping timeout: 248 seconds)
<lyxia>	bobismijnnaam: what version of GHC are you using
*	slacko_ has quit (Ping timeout: 248 seconds)
<bobismijnnaam>	glorious ghc, 7.10.3. stock ubuntu 16.04 version I imagine
*	a3Dman has quit (Ping timeout: 248 seconds)
*	replay has quit (Ping timeout: 246 seconds)
<bobismijnnaam>	are you on to something?
*	valentinbuza (~valentinb@unaffiliated/valentinbuza) has joined
<lyxia>	I'm installing uniplate for this version of GHC to get the same error because it's not the same on 8.0
<bobismijnnaam>	huh. cool
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
**** ENDING LOGGING AT Tue Aug 22 12:44:14 2017

**** BEGIN LOGGING AT Tue Aug 22 18:37:54 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<monochrom>	koz_: I don't think you have to choose. Except is an instance of Alternative too, is that right? But if you already have a Maybe, you can already use Maybe's Alternative-ness. It's up to you which one is more convenient for the rest of your code, Except or Maybe.
<pacak>	jared-w: O_o
<jared-w>	Yes, I know, which is why I was was making sure it worked on both #ghc and #haskell. I never got a reply to my prior message on #ghc (it was just a random comment)
*	neoncontrails has quit (Remote host closed the connection)
<jared-w>	The problem ended up being that ben must've changed his settings to only allow queries from registered users and I just realized I never actually registered this nick (forgot to do so)
<monochrom>	Ohai jared-w I see you too. But I mean here. I don't know about #ghc.
<monochrom>	Or PM, yeah.
<jared-w>	Yeah I figured the issue out :p
*	neoncontrails (~neoncontr@2602:306:31a7:a1a0:35a9:1d58:e157:7b57) has joined
<pacak>	koz_: If vector size is encoded with peano numbers - there are no vectors with negative size.
*	Asiannoodles42[m (asiannoodl@gateway/shell/matrix.org/x-orqnysoyhrcvupyx) has joined
*	slacko_ has quit (Ping timeout: 240 seconds)
*	neoncont_ (~neoncontr@99-26-122-26.lightspeed.sndgca.sbcglobal.net) has joined
<ClaudiusMaximus>	jared-w: freenode recently changed the default user mode for "only receive pms from registered users" due to spam attacks
*	neoncontrails has quit (Ping timeout: 246 seconds)
<geekosaur>	^
<geekosaur>	someone was spamming child porn links in /msg
<jared-w>	ClaudiusMaximus: gotcha. I'll wager that I've lost quite a few PMs due to that if non registered users can't get PMs :|
<monochrom>	Oh yikes.
<pacak>	When was it?
<monochrom>	I guess it will last until all the spammers bother to register!
<ClaudiusMaximus>	17 august
*	jathan (~jathan@189.216.204.127) has joined
<pacak>	I see. We have a bot that sits on our channel and forwards messages into internal chat - it got banned on that date as well.
<jared-w>	monochrom: registering requires having an email so it makes it much easier to limit this sort of thing because you can block the email address or even entire domains from registering new nicknames
<MarcelineVQ>	ClaudiusMaximus: I wasn't aware they made a general change like that, are you sure?
<geekosaur>	you ca  probvably get it unbanned; the news article also notes that a malfunctioning utility tried to ban all freenode users while they were trying to mass-ban the spammer
<ClaudiusMaximus>	11:23 [freenode] -christel(christel@freenode/staff/exherbo.christel)- [Global Notice] In light of the wave of spambots sending links to child pornography images, we have chosen to update our default umodes to include +R (blocking messages from unregistered users). To allow such messages, /mode yournick -R. Apologies  for the disruption and the inconvenience.
<geekosaur>	https://freenode.net/
<geekosaur>	iit's still the most recent news item
*	jathan has quit (Remote host closed the connection)
<MarcelineVQ>	:(
<geekosaur>	second paragraph is about the umode change, third mentions the malfunctioning ban
*	Jesin has quit (Quit: Leaving)
*	mrkgnao (~mrkgnao@150.129.67.8) has joined
*	jathan (~jathan@189.216.204.127) has joined
*	u-ou- has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	skeuomorf has quit (Ping timeout: 240 seconds)
*	kuttifunk1 (~Thunderbi@host-188-174-203-17.customer.m-online.net) has joined
*	eacameron has quit (Remote host closed the connection)
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	kuttifunk has quit (Ping timeout: 240 seconds)
*	kuttifunk1 is now known as kuttifunk
*	chowie (~chowie@S01067824af7e5848.vn.shawcable.net) has joined
*	u-ou- (8b503499@gateway/web/cgi-irc/kiwiirc.com/ip.139.80.52.153) has joined
*	jathan has quit (Quit: Leaving)
*	jathan (~jathan@189.216.204.127) has joined
*	_asc (~arneschro@95.91.245.187) has joined
*	eacameron has quit (Ping timeout: 240 seconds)
*	Youmu (uid129469@gateway/web/irccloud.com/x-ulbcwuqxqfkaytgo) has joined
*	banc has quit (Quit: ZNC - http://znc.in)
*	hucksy_ (~hucksy@p4FD1FDF3.dip0.t-ipconnect.de) has joined
*	u-ou- has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	julienchurch (~jules@70.44.247.125.res-cmts.tnk.ptd.net) has joined
*	_asc has quit (Ping timeout: 248 seconds)
*	jathan has quit (Quit: Leaving)
*	_asc (~arneschro@ip5f5bf5bb.dynamic.kabel-deutschland.de) has joined
*	hucksy has quit (Ping timeout: 240 seconds)
*	jathan (~jathan@189.216.204.127) has joined
*	juhp (~juhp@redhat/juhp) has joined
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	steeze (~steeze@71-33-171-239.hlrn.qwest.net) has joined
*	u-ou- (8b503499@gateway/web/cgi-irc/kiwiirc.com/ip.139.80.52.153) has joined
*	_asc has quit (Ping timeout: 248 seconds)
*	jathan has quit (Remote host closed the connection)
*	jathan (~jathan@189.216.204.127) has joined
<halogenandtoast>	> 1 + 1
*	jathan has quit (Client Quit)
<lambdabot>	 2
<halogenandtoast>	Okay good, at least lambdabot is here
<MarcelineVQ>	@bot
<lambdabot>	:)
<jared-w>	@bot
<lambdabot>	:)
<jared-w>	sweet
*	banc (~master@217.151.98.168) has joined
*	jathan (~jathan@189.216.204.127) has joined
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	ackpacket (~ackpacket@unaffiliated/ackpacket) has joined
*	shafox_ (uid28637@gateway/web/irccloud.com/x-rsmxrljliukcqxsi) has joined
*	erisco has quit (Quit: Leaving)
*	jathan has quit (Remote host closed the connection)
*	peterbecich has quit (Ping timeout: 260 seconds)
*	jathan (~jathan@189.216.204.127) has joined
*	louispan has quit (Quit: louispan)
*	jathan has quit (Remote host closed the connection)
*	jathan (~jathan@189.216.204.127) has joined
*	u-ou- has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	jathan has quit (Remote host closed the connection)
*	jathan (~jathan@189.216.204.127) has joined
*	eacameron has quit (Remote host closed the connection)
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	jathan has quit (Remote host closed the connection)
*	jathan (~jathan@189.216.204.127) has joined
*	naddeoa (~naddeo@104.156.100.10) has joined
*	rblaze (~blaze@209.6.152.108) has joined
*	Fekinox has quit (Read error: Connection reset by peer)
*	eacameron has quit (Ping timeout: 240 seconds)
*	jcdietrich (~jcdietric@184-175-46-77.dsl.teksavvy.com) has joined
*	jcdietrich has quit (Changing host)
*	jcdietrich (~jcdietric@unaffiliated/jcdietrich) has joined
*	tushigushi (~elTugucci@82-181-78-91.bb.dnainternet.fi) has joined
*	Fekinox (~Fekinox@cpe-74-72-183-234.nyc.res.rr.com) has joined
*	u-ou- (8b503499@gateway/web/cgi-irc/kiwiirc.com/ip.139.80.52.153) has joined
*	ackpacket has quit (Ping timeout: 248 seconds)
*	jcdietrich has quit (Client Quit)
*	Noldorin has quit (Quit: Textual IRC Client: www.textualapp.com)
*	pparkkin has quit (Remote host closed the connection)
*	u-ou- has quit (Client Quit)
*	ackpacket (~ackpacket@unaffiliated/ackpacket) has joined
*	u-ou- (8b503499@gateway/web/cgi-irc/kiwiirc.com/ip.139.80.52.153) has joined
*	u-ou- has quit (Client Quit)
*	tushigushi has quit (Ping timeout: 246 seconds)
*	juhp has quit (Quit: juhp)
*	magistr (c047d50e@gateway/web/freenode/ip.192.71.213.14) has joined
*	juhp (~juhp@redhat/juhp) has joined
*	plutoniix (~q@175.176.222.7) has joined
*	pplorins (~pplorins@58.250.204.67) has joined
*	jathan has quit (Quit: Leaving)
*	brynedwardz (~bryn@109.76.122.45) has joined
*	brynedwards has quit (Disconnected by services)
*	brynedwardz is now known as brynedwards
*	jathan (~jathan@189.216.204.127) has joined
*	jathan has quit (Remote host closed the connection)
*	jathan (~jathan@189.216.204.127) has joined
*	jathan has quit (Remote host closed the connection)
*	jathan (~jathan@189.216.204.127) has joined
*	jathan has quit (Remote host closed the connection)
*	jathan (~jathan@189.216.204.127) has joined
*	naddeoa has quit (Read error: Connection reset by peer)
*	steeze has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
*	quobo has quit (Quit: Connection closed for inactivity)
*	jathan has quit (Remote host closed the connection)
*	chowie has quit (Ping timeout: 255 seconds)
*	jathan (~jathan@189.216.204.127) has joined
*	rickerbh (~rickerbh@14-203-105-198.static.tpgi.com.au) has joined
*	samrat (~samrat@202.51.76.52) has joined
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	XorSwap (~XorSwap@wnpgmb016qw-ds01-58-40.dynamic.bellmts.net) has joined
*	ackpacket has quit (Ping timeout: 248 seconds)
*	SkyPatrol_ (~SkyPatrol@netacc-gpn-7-136-159.pool.telenor.hu) has joined
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
**** ENDING LOGGING AT Tue Aug 22 19:57:49 2017

**** BEGIN LOGGING AT Wed Aug 23 18:16:11 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:46:51 2017)
*	Channel #haskell url: http://www.haskell.org/
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
<AlainODea>	In real code yes. I'm just messing around with a script. I'll fix the variable names :)
<ab9rf>	AlainODea: you say that, but do you actually ever DO it? :)
*	mnoonan_ (~mnoonan@cpe-69-201-46-148.twcny.res.rr.com) has joined
*	cranej (~cranej@42.120.74.200) has joined
*	AlainODea applies water to wicked burn :)
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<AlainODea>	pacak: thank you for your help. Gotta jet. I will name my variables :)
<pacak>	Have fun. Proper names are really useful.
<pacak>	And type signatures for all the functions.
*	cdg (~cdg@2600:1700:3120:40e0:15f4:76ad:93fe:2bf3) has joined
<mnoonan_>	is there a way to test if two values are the-same-location-in-memory identical? I want to write some tests that my library isn’t making copies when applying newtype wrapping/unwrapping.
*	bmeynell has quit (Remote host closed the connection)
*	lambda-11235 (~lambda-11@70.41.58.147) has joined
<geekosaur>	reallyUnsafePtrEq# --- the name means what it says
*	xcmw (~textual@2605:a000:132b:20d8:b994:4884:3e3c:5651) has joined
<mnoonan_>	geekosaur: nice, thanks. that sounds like the kind of name I would expect it to have :)
<geekosaur>	but I'mnot sure where it lives
<pacak>	mnoonan_: reallyUnsafePtrEquality#
<pacak>	GHC.Exts
<pacak>	but the name is a bit misleading.
*	beekill (~beekill@27.78.201.180) has joined
<mnoonan_>	pacak: in what sense?
<pacak>	It's really-we-mean-it-this-function-will-eat-your-cat-and-burn-your-house-PtrEquality#
<ab9rf>	hehe
<geekosaur>	oh, did I truncate it :/
<ab9rf>	mnoonan_: why do you want to do this?
<pacak>	ab9rf: Performance.
<ab9rf>	ah, i see
<ab9rf>	you are deliberately lifting the hood :)
<koz_>	I keep thinking Haskells bitwise or looks like the code is flipping you off.
*	cdg has quit (Ping timeout: 246 seconds)
<mnoonan_>	ab9rf: in https://github.com/matt-noonan/justified-containers, there are various types that are just newtypes + a phantom parameter, and I want to write tests to check that no copies are created
<mnoonan_>	byorgey had a comment earlier today about mapping a newtype unwrapper possibly having a non-zero cost, which got me thinking about it.
<geekosaur>	well, no, it's not quite accursedUnutterable bad
<mnoonan_>	i suspect i need to throw some “coerce”s into the mix
<geekosaur>	usually
<geekosaur>	but gc a the wrong time could make you unhappy
<geekosaur>	*gc at the
<mniip>	the problem with reallyUnsafePtrEquality# is
*	Jeanne-Kamikaze (~Jeanne-Ka@2601:647:4300:f30f:75e0:6185:1f6a:8eaf) has joined
<mniip>	well,
<mniip>	ignoring false negatives,
<mniip>	the problem is there's now false positives
*	dfeuer has quit (Read error: Connection reset by peer)
<pacak>	Due to GC and tags in pointers
<mnoonan_>	mniip: object X replacing object Y at the same address after a gc?
<mniip>	yes
<mniip>	do note that this doesn't require X or Y to be unreferenced
*	MindlessDrone has quit (Ping timeout: 248 seconds)
*	mrcheeks (~user@2607:fea8:5ae0:6f5:9590:ee84:a2e6:2efa) has joined
*	amar_ (~amarpotgh@p57967D45.dip0.t-ipconnect.de) has joined
*	amar_ is now known as Guest84404
*	erisco has quit (Read error: Connection reset by peer)
*	MindlessDrone (~MindlessD@unaffiliated/mindlessdrone) has joined
*	xuanrui has quit (Quit: Leaving)
*	replay has quit (Quit: Textual IRC Client: www.textualapp.com)
*	louispan has quit (Quit: louispan)
*	Guest84404 has quit (Ping timeout: 252 seconds)
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	leat (~leat@188.162.200.111) has joined
*	Goplat (~goplat@reactos/developer/Goplat) has joined
*	peterbecich (~peterbeci@75-142-96-216.static.mtpk.ca.charter.com) has joined
*	jchia1 (~jchia@116.192.1.251) has joined
*	mnoonan_ has quit (Quit: mnoonan_)
*	romanofski[m] (romanofski@gateway/shell/matrix.org/x-pbaquojbmechswdv) has joined
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	jchia has quit (Ping timeout: 264 seconds)
*	xcmw (~textual@2605:a000:132b:20d8:b994:4884:3e3c:5651) has joined
*	chowie has quit (Ping timeout: 248 seconds)
*	bandit145 (~bandit145@68-189-243-42.dhcp.oxfr.ma.charter.com) has joined
*	chowie (~chowie@S01067824af7e5848.vn.shawcable.net) has joined
*	Costar (~Costar@2804:14d:7e85:305:8474:4a32:e41b:5149) has joined
*	MindlessDrone has quit (Ping timeout: 252 seconds)
*	peter (~peter@71.201.219.141) has joined
*	MindlessDrone (~MindlessD@unaffiliated/mindlessdrone) has joined
*	kuttifunk1 (~Thunderbi@host-188-174-220-31.customer.m-online.net) has joined
*	cdg (~cdg@162-226-219-152.lightspeed.tukrga.sbcglobal.net) has joined
*	kuttifunk has quit (Ping timeout: 255 seconds)
*	kuttifunk1 is now known as kuttifunk
*	mnoonan_ (~mnoonan@cpe-69-201-46-148.twcny.res.rr.com) has joined
*	djapo has quit (Ping timeout: 248 seconds)
*	u-ou- (8b503499@gateway/web/cgi-irc/kiwiirc.com/ip.139.80.52.153) has joined
*	louispan (~textual@203.38.203.134) has joined
*	safe has quit (Read error: Connection reset by peer)
*	iomotoko (~iomotoko@unaffiliated/iomotoko) has joined
*	remexre has quit (Quit: ZNC 1.6.5 - http://znc.in)
*	remexre (~remexre@c-107-4-203-126.hsd1.mn.comcast.net) has joined
*	banc has quit (Quit: ZNC - http://znc.in)
*	hucksy (~hucksy@p4FD1FD9E.dip0.t-ipconnect.de) has joined
*	michalisko (~michalisk@abls201.neoplus.adsl.tpnet.pl) has joined
*	peter has quit (Ping timeout: 248 seconds)
*	hucksy_ has quit (Ping timeout: 240 seconds)
*	michalisko has quit (Ping timeout: 240 seconds)
*	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined
*	xuanrui (~xuanrui@104.237.90.121) has joined
*	remexre has quit (Quit: ZNC 1.6.5 - http://znc.in)
*	remexre (~remexre@c-107-4-203-126.hsd1.mn.comcast.net) has joined
*	takle has quit (Ping timeout: 240 seconds)
*	polman has quit (Ping timeout: 240 seconds)
*	banc (~master@217.151.98.168) has joined
<mnoonan_>	relating to my previous question.. I haven’t been able to google up a way to reliably avoid running the GC during evaluation of a certain expression. is it possible?
*	u-ou- has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	jay__ (~jay@117.249.215.60) has joined
*	Michael__ has quit (Quit: Leaving)
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	rickerbh (~rickerbh@14-203-105-198.static.tpgi.com.au) has joined
*	samrat (~samrat@202.51.76.53) has joined
*	tacoboy has quit (Ping timeout: 252 seconds)
*	MichaelBurge has quit (Remote host closed the connection)
*	hackagebot gnss-converters 0.3.13 – GNSS Converters. – https://hackage.haskell.org/package/gnss-converters
*	peterbecich has quit (Ping timeout: 260 seconds)
*	xuanrui has quit (Ping timeout: 240 seconds)
*	taktoa (~quassel@173.230.18.194) has joined
*	xuanrui (~xuanrui@116.25.42.109) has joined
<remexre>	Hey, has the syntax for Git extra-deps in Stack changed recently?
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	louispan has quit (Quit: louispan)
*	eschnett has quit (Quit: eschnett)
*	tobloron_ has quit (Remote host closed the connection)
*	toblorone (~toblorone@162.246.216.28) has joined
*	chao-tic (~chao@218.101.54.122) has joined
*	toblorone has quit (Remote host closed the connection)
*	sz0 has quit (Quit: Connection closed for inactivity)
*	acarrico (~acarrico@pppoe-68-142-58-22.gmavt.net) has joined
*	XorSwap has quit (Quit: Leaving)
*	XorSwap (~XorSwap@kite.riseup.net) has joined
*	safe (~safe@unaffiliated/safe) has joined
*	forsythetony (4256862d@gateway/web/freenode/ip.66.86.134.45) has joined
<nitrix>	mnoonan_: Not that I'm aware. GHC is fairly dependent on the 512kb nursery area of its GC to perform good and with the collecting turned off, that's going to fill up very quickly and become problematic.
*	juhp (~juhp@redhat/juhp) has joined
*	xuanrui has quit (Remote host closed the connection)
*	cyborg-one has quit (Quit: cyborg-one)
<nitrix>	mnoonan_: I think you're probably after disabling or postponing major GC as opposed to minor GC, but I'm not aware of how you would control this either. A large heap doesn't help here as some of the heuristics are time-based (e.g. every 0.3 seconds when all threads are idle).
<nitrix>	I guess it could be a new feature.
*	rickerbh (~rickerbh@14-203-105-198.static.tpgi.com.au) has joined
<mnoonan_>	nitrix: minor gc still can move objects, right? I mostly just am trying to avoid writing a flaky test that two objects are supposed to be identical.
<pacak>	mnoonan_: Do you have any benchmarks showing that ptr equality will help?
<pacak>	You might be barking at the wrong tree...
<nitrix>	mnoonan_: Yes, minor GC will move objects from the nursery aread to the heap.
*	parable (~william@c-98-221-152-209.hsd1.nj.comcast.net) has joined
<mnoonan_>	pacak: it isn’t for optimization, really 
<koz_>	Is there a short-circuiting fold? I wanna bail out if the fold produces a particular value.
<nitrix>	mnoonan_: And when I was a beginner with Haskell, I was trying to do pointer equality checks and after going all the way down the rabbit hole, I discovered that it'd break referential transparency to do so.
*	polman (~ananev@188.162.64.93) has joined
<mnoonan_>	I’m tagging maps and keys with a phantom type in this library, and I don’t want the tagged versions to carry any run-time overhead. they should literally just be the same, untagged values
*	blankhart (~user@pool-100-38-124-53.nycmny.fios.verizon.net) has joined
<mnoonan_>	nitrix: I promise I’m not doing shenanigans :)
*	Denommus has quit (Ping timeout: 252 seconds)
*	xuanrui (~xuanrui@116.25.42.109) has joined
*	Noldorin has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<pacak>	"overhead"... "it isn’t for optimization"... ಠ_ಠ
<nitrix>	Have you considered newtypes? Their whole purpose are to have different types during compile-time yet the same representation at runtime (eliminated, with no overhead).
<mnoonan_>	nitrix: yes, that’s already what the library does.
<mnoonan_>	the problem that I’m trying to solve now is stemming from a comment byorgey made earlier today, which is that mapping a newtype-unwrapper over a list still has nontrivial cost
*	eschnett (~eschnett@ktnron0916w-lp130-1-65-94-201-103.dsl.bell.ca) has joined
<mnoonan_>	there is a similar point made in the Coercible paper too, I think
*	Sgeo (~Sgeo@ool-18b98627.dyn.optonline.net) has joined
<mnoonan_>	pacak: point taken :) 
<mnoonan_>	pacak: what I mean is, I’m not trying to squeeze some cycles out of a computation, I’m trying to make this library zero-cost for the user.
<nitrix>	Additional cost than just a list? That shouldn't be... the newtype should get completely erased.
*	mrcheeks` (~user@2607:fea8:5ae0:6f5:ac22:85c1:5a3f:364c) has joined
*	mrcheeks has quit (Disconnected by services)
*	mrcheeks` is now known as mrcheeks
<pacak>	mnoonan_: https://github.com/tibbe/unordered-containers/issues/147 + https://ghc.haskell.org/trac/ghc/ticket/13615
<pacak>	mnoonan_: It was ghc bug though.
<mnoonan_>	nitrix: see the first page of http://cs.brynmawr.edu/~rae/papers/2014/coercible/coercible.pdf starting at “Using newtype for abstraction in Haskell has always suf- fered from an embarrassing difficulty.”
*	drcode (~drcode@5.29.192.15) has joined
<nitrix>	Oh, interesting.
*	CoderPuppy (~cpup@32.218.118.235) has joined
<mnoonan_>	pacak: I’m not sure I follow what the connection is?
<mnoonan_>	yeah, I was surprised too
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	drcode has quit (Read error: Connection reset by peer)
<pacak>	mnoonan_: If you are doing strange stuff for performance reasons - your users might be suffering from obscure bugs.
<pacak>	I'm not saying don't do that just be careful about it.
<mnoonan_>	fair enough
<nitrix>	mnoonan_: You should be able to use `coerce` in that scenario if all things fail, but I thought GHC was able to eliminate this. I'd be very surprised. I'm tempted to look at Core.
<nitrix>	mnoonan_: https://hackage.haskell.org/package/base-4.10.0.0/docs/Data-Coerce.html
*	soniku has quit (Remote host closed the connection)
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
<mnoonan_>	nitrix: yeah, I’m working on sprinkling some “coerce”s in right now, and I wanted to write a test to ensure it was working as intended.. hence the original question :)
*	Sampuka has quit (Ping timeout: 248 seconds)
<nitrix>	As long as you're not casting between boxed and unboxed values with unsafeCoerce# and trickery (which I think should be prevented by the type checker), I don't see how a garbage collection would break this.
*	Jeanne-Kamikaze has quit (Quit: Leaving)
<geekosaur>	reallyUnsafePtrEquality# came up earlier
*	jedws has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<geekosaur>	and the answer there is, make sure both parameters are fully evaluated and force a gc before doing the comparison
<geekosaur>	thta may end up being more expensive than just letting things go...
<mnoonan_>	geekosaur: whnf is sufficient, I assume?
*	peterbecich (~peterbeci@75-142-96-216.static.mtpk.ca.charter.com) has joined
*	jathan (~jathan@189.216.204.127) has joined
*	eklavya (~eklavya@2405:205:130d:47cf:a03e:ab1f:3ae1:7597) has joined
<geekosaur>	I'm not sue it is, in a multithreaded context
<geekosaur>	your thunk could be forced by another thread, which could trigger a gc which affects all threads
<nitrix>	I'd think this is the kind of test that GHC probably has to maintain the intergrity of Data.Coerce. Seems strange to roll your own test.
*	chowie has quit (Ping timeout: 252 seconds)
<geekosaur>	Coercible is always a no-op
*	onethirtyfive has quit (Ping timeout: 240 seconds)
<mnoonan_>	the point of the test is to pin down the library’s API and give external evidence that is it zero-cost (and catch me if I screw that up), not to test Data.Coerce itself
**** BEGIN LOGGING AT Thu Aug 24 11:45:46 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:12 2017)
*	Channel #haskell url: http://www.haskell.org/
<dminuoso>	lyxia, ahh! I have a feeling where this is heading, may I see undefined as omega from lambda calculus?
*	storer (~storer@104-186-218-11.lightspeed.bcvloh.sbcglobal.net) has joined
<dminuoso>	Or I guess the question is pointless. I got the answer, thank you.
*	iAmerikan has quit (Ping timeout: 252 seconds)
*	danthemyth has quit (Ping timeout: 248 seconds)
*	a3Dman has quit (Ping timeout: 240 seconds)
<ski>	abhiroop : did you try standalone deriving ?
<byorgey>	dminuoso: it's not a pointless question.  both undefined and omega correspond to the semantic idea of "bottom", i.e. the completely undefined value.  Operationally, they are different: undefined will throw an exception if you try to evaluate it, and omega just recurses infinitely
*	Noldorin has quit (Ping timeout: 252 seconds)
*	Cale has quit (Remote host closed the connection)
*	albertus1 (~seb@x55b4d499.dyn.telefonica.de) has joined
<byorgey>	let omega = omega; f (x : xs) = "Hello" in f (omega : omega)   -- this is another way to see that f does not need to evaluate x and xs at all
<dminuoso>	byorgey, okay, so omega would be akin to `omega = omega`
*	tobloron_ (~toblorone@162.246.216.202) has joined
<dminuoso>	Oh heh. Same second. :)
<byorgey>	dminuoso: right =)
*	ski . o O ( `omega = (\t -> t t) (\t -> t t)' )
<dminuoso>	ski, the problem is type inference will error out on that one
<dminuoso>	I tried it before :P
<byorgey>	that's probably why ski put it in an imagination bubble =)
<dminuoso>	Oh :)
<ski>	dminuoso : you can do it, with an auxilary `newtype'
*	Wizek (uid191769@gateway/web/irccloud.com/x-mxgjchupjbnsjwsr) has joined
*	seangrove (~user@52.119.115.133) has joined
*	crobbins has quit (Remote host closed the connection)
<abhiroop>	ski: Yes just tried Standalone deriving, doesn't compile, it says "Value must be a vanilla data constructor"
*	crobbins (~crobbins@2600:1700:6391:1c20:1c55:1208:f069:deab) has joined
*	toblorone has quit (Ping timeout: 248 seconds)
<byorgey>	> newtype D = D { unD :: D -> D }
<lambdabot>	 <hint>:1:1: error: parse error on input ‘newtype’
<byorgey>	aww
<ski>	@let newtype D = D { unD :: D -> D }
*	mmachenry (~Adium@208.78.142.234) has joined
*	tomphp_ has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<lambdabot>	 Defined.
<abhiroop>	There is a ticket on this too: https://ghc.haskell.org/trac/ghc/ticket/10514
<jyu__>	:window move DOWN
<ski>	now make `omega' have type `forall a. a'
*	jellowj has quit (Ping timeout: 255 seconds)
<dminuoso>	ski, okay I have no idea what that.. does. But Im only in chapter 4 of the gentle introduction, so Im sure it will make sense soon.  
<ski>	dminuoso : do you know `data' ?
*	slack1256 has quit (Remote host closed the connection)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<dminuoso>	Wrote it down, so I can look at it later :)
<dminuoso>	ski, yes.,
<ski>	`newtype' is basically(*) like `data', except that only a single data constructor is allowed, and further, it must take exactly one argument
*	Jesin (~Jesin@pool-72-83-138-15.washdc.fios.verizon.net) has joined
<dminuoso>	ski, is this for custom "embellished types" ?
*	eacameron (~eacameron@2601:403:c003:ecc0:11a1:a810:9107:25c4) has joined
*	crobbins has quit (Ping timeout: 252 seconds)
<dminuoso>	ski, oh I see there's also a difference wrt strictness of the constructor 
<ski>	((*) except that a `newtype' has no run-time representation, the data constructor is a no-op. it's mostly used when you want a *new* distinct type, or when you need recursion (but want to avoid the extra (run-time) overhead of the data constructor). in the former case, it may or may not be an abstract data type)
*	ski doesn't know the term "embellished type"
<ski>	note that the `{ unD :: ... }' parts of the definition is "record syntax" (which is syntactic sugar)
<ski>	it amounts to the same as plain :
<ski>	  newtype D = D (D -> D)
*	dhil has quit (Ping timeout: 240 seconds)
<ski>	  unD :: D -> (D -> D)
<ski>	  unD (D d) = d
*	osa1 has quit (Ping timeout: 240 seconds)
<ski>	(and record syntax can also be used for ordinary `data' definitions)
*	ninedotnine (~dan@2607:fea8:bda0:c2f:4ebb:58ff:fe23:b33) has joined
*	ninedotnine has quit (Client Quit)
<dminuoso>	ski, interesting, so its a recursive type definition?
<ski>	in addition, `D {unD = d}' (as both pattern and expression) means the same as plain `D d'. in the `data' case, you can have multiple "fields", and you don't need to remember the ordering, when using the record syntax
*	twanvl_ (~twanvl@92.110.121.28) has joined
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
<ski>	there's also `x {unD = d}', which makes an "update" (a copy) of `x', with the `unD' field replaced by `d' (all other fields, in this case none, staying the same)
*	eacameron has quit (Ping timeout: 240 seconds)
*	ninedotnine (~dan@2607:fea8:bda0:c2f:4ebb:58ff:fe23:b33) has joined
<crucify_me>	https://ptpb.pw/gPdx  hi trying to determine how to get an instance of Num into this code. (just added ski 's comment on newtype in comments)
*	pbogdan (~pbogdan@178.62.5.204) has joined
*	ninedotnine has quit (Client Quit)
<ski>	dminuoso : correct. point is, you can't say `type D = D -> D', since `type' synonyms can't be recursive (without breaking the recursive cycle by a `data' or `newtype')
*	iAmerika1 has quit (Ping timeout: 252 seconds)
*	toblorone (~toblorone@162.246.216.28) has joined
<dminuoso>	ski, is there a special reason why you can do this with the record syntax?
<ski>	`newtype' is like `type' in that you give a name to a type. except that in the latter case, it's merely a synonym, a shorthane, while in the former case, it's a *new* type (like with `data')
*	Cale (~cale@CPEf48e38ee8583-CM0c473de9d680.cpe.net.cable.rogers.com) has joined
<ski>	dminuoso : the record syntax here is a red herring, byorgey only used it for convenience (getting `unD' for free), i imagine
*	tessier has quit (Ping timeout: 252 seconds)
*	twanvl has quit (Ping timeout: 248 seconds)
<ski>	just `newtype D = MkD (D -> D)' would work just as well
*	leshow has quit (Quit: WeeChat 1.6)
*	ubsan_ has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	leshow (~leshow@static-209-87-236-138.storm.ca) has joined
<ski>	dminuoso : .. can you figure out how to modify the definition of `omega', to make use of this type, to make it type check ?
*	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has joined
<crucify_me>	any takers re: above question? thanks https://ptpb.pw/gPdx
<dminuoso>	ski, lets make it my "homework assignment". :-)
*	tobloron_ has quit (Ping timeout: 240 seconds)
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
<dminuoso>	Wouldn't want you to spoonfeed all the fun.
<lyxia>	crucify_me: deriving (Eq, Show, Num, Fractional)
*	jyu__ has quit (Quit: leaving)
<ski>	crucify_me : `(Nada x) / (Nada y) = ..x..y..' could be `Nada x / Nada y = ..x..y..'
<ski>	dminuoso : that's the spirit :)
*	jyu_ (~jiayao.yu@rrcs-173-196-171-202.west.biz.rr.com) has joined
*	leat has quit (Ping timeout: 260 seconds)
*	abhiroop has quit (Quit: Leaving...)
<crucify_me>	thanks, sorry ski not following your suggestion.. thanks lyxia I thought I tried similar
*	shafox (~pbehera@106.51.129.97) has joined
*	peterbecich has quit (Ping timeout: 260 seconds)
<ski>	crucify_me : as lyxia is hinting at, you need at least a `Num' instance, in order to be allowed to make the `Fractional' instance
<Psybur>	Is (+5) a closure?
*	peter___ has quit (Read error: Connection reset by peer)
<Cale>	Psybur: It might be implemented with one
<ski>	`(+5)' is a function (value)
<Cale>	But yeah, it's a function.
<ski>	"closure" is an implementation-specific term
*	hackagebot jukebox 0.2.20 – A first-order reasoning toolbox – https://hackage.haskell.org/package/jukebox
<ski>	(one can have implementations which doesn't represent function values as closures)
*	merijn has quit (Ping timeout: 240 seconds)
<Psybur>	For all intents and purposes it behaves like a closure though?
<Cale>	Not for all
<Cale>	A closure specifically refers to a pair of some code with an environment
<Psybur>	(+5) has an environment right? The '5'
<Cale>	An environment which will bind free variables in the code to values
<ski>	if you're asking whether Haskell uses static/lexical scoping, the answer is yes
<Cale>	If we have a closure, we can separate off its environment and inspect it
<Cale>	If we have a function, we can't.
*	ski would say "possibly"
<Cale>	For me at least, that's the point at which things stop being closures and start being something else which a closure was used to implement.
<Cale>	That is, when they stop looking like pairs with separable parts.
*	sleffy has quit (Quit: Leaving)
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
*	jfischoff (~jonathanf@pool-74-101-197-223.nycmny.fios.verizon.net) has joined
*	eacameron (~eacameron@2601:403:c003:ecc0:11a1:a810:9107:25c4) has joined
<ski>	Psybur : e.g. if you have defined `makeAdder x = adder where adder y = x + y', then `makeAdder 2' (call it `addTwo') will make a function that remembers that the value of `x' is `2', not caring about other calls to `makeAdder', nor about other possible values of `x' in scope at the place where the function value `addTwo' is applied/called
*	nullx002 has quit (Ping timeout: 264 seconds)
*	nullx002 (Elite19325@gateway/shell/elitebnc/x-jtbrthplmmjecqnn) has joined
<ski>	Psybur : that's static/lexical scoping : the value of `x' in `adder', given `adder y = x + y' is determined by what value `x' had in the "lexical / static" context (scope), where `adder' was defined (inside the body of `makeAdder', where `x' has received a value); not by any value of `x' in the "dynamic" context ("scope") where `adder' (or `addTwo') is used (which would be "dynamic scoping")
*	nitros_ has quit (Quit: WeeChat 1.9)
<Cale>	It's possible for example, for an implementation to compile special code with the 2 filled in, or when you're doing graph rewriting, to copy wholesale the graph for the body of adder, except replacing occurrences of x for 2.
<Cale>	Neither of those looks very much like a closure
<ski>	Psybur : one obvious way to implement such a function value is as a closure : a reference to the code `let adder y = x + y in adder' (possibly compiled), together with the environment remembering that `x' is bound to `2'
<Cale>	GHC will often inline the definitions of small functions which will result in fewer closures being constructed at runtime.
*	dhil (~dhil@dhcp-90-078.inf.ed.ac.uk) has joined
<ski>	what Cale was mentioning is another way to implement functions : substitution of actual parameters for formal parameters, in the body
*	peter (~peter@66.175.245.7) has joined
<crucify_me>	lyxia, thanks for your help. I pasted your correction as far as I could determine it. getting a similar error as before 
<crucify_me>	https://ptpb.pw/KN4n
*	kuribas` has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
<ski>	Psybur : makes any sense ?
*	kuribas (~user@ptr-25vy0i6r2pkd6kho66n.18120a2.ip6.access.telenet.be) has joined
*	magicmushroom[m] (magicmushr@gateway/shell/matrix.org/x-xgssbglclsvayxfn) has left ("User left")
<Psybur>	... :D
*	BernhardPosselt (~bernhard@2a02:8388:6780:ad80:22cf:30ff:fe6e:fadb) has joined
<ski>	(abstractly, instead of having a closure (pair) `(let adder y = x + y in adder , { x = 2 })', substitution corresponds to replacing `x' with `2', getting (conceptually) `let adder y = 2 + y in adder')
<BernhardPosselt>	how do lenses work? is it a macro?
<BernhardPosselt>	makeLenses
<dminuoso>	Cale, isnt the concept of a closure kind of similar to a lambda expression with a free variable? I mean in both cases you have some locally free variable that is bound in some outer context.
<Cale>	BernhardPosselt: makeLenses is a Template Haskell macro, yeah.
<ski>	(one can in fact consider the closure as *delaying* the substitution until one actually reaches the variable `x', when evaluating the body of `adder')
<Cale>	dminuoso: Well, one way that you might implement closures is to have a lambda with variables occurring free, and then a map from the names of the free variables to values (or terms).
*	leat (~leat@188.162.192.73) has joined
<ski>	dminuoso : it's a lambda expression with some free variables, together with an environment that binds those free variables, yes
<monochrom>	"similar" is a useless notion. Closure implements a lambda expression with free variables.
<Cale>	dminuoso: However, you might also use a pair consisting of a function pointer and an array of pointers to the values...
<BernhardPosselt>	are there non macro solutions to updating deeply nested records?
<Cale>	There's a wide range of possible ways for closures to look, but they all look like pairs of some code with a finite map of some sort.
<ski>	Cale : not clear to me how your latter alternative differs from the former (except in detail) :)
<Cale>	ski: Well, in the former, we have the lambda as a tree or expression graph
<Tuplanolla>	You can easily define the lenses yourself, BernhardPosselt. You don't even need a package to do that.
<Cale>	ski: I'm imagining that the lambda is an AST
<ski>	well, yes, you could have that. but one could also read your "lambda" as a (currently) unspecific term, possibly resolving to your latter example :)
<BernhardPosselt>	so the macro is basically just DRY because you probably need to create lenses for each type that you want to use right?
<dminuoso>	Cale, you know what's funny, "Ast" is the German word for "branch". There's a certain irony in that abbreviation.
<Cale>	hah
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
<monochrom>	Is there also "adt"?
<BernhardPosselt>	n
<lyxia>	BernhardPosselt: https://hackage.haskell.org/package/generic-lens you get lenses for records without TH.
<BernhardPosselt>	lyxia: wow, ty
<Psybur>	I'm seeing some people on stack overflow saying that partially applied functions are closures :{
<BernhardPosselt>	Psybur: kinda
<ski>	Psybur : unfortunately, the term "closure" is often used a bit inappropriatedly (confusing abstract semantics with implementation)
<monochrom>	There are people, even prominent ones, who use "closure" to refer to every lambda expression.
*	sleffy has quit (Quit: Leaving)
<BernhardPosselt>	Psybur: because a closure captures an argument similarily to how a partially applied function captured an argument
<Psybur>	I guess you guys are saying closures are specific types of functions?
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
<ski>	Psybur : in the `makeAdder' example above, one could have defined it as `makeAdder x y0 = adder y0 where adder y = x + y' (or renaming `y0' to `y', if you prefer), or even as `makeAdder x y = x + y'
<Cale>	Psybur: They're something a compiler might use to represent functions at runtime.
<Psybur>	That can be partially applied
*	pera has quit (Ping timeout: 276 seconds)
<BernhardPosselt>	closures just get the parameter by closing over it instead of having them in their argument list
<ski>	Psybur : still, `makeAdder 2' will behave (observationally speaking) in the same way
<ski>	Psybur : .. and one could say that this is a partial application of `makeAdder'
<Cale>	Psybur: It's possible for GHC, for example, to implement (+5) as something which is not a closure, by compiling special code for that function.
*	dfeuer (~dfeuer@wikimedia/Dfeuer) has joined
<BernhardPosselt>	lyxia: the syntax is actually way easier to read than lenses
*	epsilonhalbe (~epsilonha@62.178.36.12) has left
*	mson has quit (Quit: Connection closed for inactivity)
<dminuoso>	Psybur, a closure is any "function" with a free variable (a variable that is not among its parameters) in it. 
*	cobol (Elite20180@gateway/shell/elitebnc/x-vddaqksiczidjhbg) has joined
<Cale>	Psybur: As a programmer, you can't really tell. Some people like to use the word "closure" to refer to all functions which have captured the value of a free variable from the scope in which they've been defined.
<Cale>	But that's sort of an abuse.
<dolio>	Why just functions?
*	`Guest00000 (~user@37.113.180.120) has joined
<ski>	dminuoso : a closure is a possible way for implementing a function value
<Cale>	dolio: Also a good point -- it shouldn't be just functions.
<Cale>	dolio: It seems like most such programmers are also fans of strict evaluation though, I think :)
*	coot____________ has quit (Quit: coot____________)
<dolio>	That doesn't preclude the question.
<ski>	since Haskell is non-strict, closures are often used to implement non-function values as well
<BernhardPosselt>	Psybur: still confused? need an example in js?
<Psybur>	Since functions are curried, does it mean that any function that takes in multiple parameters has implicit closures?
<dminuoso>	ski, considering how many discussions Ive had about "closures", I think the word might just lack a concise definition everyone can agree on.
<Cale>	Psybur: Maybe, maybe not.
<ski>	(in a strict language, other non-strict aspects (than functions), such as suspensions (delayed computations, without parameters), or non-strict records (think objects with methods. e.g. in OCaml) can be implemented with closures)
*	sellout has quit (Quit: Leaving.)
<Psybur>	If you have f x y = ... then f x is a closure?
<Cale>	Psybur: Usually the compiler will do all kinds of things to avoid forming closures as you apply a function to each successive argument.
<Psybur>	I see
*	dfeuer has quit (Ping timeout: 240 seconds)
<ski>	Psybur : `f x' can be implemented by a closure
<dolio>	Java has let you define classes locally that capture values in the local environment for a long time, for instance.
<dolio>	Even though it hasn't had first class function objects per se.
*	dfeuer (~dfeuer@wikimedia/Dfeuer) has joined
<Cale>	Psybur: If you're only interested in what programs *mean* then "closure" is at the wrong level of abstraction, probably.
*	sssilver_ has quit (Ping timeout: 248 seconds)
<Tuplanolla>	Are you saying closure is an implementation technique, like stack or heap?
<Cale>	Tuplanolla: yes
<Psybur>	Ok I think I get what you guys are saying. Something can "seem" like a closure but not actually "be" one heh
*	OnkelTem_ (~onkeltem@unaffiliated/fantomas) has joined
*	osa1 (~omer@91.93.255.229) has joined
*	osa1 has quit (Changing host)
*	osa1 (~omer@haskell/developer/osa1) has joined
<ski>	dminuoso : that may be so. but for the purposes of terminology in the Haskell community, i think it's relatively accepted that "closure" refers to an implementation strategy for delayed computations
<ski>	(or at least i hope so)
*	peterbecich (~peterbeci@75-142-96-216.static.mtpk.ca.charter.com) has joined
*	minn (~minn@pool-71-163-97-83.washdc.fios.verizon.net) has joined
<dolio>	I think that's probably agreed upon among PL academics.
<BernhardPosselt>	Psybur: https://dpaste.de/4Bz0
*	pja has quit (Quit: pja)
<dolio>	Which is probably where the term came from in the first place.
*	OnkelTem has quit (Ping timeout: 246 seconds)
<BernhardPosselt>	you see function solution closes over the a parameter
<BernhardPosselt>	from the first call
<Psybur>	BernhardPosselt, yes, I think I see why in Haskell (+5) might not be implemented as a closure but your example is definitely a closure.
<ski>	Psybur : and you shouldn't care about whether it's a closure or not, unless you care atm about implementation details (like stack vs. heap, how garbage-collection is done, &c.)
<Cale>	Psybur: Even still, no :)
<BernhardPosselt>	so partial application is kinda a closure :D
<BernhardPosselt>	at least in js
<Psybur>	Well, it may or may not be one depending on that tricky compiler
<Psybur>	;P
<Cale>	right
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Thu Aug 24 12:40:05 2017

**** BEGIN LOGGING AT Sat Aug 26 11:33:07 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	Spockz has quit (Client Quit)
*	castlelore (~castlelor@unaffiliated/castlelore) has joined
<hpc>	as for the reason callCC gets so much attention, it makes a good bar to measure your understanding of weird control flow by
<hpc>	if you can reach the point where you understand callCC, you should be able to understand many other more interesting control flow structures
*	albertus1 has quit (Ping timeout: 240 seconds)
<hpc>	erisco: hopefully some of that helps with your question?
*	LysergicDreams (~Lysergia@client-104-245-228-34.cvalink.com) has joined
<dolio>	People should just skip to delimited continuations.
<dolio>	They're better, and they're less weird.
*	lambdabot has quit (Remote host closed the connection)
*	lambdabot (~lambdabot@haskell/bot/lambdabot) has joined
<Welkin>	so what is callCC and why would you use it?
*	alex`` (~alex@2a01cb000bb310000e31f98b4cdf4eae.ipv6.abo.wanadoo.fr) has joined
*	You are now known as n_blownapart
*	castlelore has quit (Ping timeout: 255 seconds)
*	JuanDaugherty has quit (Read error: Connection reset by peer)
<hpc>	Welkin: it's a thing that does stuff, and you should use it because you need the stuff it does ;)
*	cloudhead has quit (Ping timeout: 240 seconds)
*	JuanDaugherty (~juan@98.4.124.117) has joined
<dolio>	You probably don't, though.
<hpc>	yeah
<hpc>	it's one of those things that's more useful to learn than to actually use
<hpc>	it's like long division
*	ido (~ido@pdpc/supporter/student/ido) has joined
<Eduard_Munteanu>	Welkin, typical usage goes like    callCC $ \exit -> ... something ... exit retVal ... something ...
*	Saukk has quit (Remote host closed the connection)
*	kody has quit (Quit: WeeChat 1.9)
<Eduard_Munteanu>	Like   callCC $ \break -> forM [1..10] $ \i -> when (i == 3) (break ())   is a for-loop-like construct which quits on the 3rd iteration
<Eduard_Munteanu>	Er, forM_
*	louispan has quit (Quit: louispan)
*	JuanDaugherty has quit (Ping timeout: 246 seconds)
*	TipsyMe has quit (Ping timeout: 248 seconds)
*	StoneToad has quit (Ping timeout: 246 seconds)
*	dhil (~dhil@dhcp-90-078.inf.ed.ac.uk) has joined
*	slacko_ (~davi@p2E5B2AF5.dip0.t-ipconnect.de) has joined
*	Fuuzetsu has quit (Read error: Connection reset by peer)
*	albertus1 (~seb@x55b4b9cb.dyn.telefonica.de) has joined
<hpc>	it's impossible to write clean callCC code on one line too
*	sellout- (~Adium@174-16-153-221.hlrn.qwest.net) has joined
*	CoderPuppy (~cpup@32.218.117.10) has joined
<Welkin>	:t callCC
<lambdabot>	MonadCont m => ((a -> m b) -> m a) -> m a
<erisco>	hpc, I take that it only really matters in effectful computation, which would explain why we see it related to Monad in Haskell
*	louispan (~textual@14-203-219-236.static.tpgi.com.au) has joined
<Welkin>	:t runContT
*	You are now known as crucify_me
<lambdabot>	forall k a (m :: k -> *) (r :: k). ContT r m a -> (a -> m r) -> m r
*	sz0 (uid110435@gateway/web/irccloud.com/x-rwhibdmmnhcmuygd) has joined
<platz>	though other monads (e.g. Maybe) hav some early-exit flavors too
<dolio>	It's not a 'pure' function.
*	cpup has quit (Ping timeout: 252 seconds)
<platz>	although not as powerful.. but for normal uses seem to be good enough
<erisco>	there is otherwise no sense to "do it twice" or "never do it"
*	StoneToad (~StoneToad@ppp-199-167-119-213.storm.ca) has joined
<dolio>	Trying to reason about a lazy language with continuations is very tricky, too.
<Welkin>	is callCC not referentially transparent?
<hpc>	it is
*	tmp-9284380 has quit (Ping timeout: 260 seconds)
*	slacko_ has quit (Ping timeout: 276 seconds)
*	Zav (a8eb4cfd@gateway/web/freenode/ip.168.235.76.253) has joined
<hpc>	@src callCC
<lambdabot>	Source not found. stty: unknown mode: doofus
*	Jeanne-Kamikaze has quit (Quit: Leaving)
<Welkin>	 @src is a lie anyway
<dolio>	'Do it {zero,two} times' can have meaning outside of effects, though.
*	TipsyMe (~TipsyMe@50-50-229-117.waus.wi.frontiernet.net) has joined
<erisco>	so I am staring at this example which reads  callcc (λk. k 5 + 2) + 10
<dolio>	You can duplicate or remove portions of your program using control effects.
<erisco>	what do you think that should reduce to?
**** ENDING LOGGING AT Sat Aug 26 11:59:51 2017

**** BEGIN LOGGING AT Sat Aug 26 12:32:11 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	nomicflux has quit (Quit: nomicflux)
<erisco>	and break is scoped to a switch or loop, continue scoped to a loop
<dolio>	Yeah, it's nicer for implementing return, at least.
<akamaus>	Athas, In case you interested, haskell-platform 8.0.2 works like a charm.
<dolio>	You can reset around a function and then return is a shift.
*	osa1 has quit (Ping timeout: 240 seconds)
<erisco>	as a structural rule you can do that, even
*	crobbins (~crobbins@2600:1700:6391:1c20::48) has joined
*	sagax (~sagax_nb@213.138.71.146) has joined
<dolio>	Also you can do a sort of multi-return by bundling up k.
<Athas>	akamaus: I'll keep that in mind if I see anyone else with that problem.  I just use stack myself.
<akamaus>	Athas, I tried, but I needed some exotic packages like astar. Stack seem to have troubles with them.
<akamaus>	usually I'm happy with cabal and nix, stack seems to be a bit redundant in such setup
<dolio>	Also you can fool around with shift/reset very easily with ContT.
<dolio>	reset m = runContT m return ; shift = ContT
*	zerokarmaleft (~zkl@morpheus.net) has joined
<dolio>	And the types show you where the control effects can happen.
*	lokydor (~lokydor@bdv75-2-82-66-243-81.fbx.proxad.net) has joined
*	cyborg-one (~cyborg-on@130-0-58-128.broadband.tenet.odessa.ua) has joined
*	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined
*	dxld has quit (Ping timeout: 276 seconds)
*	maddybutt has quit (Ping timeout: 260 seconds)
*	takle has quit (Remote host closed the connection)
*	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined
*	eazar001 (~ebrahim@2602:304:cf7b:efb0:1fbd:d543:5841:fc35) has joined
*	a3Dman has quit (Ping timeout: 240 seconds)
*	justanotheruser has quit (Ping timeout: 240 seconds)
*	Noldorin has quit (Ping timeout: 246 seconds)
<dolio>	Or if you just use Cont it will go back and forth between direct style for pure stuff and monadic style for places where control effects can happen.
<dolio>	@let reset m = runCont m id
*	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined
<lambdabot>	 Defined.
<dolio>	@let shift e = Cont e
<lambdabot>	 .L.hs:183:11: error:
<lambdabot>	     • Data constructor not in scope: Cont :: t1 -> t
<lambdabot>	     • Perhaps you meant one of these:
<erisco>	I am not sure I should really care about it... it seems kind of insane
<dolio>	:t Cont
<lambdabot>	error:
<lambdabot>	    • Data constructor not in scope: Cont
<lambdabot>	    • Perhaps you meant one of these:
<dolio>	Huh.
<dolio>	@undefine
<lambdabot>	Undefined.
<erisco>	I just wanted to understand the example given in this tutorial on K (a rewriting framework for language semantics)
*	slacko_ (~davi@p2E5B2AF5.dip0.t-ipconnect.de) has joined
*	dxld (~dxld@2002:506d:9110:0:be5f:f4ff:fe9b:ef7c) has joined
<mauke>	:t cont
<lambdabot>	((a -> r) -> r) -> Cont r a
*	maddybutt (~maddy@72.18.233.74) has joined
<dolio>	Oh. Right.
*	maddybutt has quit (Max SendQ exceeded)
*	neoncontrails (~neoncontr@2602:306:31a7:a1a0:ed30:6cc7:8f5e:183c) has joined
*	maddybutt (~maddy@72.18.233.74) has joined
*	eazar001 has quit (Ping timeout: 276 seconds)
*	vlatkoB_ has quit (Remote host closed the connection)
*	ubsan has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	slacko_ has quit (Ping timeout: 248 seconds)
*	pylbrecht has quit (Quit: Segmentation fault (core dumped))
*	louispan has quit (Quit: louispan)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	djapo (~archie@unaffiliated/djapo) has joined
*	hackagebot recursion-schemes-ext 0.2.0.0 – Amateur addenda to recursion-schemes – https://hackage.haskell.org/package/recursion-schemes-ext
*	broccolistem has quit (Quit: Textual IRC Client: www.textualapp.com)
*	eazar001 (~ebrahim@2602:304:cf7b:efb0:1ad6:c7ff:feb8:efa7) has joined
*	trigone (56c9d193@gateway/web/freenode/ip.86.201.209.147) has joined
*	jmcarthur (~jmcarthur@2601:86:100:1620:11f3:5a14:fc98:ceb1) has joined
*	hvr has quit (Remote host closed the connection)
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
*	hvr (~hvr@h081217016230.dyn.cm.kabsi.at) has joined
*	hvr has quit (Changing host)
*	hvr (~hvr@haskell/developer/hvr) has joined
<trigone>	hi! i'm looking for an up-to-date graph representing the hierarchy among the basic classes Num, Eq, Ord, Enum, Bound, etc. i found one here https://en.wikibooks.org/wiki/Haskell/Classes_and_types#Standard_classes but after experimenting with ghci, it appears Num does not imply Eq, and somehow Enum is not required if you have Bounded, Num, and Eq... so i'm a bit lost
<trigone>	oh nevermind wrt Enum, i made a mistake in my code
<mauke>	https://www.haskell.org/onlinereport/haskell2010/haskellch6.html#x13-1270006.3
<mauke>	oh, hmm
*	hvr has quit (Remote host closed the connection)
<trigone>	i still don't get why ghci inferred (Eq a, Num a, Bounded a) => if all Num are automatically Eq... redundancy?
<mauke>	they're not (anymore)
*	raichoo (~raichoo@dslb-178-009-138-226.178.009.pools.vodafone-ip.de) has joined
<mauke>	https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/bugs.html#numbers-basic-types-and-built-in-classes
*	hvr (~hvr@h081217016230.dyn.cm.kabsi.at) has joined
*	hvr has quit (Changing host)
*	hvr (~hvr@haskell/developer/hvr) has joined
<trigone>	mauke: ok! thx :)
<trigone>	btw, the tokens representing say integers (0, 1, 2, 3 ...), are they overloadable somehow? how are they defined?
<trigone>	:t 0
<lambdabot>	Num t => t
<erisco>	surprise
<mauke>	a numeric literal 42 actually means (fromInteger 42_as_Integer)
<mauke>	but there's no syntax for 42_as_Integer
*	{emptyset} has quit (Ping timeout: 248 seconds)
<mauke>	:t fromInteger
<lambdabot>	Num a => Integer -> a
*	peterbecich has quit (Ping timeout: 260 seconds)
<trigone>	mauke: ok...
<geekosaur>	basically youy overload it by creatinga Num instance and defining its fromInteger appropriately. but you also have to define the other Num methods
*	johnw has quit (Read error: Connection reset by peer)
<trigone>	can't you write it along the lines of (fromInteger (42 :: Integer))?
<trigone>	geekosaur: ok thx :)
<geekosaur>	it acts like that, but as compiled that just adds an extra fromInteger
<mauke>	that would be a recursive definition
<dolio>	But that's effectively: fromInteger (fromInteger 42_as_integer :: Integer)
<trigone>	mauke: hm yeah
*	AndChat|79476 (~AndChat79@75-165-48-101.tukw.qwest.net) has joined
<geekosaur>	in ghc specifically, with the right options and imports it probably ends up as something like (fromInteger (S# 42# ))
<geekosaur>	but there is no standard for that, just a specification of how numeric literals should behave
<trigone>	mauke: even if fromInteger is defined as `id` for Integers?
<trigone>	wait i'm not srue it makes sense...
<mauke>	trigone: even if you say "42 actually means id 42", that still contains a 42
<mauke>	which would be expanded to id 42, and so on
<trigone>	mauke: oh right
<trigone>	geekosaur: ok
<dolio>	As far as the Haskell report goes, it could be fromNatural, except the report doesn't have Natural.
<mauke>	heh, I suppose you could define it as fromInteger (read "42")
<dolio>	And ghc has negative literals now.
<dolio>	As an option.
<trigone>	dolio: really... you mean, overloaded unary (-)?
<geekosaur>	(where "42#" when MagicHash is in effect is an unboxed machine word with that numeric value, and S# is the hidden constructor for "short" Integers)
<dolio>	Unary (-) was already overloaded.
<dolio>	GHC also has negative literals.
*	ali_bush has quit (Quit: No Ping reply in 180 seconds.)
<trigone>	dolio: oh.. so what's the definition of negative literals?
<trigone>	(by contrast i mean)
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
<mauke>	previously: -42 means negate (fromInteger 42_as_Integer)
<mauke>	now: -42 means fromInteger minus_42_as_Integer
<dolio>	Where `- 42` is unary minus of 42, and `-42` is the negative 42 literal.
*	Milijus has quit (Ping timeout: 246 seconds)
<trigone>	ok... and in practice, the difference?
<trigone>	it means you can have different values for (negate x) and (- x) or something?
<trigone>	(for custom Num classes i mean)
<dolio>	No, (- x) is (negate x).
<mauke>	it means f -42 applies f to -42
<dolio>	You could have different values for (- 42) and (-42) if you were into bad ideas.
<trigone>	mauke: oh you mean you can write negatvie literals without parentheses?
<trigone>	cool, it's a (relatively) good idea
<mauke>	:t ?f -42
<lambdabot>	(?f::a, Num a) => a
<mauke>	yeah, not in lambdabot :-)
<dolio>	I'm not sure it's a good idea.
*	TipsyMe has quit (Ping timeout: 252 seconds)
*	ali_bush (~ali_bush@gentoo/developer/alibush) has joined
<dolio>	But it exists as an option.
<mauke>	I like it
*	TipsyMe (~TipsyMe@50-50-233-140.waus.wi.frontiernet.net) has joined
<trigone>	dolio: does it have perf efficiencies? since you don't have to go through negate to get the value (in case it's a primitive type like Int)? though maybe the optimization was already done
<dolio>	I don't care about its performance.
<dolio>	I care that, since it exists with the other unary negation, it introduces a lot of complicated distinctions.
<dolio>	If it were the only unary negation, I'd be more on board.
<dolio>	Making the old sort of negation 'fast' for literals is not a hard problem, and I'm pretty sure GHC does it.
<erisco>	what really was the point of it?
<trigone>	btw, what's the major reason why we couldn't add methods to classes in other modules? provided they're strictly defined in terms of pre-existing methods (aka provided they have a default definition). it'd allow adding ad-hoc polymorphic functions when needed, but also allow specializing them if a more efficient version would exist...
<trigone>	(in other modules than the original module into which the class was written)
<geekosaur>	because other modules don't know to, or how to, pass the functions
<trigone>	geekosaur: what do you mean
<geekosaur>	remember that methods are not attached to data, they are records
<geekosaur>	this is not OOP
<geekosaur>	when you define foo :: Eq a => ...
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sat Aug 26 13:20:04 2017

**** BEGIN LOGGING AT Sun Aug 27 11:49:12 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	leat (~leat@188.162.200.93) has joined
*	slacko_ (~davi@p2E5B29BE.dip0.t-ipconnect.de) has joined
<dminuoso>	monochrom, in all honesty excercises in Haskell are tough, because there's so little you can do until you get to things like monads. At least that has been my experience.
<jared-w>	(although I've found that, at least for the first half of Bird's book, it feels very "this is how FP programmers thought and went about things 10 years ago..." although it's still a very valid way to approach things. It just takes a bit of time to really get an appreciation for his approach since he has this giant fetish for lists and if/then/else
<kuribas>	Unode: In haskell we typically don't use hashes, but Data.Map or Data.HashMap
<Unode>	monochrom: about 40%, mostly on the first part of the book. The second half I read while commuting and didn't have a ghc with me to try it. I did them mentally as far as I could.
<monochrom>	dminuoso, I'm referring to HPFFP's exercises, not exercises randomly obtained from the Internet.
<dminuoso>	Oh okay
<erisco>	dminuoso, that seems to be because "a thing to do" only counts if it involves IO
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:cd74:8269:f040:6d23) has joined
<monochrom>	I'm wondering if 40% is enough.
<jared-w>	No, it's not
*	osa1 has quit (Ping timeout: 248 seconds)
<Unode>	monochrom: some of the exercises were extenuating specially once "solutions" were no longer available. I felt a lot of frustration because often it was not even clear what the end-goal was supposed to be.
<erisco>	I think I have written zero IO programs to date and somehow I am not bored
<erisco>	well, I guess I used shake + Hakyll that one time
<jared-w>	Starting with the Monad chapter, it /feels/ mostly theory, but you *really* need to do the exercises or nothing will stick
<Unode>	erisco: I can't even envision what you actually do.
<dumptruckman>	screw it
<dumptruckman>	just gonna install mint dual boot
<Unode>	erisco: literally everything I do on a daily basis is IO oriented.
*	CoderPuppy (~cpup@32.218.116.44) has joined
<jared-w>	Unode: although I do sympathize since I did share a lot of that frustration as well. I'm only on the Traversable chapter right now but having some solutions online really helps when I get really stuck
<monochrom>	I guess there is still a difference between "uniformly randomly chosen 40%" and "consciously chosen, therefore biasedly chosen, 40%"
<kuribas>	Unode: well, a good texbook should explain you why you cannot extract a value from an IO action.
*	jao (~jao@pdpc/supporter/professional/jao) has joined
<dumptruckman>	suggestions for the best linux option for haskell for a beginner?
<monochrom>	And Dunning-Kruger implies that virtually all conscious choices are wrong choices.
<Unode>	monochrom: sure I won't argue on that. Make that 40% biased by whatever level of frustration I was on at the time.
*	mounty has quit (Ping timeout: 255 seconds)
<lbown>	for a beginner you want something with a terminal and that is easy to install
<Tuplanolla>	Not Arch, dumptruckman.
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<dumptruckman>	I'm gonna use Mint
<erisco>	Unode, I bet it is less IO than you think
<kuribas>	Unode: a lot of IO is done with combinators, so you don't actually have to do IO :)
<Tuplanolla>	(Its GHC is broken.)
<jared-w>	monochrom: the first 40% of the book is getting you a foundation so you don't panic when you learn monads. If you just do exercises from that part, you'll have a very beginner level of knowledge (although sufficient to start on toy projects)
<Welkin>	(x)ubuntu
<bah-tum-tzz>	dumptruckman: what do you mean by "best linux option"? which distribution is recommendable? or how to install haskell-stuff?
<dumptruckman>	how to install haskell stuff
<dminuoso>	dumptruckman, whatever floats your boat. Here I use linux mint because no effort. :)
<Unode>	erisco: I don't know how to quantify that.
<lbown>	I'm using zsh on windows 10
*	davr0s (~textual@host86-157-68-250.range86-157.btcentralplus.com) has joined
<dumptruckman>	i want to use Atom for my editor
<kuribas>	Unode: by using libraries like reactive-banana, pipes, binary, etc...
*	slacko_ has quit (Ping timeout: 260 seconds)
<bah-tum-tzz>	dumptruckman: that depends on the distro. if you use linux mint, you might want to install stack with your package manager. then upgrade stack using `stack upgrade`. and then install ghc and everything with stack.
<monochrom>	dumptruckman: Does it have to be best? Does it have to be perfect? How perfect does it have to be?
<Unode>	erisco: for instance the problem I'm trying to solve now is processing a set of files with an external software, then collect all the outputs and merge them into a single file based on criteria that depend on the content of each output file.
<geekosaur>	alternately you can install haskell via hvr's Ubuntu PPAs
*	cpup has quit (Ping timeout: 246 seconds)
<erisco>	Unode, the objective of writing a program may be to send these bits to those bits, but only some parts of a program need actually deal with the reading of inputs and the writing of outputs
<dumptruckman>	i mean, i just want to be able to use ide-haskell on atom and have the repl work
<dumptruckman>	I got everything working except the repl on windows
<dumptruckman>	and i'm just giving up on that pursuit now
<monochrom>	Now there is a real question.
<Unode>	erisco: sure, I get that. But often enough I'm calling out to system so IO ends up almost everywhere.
*	jellowj has quit (Ping timeout: 276 seconds)
*	mounty (~mounty@n106-70-230-157.rdl1.qld.optusnet.com.au) has joined
*	exbio (~ri@unaffiliated/exbio) has joined
*	fizbin (~Adium@pool-96-235-144-253.cmdnnj.east.verizon.net) has joined
<monochrom>	Always question askers "does it have to be perfect?", and they will spill the beans.
<Unode>	but what do I know. It's probably all wrong since I'm writing it with poor understanding.
<monochrom>	In fact, hell, s/question/challenge/
<dumptruckman>	what do you even mean "perfect"
<dumptruckman>	or you're not talking to me
<dumptruckman>	?
<monochrom>	Yeah, I know right? What do you even mean "best"?
<n_blownapart>	hi this func needs Integral because of the use of the func odd . I added Bool to the signature thinking that was surely correct. so I guess the function is not taking a Bool but the Bool is somehow only in the scope of the case statement? https://ptpb.pw/TcWi
<kuribas>	Unode: say you want to read input, do something with it, then output it, then you can use the interact function : interact :: (String -> String) -> IO ()
<Unode>	these days I find that wget url://stack and launch that is easy enough. Just recently moved from relying on the package manager for this.
*	nakal (~nakal@port-92-201-52-160.dynamic.qsc.de) has joined
<kuribas>	Unode: you don't actually need to write any IO code, just define a function String -> String
<dumptruckman>	monochrom: i was asking for opinions on what is best, surely people have opinions on what that means
*	Welkin has quit (Quit: leaving)
*	peter_ (~peter@71.201.219.141) has joined
<Unode>	kuribas: about libraries, the framework already uses conduit so I was digging into it the other day. I sort of understand it now. But needs more practice.
<monochrom>	Then that is also my answer.
<Tuplanolla>	Correct analysis, n_blownapart.
<bah-tum-tzz>	n_blownapart: use guards instead of the case-statement
<erisco>	dumptruckman, I did not have luck keeping haskell-ide for Atom working. I would work for a bit and then break, in my experience, but I am a numpty for that sort of stuff
<n_blownapart>	thanks Tuplanolla Oh my I'm catching on. thanks bah-tum-tzz this is a book example
<erisco>	dumptruckman, I would rather keep my editor on half a screen and ghci on the other half
<lbown>	if you don't know vi you should learn it
<c_wraith>	You should at least learn how to quit vi
<lbown>	lol
<erisco>	:q!
*	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has joined
<c_wraith>	Because if you don't know, you'll *never* guess
<Tuplanolla>	:t otherwise -- There's a nicer way to do it with guards and this, as bah-tum-tzz said, n_blownapart.
<lambdabot>	Bool
<dumptruckman>	i know vim enough to know that i don't want to learn more
<dumptruckman>	:)
*	fizbin has quit (Ping timeout: 248 seconds)
<dumptruckman>	erisco: good to know
<n_blownapart>	erisco how do you do that in xterm do you know? 
*	argent0 has quit (Ping timeout: 264 seconds)
<Unode>	kuribas: right, I understand that. My point was more that I call a lot of functions that have IO Something as output and I'm still not good with handling that.
*	nakal_ has quit (Ping timeout: 248 seconds)
<Unode>	do syntax is fine but feels like I'm bypassing the learning.
<erisco>	n_blownapart, I couldn't even tell you what xterm was
<n_blownapart>	Tuplanolla, thanks I think I could do it with guards. I'll give it a shot
<kuribas>	Unode: haskell is like a puzzle, once you understand how the pieces fall together, it becomes easy.
<n_blownapart>	erisco,  sorry I use a debian gnome terminal is it not xterm? 
<merijn>	Unode: My usual beginner recommendation is using explicit >>= and fmap until you're comfortable enough writing that way to understand how it desugars
*	revprez_cst (~revprez@pool-108-20-156-103.bstnma.fios.verizon.net) has joined
<merijn>	Unode: Also, in case you haven't read how the desugaring of do works, do that too. https://en.wikibooks.org/wiki/Haskell/do_notation
<Unode>	kuribas: for instance in this ngless software, there's an NGLessIO monad, so MonadIO. And I find myself using liftIO all the time, without actually understanding why.
<kuribas>	Unode: because NGLessIO isn't IO
<kuribas>	Unode: it's a stack that uses IO.
*	bennofs (~benno@2a00:c1a0:4300:dd00:e6a4:71ff:feb5:3f6f) has joined
<erisco>	n_blownapart, I reiterate my previous statement
<monochrom>	Sometimes abstraction means you don't "understand" a lot of things.
<kuribas>	Unode: so you have to "lift" the IO action into the NGLessIO monad.
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
<merijn>	Unode: MonadIO is a typeclass for monads that let you piggyback IO sequencing on whatever else they do. liftIO is just a convenient "turn something IO into any MonadIO" function
*	bah-tum-tzz succeeded in building a package after 2 days of compiling on a raspberry pi 3
<Unode>	kuribas: so something more like "IO (NGLessIO ...)" as opposed to "NGLess (IO ...)"?
<kuribas>	Unode: but since you said you don't know Monad Stack, it's really recommended to read a good text about it.
*	peter_ has quit (Ping timeout: 264 seconds)
<c_wraith>	Unode: liftIO is defined to be "do the minimal conversion to make this IO action work here".  Except with a more specific version of "minimal" which means it really can't do anything except make the types work.
<johnw>	monochrom: you mean, you know the answer but not the content of the answer? ;)
<c_wraith>	Unode: so..  there really isn't anything else to understand.
<monochrom>	haha
<n_blownapart>	how would you split screens in a terminal to get ghci on one side and vim on the other is what I would hope to do..
<c_wraith>	n_blownapart: depends on the terminal.
<Unode>	c_wraith: "make it work", does that mean "perform the action"?
*	mkoenig_ (~mkoenig@93.115.89.214) has joined
<monochrom>	But I don't know how to implement Data.HashSet for example. That is a kind of "not understand".
>nickserv<	identify ****
-NickServ-	You are now identified for n_blownapart.
<merijn>	n_blownapart: Get tmux if it's not already installed on your system
*	fizbin (~Adium@pool-96-235-144-253.cmdnnj.east.verizon.net) has joined
<merijn>	n_blownapart: It's a terminal multiplexer which (among other things) lets you splitscreen terminals anyway you want
<c_wraith>	Unode: are you comfortable with the idea of laws for a class?
*	xiinotulp has quit (Quit: Leaving)
<Unode>	c_wraith: more or less, yes.
<n_blownapart>	thanks merijn checking that
<erisco>	I am more of a class anarchist myself
*	asthasr has quit (Ping timeout: 255 seconds)
<bah-tum-tzz>	n_blownapart: you could also just open two terminal emulator windows, if you use Xorg or so
<monochrom>	However, I know its external guarantees about insert, delete, and lookup for example, and I can demonstrate writing correct programs using it. That is a strong kind of "understand", i.e., predictive power.
<bah-tum-tzz>	bah-tum-tzz: :D
<kuribas>	Unode: it simply means, turn a "IO a" into a "NGLessIO a"
*	asthasr (~asthasr@cpe-174-108-4-76.carolina.res.rr.com) has joined
<c_wraith>	Unode: have you looked at the laws for MonadIO?
<Unode>	c_wraith: no, not yet.
<n_blownapart>	bah-tum-tzz, I do that but I have rather large fonts on a laptop thanks
*	mkoenig has quit (Ping timeout: 276 seconds)
<c_wraith>	Unode: https://hackage.haskell.org/package/base-4.9.1.0/docs/Control-Monad-IO-Class.html
<monochrom>	And a main thesis of software engineering is that I don't want to worry about how to implement Data.HashSet.
<monochrom>	So when I "not understand" it, I'm actually doing it right.
<c_wraith>	Unode: the second law says that binding then lifting gives the same result as lifting then binding.
*	soniku has quit (Ping timeout: 248 seconds)
<kuribas>	Unode: because you cannot fit an "IO a" piece where a "NGLessIO a" piece is needed.
<c_wraith>	Unode: the only way that can possibly work is if lifting lifts the entirety of the effects.
*	ackpacket (~ackpacket@unaffiliated/ackpacket) has joined
<monochrom>	But it's against human nature.
<erisco>	alleviated from the burden of knowing one thing, monochrom is freed to know another
<monochrom>	Human nature is to be an armchair philosopher and "understand" all the fundamentals and getting nothing done.
*	slacko_ (~davi@p2E5B29BE.dip0.t-ipconnect.de) has joined
*	fizbin has quit (Ping timeout: 264 seconds)
<Unode>	c_wraith: so it's more of a wrapper rather than an alias? i.e. "MonadIO (IO ...)" as opposed to "MonadIO = IO" (where MonadIO extend functionality not present in IO)?
<monochrom>	It is like everyone wants to talk about repairing cars but no one actually drives one.
<Unode>	monochrom: that's a good phrasing of how I felt when reading the book we mentioned before. Like I was building a car from scratch.
<Unode>	And I just want to drive it.
<kuribas>	Unode: no, MonadIO is a typeclass, which means liftIO will work for many things.
*	osa1 (~omer@haskell/developer/osa1) has joined
*	Nd-69-M (~nndvc@109.72.55.120) has joined
<Unode>	kuribas: sure, I was trying to simplify the jargon there.
*	muttrat (~quassel@173-18-165-161.client.mchsi.com) has joined
<kuribas>	Unode: a typeclass is neither a wrapper or an alias.
*	cpup (~cpup@32.218.116.65) has joined
*	fizruk (~anonymous@89-178-211-68.broadband.corbina.ru) has joined
*	fizruk has quit (Client Quit)
<c_wraith>	Unode: "simplifying jargon" doesn't work.  The whole point of jargon is to be the simplest correct way to convey its meaning.
<kuribas>	Unode: NGLessIO might be a wrapper, but it doesn't have to be.  And it doesn't really matter.
*	Volt_ (~Volt_@c-68-51-145-60.hsd1.mi.comcast.net) has joined
<Unode>	c_wraith: interesting. Never thought of it like that.
<monochrom>	Unode, #haskell is a pretty sane place where people already use jargons minimally. Be assured that with more than 95% probability you can't further simplify jargons.
*	Nenadovicc has quit (Ping timeout: 246 seconds)
*	mmn80 (uid194575@gateway/web/irccloud.com/x-fcftidzjqavpyyuj) has joined
<monochrom>	(The 5% is when people start saying "thunk" and "closure"!)
<Unode>	monochrom: sometimes it's not so much simplify. It's more like finding terms to which I can link the new ones.
<geekosaur>	the point of a typeclass is to allow types to supply their own implementations of a common functionality. in this case, the MonadIO typeclass is providing the functionality "relay an IO action to an underlying IO monad and relay the result back"
<erisco>	what about monoids in the category of endofunctors?
<Unode>	closure I'm actually familiar with :)
*	CoderPuppy has quit (Ping timeout: 260 seconds)
<geekosaur>	so IO provides its implementation: instance MonadIO IO where liftIO = id
<c_wraith>	Unode: that also usually doesn't work.  The whole reason new terms are created is because the old ones don't work.
<Unode>	(not the language)
*	shafox has quit (Quit: This computer has gone to sleep)
*	acidjnk has quit (Ping timeout: 255 seconds)
<jared-w>	You could possibly find some old terms that are a fuzzy approximation; unfortunately, rather than being a fuzzy (yet accurate) approximation, they are often afuzzy approximation that lead to incorrect mental models
<kuribas>	Unode: btw, what language do you come from?
<jared-w>	like "monads are burritos"
<Unode>	kuribas: mostly Python
<monochrom>	burrito is fairly new
<monochrom>	But I guess I am the old one.
<Tuplanolla>	:t getLine :: Burrito String
<monochrom>	But before burrito there was spacesuit. From dons no less. Giants make horrible mistakes too.
<lambdabot>	Burrito String
*	fizbin (~Adium@pool-96-235-144-253.cmdnnj.east.verizon.net) has joined
<geekosaur>	wasn't the spacesuit one explicit mockery?
*	fizbin has quit (Client Quit)
<monochrom>	But I guess if Hoare got to invent null, dons got to invent spacesuit.
<monochrom>	Naw, that's not my understanding. My understanding is that burrito was an explicit mockery.
<c_wraith>	Burrito was also explicit mockery
*	Rodya_ has quit (Remote host closed the connection)
*	CoderPuppy (~cpup@32.218.116.74) has joined
<geekosaur>	I thought burrito was mockery as well but have had others insist it was proposed seriously (and then *that* was mocked)
<monochrom>	OK!
*	dispanser has quit (Ping timeout: 246 seconds)
*	shafox (~pbehera@106.51.240.179) has joined
*	cpup has quit (Ping timeout: 252 seconds)
<c_wraith>	iirc, burrito was first used in someone's (byorgey's?) blog post begging people to stop writing monad tutorials
<merijn>	I liked the SIGBOVIK paper explaining burritos via monads :p
<kuribas>	Unode: a lot of haskell stuff can be simply understood by looking at the types.
<erisco>	we should found a monad analogy competition, complete with a website and prizes
<monochrom>	In dons's infinite wisdom, he thought up the spacesuit explanation.  <--- Now this is a proposition or a mockery and you can't tell which! Take your pick! >:D
*	exbio has quit (Remote host closed the connection)
*	jeltsch has quit (Quit: jeltsch)
<Tuplanolla>	Monads are like generalized monad tutorials.
<kuribas>	Unode: often what the type tells you is all you need to know, like in the case of liftIO
<merijn>	monochrom: dons' infinite wisdom is that he spends all his time skiing and taking pictures of sunsets, rather than spend his life here on IRC ;)
<monochrom>	Tuplanolla: But how do I bind or join generalized monad tutorials?
<monochrom>	True that.
<monochrom>	Is dons at Facebook now?
<c_wraith>	yes
*	armyriad (~armyriad@gateway/vpn/privateinternetaccess/armyriad) has joined
<n_blownapart>	Tuplanolla, et al this is close I think but getting indent error? https://ptpb.pw/cxaw
<Tuplanolla>	Lifting is narration and joining is concatenation, monochrom.
<merijn>	In a completely unrelated note: conduit is pull only, yes?
<monochrom>	Need to refresh that new memory. Because I am kind of stuck with the stale state of "dons was chartered by a bank".
<erisco>	merijn, speaking of which I was about to go outside to read this paper because you guys are too distracting for me ;P
<c_wraith>	merijn: it was last time I looked, but that's the sort of thing that might change with a new major release
*	jeltsch (~wolfgang@85.253.202.166.cable.starman.ee) has joined
<Tuplanolla>	You have written nonsense, n_blownapart.
*	zblkf (~drlkf@AMontsouris-651-1-209-228.w82-123.abo.wanadoo.fr) has joined
<kuribas>	Unode: it goes like this: why cannot I use a IO String here?  Because you need a NGLessIO String here.  How can I make an NGLessIO from an IO?  By using an higher order function.  Is there one that fits the bill?  In fact there is!  liftIO :: IO a -> NGLessIO a
<geekosaur>	n_blownapart, your indent hygiene is pretty terrible there
<n_blownapart>	dang so I can't write that
<merijn>	c_wraith: damn...so what do I do when I need a push based solution? :p I could use pipes, but I already have/need a bunch of dependencies using conduit so using both conduit and pipes seems wrong :\
<n_blownapart>	but is that the only problem  ? 
<monochrom>	merijn: Is it OK to spawn a thread that converts pull to push?
*	xpo (~xpo@agc-lab3.cs.uit.no) has joined
*	mrkgnao (~mrkgnao@45.64.222.122) has left (""... must ... sleep"")
<n_blownapart>	why the hell can't I be crucify_me hexchat won't let me switch suddenly for no reason
<geekosaur>	I *think* the only thing you need to do is indent the last two lines past the 'p' on the line above them
<merijn>	monochrom: I already have a bunch of threads, so I guess
<n_blownapart>	cool trying that thanks
<monochrom>	:S
*	jellowj (~yellow-ja@dbu133.neoplus.adsl.tpnet.pl) has joined
<geekosaur>	do you have multiple connections again?
<c_wraith>	n_blownapart: you are already logged in as crucify_me from another connection.
*	sleffy has quit (Ping timeout: 240 seconds)
<zblkf>	is it possible to generate documentation for your routes in yesod with haddock ?
<kuribas>	Unode: you may say, but the type of liftIO is MonadIO m => IO a -> m a !
<c_wraith>	n_blownapart: you can use "/whois crucify_me" to get information about it
<kuribas>	Unode: since NGLessIO is an instance of MonadIO, you can substitute NGLessIO for MonadIO.
*	minn (~minn@pool-71-163-97-83.washdc.fios.verizon.net) has joined
<monochrom>	No. Substitute NGLessIO for m.
*	jao has quit (Ping timeout: 260 seconds)
<n_blownapart>	thanks
<merijn>	monochrom: Basically, I have a fork-join pipeline where I have multiple threads (using conduit) pulling from a channel. I'm feeding the channel from another conduit, however the pull setup would flood the channel with way more values than makes sense (like, keeping 10k values in a channel where I'm processing 10 at a time kinda defeats the fixed memory processing dealio
<kuribas>	monochrom: right
*	[n_blownapart] (~john@172-6-186-21.lightspeed.sntcca.sbcglobal.net): realname
*	[n_blownapart] #debian #haskell-beginners #haskell 
*	[n_blownapart] adams.freenode.net :Budapest, HU, EU
*	[n_blownapart] is using a secure connection
*	[n_blownapart] is connecting from *@172-6-186-21.lightspeed.sntcca.sbcglobal.net 172.6.186.21
*	[n_blownapart] idle 00:00:10, signon: Sun Aug 27 11:49:06
*	[n_blownapart] is logged in as n_blownapart
*	[n_blownapart] End of WHOIS list.
*	[crucify_me] (~n_blownap@128.32.176.159): n_blownapart
*	[crucify_me] rajaniemi.freenode.net :Helsinki, FI, EU
*	[crucify_me] is logged in as n_blownapart
*	[crucify_me] End of WHOIS list.
<merijn>	monochrom: I could limit the insert by putting a QSem around the insert, but with a pull setup I might be able to ditch the channel entirely
<kuribas>	Unode: substitute NGLessIO for m.  It's probably weird to think about things when coming from Python, which doesn't have static types at all.
<kuribas>	Unode: think about types
*	erisco has quit (Ping timeout: 248 seconds)
*	neoncontrails has quit (Remote host closed the connection)
*	Scip (~scip@76.121.6.102) has joined
<kuribas>	Unode: surprisingly this "meaningless" puzzling with types often gets you far.
<n_blownapart>	geekosaur, sorry not sure what's up. my work computer is asleep
<monochrom>	That's what the computer tells you when it takes on an alter ego and go out and have fun.
*	cpup (~cpup@32.218.116.89) has joined
<n_blownapart>	Tuplanolla, yes it's nonsense. how would you write that with guards?
<monochrom>	Bah, English is so hard.
<n_blownapart>	word monochrom especially when you're reading text on a conveyor belt
*	cpup- (~cpup@32.218.116.93) has joined
*	slacko_ has quit (Ping timeout: 264 seconds)
<minn>	I recently ported some lexers from flex to alex. I am noticing an order of magnitude performance difference (e.g., 1.0 versus 0.1 seconds to tokenize and print a large file that stresses the internal data structures to stdout). Profiling reveals that internal alex functions and record access/updates (using lenses) account for almost all time spent (50% of the time is spent performing alex's bind operation). Is this to be expected or
<minn>	 does this indicate that I'm doing something wrong? I'm using lazy bytestrings with monadic user state.
*	oisdk has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<Tuplanolla>	@let addOneIfOdd p | odd p = f p | otherwise = p where f p = p + 1 -- Like this, n_blownapart.
<lambdabot>	 Defined.
*	CoderPuppy has quit (Ping timeout: 246 seconds)
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:869:ee18:c8fc:eb36) has joined
*	connrs (~connrs@conners.plus.com) has joined
<Tuplanolla>	(I would inline `f` though.)
<Unode>	kuribas, monochrom thanks for the help
<n_blownapart>	one sec got disconnected ..
<kuribas>	Unode: np, have fun learning!
<n_blownapart>	thanks got the code
*	CoderPuppy (~cpup@32.218.116.98) has joined
*	cpup has quit (Ping timeout: 240 seconds)
*	Rodya_ has quit (Remote host closed the connection)
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	cpup- has quit (Ping timeout: 260 seconds)
*	Kreest_ has quit (Read error: Connection reset by peer)
*	cdg (~cdg@107.19.152.25) has joined
<geekosaur>	minn, I'm checking, I think there's some known issues with inlining (>>=) in ghc 8.2.1 if you are running that version
*	besenwesen is now known as groundfault
*	CoderPuppy has quit (Ping timeout: 240 seconds)
<monochrom>	Wait, was that an issue during release candidates and fixed before releasing?
*	Volt_ has quit (Quit: Volt_)
<geekosaur>	I thought someone mentioned it post-release
*	danthemyth has quit (Ping timeout: 260 seconds)
*	Volt_ (~Volt_@c-68-51-145-60.hsd1.mi.comcast.net) has joined
*	eHammarstrom (~initiumdo@31.208.64.89) has joined
*	lbown has quit (Ping timeout: 240 seconds)
<kuwze>	I am porting some code to haskell, and it makes heavy usage of inheritance for the data-structures. Is there a way to extend a record in haskell?
<geekosaur>	sigh. ghc trac is 500ing
*	cdg has quit (Ping timeout: 252 seconds)
<monochrom>	Yeah it's taking me forever too.
<merijn>	I heard it was down earlier today
<merijn>	maybe still issues?
<geekosaur>	ryantrinkle has a benchmark that is ~60x slower in 8.2.1 because bind isn't being inlind
*	herr_jth has quit ()
<c_wraith>	kuwze: there's no good analogue.  You're going to have to port what the code does, not how it works.
<kuwze>	but you can't extend records? I'm looking at vinyl hoping it can help
<merijn>	I...would not recommend using vinyl to anyone just starting Haskell
*	raichoo has quit (Ping timeout: 248 seconds)
*	TipsyMe has quit (Quit: TipsyMe)
*	shafox has quit (Quit: This computer has gone to sleep)
<minn>	geekosaur: I'm actually using ghc 8.0.2, so I shouldn't be running into issues with current versions of ghc. Thank you for checking, though :) (that seems like an odd issue).
<merijn>	minn: Obvious first question: Did you doublecheck that you compiled with -O/-O2?
<c_wraith>	kuwze: things like vinyl exist  That's why I said there's no *good* analogue.  I mean, vinyl works, but it's incredibly complicated and usually not the best approach.
*	diegoksp (~diegoksp@190.153.194.178) has joined
*	shafox (~pbehera@106.51.240.179) has joined
*	asthasr_ (~asthasr@cpe-174-108-4-76.carolina.res.rr.com) has joined
<dminuoso>	Is there a way to have ghci add explicit parens to see how an expression associates?
<kuwze>	c_wraith: thanks for making it more explicit, I keep stumbling on things hoping there's a quick fix (or a good analog)
<dminuoso>	Hoping for something along the lines of `:p foo bar` :-)
*	toby1851 (~toby@yali.mythic-beasts.com) has joined
*	kdisneur has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	Jeanne-Kamikaze has quit (Quit: Leaving)
<minn>	merijn: Yeah - I have stack configured to compile with -O2. I'm currently trying to ensure that I'm not running into issues with laziness (I hate to say this, but this is my first time trying to track down performance problems in Haskell).
*	wespiser (~wespiser@2601:197:a80:19e4:7137:8025:fb11:b683) has joined
<geekosaur>	dminuoso, as far as I know the closest you can get is -ddump-parsed
<kuwze>	c_wraith: what do you think of this tactic?: http://yi-editor.blogspot.com/2008/12/prototypes-encoding-oo-style.html
<geekosaur>	but that's nbot going to dump it as Haskell code
*	asthasr has quit (Ping timeout: 248 seconds)
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
<c_wraith>	kuwze: I think that if you don't know haskell well, you're likely to introduce infinite loops you'll have trouble debugging with that approach.
*	vjacob (~vjacob@185.145.38.234) has joined
*	peter_ (~peter@71.201.219.141) has joined
<kuwze>	c_wraith: I definitely don't know haskell well
<kuwze>	c_wraith: thanks for the advice
*	alex`` has quit (Quit: WeeChat 1.9)
<c_wraith>	kuwze: there is a simpler thing you might consider - replace the hierarchy from the original code with a record of the operations it provides.
*	Immune (~Immune@47.145.46.247) has joined
<c_wraith>	kuwze: that's the most direct translation of OO objects to Haskell.  You can create all kinds of different behaviors in values of the same type.
*	theelous3 (~theelous3@unaffiliated/theelous3) has joined
*	peter_ has quit (Ping timeout: 260 seconds)
<kuwze>	c_wraith: what do you mean by "record of the operations in provides"?
<dminuoso>	geekosaur, how do you reason about how code associates? Do you know the infixity declarations of all your operators?
<dminuoso>	Or is that a thing you just quickly check in ghci while you code?
<geekosaur>	generally, and if I dont then I can ask ghci (:i)
<dminuoso>	k :)
*	efeuska has quit (Ping timeout: 255 seconds)
<c_wraith>	kuwze: you start with the operations the type should support, then create a data type that contains the set of operations as functions.
*	Nd-69-M has quit (Ping timeout: 240 seconds)
<n_blownapart>	https://ptpb.pw/5KFu  no clue I tried to format Tup*anolla 's code differently
<n_blownapart>	getting indent errors again
*	Nd-69-M (~nndvc@109.72.55.120) has joined
<geekosaur>	that looks pretty wrong to me, if it's at top level then you do not want let, if it does require let then the type signature needs to be inside the let
<c_wraith>	kuwze: this would be easier to demonstrate with a list of functions. :)
<n_blownapart>	thanks checking that geekosaur 
<merijn>	c_wraith, kuwze: If you need an example of that, I've got one here: https://github.com/merijn/broadcast-chan/blob/master/benchmarks/Channels.hs :)
*	fizruk (~anonymous@89-178-211-68.broadband.corbina.ru) has joined
<kuwze>	c_wraith: thank you!
<c_wraith>	merijn: thanks
<kuwze>	merijn: thanks, I will look at that
<merijn>	I'm to busy to help explain, but non-abstract examples help ;)
<merijn>	Plus, it's fairly straightforward
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
*	zblkf has quit (Quit: WeeChat 1.6)
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:1027:8e45:aaa8:3b5b) has joined
*	Rodya_ has quit (Remote host closed the connection)
*	nshepperd has quit (Quit: WeeChat 1.9)
*	jao (~jao@pdpc/supporter/professional/jao) has joined
<bah-tum-tzz>	hackage down?
<kuwze>	merijn: thank you so much, I'm actually working on a library that consumes an event stream from a file, so broadcast-chan looks very useful
<merijn>	bah-tum-tzz: Looks like it
*	Immune has quit (Ping timeout: 240 seconds)
*	ixti (~ixti@46.red-83-43-158.dynamicip.rima-tde.net) has joined
<geekosaur>	http://auto-status.haskell.org/
<merijn>	kuwze: The current version on hackage is a bit pointless, imo. The github version is looking much better, but haven't gotten around to finishing everything up nicely to distribute it
<merijn>	Which means the entire API is completely unstable with no promises whatsoever :p
<merijn>	kuwze: probably want something like pipes/conduit for streaming from files anyway
<kuwze>	merijn: right now it will consume events from a file, but eventually it will be receiving events over the network
<kuwze>	merijn: just got to make sure it works right with historical data
<n_blownapart>	I'm just guessing geekosaur but this won't work either https://ptpb.pw/H3BR
*	takle has quit (Remote host closed the connection)
<geekosaur>	(a) that makes little sense, you are taking p as a parameter only to immediately shadow it with a lambda?
<geekosaur>	(b) guards are not part of "where"
<n_blownapart>	God I'm having a hard time. 
<geekosaur>	if you have guards inside a "where" then they would have to attach to a binding in the "where"; they cannot attach to the outer binding
*	albertus1 (~seb@x4e32df9e.dyn.telefonica.de) has joined
<geekosaur>	and then your guard, if it did scope to the definition of ff, would infinite loop if p were odd
<geekosaur>	in fact I have no idea what you're trying to accomplish there
*	dispanser (~dispanser@x590e14a6.dyn.telefonica.de) has joined
<n_blownapart>	http://lpaste.net/358015  this is the original exercise. it got thrashed . the idea was to rewrite the where statement
*	Deewiant has quit (Ping timeout: 258 seconds)
*	shafox has quit (Quit: This computer has gone to sleep)
<n_blownapart>	which I guess is just f = ( \n -> n + 1 )
<geekosaur>	... there is context missing here. "rewrite" in what way?
<n_blownapart>	using a \n notation
*	caisah has quit (Quit: My work is done here.)
<geekosaur>	f = ( \n -> n + 1 )        is correct if that's all you;r;e supposed to do. no other changes needed
<geekosaur>	if you wanted to also rewrite using guards: http://lpaste.net/358015#a2384509402573963264
*	rockfordal (~Rockforda@c-62-220-170-253.cust.bredband2.com) has joined
<n_blownapart>	geekosaur, I think I was trying to do that initially thanks alot
<n_blownapart>	I mean write it using guards.. 
*	Immune (~Immune@47.145.46.247) has joined
*	zariuq has quit (Ping timeout: 252 seconds)
*	gugah (~gugah@181.28.218.205) has joined
*	dahan (uid190916@gateway/web/irccloud.com/x-yvidkkdcdoodjlsz) has joined
*	amar_ (~amarpotgh@p5796711B.dip0.t-ipconnect.de) has joined
*	tsaka__ has quit (Ping timeout: 260 seconds)
*	amar_ is now known as Guest20166
*	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined
*	dispanser has quit (Ping timeout: 240 seconds)
*	takle has quit (Remote host closed the connection)
*	OnkelTem has quit (Quit: went to restart in 17.04. God bless me)
Python interface unloaded
**** ENDING LOGGING AT Sun Aug 27 13:30:12 2017

**** BEGIN LOGGING AT Mon Aug 28 11:38:40 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	jncunha (~jncunha@a89-152-161-129.cpe.netcabo.pt) has joined
*	leah2 has quit (Ping timeout: 252 seconds)
<reactormonk>	edwardk, is there a way to use hashing to speed up a on a Grouping1? Not that easy to attach a `Hashable` instance.
*	hc_ (~ircd@unaffiliated/hc) has joined
*	bobakk3r has quit (Quit: Leaving.)
*	bobakk3r (~Adium@dhcp-077-251-207-252.chello.nl) has joined
*	crissava (~crissava@2a02:2f0b:4010:aa2:a5e5:a1aa:3bb6:5bcd) has joined
*	hackagebot distributed-static 0.3.8 – Compositional, type-safe, polymorphic static values and closures – https://hackage.haskell.org/package/distributed-static
*	hackagebot codec-rpm 0.1.3 – A library for manipulating RPM files – https://hackage.haskell.org/package/codec-rpm
*	hc has quit (Ping timeout: 240 seconds)
*	jbgi has quit (Ping timeout: 252 seconds)
*	drewbert has quit (Remote host closed the connection)
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
*	bobakk3r has quit (Client Quit)
*	pylbrecht (~pylbrecht@2a02:8109:8a40:2f28:704:3793:833f:e990) has joined
*	lkolstad (~ljk@c-24-16-12-195.hsd1.wa.comcast.net) has joined
*	marr (~ccc@159-205-229-96.adsl.inetia.pl) has joined
*	rzp (~christoph@dslb-088-073-066-106.088.073.pools.vodafone-ip.de) has joined
*	sfcg (~sfcg@79.97.176.188) has joined
*	lamefun has quit (Quit: lamefun)
*	tomphp (~tomphp@213.205.198.209) has joined
*	dhil (~dhil@dhcp-90-078.inf.ed.ac.uk) has joined
*	zachk (~Zach@unaffiliated/zachk) has joined
<cocreature>	oh new release of distributed-static. I still need to take some time to play around with static pointers
*	Guest43 has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<jared-w>	oh neat
*	MichaelBurge (~quassel@2603:3004:620:5c00:6959:8167:213e:5d75) has joined
*	jimmyrcom (~fold@71-11-240-211.dhcp.dntn.tx.charter.com) has joined
*	jellowj (~yellow-ja@diu246.neoplus.adsl.tpnet.pl) has joined
*	lbown (~logan@131.194.165.243) has joined
*	lbown has quit (Client Quit)
*	baweaver is now known as baweaver_away
*	baweaver_away is now known as baweaver
*	skeuomorf (~skeuomorf@unaffiliated/skeuomorf) has joined
*	Guest43 (~textual@ptr-1pmiu65hlh48bocdu9y.18120a2.ip6.access.telenet.be) has joined
*	tortal (tortal@unaffiliated/tortal) has joined
*	baweaver is now known as baweaver_away
*	baweaver_away is now known as baweaver
*	baweaver is now known as baweaver_away
*	prophile has quit (Quit: The Game)
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
*	tomphp has quit (Ping timeout: 248 seconds)
*	tomphp_ (~tomphp@213.205.198.209) has joined
*	dispanser has quit (Ping timeout: 276 seconds)
*	baldrick1 (~duncan@bny92-5-82-232-58-132.fbx.proxad.net) has left
*	Guest43 has quit (Client Quit)
*	ravennat (~Nat@24.117.208.46.dyn.plus.net) has joined
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
*	drewbert has quit (Remote host closed the connection)
*	bsima (~bsima@138.68.63.9) has joined
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
*	argent0 (~aner@186.133.188.1) has joined
*	chaosmasttter has quit (Ping timeout: 252 seconds)
*	vincenzo (~hawk@host94-130-dynamic.16-87-r.retail.telecomitalia.it) has joined
*	justanotheruser has quit (Ping timeout: 252 seconds)
*	whoisxy has quit (Ping timeout: 248 seconds)
<miscyb>	hi i was here earlier trying to create a combinator for servant that would let you specify a constant query parameter
*	chaosmasttter (~chaosmast@p200300EB7BD65B91021FE2FFFE8BD789.dip0.t-ipconnect.de) has joined
<miscyb>	i'm having some trouble so here's a past of what i was doing
*	KarboniteKream (~klemen@188-230-158-178.dynamic.t-2.net) has joined
<miscyb>	http://lpaste.net/358034
<miscyb>	i'm kinda new to this advanced type stuff so if anyone could explain that error that would be awesome
*	asthasr (~asthasr@cpe-174-108-4-76.carolina.res.rr.com) has joined
*	KarboniteKream has quit (Client Quit)
*	jeltsch (~wolfgang@85.253.202.166.cable.starman.ee) has joined
*	sssilver (~sssilver@38.122.48.218) has joined
*	steeze (~steeze@63.76.231.82) has joined
*	eacameron has quit (Remote host closed the connection)
<miscyb>	the idea for that code is that you'll be able to differentiate from "route.json?action=foo" and "route.json?action=bar"
*	asthasr_ has quit (Ping timeout: 255 seconds)
*	CoderPuppy (~cpup@32.218.113.242) has joined
*	eacameron (~eacameron@2601:403:c003:ecc0:c1b4:c6:6fe1:a66e) has joined
*	sssilver has quit (Client Quit)
*	steeze has quit (Client Quit)
<remexre>	With Haskeline, is there any way to change the base monad of InputT?
<remexre>	The type of mapInputT is (m a -> m a) -> InputT m a -> InputT m a, rather than the expected (m a -> n b) -> InputT m a -> InputT n b
*	eelster has quit (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
*	tobhe (~tobhe@141.84.69.68) has joined
*	cpup has quit (Ping timeout: 240 seconds)
*	asthasr_ (~asthasr@cpe-174-108-4-76.carolina.res.rr.com) has joined
*	groundfault is now known as gehidora
*	pylbrecht has quit (Quit: Segmentation fault (core dumped))
*	leah2 (~leah@vuxu.org) has joined
*	sssilver (~sssilver@38.122.48.218) has joined
*	sssilver has quit (Client Quit)
*	rblaze has quit (Quit: Leaving.)
*	gehidora is now known as besenwesen
*	asthasr has quit (Ping timeout: 255 seconds)
*	MP2E (~cray@ip68-224-146-82.lv.lv.cox.net) has joined
*	iomotoko has quit (Quit: leaving)
*	sssilver (~sssilver@38.122.48.218) has joined
*	tobhe has quit (Ping timeout: 252 seconds)
*	rblaze (~Adium@2620:10d:c091:200::16d0) has joined
*	davr0s (~textual@host86-157-68-250.range86-157.btcentralplus.com) has joined
*	Apocalisp (~textual@172.110.61.179) has joined
*	Orion3k (~Orion3k@47-51-33-228.static.mtpk.ca.charter.com) has joined
*	tobhe (~tobhe@141.84.69.68) has joined
*	egis has quit (Quit: Leaving)
*	argent0 has quit (Ping timeout: 248 seconds)
*	cyphase (~cyphase@unaffiliated/cyphase) has joined
<ocharles>	remexre: It doesn't look possible to me
*	steeze (~steeze@63.76.231.82) has joined
<remexre>	Hmm, that's what I feared. I guess I'll make a stub function and file an issue
*	tobhe has quit (Ping timeout: 260 seconds)
*	kuribas has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
*	dispanser (~dispanser@x590e23ca.dyn.telefonica.de) has joined
*	mmn80 (uid194575@gateway/web/irccloud.com/x-ewtpnvopqpeitahe) has joined
*	prietoj has quit (Ping timeout: 240 seconds)
*	drewbert has quit (Remote host closed the connection)
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
*	coot____________ (~coot@188.146.171.165.nat.umts.dynamic.t-mobile.pl) has joined
*	epsilonhalbe (~epsilonha@84-113-106-42.cable.dynamic.surfer.at) has joined
*	biglama (~Day_dream@ip-188.net-82-216-175.joinville2.rev.numericable.fr) has joined
*	theelous3 has quit (Remote host closed the connection)
*	theelous3 (~theelous3@unaffiliated/theelous3) has joined
*	cdg (~cdg@65.50.0.4) has joined
*	inhortte has quit (Ping timeout: 246 seconds)
*	latro`a has quit (Read error: Connection reset by peer)
*	Psybur__ is now known as Psybur
*	cpup (~cpup@32.218.114.28) has joined
*	plutoniix (~q@node-37b.pool-125-25.dynamic.totbb.net) has joined
*	miscyb has quit (Quit: WeeChat 1.9)
*	cdg has quit (Ping timeout: 248 seconds)
*	tomphp_ has quit (Ping timeout: 240 seconds)
*	dhil has quit (Ping timeout: 240 seconds)
*	garphy`aw is now known as garphy
*	atomi has quit (Ping timeout: 240 seconds)
*	CoderPuppy has quit (Ping timeout: 248 seconds)
*	Cassiopaya (~Discovery@172.111.214.142) has joined
*	Cassiopaya has quit (Killed (Sigyn (Spam is off topic on freenode.)))
*	wedify has quit (Ping timeout: 248 seconds)
*	plutoniix has quit (Read error: Connection reset by peer)
*	dsantiag_ (~dsantiago@cpe-104-175-193-69.socal.res.rr.com) has joined
*	plutoniix (~q@node-37b.pool-125-25.dynamic.totbb.net) has joined
*	dsantiago has quit (Ping timeout: 246 seconds)
<filthy_causual2_>	miscyb: I think you need ScopedTypeVariables. Though I am not sure why it can't unify them...I would into where the class is defined too.
*	albertus1 (~seb@x55b4b8f7.dyn.telefonica.de) has joined
*	albertus1 has quit (Max SendQ exceeded)
*	tomphp (~tomphp@213.205.198.102) has joined
*	albertus1 (~seb@x55b4b8f7.dyn.telefonica.de) has joined
*	peter_ has quit (Ping timeout: 240 seconds)
*	HallaSurvivor (~HallaSurv@2601:547:501:21b2::e6c4) has joined
*	wedify (~flobberle@S01061cabc06b7d23.lb.shawcable.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	plutoniix (~q@node-37b.pool-125-25.dynamic.totbb.net) has joined
*	cschneid_ has quit ()
*	plutoniix has quit (Read error: Connection reset by peer)
*	KeyJoo has quit (Quit: Good luck! Have a nice Day!)
*	plutoniix (~q@node-37b.pool-125-25.dynamic.totbb.net) has joined
*	asthasr__ (~asthasr@cpe-174-108-4-76.carolina.res.rr.com) has joined
*	otulp (~otulp@144.119.45.31.customer.cdi.no) has joined
*	`^_^v has quit (Quit: Leaving)
*	cdg (~cdg@157.166.173.4) has joined
*	zariuq (~zar@0x3e2c874d.mobile.telia.dk) has joined
*	ccomb has quit (Remote host closed the connection)
*	tikhon (~user@50-1-48-198.dsl.dynamic.sonic.net) has joined
*	asthasr_ has quit (Ping timeout: 252 seconds)
<tikhon>	What's a good type for maintaining a sorted sequence of items?
*	gdog (~george@2.31.52.244) has joined
<APic>	No Idea?
*	Volt_ has quit (Quit: Volt_)
<APic>	✝ Volt_
*	ubsan has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<cocreature>	tikhon: what operations do you want to perform on that sequence?
*	plutoniix has quit (Read error: Connection reset by peer)
*	Blkt has quit (Remote host closed the connection)
<tikhon>	mostly inserting things and keeping it sorted
*	eschnett has quit (Quit: eschnett)
*	Blkt (~Blkt@2a01:4f8:200:2425::adda) has joined
*	rblaze has quit (Quit: Leaving.)
*	Blkt has quit (Read error: Connection reset by peer)
<cocreature>	do you need duplicates?
<tikhon>	yeah, I think so
<cocreature>	and why do you need it to be sorted? do you just want to be able to enumerate them in order?
*	plutoniix (~q@node-37b.pool-125-25.dynamic.totbb.net) has joined
*	Blkt (~Blkt@2a01:4f8:200:2425::adda) has joined
*	Blkt has quit (Remote host closed the connection)
<tikhon>	well, that and getting the first/last, probably
*	eelster (~textual@173-161-205-177-Philadelphia.hfc.comcastbusiness.net) has joined
*	Blkt (~Blkt@2a01:4f8:200:2425::adda) has joined
*	eelster has quit (Client Quit)
<cocreature>	sounds like you want a multiset 
<cocreature>	e.g. https://hackage.haskell.org/package/multiset-0.3.3/docs/Data-MultiSet.html
*	rblaze (~Adium@2620:10d:c091:200::3c24) has joined
*	Sampuka (~Sampuka@x1-6-24-7f-20-00-22-92.cpe.webspeed.dk) has joined
<tikhon>	oh yeah, wouldn't have thought of that
<tikhon>	thanks
*	plutoniix has quit (Read error: Connection reset by peer)
*	sssilve__ (~sssilver@38.122.48.218) has joined
*	plutoniix (~q@node-37b.pool-125-25.dynamic.totbb.net) has joined
*	db8093246 has quit (Remote host closed the connection)
*	acertain (~zcarterc@unaffiliated/fread2281) has joined
*	raichoo has quit (Ping timeout: 260 seconds)
*	baweaver_away is now known as baweaver
<lavalike>	remexre: what happens for m = IO, n != IO ?
*	numee has quit (Ping timeout: 248 seconds)
<remexre>	n would have to be MonadIO, so it gets liftIO'd?
*	`^_^v (~nycs@gw.hq.meetup.com) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
<lavalike>	where does that constraint come from?
<remexre>	InputT requires m to be MonadException, which requires MonadIO
*	sssilver has quit (Ping timeout: 252 seconds)
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
<lavalike>	I see!
*	plutoniix (~q@node-37b.pool-125-25.dynamic.totbb.net) has joined
*	tomphp has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<lavalike>	controlIO has a funny type
*	BonParaAra (2e051063@gateway/web/freenode/ip.46.5.16.99) has joined
*	gdog has quit (Quit: This computer has gone to sleep)
*	osa1 (~omer@91.93.255.229) has joined
*	osa1 has quit (Changing host)
*	osa1 (~omer@haskell/developer/osa1) has joined
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
*	oish has quit (Ping timeout: 252 seconds)
*	simukis (~simukis_@78-60-58-6.static.zebra.lt) has joined
*	dispanser has quit (Ping timeout: 246 seconds)
*	LiaoTao has quit (Quit: ZNC 1.6.4 - http://znc.in)
*	machinedgod has quit (Quit: leaving)
*	parable_ (~wersing@50-200-204-218-static.hfc.comcastbusiness.net) has left
*	CoderPuppy (~cpup@32.218.114.95) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	higs (higs@94.26.49.130) has joined
*	higs (higs@94.26.49.130) has left
*	plutoniix (~q@node-37b.pool-125-25.dynamic.totbb.net) has joined
*	prietoj (~user@host86-181-92-195.range86-181.btcentralplus.com) has joined
*	anton___ has quit (Remote host closed the connection)
*	nickolay has quit (Ping timeout: 248 seconds)
*	reactormonk has quit (Ping timeout: 240 seconds)
*	higs (higs@94.26.49.130) has joined
*	higs (higs@94.26.49.130) has left
*	chaosmasttter has quit (Quit: WeeChat 1.9)
*	trigone (56c9d193@gateway/web/freenode/ip.86.201.209.147) has joined
<trigone>	hi! do i need an extension to use Phantom types?
<tikhon>	no
<tikhon>	phantom types are a specific usecase of normal type parameters, they're not a language feature unto themselves
*	cpup has quit (Ping timeout: 248 seconds)
*	henriksod has quit (Quit: henriksod)
*	HarveyPwca has quit (Ping timeout: 240 seconds)
<trigone>	ok thx! and there's no way to use them with type synonyms, aka without having to wrap the values with data constructors?
<raynold>	ahh it's a wonderful day :D
*	plutoniix has quit (Read error: Connection reset by peer)
<johnw>	trigone: you can use them with newtype
*	LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) has joined
<tikhon>	trigone: think of type synonyms as something you can completely replace throughout your whole program
*	herr_jth has quit ()
*	prietoj has quit (Ping timeout: 248 seconds)
*	BonParaAra has quit (Quit: Page closed)
*	ecthiender (~ecthiende@unaffiliated/ecthiender) has joined
**** ENDING LOGGING AT Mon Aug 28 13:27:58 2017

**** BEGIN LOGGING AT Sat Sep  2 12:52:27 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:12 2017)
*	Channel #haskell url: http://www.haskell.org/
*	halogenandtoast has quit (Ping timeout: 248 seconds)
*	mmhat has quit (Quit: WeeChat 1.9)
*	twandy has quit (Client Quit)
*	Elish has quit (Quit: Elish)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<monochrom>	Yes, this is half of why writing a thesis is so hard, and whoever gets it done is celebrated with a party.
<monochrom>	(The other half is choosing a good problem and its scope to work on.)
*	bmeynell (~bmeynell@142-197-108-175.res.bhn.net) has joined
*	takle has quit (Ping timeout: 246 seconds)
*	crobbins (~crobbins@2600:1700:6391:1c20:e9a2:9c89:f0bb:7f7c) has joined
<[exa]>	jared-w: draw a thinkmap or a diagram and use rigorous flattening tools on that
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Tuplanolla>	Tell a story, but keep it shallow, jared-w.
<jared-w>	oooh, that's a good idea [exa]
*	a3Dman has quit (Ping timeout: 240 seconds)
<Tuplanolla>	See `texdoc tikz` or `texdoc beamer` for examples, jared-w.
*	xft0 (~Anonymous@user-94-254-235-116.play-internet.pl) has joined
*	xft0 has quit (Read error: Connection reset by peer)
*	twandy has quit (Client Quit)
*	fiddlerwoaroof (~fiddlerwo@unaffiliated/fiddlerwoaroof) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	hazyPurple (~hazyPurpl@14.140.110.205) has joined
*	crobbins has quit (Ping timeout: 246 seconds)
*	hazyPurple has quit (Max SendQ exceeded)
*	hazyPurple (~hazyPurpl@14.140.110.205) has joined
*	Yuuri (5d6dc562@gateway/web/freenode/ip.93.109.197.98) has joined
*	danza has quit (Quit: Leaving)
*	OnkelTem has quit (Ping timeout: 240 seconds)
*	nsnth (adefe863@gateway/web/freenode/ip.173.239.232.99) has joined
*	a3Dman (~3Dman@156.222.119.66) has joined
*	a3Dman has quit (Changing host)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<Yuuri>	Is aeson a library of choice for JSON parsing? Are there reasons to prefer any other?
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	hackagebot mbtiles 0.6.0.0 – Haskell MBTiles client. – https://hackage.haskell.org/package/mbtiles
*	sfcg (~sfcg@79.97.176.188) has joined
*	biglama has quit (Ping timeout: 248 seconds)
*	takle (~takle@host86-166-243-7.range86-166.btcentralplus.com) has joined
<jared-w>	Tuplanolla: I'll check those out, thanks :)
*	AndreasK has quit (Ping timeout: 248 seconds)
<epta>	is there any way to add all library deps as a test deps automatically (except hpack)?
*	sfcg has quit (Remote host closed the connection)
*	sfcg (~sfcg@79.97.176.188) has joined
<monochrom>	Yuuri: I use aeson. I don't know there are others.
*	zachk (~Zach@unaffiliated/zachk) has joined
*	sfcg has quit (Read error: Connection reset by peer)
*	biglama (~Day_dream@ip-188.net-82-216-175.joinville2.rev.numericable.fr) has joined
*	sfcg (~sfcg@79.97.176.188) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	drdo (~drdo@overlord0.drdo.eu) has left
*	a3Dman has quit (Ping timeout: 240 seconds)
*	drdo (~drdo@overlord0.drdo.eu) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<cocreature>	there are some other libs but aeson is by far the most popular one
*	systemfault has quit (Quit: Bye!)
<Limeth_>	Any easy way to run `stack ghci` with "syntax highlighting"? Like some sort of colored mode?
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	al-damiri (uid142631@gateway/web/irccloud.com/x-vbnqwkpbqmrgxtrt) has joined
*	pellenation has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	Denthir (~textual@128-76-242-152-cable.dk.customer.tdc.net) has joined
*	sfcg has quit (Remote host closed the connection)
<jared-w>	syntax highlighting? In GHCi?
*	Mutter (~Mutter@2601:647:cb02:72b0:44b6:acec:2daf:6146) has joined
*	marvin2 (~m@cpe-188-129-60-232.dynamic.amis.hr) has joined
<jared-w>	There's ghci --color
<Limeth_>	Something like this: https://camo.githubusercontent.com/7ba745679887b0192bb52045e2eca1f4b3377c77/68747470733a2f2f7261772e6769746875622e636f6d2f72687973642f676863692d636f6c6f722f6d61737465722f6361702e6a7067
*	kolko has quit (Read error: Connection reset by peer)
*	Associat0r (~Associat0@31-151-60-131.dynamic.upc.nl) has joined
*	Associat0r has quit (Changing host)
*	Associat0r (~Associat0@unaffiliated/associat0r) has joined
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	twandy has quit (Client Quit)
<epta>	jared-w: any way to pass it to 'cabal new-repl'?
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	fendoer has quit (Ping timeout: 248 seconds)
*	kolko (~kolko@ppp109-252-90-39.pppoe.spdop.ru) has joined
<cocreature>	jared-w: are you sure that’s a thing? doesn’t seem to work for me
*	terrorjack has quit (Quit: Connection closed for inactivity)
<jared-w>	oh whoops, I was reading the wiki page wrong
*	przemkovv has quit (Read error: Connection reset by peer)
<Limeth_>	jared-w: It outputs 'ghc: unrecognised flag: --color' when I run `ghci --color`
<cocreature>	jared-w: for a short moment I was very exited :)
*	conal (~conal@185.169.255.8) has joined
<Limeth_>	Yeah, I was reading the same thing :D
*	przemkovv (~przemkovv@gandalf.kari.put.poznan.pl) has joined
<jared-w>	my apologies lol. I was also excited
*	bmeynell has quit (Remote host closed the connection)
<geekosaur>	I think there's a hack to pipe ghci output through hscolour, but that's it
<Tuplanolla>	It breaks a lot.
<jared-w>	https://github.com/rhysd/ghci-color  there's this which implements the 'sed' hackery that's mentioned in the wiki
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	sfcg (~sfcg@79.97.176.188) has joined
*	julienchurch (~jules@70.44.247.125.res-cmts.tnk.ptd.net) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Limeth_>	I've found this, which uses hscolour, but the post is from 4 years ago. https://www.reddit.com/r/haskell/comments/144biy/pretty_output_in_ghci_howto_in_comments/
*	lambdaGrp (~lambdaGrp@249.74.192.178.dynamic.wline.res.cust.swisscom.ch) has joined
<jared-w>	That's the one that breaks a lot :)
*	bigdaddytank (~bigdaddyt@47.187.79.33) has joined
*	bigos (~jacek@cpc103102-ward12-2-0-cust346.10-2.cable.virginm.net) has joined
<Limeth_>	I'll give 'ghci-color' a try, then
*	cloudhead (~cloudhead@ip5f5bd3e7.dynamic.kabel-deutschland.de) has joined
*	tabemann (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	julienchurch has quit (Client Quit)
*	L8 (~Michael@unaffiliated/misha123) has joined
*	twandy has quit (Client Quit)
<L8>	hey guys, question: how can I pattern match a record of a specific value? for example, having: "data Car = Car { name :: String }"; I want to return a value when I'm calling my function with Car "Tesla"
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	ashpokemonZ has quit (Quit: Leaving)
<L8>	so that my function (someFunc :: Car -> Bool), will do: someFunc Car("Tesla") = True
*	conal_ (~conal@client-7-151.visitor-network.oxuni.org.uk) has joined
*	jellowj has quit (Ping timeout: 240 seconds)
*	twandy has quit (Client Quit)
<geekosaur>	you can match it positionally like a non-record: someFunc (Car "Tesla") = ...
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	conal has quit (Ping timeout: 248 seconds)
<geekosaur>	or do the same with field selection sntax: someFunc (Car {name = "Tesla"}) = ...
<geekosaur>	te positional form requires you have fields in the same order as declared; record syntax can be in any order
*	bbear (~david@212-198-113-54.rev.numericable.fr) has joined
<L8>	geekosaur, right, thanks!
<L8>	I did the same thing initially but GHC complained about redundant pattern matching
<L8>	I was thinking that maybe he's ignoring concrete values, but looking again I actually had redundent definitions
<L8>	silly me.
*	jellowj (~yellow-ja@dak100.neoplus.adsl.tpnet.pl) has joined
*	Yuuri has quit (Ping timeout: 260 seconds)
*	CoderPuppy (~cpup@32.218.119.57) has joined
*	beerdrop has quit (Ping timeout: 260 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	cpup has quit (Ping timeout: 260 seconds)
*	vjacob has quit (Ping timeout: 260 seconds)
<thoughtpolice>	L8: For the record, you can even be super fancy if you want: `someFunc car@(Car {}) | name car == "Tesla" = ...`
*	a3Dman has quit (Ping timeout: 240 seconds)
<thoughtpolice>	I'm weird, but I like this style. It's also more convenient IMO if you want to check multiple things (for example, if you wanted to check cost, you could change the clause to `| name car == "Tesla", cost car < 50000 = ...`, etc)
*	twandy has quit (Client Quit)
*	falafel has quit (Ping timeout: 264 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<L8>	thoughtpolice, for my case I just want to apply some "sample data", so my actual function is called "getState" and for a given x and y it returns a boolean
<thoughtpolice>	The empty `{}` syntax also means that the pattern match is independent of the number of arguments to the constructor; e.g. if you add another argument to `Car`, the match still works as expected.
<L8>	and thanks for the alternative! :)
*	slomo has quit (Read error: Connection reset by peer)
*	kuwze has quit (Quit: Page closed)
*	ejay (~edwin@public-gprs358837.centertel.pl) has joined
<mac10688>	http://lpaste.net/358168
*	jellowj has quit (Ping timeout: 246 seconds)
<mac10688>	anyone know how to make the buildItemArmor function simpler?
<thoughtpolice>	L8: Right, there are many, many ways to pattern match in Haskell, so you can pick and choose. Most of those features work in any place a pattern match occurs, too.
*	revtintin has quit (Ping timeout: 246 seconds)
*	otto_s_ has quit (Remote host closed the connection)
*	ertes has quit (Ping timeout: 248 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<thoughtpolice>	So you can also do `case x of { Foo a b | a == 10 -> ...; Foo a b -> ...; _ -> ... }` by using `|` on the case clause. Or you can use it with `let` too, like `let x | b == True = ...`, etc
*	lambdaGrp has quit (Quit: leaving)
*	anton__ has quit (Remote host closed the connection)
<thoughtpolice>	So practically any place you can do a pattern match, you can add a guard, @ patterns, etc. If you keep this in mind you can keep some code pretty clean, especially with -XPatternSynonyms.
*	conal (~conal@185.169.255.8) has joined
<thoughtpolice>	It's especially useful with `case`, IMO.
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	conal_ has quit (Ping timeout: 240 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	eschnett has quit (Quit: eschnett)
<edwardk>	monochrom: the price was for 15 minutes actually
*	hexfive has quit (Quit: WeeChat 1.9)
<monochrom>	Oh haha
*	vjacob (~vjacob@185.145.38.234) has joined
*	twandy has quit (Client Quit)
*	yqt has quit (Quit: KVIrc 4.0.4 Insomnia http://www.kvirc.net/)
<edwardk>	monochrom: I wanted to make sure that if someone had an urgent haskell question they could always get an answer
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<edwardk>	As a sort of support backstop
<monochrom>	What is that URL again where you have your coding/coaching rate?
<edwardk>	I since dropped it
*	peterbecich has quit (Ping timeout: 260 seconds)
<monochrom>	booo...
<edwardk>	It was getting too many false positives
<edwardk>	And I never actually charged any of the folks who asked me questions
<monochrom>	Wait, false positives? People enquired you for PHP help or something?
<edwardk>	The meta discussion was more noise than the discussion
*	a3Dman has quit (Ping timeout: 240 seconds)
*	dx_m (~dx_m@105.155.73.175) has joined
<crucify_me>	hi I have an error on the last line here. not sure what's going on: https://ptpb.pw/ztjA
*	twandy has quit (Client Quit)
*	jellowj (~yellow-ja@dak100.neoplus.adsl.tpnet.pl) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	metaporia (~aporia@2601:647:cb02:72b0:6c78:a5bc:d32b:e91e) has joined
*	bigdaddytank has quit (Quit: Peace out!)
<Limeth_>	Done customizing my Haskell REPL: https://i.imgur.com/MRnITWO.png
<monochrom>	crucify_me: It looks like it should be palbool :: Bool -> String
<crucify_me>	thanks! checking that
*	peterbecich (~peterbeci@71-84-251-238.static.lsan.ca.charter.com) has joined
*	maxvaillancourt1 (~maxvailla@gateway/vpn/privateinternetaccess/maxvaillancourt1) has joined
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<c_wraith>	crucify_me: I suspect that code isn't what you want at all.
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
<c_wraith>	crucify_me: as it stands, you might as well replace palbool with const "no"
<edwardk>	Managed to get the relative map stuff to work on the flight out here, now I just need to finish up some convenience relative Foldable stuff so I can have nice show/eq/ord for relative containers
<monochrom>	There is also that.
<edwardk>	Also managed to finish up my relative catenable lists
<c_wraith>	edwardk: at the risk of falling into the rabbit hole, got a reference for relative data structures?
*	dh has quit (Ping timeout: 240 seconds)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	bigos has quit (Remote host closed the connection)
*	acertain (~acertain@unaffiliated/fread2281) has joined
<edwardk>	c_wraith: github.com/ekmet/coda the Coda.Relative.Delta  and Class
*	twandy has quit (Client Quit)
<edwardk>	Data structures where I can act on them "slowly" with a particular monoid
<c_wraith>	For anyone following that link, edwardk can't spell his own name correctly.
<edwardk>	In this case the monoid is the # of chars
<c_wraith>	I would tease him for that, but I have similar problems. :)
<edwardk>	Hah on a phone
*	SynOps has quit ()
*	smibarber (~smibarber@185.103.96.151) has joined
<edwardk>	Anyways the classes in there extend the concept in various ways so that I can say relocate all the keys and values in a map in O(1)
<edwardk>	Which is key to the project in that folder
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Mutter has quit (Quit: Mutter: www.mutterirc.com)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<crucify_me>	thanks that compiles mono*chrom . but I thought compositions are read from left to right 
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:e54b:d09d:1247:16a8) has joined
<monochrom>	I wouldn't hardcode myself to always reading left-to-right or always reading right-to-left. It depends on the purpose of reading.
<epta>	http://lpaste.net/raw/4724907489563246592 is there any way to do that except standalone deriving declarations?
*	dh (dh@bsd.ee) has joined
*	a3Dman has quit (Ping timeout: 240 seconds)
*	hackagebot Villefort 0.1.1.11, google-static-maps 0.5.0.1, grammatical-parsers 0.2, servant-purescript 0.8.0.1, … and 1 more
*	hackagebot  → https://hackage.haskell.org/packages/recent
<edwardk>	c_wraith basically rel can be used to move whole containers of errors, token sequences, parse trees, etc around
<c_wraith>	epta: Well, technically, you could write the instance yourself.  But I don't think that's what you mean.
*	hazyPurple has quit (Ping timeout: 246 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<c_wraith>	epta: StandaloneDeriving allows you to specify constraints.  That's why it will work there.
*	mkali has quit (Quit: mkali)
*	MP2E (~cray@ip68-224-146-82.lv.lv.cox.net) has joined
<edwardk>	To let it relocate map keys you need x < y implies rel d x < rel d y. But this is a really common property
*	dx_m (~dx_m@105.155.73.175) has left
*	dkov has quit (Quit: dkov)
<edwardk>	So I have classes in there for if rel distributes over the monoid, is monotone, etc
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	lkolstad has quit (Ping timeout: 248 seconds)
<c_wraith>	Yeah, I see what's going on.  It's one of those things that seems obvious in retrospect
*	jmcarthur (~jmcarthur@2601:86:100:1620:11f3:5a14:fc98:ceb1) has joined
<edwardk>	Coda.Syntax.Line has machinery for converting to a more traditional line/col
*	beerdrop (~beerdrop@c-107-2-115-62.hsd1.mn.comcast.net) has joined
*	sellout- (~Adium@24-111-131-35-static.midco.net) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	artem (~artyom@campus.ifmo.ru) has joined
*	metaporia has quit (Quit: WeeChat 1.7)
<artem>	what's the idiomatic way of appending one element to the end of array?
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	metaporia (~aporia@2601:647:cb02:72b0:6c78:a5bc:d32b:e91e) has joined
<edwardk>	i'm currently using # of utf-16 codepoints rather than line/col because it is a bit more compact internally to be able to annotate a syntax tree with just an extra int here and there and because it gives me a full abelian group rather than just a monoid for merging partial positions
<edwardk>	er code units
<ski>	artem : the idiomatic way would be to not do that
<glguy>	artem: The idiomatic solution would probably be to pick a different type
<edwardk>	c_wraith: the cost of it is you never really want to do all the usual functory things to your containers.. because they'd be too slow anyways
<ski>	artem : if by "array" you mean "list", then one option may be adding to the front instead. and then perhaps, once finally, do a reverse
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<artem>	by array i mean Data.Array
<c_wraith>	Array is a terrible structure to add to
*	drewbert has quit (Remote host closed the connection)
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
<artem>	okay, what would be a good structure for O(1) index access
<edwardk>	TIL people still use Data.Array
<artem>	i'm learning
<edwardk>	artem: you want O(1) access and cheap cons? can't have it
<edwardk>	you can have log time access and O(1) cons
*	alx741_ (~alx741@190.152.59.132) has joined
<crucify_me>	monochrom, pardon, as it stands, how can I be sure all 3 functions are utilized?  https://ptpb.pw/O4iW
<edwardk>	Data.Sequence offers O(1) cons and log time access
<edwardk>	and log time append
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<ski>	edwardk : i occasionally use immutable arrays for dynamic programming (at least when there's not an easy pattern of only needing to remember some items, like the last `n' ones)
*	alx741 has quit (Ping timeout: 252 seconds)
<monochrom>	I don't understand the question. Apart from: If you use palBool, it will use pal' and boolToString. Done.
<edwardk>	the problem is in a functional setting you don't have enough time to build the structure between conses.
*	a3Dman has quit (Ping timeout: 240 seconds)
<crucify_me>	palbool doesn't take an argument. sorry, confused here
<monochrom>	That is true and false depending on what you mean.
<crucify_me>	sorry , how to call the function on "asisa"
<monochrom>	The code doesn't show a parameter. But when you use it you can provide one. It won't hate you.
*	isidore (~isidore@ACaen-651-1-97-249.w81-48.abo.wanadoo.fr) has joined
<monochrom>	The parameter has type Bool. Use True or False.
*	nickolay has quit (Ping timeout: 240 seconds)
<edwardk>	ski: I often use a dynamization scheme like this one where the 'a's might be array types and the like. https://www.irccloud.com/pastebin/VeOv5tnH/Dyn.hs
*	infinity0_ (~infinity0@occupy.ecodis.net) has joined
*	infinity0_ has quit (Changing host)
*	infinity0_ (~infinity0@freenet/developer/infinity0) has joined
*	infinity0 has quit (Killed (card.freenode.net (Nickname regained by services)))
*	infinity0_ is now known as infinity0
<monochrom>	It's Bool -> String, not String -> ???.
*	conal has quit (Ping timeout: 252 seconds)
<jared-w>	monochrom: earlier on I showed how to split pal' into a palindrome and boolToString function and accidentally wrote `palbool = palindrome . boolToString` instead of the other way around. I think that's where most of the confusion comes from so far...
*	twandy has quit (Client Quit)
<edwardk>	to take a container type that is a monoid that has some form of query that is a monoid homomorphism and turn a static structure that has a linear mappend into one with a log time slower query and log time mappend on an amortized basis
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<monochrom>	The problem is that "boolToString . pal' " is a type error.
*	StoneToad has quit (Ping timeout: 240 seconds)
<L8>	http://lpaste.net/358170
*	lkolstad (~ljk@c-24-16-12-195.hsd1.wa.comcast.net) has joined
<jared-w>	monochrom: yeah the first time I wrote this out I typed pal' twice, but meant two different palindrome functions in my head. I didn't convey all of that as cleanly as I should have, apparently :p
<monochrom>	But perhaps palindrome has the correct type for boolToString.palindrome to make sense.
<c_wraith>	crucify_me: I think the real problem is that pal' should not be duplicating the logic of boolToString.  I think it should have the type String -> Bool
<L8>	I'm missing something, but my function returns True / False only considering the first element for some reason
*	chaosmasttter has quit (Ping timeout: 246 seconds)
<crucify_me>	I thought that duplication would cause it not to compile at first, but it did. so I'm lost right now c_wraith et al
<monochrom>	This is why programming is so hard.
<crucify_me>	bloody hard
*	Rodya_ has quit (Remote host closed the connection)
*	twandy has quit (Client Quit)
<L8>	nvm, understood my mistake:)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<jared-w>	L8: what was it? 
<c_wraith>	L8: did you want any instead of all?
<L8>	indeed
<monochrom>	If it doesn't type-check, you're back to square 1. If it gives the wrong answer, you're back to square 1. If it doesn't give any answer at all after an hour, you're back to square 1. On every slightest pretext it sends you back to square 1.
*	kuwze (ad4c64cb@gateway/web/freenode/ip.173.76.100.203) has joined
<crucify_me>	so just looking at that, the 2 logic statements appear that it would be tripped up
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<jared-w>	L8: you can also write 'isOccupied x xs = all (/= x) xs` which is the same as `isOccupied x = all (/= x)`
*	ashirase (~ashirase@gateway/vpn/privateinternetaccess/ashirase) has joined
<jared-w>	(or, rather, 'any' since that's the function you actually wanted)
<L8>	jared-w, cool!
*	juliaan (82f5c012@gateway/web/freenode/ip.130.245.192.18) has joined
*	StoneToad (~StoneToad@ppp-199-167-119-201.storm.ca) has joined
*	quobo (uid178934@gateway/web/irccloud.com/x-krjlseswfuugcdon) has joined
<L8>	there's so much syntax tricks I need to remember
<L8>	I'll get that eventually
<jared-w>	There's two separate syntax "tricks" there, both related concepts
<L8>	but the reason I started writing this because I'm also adding case of clause over the lamba
*	maxvaillancourt1 has quit (Ping timeout: 240 seconds)
*	lkolstad has quit (Ping timeout: 248 seconds)
<jared-w>	The first trick is a slice, related to the concept of partial application
<jared-w>	:t (+2)
<lambdabot>	Num a => a -> a
<jared-w>	:t (/= 3)
<lambdabot>	(Num a, Eq a) => a -> Bool
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:88d0:5ff6:2861:2d1) has joined
<crucify_me>	no doesn't pal' need to return a Bool ?
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<jared-w>	(+2) is a function taking one argument and returning that argument +2. /= 3 takes one argument and returns whether or not it's not-equal, etc.
<crucify_me>	it returns a "yes" or "no"
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	coot____________ has quit (Remote host closed the connection)
<jared-w>	The second trick is eta reduction, again related to partial application.
*	sfcg has quit (Remote host closed the connection)
*	coot____________ (~coot@188.146.163.201.nat.umts.dynamic.t-mobile.pl) has joined
<L8>	jared-w, http://lpaste.net/358170
<L8>	any nicer way doing that?
*	ejay has quit (Remote host closed the connection)
<jared-w>	there's lambda-case to make things slightly prettier
*	coot____________ has quit (Client Quit)
*	JULIAAN_ (82f5c012@gateway/web/freenode/ip.130.245.192.18) has joined
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<L8>	jared-w, I saw that here: https://downloads.haskell.org/~ghc/7.6.2/docs/html/users_guide/syntax-extns.html
*	JULIAAN_ has quit (Client Quit)
<L8>	but it says that I need to set the XLambdaCase flag explicitly
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
<L8>	this feature enabled by default?
<jared-w>	You need to use a pragma for LambdaCase
<jared-w>	Not really worth it in most cases, fo rme
<L8>	then I'll stick with this :)
*	lkolstad (~ljk@c-24-16-12-195.hsd1.wa.comcast.net) has joined
*	Rodya_ has quit (Remote host closed the connection)
<jared-w>	What's much cleaner is to just indent the case statement. Lambda functions can be multiline
<jared-w>	(refresh your lpaste; I edited it)
<L8>	jared-w, agree
<L8>	added another small change
<L8>	state => _
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sat Sep  2 14:37:37 2017

**** BEGIN LOGGING AT Sat Sep  2 17:28:34 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:46:51 2017)
*	Channel #haskell url: http://www.haskell.org/
<trigone>	yeah i'll most certainly watch it :)
<edwardk>	trigone: at the end? it depends on the particular stack of effects i want. i may pick out a concrete monad transformer stack. i may write my own hairy instance if i want part of my state to backtrack and the other to not
<trigone>	ok :)
<edwardk>	i care about the mtl classes. i almost don't care about the basic _instances_
*	hackagebot nested-routes 8.0.1 – Declarative, compositional Wai responses – https://hackage.haskell.org/package/nested-routes
<trigone>	edwardk: the interpreter design is also focused on things like aspect-oriented (se and mocking. that's not really intrinsically implied by mtl, is it?
<edwardk>	i'm not above writing instances of the existing classes for my own problems to make the code clearer or faster: https://github.com/ekmett/ermine/blob/master/src/Ermine/Unification/Sharing.hs#L118
*	twandy has quit (Client Quit)
<ignamv>	is there an easy way to extract a Right value in the repl?
*	wotanold has quit (Ping timeout: 260 seconds)
<trigone>	*aspect oriented (separating concerns)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	peterbecich has quit (Ping timeout: 260 seconds)
<jared-w>	ignamv: easier than pattern matching?
<ski>	ignamv : `let Right x = ...' ?
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:197f:1da3:9fd2:99df) has joined
<edwardk>	trigone: i generally 'mock' using an mtl style. make up classes for how to say, open/close files, etc. make a base instance for IO that i actually use in the code, then my test suite can make up local instances for mock testing or that build some free structure i can inspect
<ignamv>	ahh thanks
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
<trigone>	ski:  don't you need parentheses around the pattern?
*	vjacob has quit (Ping timeout: 260 seconds)
<ignamv>	never really pattern match on let, thanks
*	Mutter (~Mutter@2601:647:cb02:72b0:44b6:acec:2daf:6146) has joined
<trigone>	edwardk: yeah :) well that's exactly what i was talking about :) cool
*	marr has quit (Ping timeout: 246 seconds)
<edwardk>	in practice i try to keep the bits of evil mutation stuff small enough that i don't have to do that often, but meh
*	cobreadmonster (uid150434@haskell/developer/breadmonster) has joined
<ski>	trigone : nope why would you ?
<trigone>	edwardk: what about aspect oriented? do you do that kind of thing? like say, logging aspect put at one place only versus logging all around the place in every atomic operation of the program
<ski>	ignamv : in the interactor, in this case
<trigone>	ski: oh well i thought it was required
*	twandy has quit (Client Quit)
<ski>	not at all
<trigone>	> let Right x = pure "a" in x
<lambdabot>	 "a"
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<trigone>	ha lol everyday something new to learn
*	Mutter has quit (Client Quit)
<trigone>	ski: is it only necessary for infix operators? like list cons?
<edwardk>	my personal opinion is that AOP itself was sort of a dead-end. it tried super-hard to separate concerns and failed. your logging and locks often interact in non-trivial ways so applying AOP to the problem in an imperative setting leads to a mess of conflicting layers. even scala gave up on using mixins for concurrency for their maps and the like
<jared-w>	AOP? == aspect oriented programming?
<trigone>	edwardk: hm maybe
<edwardk>	your mileage may vary
<edwardk>	jared-w: yeah
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sat Sep  2 17:36:14 2017

**** BEGIN LOGGING AT Sat Sep  2 17:40:21 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<ski>	trigone : "what about case of? same deal, no need for parens?" -- yep
<trigone>	edwardk: i agree. the worst is it makes haskell look a bit like pearl :P or bash
<trigone>	no wonder lots of people think haskell is also read-only
<ski>	jared-w : except in the lisps, every bracket is sacred, every bracket counts
<trigone>	ski: ok thx
<edwardk>	the mess with | is that it interacts badly with existing list comprehension syntax, etc.
*	twandy has quit (Client Quit)
*	amar_ (~amarpotgh@p579678CD.dip0.t-ipconnect.de) has joined
<trigone>	ski: lol
<edwardk>	| is already stolen for more important work and so isn't available.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	amar_ is now known as Guest92514
<edwardk>	it'd pair nicely with lens's (and now base's) use of &
<trigone>	edwardk: hm well we could systematically replace $ by | and vice versa... since `|` is much rarely used
<trigone>	*could have 
<crucify_me>	hi anyone know what this vim setting would do ?   ' let g:haskell_indent_disable = 1 '
<edwardk>	trigone: | for pattern syntax is used a _lot_
<edwardk>	foo x | x < 12 = ...
*	epsilonhalbe has quit (Quit: Leaving.)
<trigone>	edwardk: well yeah but if you use $ to me it's not too bad in that position, esp when it starts the line... but then tha's a bikeshed issue
<edwardk>	$ became an element of haskell style much later
<trigone>	edwardk: oh really i didn't know
<trigone>	did they use parens instead?
*	ski uses `$' sparingly, often preferring e.g. `(f . g . h) (...)'
<edwardk>	when i joined cale was still exhorting folks to pointfree everything f $ g $ h i    to f . g $ h i then see if you can scrub it out of your code.
<edwardk>	i think cale doesn't like $
*	twandy has quit (Client Quit)
<trigone>	ski: well very often me too i kinda avoid it unless it's like calling for a lambda or something. i think it's mostly because i don't read well the symbol (and i don't dare using a custom alternative symbol for fear of never being understood)
<ski>	if i could use `\',`do',`let',`if',`case' to start the last argument in an application, most of my remaining `$'s would be gone
<Cale>	I like $ I just don't like the right-associativity of $
<jared-w>	Yet another reason to hate list comprehension syntax!
<edwardk>	given my early attempts to hire him back in the day i think that must be the case , actually ;)
*	DTZUZO has quit (Ping timeout: 248 seconds)
<edwardk>	Cale: agreed
*	vjacob (~vjacob@185.145.38.234) has joined
<trigone>	ski: there's a great proposal for that, me too i hope it gets into haskell as normal syntax
<edwardk>	right associativity of $ and $! bother me
<crucify_me>	what about the <- which is a 'stylized epsilon' that is nice to read, no?
<edwardk>	foo $! arg1 $! arg2 with more stuff $! whatever
*	Guest92514 has quit (Ping timeout: 240 seconds)
<edwardk>	would be awesome
<ski>	yep
*	jedws has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<Cale>	If it were left-associative then 1) we could remove more parens from code (whether this is a good thing or not to-be-determined), and 2) it would be much easier to use along with left-associative $! to strictly apply specific arguments
<Cale>	yes
<Cale>	haha
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	rudol has quit (Ping timeout: 260 seconds)
<ski>	jared-w : list comprehensions ?
<jared-w>	!|>  <|!  <.  .>  <.!  !.>  
<jared-w>	ski: their usage of | annoys me
<ski>	oh
<ski>	TH quasiquotations, then ?
<edwardk>	that said, we switched assocativities of $ in ermine and it always screwed us up.
<jared-w>	ski: their general existance annoys me but the usage of | also annoys me :p
<ignamv>	oh man
<trigone>	edwardk: i'm not sure to follow... i thought $ was right-assoc for a reason
<ignamv>	I should make a vim plugin that adds parentheses to an expression
<Cale>	trigone: It is, but it's kind of a bad reason
<jared-w>	edwardk: Do you not like symbols like |>  ?
*	twandy has quit (Client Quit)
*	pavonia has quit (Quit: Bye!)
<jared-w>	trigone: much bike shedding, weeping and gnashing of teeth were wasted over that reason :p
<edwardk>	trigone: f $ g $ h = f . g $ h  -- so you an flip the associativity of $ as you never need it on the right of another $  then you get the semantics i sketched
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<jared-w>	ignamv: check out surround.vim
*	mizu_no_oto_work (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	danthemyth has quit (Remote host closed the connection)
<edwardk>	jared-w: |> doesn't play nice with haskell's alternative class. <|> has a different connotation
<trigone>	edwardk: hm
<ignamv>	jared-w: thanks, that's quite useful
*	DTZUZO (~DTZUZO@S0106bcd16584b0aa.vs.shawcable.net) has joined
<crucify_me>	as in biblical gnashing of teeth.?
<edwardk>	so i expect |> to be something like m a -> a -> m a
<edwardk>	filling in a default
<jared-w>	crucify_me: yes lol
<Cale>	If $ were left associative, then we could replace f (g x y) (h z) with f $ g x y $ h z
<ignamv>	but I was thinking take a line and explain how it will be evaluated using parens
<trigone>	edwardk: there's (&) which is the same as |>
<trigone>	:t (&)
<lambdabot>	a -> (a -> b) -> b
<edwardk>	trigone: yeah. i wrote it =P
<jared-w>	edwardk: That's quite true. I suppose I'm really meaning the unicode triangles rather than |>
<trigone>	i meant jared
*	helmet33 has quit (Quit: Leaving)
<ignamv>	good night
<jared-w>	trigone: I'm aware of it, but & is just as ugly of an operator as $ :p
<crucify_me>	brutal heat wave in california usa
<Cale>	jared-w: How so?
*	theelous3_ has quit (Ping timeout: 240 seconds)
<trigone>	edwardk: ah ok ^^ well to be fair i must admit i don't really like it much better than `$` (but then all the good symbols are already taken, like / or > ...)
*	drewbert has quit (Remote host closed the connection)
*	carlomagno (~cararell@inet-hqmc02-o.oracle.com) has joined
<edwardk>	jared-w: anyways, & (formerly %) won out for me for lens because it comes with a built-in reading that reads right. foo & whatever .~ 12       reads as foo and whatever = 12..
<trigone>	jared-w: agreed :) but it's one golf shorter!
<edwardk>	(it read better when the operator was .=)
<jared-w>	I got a lot of shit on r/haskell for this but I still think & is a stupid name. Symbolic operators should be mnemonic in the symbolic sense, not in the aural sense
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
<edwardk>	which was as close to := as i could get
<jared-w>	That being said, it's one of the better choices when confined to the ascii list of symbols
<Cale>	jared-w: & isn't symbolic of anything in any sense, it's just a character that was freely available
*	Ch0c0late has quit (Quit: Connection closed for inactivity)
*	peterbecich has quit (Ping timeout: 260 seconds)
<edwardk>	trigone: it was selected because it was underutilized and one character. # is often overloaded. % aws taken by Data.Ratio and pissed of yitz
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Cale>	Same with $ -- there are only so many symbols which can easily be typed
*	`Guest00000 has quit (Ping timeout: 240 seconds)
<edwardk>	and &'s natural pairing | was taken by syntax in haskell
<trigone>	the best symbol would probably be `->` but it's already reserved too ofc ^^
<jared-w>	Right, which makes it a stupid choice to me. It's a symbol that's supposed to denote a meaning and the only reason we choose the symbol is 'cause it looked cute and you can type it easily'
<Cale>	What meaning was it supposed to denote?
<trigone>	edwardk: yeah as i said, i know there wasn't lots of viable alternatives
*	ski . o O ( conjunctive coordination )
*	dolio has quit (Quit: ZNC 1.6.5 - http://znc.in)
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	Rodya_ has quit (Remote host closed the connection)
<Cale>	My complaint about & isn't so much which symbol was picked
<edwardk>	anyways the only other one character easily typed symbol available was #   -- which we avoided for a long time because of its comparatively common third party use
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:197f:1da3:9fd2:99df) has joined
<Cale>	It's that people are actually going to use the damn thing
<jared-w>	&'s mnemonic is "and then" but it's a operator that shunts data down a pipeline, same with $
<edwardk>	before giving in and using it for prisms
<edwardk>	> _Left # 12
<lambdabot>	 Left 12
<Cale>	jared-w: I don't think of it that way
*	edwardk was waiting for cale to climb up on that high high horse ;)
<Cale>	haha
*	ignamv has quit (Ping timeout: 255 seconds)
<jared-w>	How do you think of it, then? If I may poke you a bit :p
<edwardk>	soon i'll have him regressed to where he's ranting that . should be fmap
<Cale>	jared-w: It's just function application with the function on the wrong side
<jared-w>	So the fact that it's `flip $` is the only thing that's wrong with it?
<Cale>	x & f = f x
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<trigone>	what i'm wondering more than anything is why we don't write compositions of functions from left to right. i know mathematicians (for some reason) sold the habit of reversing everything for fun, but it's still very much easier to read something when you don't have to constantly read from right to left in the middle of a left-to-right language...
*	DTZUZU (~DTZUZU@S0106bcd16584b0aa.vs.shawcable.net) has joined
<Cale>	Well, yeah, it just tends to be a less readable choice than other options for that reason
<ski>	edwardk : .. or that `flip' should be `\f x -> fmap ($ x) f' ?
*	tsaka_ has quit (Ping timeout: 240 seconds)
<edwardk>	:t (??)
<lambdabot>	Functor f => f (a -> b) -> a -> f b
<jared-w>	trigone: there's plenty of things that read left to right, right ot left, up to down, down to up
<edwardk>	^- flip
<edwardk>	stolen shamelessly from ski
*	ski smiles
<edwardk>	i really should have stuck to my guns and taken ? for that operator
<jared-w>	:t (?)
<lambdabot>	error: Variable not in scope: ?
<Cale>	I actually dislike >>= for the same reason. Occasionally I grep for instances of >>= and I tend to find that unless it's immediately followed by \case (or part of an instance declaration) there's some code there which is awkward and annoying.
<edwardk>	(?) isn't taken
<jared-w>	edwardk: there's still a chance, then! :p
<trigone>	jared-w: well yeah but even function application i think would have been better off left arg to right function. i don't see the logic in having things the other way round. it's like saying "to cook a cake, you'll end by putting it to the oven, just before tha you'll do this and that" etc, it's absurd
<ski>	trigone : "why we don't write compositions of functions from left to right" .. because we write `f(x)' (or `f x' in Haskell), not `(x)f'
<edwardk>	jared-w: i took ? at first but it broke diagram which was using it at the time
<jared-w>	ski: although some branches of math do write (x)f quite pervasively
<trigone>	ski: well i'd advocate for (x f) notation actually
<edwardk>	jared-w: so i renamed out of courtesy
<Cale>	trigone: You just have to pick some convention and stick with it
<Cale>	jared-w: Which ones?
*	davr0s (~textual@host86-142-61-82.range86-142.btcentralplus.com) has joined
<lyxia>	trigone: right-to-left composition is not that bad. If you see  f x = sort . ...  you know that f x is a sorted list.
*	twandy has quit (Client Quit)
<Cale>	jared-w: There might be some weirdo out there which actually does that, but as far as I know, it's not a common convention.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<ski>	trigone : typically (and this is probably what Cale is about), `x' tends to be a larger expression than `f'. and for some reason we usually think it's nicer to first read the operator, rather than the operand
<edwardk>	i tend to use & and <&> and for_ the like because the function is usually the big messy thing
<edwardk>	and it saves me more parens ;)
<ski>	trigone : also, in a definition `f(x) = ..x..', the thing defined comes first, while `x' could be a large pattern
*	tabemann has quit (Quit: Leaving)
<edwardk>	whatever >>= \case             pops up a lot in my code for that same reason.
*	peterbecich (~peterbeci@71-84-251-238.static.lsan.ca.charter.com) has joined
<jared-w>	Cale: to be honest I only know that some branches of math do it; I always forget which ones...
<trigone>	ski: well i guess there are arguments for either...
<trigone>	edwardk: i love lambda case
<Cale>	edwardk: Yeah, \case is the one place where >>= is probably okay
<ski>	trigone : fwiw, sometimes i think we ought to do `A <- B', rather than `B -> A', if we're going to stick with `f(x)' / `f x'
<edwardk>	i just wish it had been \of
*	dtcristo (dtcristoma@gateway/shell/matrix.org/x-mkldewzozvevgbms) has joined
<Cale>	edwardk: I wanted case of ...
<trigone>	Cale: you don't like the bind operator?
<Cale>	edwardk: Just leaving out the scrutinee to get a function, similar to operator sections
*	tsaka_ (~torstein@84-52-234.108.3p.ntebredband.no) has joined
<edwardk>	that would have been tolerable too
<ski>	edwardk : "because the function is usually the big messy thing" -- yep, often (not always) the case
<edwardk>	\of or case of both have the benefit that they don't add a new keyword that introduces layout some o the time
<trigone>	ski: there's that too. esp if you have to split the sig over several lines, the first will always contain the result (modulo currying), which is much more logical
<ski>	trigone : the MLs had "lambda case" from the start. unfortunately Haskell didn't
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<trigone>	at any rate, gotto go to sleep :) got a big day tomorrow! thanks a lot everybody for the info and discussions! :)
<ski>	trigone : in SML, `case <scrutinee> of <matches>' is sugar for `(fn <matches>) (<scrutinee>)'
*	Costar (~Costar@179.215.124.226) has joined
*	dolio (~dolio@haskell/developer/dolio) has joined
*	jao has quit (Ping timeout: 248 seconds)
*	Associat0r has quit (Ping timeout: 240 seconds)
<trigone>	ski: i don't know the language syntax at all
<trigone>	(sorry)
<trigone>	bye all!
*	trigone has quit (Quit: Page closed)
<edwardk>	anyhow, i don't have a particular objection to there being multiple styles, its relatively bounded, the problem only spans a dozen names or so in the standard library and locally can make a lot of difference to readability. so while cale has the more defensible view in terms of 'fewer things to learn' i tend to want more expressiveness. having both let and where is redundant too =P
<ski>	trigone : `fn x => x+1' is `\x -> x+1'. ..
*	hackagebot tile 0.1.0.0 – Slippy map tile functionality. – https://hackage.haskell.org/package/tile
*	hackagebot hopenpgp-tools 0.19.5 – hOpenPGP-based command-line tools – https://hackage.haskell.org/package/hopenpgp-tools
<ski>	edwardk : .. only mostly
*	twandy has quit (Client Quit)
*	fendor has quit (Ping timeout: 252 seconds)
<Cale>	edwardk: Yeah, it's okay if it's not abused too much also.
<jared-w>	Cale: Pointfree ascii gibberish is my favorite pasttime though...
<edwardk>	Cale: if it makes you feel better, i feel the same way about killing 'let's wherever i find them in my code ;)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Cale>	jared-w: It's fun right up until you have to deal with someone else's pointfree ascii gibberish in what ought to have been boring code.
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
<ski>	i don't know of a better solution to the `for_' vs. `traverse_' thing
<jared-w>	edwardk: oh you also hate 'let'? What about 'where'?
<edwardk>	ski: ? :)
<edwardk>	ski traverse ? whatever $ do
<Cale>	edwardk: Killing lets in which way?
<edwardk>	Cale: usually by turning them into pattern guards or shoving them into where clauses
<jared-w>	With fire, season with salt and pepper, then heat on medium high for 4 minutes each side and top with garnish
<Cale>	ah
<ski>	edwardk : hm. i suppose
<edwardk>	let ... in is an unindentable nightmare
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<edwardk>	it just causes me to sit there with a nervous twitch reformatting the lines its on
<Cale>	heh
<Cale>	Can't decide if 'in' should line up with the 'let' or be one space deeper?
<ski>	edwardk : this is one reason we ought to have "message-dispatching" aka "copattern" syntax, at least for `newtype's
<Cale>	'let' doesn't actually bother me at all
<jared-w>	let actually bugs me for an entirely different reason
<edwardk>	i can somethings bring myself to 'let in' if its a one line statement in a larger thing
<edwardk>	but if the in floats down i get twitchy
<jared-w>	"let (some stuff I don't care about yet) in (now I need to figure out how to care about it)"
*	ski is thinking of `blah = Foo $ \x -> let ... in ...'
<edwardk>	ski blah = foo go where go x = ... ;)
<edwardk>	now i can use another where =)
<ski>	edwardk : but then i have to make a silly name that's not even recursive
<jared-w>	vs "(high level implementation of function) where (ugly details details I can now reason about)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<ski>	i'm offended
<edwardk>	ski: yeah. that is the one case i do tend to let myself 'let' just because i can't pattern guard a lambda.
<edwardk>	\ x | y <- whatver -> ..
<ski>	it ought to be `unFoo blah x = ... where ...'
<edwardk>	is what i want
<jared-w>	multiWayIf does that, does it not?
<edwardk>	the if | whatever could work there
<edwardk>	yeah
<edwardk>	\x -> if | whatever -> ...
<edwardk>	i haven't used it to replace let yet, maybe i'll try.
<edwardk>	its a 5 character tax over my 'ideal' version, but only 5 characters
*	Swizec_ (~swizec@c-76-126-10-27.hsd1.ca.comcast.net) has joined
<jared-w>	plus you can add yet another pragma to your list! Win win, really
*	ski grins
<edwardk>	i used to use multiway if pretty heavily
<edwardk>	not i adopt a sort of 'hanging if' style that reduces the pressure on my code to use it
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<edwardk>	\x -> if whatever       and then i outdent the 'then' and 'else' like everything else two spaces
<edwardk>	er now i adopt i mean
<jared-w>	Is there any benefit of one style over another? I'm not quite picturing that in my head
*	Swizec_ has quit (Ping timeout: 248 seconds)
<edwardk>	it fits with the surrounding code style i use. i tend to do hanging do blocks, hanging case statements, etc.
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	jedws (~jedws@2001:8003:3582:aa00:c9dc:d0:b855:b3bb) has joined
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
<edwardk>	the cascading case style sort of crept up on me from writing lots of low level system code directly against State# RealWorld and the like where i had to use it, or where i can't let' bind my way through anyways because it makes ghc's head explode
*	emilypi has quit (Ping timeout: 240 seconds)
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Welkin (~Welkin@107-147-90-29.res.bhn.net) has joined
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	Foritus has quit (Ping timeout: 240 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<jared-w>	gotcha, that makes sense
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	tsaka_ has quit (Ping timeout: 252 seconds)
*	nullifidian__ is now known as nullifidian
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	erikd has quit (Ping timeout: 255 seconds)
*	Achylles has quit (Quit: Leaving)
*	Guest31 (~textual@cpe-70-112-244-109.austin.res.rr.com) has joined
*	Guest31 has quit (Client Quit)
*	ts_ (~212@112.215.200.49) has joined
*	ts_ has quit (Remote host closed the connection)
*	twandy has quit (Client Quit)
*	samrat (~samrat@202.51.76.46) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	fresheyeball (~isaac@h88.129.189.173.dynamic.ip.windstream.net) has joined
*	kuttifunk1 (~Thunderbi@host-188-174-207-138.customer.m-online.net) has joined
*	Welkin has quit (Quit: leaving)
<fresheyeball>	I've made much progress toward my strange mission
<fresheyeball>	but I've hit a +4 block of stumbling
<fresheyeball>	http://lpaste.net/1793278755955802112
*	tsaka_ (~torstein@84-52-234.108.3p.ntebredband.no) has joined
<fresheyeball>	how to tell GHC that the numbers are LT?
*	twandy has quit (Client Quit)
*	kuttifunk has quit (Ping timeout: 240 seconds)
*	kuttifunk1 is now known as kuttifunk
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Axman6>	hmm, I feel using a GADT is probably the right thing to produce the proof that the values are LT
<Axman6>	like, you need some whitness that that's true
<fresheyeball>	Axman6: Splain!
<Axman6>	but... I'm not sure I know enough to make it work
<fresheyeball>	lame!
<fresheyeball>	me too!
<fresheyeball>	!!-!!-!!
<Axman6>	data LTWitness (a :: Nat) (b :: Nat) (ord :: Ordering) where... yeah dunno
*	twandy has quit (Client Quit)
<Axman6>	I would poke edwardk in the first instance "(as the person who's most likely to know the answer, no matter what the question is)
<edwardk>	?
<fresheyeball>	edwardk: hi! Was about to poke ya
<fresheyeball>	*don't hit me, Axman6 told me to
<fresheyeball>	http://lpaste.net/1793278755955802112
<fresheyeball>	edwardk: how to inform GHC that these number are 'LT
<fresheyeball>	?????????
<edwardk>	what am i looking at other than a twisty maze of singletons?
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<edwardk>	oh
<fresheyeball>	edwardk: come now, its not that twisty
<edwardk>	have you seen the code in Data.Constraints.Nat?
<fresheyeball>	I have not!
<edwardk>	http://hackage.haskell.org/package/constraints-0.9.1/docs/Data-Constraint-Nat.html
<edwardk>	that gives you machinery for proving stuff with out natural number kinds
<edwardk>	as they are? they are basically useless tags
<edwardk>	you need something like that or the ghc plugin someone has to actually work with them in earnest
*	twandy has quit (Client Quit)
*	jmcarthur has quit (Ping timeout: 246 seconds)
*	erikd (~erikd@hendrix.mega-nerd.net) has joined
<fresheyeball>	edwardk: so apparently I have seen this, given it was already in a tab in my browser
<fresheyeball>	I don't see how it could help me
<edwardk>	you need something to reify the comparison of the value level singletons into a comparison of the type level ones
<edwardk>	i don't have the actual combinator you need in there
<fresheyeball>	yes I do
*	mson (uid110608@gateway/web/irccloud.com/x-sxfutcfxhhxgtkxz) has joined
<fresheyeball>	HOW TO DO?
<edwardk>	by copying the 'axiom' trick i use in that code
<edwardk>	its a little bit of unsafety
<edwardk>	you need something like (KnownNat n, KnownNat m) => Maybe (Dict (n <= m))
<fresheyeball>	is context
<fresheyeball>	I don't know what Dict is in this context
<edwardk>	data Dict p where Dict :: p => Dict p
<fresheyeball>	I know its not a normal term level dictionary
<edwardk>	using constraint kinds
<fresheyeball>	Ouch!
<fresheyeball>	ma brains!
*	peterbecich has quit (Ping timeout: 260 seconds)
*	Rodya_ has quit (Remote host closed the connection)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<fresheyeball>	so its a reified Constraint?
<edwardk>	fresheyeball: http://comonad.com/reader/2011/what-constraints-entail-part-1/ is an article i wrote up when max bolingbroke first added the "Constraint" kind to haskell
<edwardk>	it covers Dict
<edwardk>	and my :- data type, etc.
<edwardk>	you probably want to start there
<edwardk>	you'll need a lot of this machinery to make this code go
<edwardk>	then you can understand the constraints package
<edwardk>	and from there the code in Data.Constraints.Nat should make sense
<edwardk>	well more sense
<edwardk>	you might need to understand reflection first
<edwardk>	also have articles on that!
<fresheyeball>	crapes
<fresheyeball>	this is alot
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<koz_>	edwardk's motto should become 'I have an article for that!'.
<koz_>	s/article/library also works
<edwardk>	fresheyeball: you did jump into the deep end of the pool
<koz_>	edwardk: In your Rotten Bananas article, you talk about the lambda cube, but I'm not sure how your data type maps to what is described here: https://en.wikipedia.org/wiki/Lambda_cube
<koz_>	Am I looking at the wrong cube?
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:8818:81e2:271e:febc) has joined
<crucify_me>	I have an article called bananas with small brown sugar spots
<fresheyeball>	edwardk: just for fun
<fresheyeball>	but yeah
*	elpfen (~elpfen@173-28-20-229.client.mchsi.com) has joined
*	a3Dman has quit (Ping timeout: 240 seconds)
<fresheyeball>	also I'm using the compactable package you helped me with at work
<fresheyeball>	and it's been very nice so far
*	twandy has quit (Read error: Connection reset by peer)
*	JuanDaugherty (~jdaughert@98.4.124.117) has joined
*	banc has quit (Quit: ZNC - http://znc.in)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	hucksy (~hucksy@p5B3C5F2C.dip0.t-ipconnect.de) has joined
*	m0rphism has quit (Quit: WeeChat 1.9)
*	TipsyMe has quit (Ping timeout: 252 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Bhootrk_ (~Bhootrk_@118.189.203.83) has joined
<edwardk>	crucify_me: related to my rotten bananas article?
**** BEGIN LOGGING AT Sun Sep  3 11:44:00 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	pellenation (~textual@175.red-88-20-27.staticip.rima-tde.net) has joined
<geekosaur>	trampel, jared-w, the more recent one is https://www.haskell.org/onlinereport/haskell2010/
*	mePressButton (~jose@190.193.184.240) has joined
<trampel>	geekosaur: thank you all.
<crucify_me>	hi I need to revisit these two examples. could you guys show me how to flesh out the first example into something that I can follow? https://ptpb.pw/JFBD
<geekosaur>	although arguably onlinereport/ should redirect tto that and the older one should be onlinereport/haskell98/
<crucify_me>	the let..in clause
<jared-w>	geekosaur: I agree. Although quite a few webadmins consider it a grade A cardinal sin to change any permalink... ever... :p
*	Guest74361 has quit (Quit: Leaving.)
*	jared-w is firmly not in that camp
<hpc>	this is why javascript makes web development so easy
<geekosaur>	then it is on them to not camp on the wrong real estate
<hpc>	if everything is served on / all you have to do is keep the same domain name :P
<geekosaur>	if it's a versioned document, it should be a versioned permalink
<jared-w>	hpc: ಠ_ಠ
*	soLucien (~Lu@alfa.oek.dk) has joined
*	twandy has quit (Read error: Connection reset by peer)
<hpc>	anyhoo there isn't a whole lot changed in 2010
<hpc>	n+k patterns, language extensions were formalized, and the FFI
<hpc>	and maybe one or two other small things i am forgetting
<jared-w>	n+k patterns being removed, you mean?
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<hpc>	yeah
<geekosaur>	clarification of translating the layout rule to brace insertion
*	shafox has quit (Quit: This computer has gone to sleep)
*	KeyJoo has quit (Remote host closed the connection)
<jared-w>	Hmm... I actually wonder, is brace and semicolon insertion a thing all "whitespace-only" languages do when compiling?
<lyxia>	crucify_me: are you trying to find more and more complicated ways of writing x = 1 : x
<hpc>	jared-w: an obvious counterexample is python, which has no brace syntax
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Whitesquall has quit (Ping timeout: 248 seconds)
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<crucify_me>	lyxia, thanks, I'm trying to understand a closure and those are two examples that I never really got. definitely don't know how either works there
<jared-w>	hpc: right, I was curious as to how python "compiled". Haskell makes braces and semicolons and all that "optional" but inserts them in when compiling. I always thought that was one of the stranger design choices and kinda fail to see why anyone would want to do it that way
<crucify_me>	I don't know what x = 1 : x means lyxia 
<lyxia>	jared-w: markdown has some layout rules too, though it's not a *programming* language
<orzo>	is there a common operator equivelent to flip fmap ?
<geekosaur>	jared-w, I don't think it's required to actually do it, only to conform to the semantics obtained that way
<Rotaerk>	:t (<&>)
<lambdabot>	Functor f => f a -> (a -> b) -> f b
<lyxia>	crucify_me: it means x = 1 : 1 : 1 : 1 : ... -- ad infinitum
<orzo>	thanks, Rotaerk 
<Rotaerk>	:t &
<lambdabot>	error: parse error on input ‘&’
<Rotaerk>	:t (&)
<lambdabot>	a -> (a -> b) -> b
<geekosaur>	also I feel like some 60sish languages did things like that, although not specifically brace insertion
<Rotaerk>	<&> is analogous to & as <$> is analogous to $
*	djapo (~archie@unaffiliated/djapo) has joined
<crucify_me>	oh.. but it is a suspended computation (according to my patchy notes)
*	Whitesquall (~user@188.254.110.251) has joined
<crucify_me>	?
*	pandeiro (~user@2606:6000:6080:de00:9c35:de6e:d92f:4231) has joined
<jared-w>	geekosaur: yeah it feels like a very 60s-ish thing to do
<hpc>	jared-w: ultimately it's a parser implementation detail, and it all becomes ASTs in the end
<jared-w>	crucify_me: they're referring to laziness in an obtuse way
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<crucify_me>	meaning what?
<jared-w>	hpc: makes sense. I guess I'd just prefer it if the parser left ; and {} alone so I could use them for naming data structures or other shiny things like that
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	mePressButton has quit (Quit: leaving)
<jared-w>	crucify_me: x = 1 : x won't destroy your computer because the language is lazy and only takes what it needs. It evaluates the 1, then goes to the : x which is 1, then goes to the : x, which is... 
*	mePressButton (~jose@190.193.184.240) has joined
<jared-w>	If the language was strict it would have to go through the whole list before printing and evaluating it out
*	KeyJoo (~keyjoo@46.249.9.128) has joined
<jared-w>	(x = 1 : x might be the wrong example for that. I'm not sure how corecursion is handled in strict languages; it probably depends?)
*	BartAdv (uid90451@gateway/web/irccloud.com/x-vwurtpiqublurbmp) has joined
<lyxia>	ocaml allows it with the same result.
*	fendor (~fenedoer@178.115.129.167.wireless.dyn.drei.com) has joined
<lyxia>	there's nothing to suspend, it's just a constructor pointing to itself.
<crucify_me>	sorry I really would need to see how its used (or not used, suspended?) in a program that did something 
*	takle has quit (Remote host closed the connection)
*	twandy has quit (Client Quit)
<crucify_me>	I was hoping to flesh it out into an interesting sample I could sink my teeth into
<jared-w>	lyxia: I thought so. Halfway through writing that I was like "hmm... Pretty sure 1:x is one of the few counterexamples to what I'm writing out" lol
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Squant has quit (Ping timeout: 260 seconds)
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
<geekosaur>	pattern matching forces an expression to the next constructor. since a list is a chain of (:) constructors terminated with a [] constructor, each evaluation forces exactly one more list element
*	pera has quit (Ping timeout: 260 seconds)
<orzo>	Rotaerk: do i need lens for <&> ?  I want a base operator if their is one
<geekosaur>	(of course if your pattern matches more than one element, it will go further e.g. foo (x:y:s) = ...
<jared-w>	> let x = 1 : 1 : zipWith (+) x (tail x) in x -- Here's an interesting example for you, crucify_me ;)
<lambdabot>	 [1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17...
<geekosaur>	er (x:y:xs) or (x:x':xs)
<Rotaerk>	orzo, <&> is defined in multiple packages, it looks like, but it's not is base
<crucify_me>	thats fibonacci?
<Rotaerk>	you could always just redefine it locally if you don't want to add a dependency just for it
<jared-w>	crucify_me: yes
<Rotaerk>	(<&>) = flip (<$>)
*	Vbitz has quit (Quit: ZNC - http://znc.in)
<geekosaur>	> let x:x':xs = [1,2,undefined] in x' -- xs is merely bound, not evaluated
<lambdabot>	 2
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	pgiarrusso has quit (Quit: This computer has gone to sleep)
<jared-w>	or (<&>) = flip fmap if you hate parens :p
<CindyLinz>	> fix ("bug" :) -- Yet another interesting example
<crucify_me>	excellent jared-w   ..  sorry hold on geekosaur
<lambdabot>	 ["bug","bug","bug","bug","bug","bug","bug","bug","bug","bug","bug","bug","bu...
<hpc>	> fix error -- the best example
<lambdabot>	 "*Exception: *Exception: *Exception: *Exception: *Exception: *Exception: *Ex...
<jared-w>	lol
*	argent0 (~aner@186.133.132.26) has joined
*	bbsl (~bbsl@15.66.34.95.customer.cdi.no) has joined
<CindyLinz>	XD
*	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined
<dminuoso>	How exactly does join implement a natural transformation?
<c_wraith>	despite the name, it doesn't fix any error
*	trampel has quit (Quit: Leaving)
<dminuoso>	I mean I keep looking at T∘T -> T, and it just does not look similar at all
*	twandy has quit (Client Quit)
*	ali_bush (~ali_bush@2407:7000:8141:cf00::2) has joined
*	ali_bush has quit (Changing host)
*	ali_bush (~ali_bush@gentoo/developer/alibush) has joined
*	KeyJoo has quit (Quit: Good luck! Have a nice Day!)
<Rotaerk>	hmm is EmptyDataDecls enabled by default now or something
*	KeyJoo (~keyjoo@46.249.9.128) has joined
<Rotaerk>	I see it's an extension, but I can do "data Foo" without it
<lyxia>	dminuoso: A natural transformation between functors (T . T) and T is given by, for every object a, a morphism from (T . T) a to T a. In other words, forall a. T (T a) -> T a.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	nahra has quit (Quit: ERC (IRC client for Emacs 25.1.1))
<c_wraith>	lyxia: it has to preserve some sort of morphisms along the way, right?
<lyxia>	Indeed.
*	hc_ (~ircd@unaffiliated/hc) has joined
*	fendor has quit (Remote host closed the connection)
*	OnkelTem has quit (Ping timeout: 240 seconds)
*	fendor (~fenedoer@178.115.129.167.wireless.dyn.drei.com) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	freeman42x[m] (~freeman42@86.47.59.60) has joined
<dminuoso>	lyxia, yeah about that. join just seems to give me the mapping between the objects, what about morphisms?
<crucify_me>	more drama soon
<dminuoso>	Or.. mmm.
<lyxia>	dminuoso: morphism = function  in the Hask category.
*	osa1 (~omer@94.119.64.7) has joined
*	osa1 has quit (Changing host)
*	osa1 (~omer@haskell/developer/osa1) has joined
*	hc has quit (Ping timeout: 252 seconds)
*	forgottenone has quit (Ping timeout: 240 seconds)
<geekosaur>	Rotaerk, it's not an extension as of Haskell2010
*	twandy has quit (Client Quit)
*	jao (~jao@pdpc/supporter/professional/jao) has joined
<geekosaur>	but still supported for backward compatibility
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Rotaerk>	ah, gotcha
<lyxia>	I omitted some work in there but parametricity basically implies the naturality conditions. There might actually be natural transformation between Hask functors that are not expressible as polymorphic functions, I'm not sure.
*	hc (~ircd@unaffiliated/hc) has joined
*	hc_ has quit (Ping timeout: 252 seconds)
<geekosaur>	crucify_me, http://lpaste.net/358187 is a breakdown of what I showed
<dminuoso>	lyxia, well how do I "join" two fmap functions?
*	fendor has quit (Ping timeout: 240 seconds)
<lyxia>	dminuoso: what does that mean
*	nahra (~user@unaffiliated/nahra) has joined
*	slackman has quit (Remote host closed the connection)
*	hackagebot pipes-concurrency 2.0.8 – Concurrency for the pipes ecosystem – https://hackage.haskell.org/package/pipes-concurrency
*	hackagebot harp 0.4.3 – HaRP allows pattern-matching with regular expressions – https://hackage.haskell.org/package/harp
*	chaosmasttter (~chaosmast@p4FF1C655.dip0.t-ipconnect.de) has joined
*	slackman (~slackman@99.fe.37a9.ip4.static.sl-reverse.com) has joined
<elpfen>	any good imagemagick or similar packages?
<hpc>	juicypixels, maybe
*	twandy has quit (Client Quit)
<crucify_me>	geekosaur, thanks very much ! looking now
<elpfen>	Optimally, full imagemagick capability. Otherwise just looking at sizes
*	drcode (~drcode@5.29.192.15) has joined
<hpc>	ah, i think juicypixels can do that then
<elpfen>	Nice!
<hpc>	when i briefly looked at getting the full imagemagick featureset, i ended up settling on calling the convert utility
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<lyxia>	dminuoso: the definition of a natural transformation is just a mapping from object to morphism, with a commutative diagram, which is equivalent to an equation   fmap f . join = join . (fmap . fmap) f
<hpc>	which if you can get past the syntax and learn the model behind it, isn't too terrible
*	Subeff (259d8a9d@gateway/web/freenode/ip.37.157.138.157) has joined
*	mizu_no_oto_work (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
<elpfen>	it looks like there's a bunch of FFI bindings for imagemagick...what are ffi bindings? just bindings to the underlying utility?
<elpfen>	I might do that then, because I already have all the commands written
<hpc>	ffi is short for foreign function interface
<hpc>	and yeah, it's just bindings to the imagemagick c library
*	conal (~conal@client-7-151.visitor-network.oxuni.org.uk) has joined
*	chrissl (~chris@mail.meicloud.at) has joined
*	twandy has quit (Client Quit)
<Subeff>	Hey again guys, It is the third time I face something I have no clue and it should be pretty easy I guess, but when I implement an instance of Applicative, for the data type `data Three a b c = Three a b c` I have no clue how to implement the `pure` function. How is that even possible if one argument is coming how do I construct something that needs actually three values? As for the <*> I just restrict the first two types to be Mon
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	chaosmasttter has quit (Ping timeout: 240 seconds)
<lyxia>	it's not possible
<hpc>	Subeff: you need additional constraints on the a and b types such that you can pick a value for them
<hpc>	:t mempty
<lambdabot>	Monoid a => a
*	sagax (~sagax_nb@213.138.71.146) has joined
*	seventh-chord has quit (Quit: Leaving)
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	XorSwap (~XorSwap@wnpgmb016qw-ds01-58-40.dynamic.bellmts.net) has joined
*	preyalone (uid21561@gateway/web/irccloud.com/x-shgaxpxywlpyuumb) has joined
<Subeff>	laaal yes guys <3 you
<lyxia>	Ah, you already restricted the types to be monoids for <*> ...
*	conal_ (~conal@185.145.156.52) has joined
<Subeff>	yes yes, how come I completely forgot of mempty
<Subeff>	thank you so much
<dminuoso>	lyxia, just found this: https://wiki.haskell.org/Category_theory/Natural_transformation
<dminuoso>	This is gold, exactly what I was looking for. Just couldn't find the words. :)
*	conal has quit (Ping timeout: 240 seconds)
*	freeman42y[m] (~freeman42@83.136.45.123) has joined
*	bennofs (~benno@2a00:c1a0:4300:dd00:e6a4:71ff:feb5:3f6f) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	m0rphism has quit (Quit: WeeChat 1.9)
*	drcode has quit (Ping timeout: 248 seconds)
*	freeman42x[m] has quit (Ping timeout: 240 seconds)
<dminuoso>	lyxia, so just staring at that diagram made me realize that the "mapping of functions" ψ(f) and ϕ(f) parts dont need to be "mapped". The natural transformation just cares about ϕ(x) and ψ(y)
*	zero_byte (~zer0@ip-89-103-110-138.net.upcbroadband.cz) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	soLucien has quit (Ping timeout: 240 seconds)
*	takle (~takle@host86-166-243-7.range86-166.btcentralplus.com) has joined
*	twandy has quit (Client Quit)
*	cyborg-one has quit (Ping timeout: 252 seconds)
<elpfen>	How do I use `when` when the IO Action i want to use doesn't return IO () ?
<cocreature>	:t void -- elpfen 
<lambdabot>	Functor f => f a -> f ()
<phadej>	:t when . void
<lambdabot>	error:
<lambdabot>	    • Couldn't match type ‘f1 ()’ with ‘Bool’
<lambdabot>	      Expected type: f1 a -> Bool
<phadej>	:t \b -> when b . void
<lambdabot>	Applicative f => Bool -> f a -> f ()
<jared-w>	also, when is applicative, not monadic... can you use it for IO actions?
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<cocreature>	jared-w: Applicative is a superclass of Monad
*	yqt has quit (Quit: KVIrc 4.0.4 Insomnia http://www.kvirc.net/)
*	freeman42y[m] has quit (Ping timeout: 248 seconds)
*	jellowj (~yellow-ja@dbn234.neoplus.adsl.tpnet.pl) has joined
<phadej>	keywords: covariance & contravariance
*	pellenation has quit (Quit: Textual IRC Client: www.textualapp.com)
*	mePressButton has quit (Quit: Lost terminal)
<jared-w>	riiight... duh, brainfart on my part.
*	dsantiago (~dsantiago@cpe-104-175-193-69.socal.res.rr.com) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@69.36.49.34) has joined
<crucify_me>	jared-w, hey with that fibonacci example, how would you concisely describe how the fib numbers are being generated, using that method?
<elpfen>	That's what void is for!!
<elpfen>	thanks
*	OnkelTem has quit (Ping timeout: 248 seconds)
<jared-w>	elpfen: you can also abuse it in fun ways with pseudo-dependent typing if you're so inclined :p
*	acteek has quit (Quit: Leaving)
*	drewbert has quit (Remote host closed the connection)
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
<jared-w>	crucify_me: it's zipping a list with the tail of that list using addition
<jared-w>	> zipWith (+) [1..5] [10..15]
<lambdabot>	 [11,13,15,17,19]
*	Jeanne-Kamikaze has quit (Remote host closed the connection)
<crucify_me>	thanks, could you say that is forcing evaluation without a bottom value? ..trying to get the terminology in order
<jared-w>	[(1 + 10), (2 + 11), (3 + 12), (4 + 13), (5 + 14)] (and the zipWith function stops since we ran out of one list even though there's a 15 in the other list)
<orzo>	If I have a literal expression 1 + 4 + 2 + 32 can I count on GHC to evaluate it at compile time?
<orzo>	I'm not talking about evaluating general constant expressions, but simple math formula like that
*	twandy has quit (Client Quit)
<crucify_me>	ok thanks gotta go through that
<jared-w>	crucify_me: no, that's the entirely wrong terminology and wrong context to use that sort of terminology in
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<crucify_me>	ok thanks 
<jared-w>	crucify_me: Do you understand what `tail` does? Given a list [1..5] tail gives you [2..5]
<crucify_me>	yeah that's like cdr
*	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined
<jared-w>	So with zipWith (+) x (tail x) you're adding x_n and x_(n+1) together which is precisely the co-recursive method for generating a fibonacci number
*	mac10688 (~mac10688@c-24-21-116-24.hsd1.or.comcast.net) has joined
*	chaosmasttter (~chaosmast@p4FF1C655.dip0.t-ipconnect.de) has joined
*	MarioBranco has quit (Quit: Leaving)
*	ashpokemonZ has quit (Quit: Leaving)
<jared-w>	I start the list off with `1 : 1 : ` so that x and (tail x) have value to work with to get the third item in the list (which will be 2)
*	bbsl has quit (Quit: WeeChat 1.9)
*	jfo (3ec726df@gateway/web/freenode/ip.62.199.38.223) has joined
<crucify_me>	thanks right you need two 1's to start it. you can
<crucify_me>	t
*	twandy has quit (Client Quit)
<jared-w>	so it's:  1 : 1 : (1+1) : (1 + (1+1)) : ((1+1) + (1 + (1+1))) : ...
<crucify_me>	 *can't use the zero
*	pera (~pera@unaffiliated/pera) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<jared-w>	You could use zero just fine ¯\_(ツ)_/¯
<lyxia>	orzo: yes
<jared-w>	> let x = 0 : 1 : zipWith (+) x (tail x) in x
<lambdabot>	 [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,...
<jared-w>	In fact you could use any two numbers to 'kick start' the fibonacci series. It is merely convention that the "traditional" fibonacci function is defined as f0 = 1; f1 = 1; fn = f(n-1) + f(n-2). The two base cases could really be whatever you wanted them to be
<c_wraith>	> let x = 0 : scanl (+) 1 x in x
<lambdabot>	 [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,...
<jared-w>	But that's more a mathematical aside than anything that's actually relevant to programming
<c_wraith>	> let x = (0 :) . scanl (+) 1 $ x in x
<lambdabot>	 [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,...
*	dsantiago has quit (Quit: Computer has gone to sleep.)
<c_wraith>	> fix (0 :) . scanl (+) 1
<lambdabot>	 error:
<lambdabot>	     • Couldn't match expected type ‘[b] -> c’
<lambdabot>	                   with actual type ‘[Integer]’
<c_wraith>	> fix $ (0 :) . scanl (+) 1
<lambdabot>	 [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,...
<crucify_me>	excellent. yeah you just need to fib numbers in sequence to prime the sequence
<jared-w>	c_wraith: now you're just screwing around :p
<jared-w>	> fix $ (1 :) . scanl (+) 1
<lambdabot>	 [1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17...
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<koz_>	:t scanl (+) 1
<lambdabot>	Num b => [b] -> [b]
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
<crucify_me>	that's also fibonacci?
<jared-w>	idk, while shiny and cool, I don't really like this definition as much. It's not quite the clearest representation of the fibonacci sequence, to me
*	banc has quit (Quit: ZNC - http://znc.in)
*	Wuzzy (~Wuzzy@p5790E0B7.dip0.t-ipconnect.de) has joined
<crucify_me>	is that using a fold or something?
<jared-w>	crucify_me: yeah. Don't think too hard about that. fix is a way to define recursion without having a recursive call. scanl is a co-recursive method... etc
*	dsantiago (~dsantiago@cpe-104-175-193-69.socal.res.rr.com) has joined
<jared-w>	Not a fold, but an unfold
<c_wraith>	> scanl (+) 0 [1..10]
<lambdabot>	 [0,1,3,6,10,15,21,28,36,45,55]
*	banc (~master@217.151.98.168) has joined
*	dmiles has quit (Read error: Connection reset by peer)
<c_wraith>	If that helps explain what scanl does
<crucify_me>	interesting that's overload, thanks though!
<c_wraith>	> scanl (+) 0 (repeat 1)
<lambdabot>	 [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,2...
<jared-w>	crucify_me: yeah I can barely follow the pointfree fix and scan version myself. Don't worry too much about it :p
*	twandy has quit (Client Quit)
<c_wraith>	crucify_me: scanl is a variant of foldl that gives a list of every intermediate state.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) has joined
<jared-w>	And the reason it doesn't break on infinite lists is because it's co-recursive, right?
<c_wraith>	yes
<crucify_me>	thanks so much I gotta go over the log and make a nice file with notes (and footnotes for scanl / foldl)
*	dmiles has quit (Excess Flood)
*	efeuska has quit (Quit: efeuska)
*	zapbranig has quit (Ping timeout: 248 seconds)
*	biglama has quit (Remote host closed the connection)
<c_wraith>	jared-w: though technically that isn't much of a statement.  Anything that works with infinite lists has to be co-recursive.
*	dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) has joined
*	conal_ has quit (Ping timeout: 240 seconds)
*	davr0s (~textual@host86-142-61-82.range86-142.btcentralplus.com) has joined
<c_wraith>	or recursive over an argument other than the list, I suppose.
*	twandy has quit (Client Quit)
<c_wraith>	> take 5 [1..]  -- recursive over the Int argument
<lambdabot>	 [1,2,3,4,5]
<Tuplanolla>	let f = (1 !) \/ plus; g = ((() !) -|- pred /\ (pred . pred)) . ((<= 1) ?) in hylo (_L :: Mu (Const () :+: (Id :*: Id))) f g -- Here's an even better way to do it with the `pointless-haskell` package.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	emilypi has quit (Ping timeout: 248 seconds)
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	zapbranig (~zapbranig@cpc92882-cmbg20-2-0-cust147.5-4.cable.virginm.net) has joined
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	emilypi (~emilypi@100.33.104.88) has joined
<crucify_me>	so these examples I have, where exactly is the closure operating, say in the fibonacci example jared-w  ? geekosaur entitled their sample with "when evaluation is and isn't forced by a pattern match; so how do you look at those examples and say: "there's the closure"
*	soniku has quit (Ping timeout: 246 seconds)
<jared-w>	c_wraith: fair point :p I just like to keep recursive vs co-recursive straight in my head even though Haskell blurs the lines quite a bit
*	twandy has quit (Client Quit)
*	conal_ (~conal@185.145.156.52) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	vjacob has quit (Ping timeout: 246 seconds)
<crucify_me>	^ no wonder I'm having trouble. the fibonacci is co-recursive?
*	danvet has quit (Ping timeout: 252 seconds)
*	samrat has quit (Ping timeout: 246 seconds)
*	twandy has quit (Client Quit)
*	ziocroc2 (~ziocroc@151.74.82.4) has joined
<jared-w>	The particular examples we've been doing are. Fibonacci can be written in a co-recursive or recursive way
<jared-w>	"the fibonacci" is nothing more than a mathematical function. It's how it's implemented that matters
*	zzq has quit (Read error: Connection reset by peer)
*	JuanDaugherty has quit (Quit: Ex Chat)
*	Mirandag (~Mirandag@host46-28-dynamic.10-87-r.retail.telecomitalia.it) has joined
<Mirandag>	ciao
<Mirandag>	!list
*	ziocroc has quit (Ping timeout: 246 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Mirandag has quit ()
*	jmcarthur (~jmcarthur@2601:86:100:1620:11f3:5a14:fc98:ceb1) has joined
*	jeltsch (~wolfgang@82.131.87.29.cable.starman.ee) has joined
*	Subeff has quit (Quit: Page closed)
*	twandy has quit (Client Quit)
<crucify_me>	jared-w, thanks a lot for all the help .. et al
*	a3Dman has quit (Ping timeout: 240 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	nshepperd (~nshepperd@gateway/vpn/privateinternetaccess/nshepperd) has joined
*	fizbin (~Adium@pool-96-235-144-253.cmdnnj.east.verizon.net) has joined
*	conal_ has quit (Quit: Computer has gone to sleep.)
*	pandeiro has quit (Ping timeout: 246 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Big_G has quit (Read error: Connection reset by peer)
*	OnkelTem has quit (Ping timeout: 240 seconds)
*	drewbert has quit (Quit: Leaving...)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	m0rphism (~m0rphism@HSI-KBW-085-216-002-127.hsi.kabelbw.de) has joined
*	hackagebot Villefort 0.1.1.12, io-streams 1.5.0.1, openssl-streams 1.2.1.2, snap-core 1.0.3.1, … and 2 more
*	hackagebot  → https://hackage.haskell.org/packages/recent
*	StoneToad has quit (Ping timeout: 252 seconds)
*	StoneToad (~StoneToad@ppp-199-167-119-201.storm.ca) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<c_wraith>	I'm still so slow at this...  and wow does it look like alphabet soup.
<c_wraith>	:t \f z t -> foldr (\c g x -> x : g (f c x)) (:[]) t z
<lambdabot>	Foldable t => (t2 -> t1 -> t1) -> t1 -> t t2 -> [t1]
*	Mon_Ouie has quit (Quit: WeeChat 1.9)
*	Welkin (~Welkin@107-147-90-29.res.bhn.net) has joined
*	twandy has quit (Client Quit)
<ignamv>	is there a tidy way to access variables bound in an inner do block in the outer do block?
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<c_wraith>	ignamv: return them.
<hpc>	^
<hpc>	it's the only way
*	nilg has quit (Ping timeout: 248 seconds)
<Welkin>	nested do-blocks sounds like perhaps a badly written function
*	slomo has quit (Read error: Connection reset by peer)
<ignamv>	what's the alternative?
<mniip>	mutable references!
*	oisdk has quit (Ping timeout: 240 seconds)
<hpc>	the alternative is not returning them ;)
<cocreature>	mniip: heretic!
<geekosaur>	I think that alternative thing is aimed at Welkin
<ignamv>	yes
<hpc>	ignamv: see acme-dont for a basic example of where extracting something from a do-block is simply impossible
<Welkin>	it depends on your code
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<ignamv>	I understand that the function that gets the inner do has to do the work
<ignamv>	or rather cooperate in passing along the vars
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	albertus1 (~seb@x55b4bad7.dyn.telefonica.de) has joined
<ignamv>	anyway thanks, I guess there's no sugar for this situation
<eschnett>	@jle` thanks! yes, the name “sum” is misleading in this context; however, if f and g are vector spaces, then this corresponds to the sum space.
<lambdabot>	 Parse failed: Parse error: name
*	Scip (~scip@76.121.6.102) has joined
<eschnett>	jle`: (see above)
*	caumeslasal has quit (Ping timeout: 240 seconds)
*	bmeynell (~bmeynell@142-197-108-175.res.bhn.net) has joined
*	hphuoc25 has quit (Remote host closed the connection)
*	bmeynell has quit (Remote host closed the connection)
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<mniip>	oh yes
<mniip>	direct sum spaces are product objects
<mniip>	and tensor products are exponentials!
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	oisdk (~textual@83.136.43.51) has joined
*	danthemyth has quit (Ping timeout: 248 seconds)
*	jao has quit (Ping timeout: 240 seconds)
*	insitu (~user@110.170.9.109.rev.sfr.net) has joined
*	twandy has quit (Client Quit)
*	bsmt has quit (Quit: lolbye)
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	henriksod has quit (Quit: henriksod)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	bsmt (~bsmt@host-174-45-104-119.bzm-mt.client.bresnan.net) has joined
*	iqubic (~iqubic@2601:602:8a00:1bd7::4c09) has joined
*	twandy has quit (Client Quit)
<jared-w>	tensor products are exponentials?
<jared-w>	So many things make sense now :p
*	nshepperd has quit (Quit: WeeChat 1.9)
*	a3Dman has quit (Ping timeout: 240 seconds)
*	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined
*	nshepperd (~nshepperd@gateway/vpn/privateinternetaccess/nshepperd) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<iqubic>	Like what?
*	Welkin has quit (Quit: leaving)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	crobbins (~crobbins@2600:1700:6391:1c20:e9a2:9c89:f0bb:7f7c) has joined
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	cyborg-one (~cyborg-on@62.16.17.205) has joined
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	djapo has quit (Quit: leaving)
*	stef204 (~stef204@unaffiliated/stef-204/x-384198) has joined
*	MitchellSalad has quit (Quit: WeeChat 1.4)
<dminuoso>	Mmm. Interesting, so there's other natural transformations than >>= id! Found about maybeToList :)
*	MitchellSalad (~MitchellS@ec2-34-205-225-169.compute-1.amazonaws.com) has joined
*	twandy has quit (Client Quit)
*	crobbins has quit (Ping timeout: 246 seconds)
*	theelous3_ (~theelous3@unaffiliated/theelous3) has joined
*	ltielen has quit (Quit: WeeChat 1.9)
*	jollygood2 has quit (Quit: http://www.okay.uz/ (Session timeout))
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	twandy has quit (Client Quit)
*	ga2arch (50b42bcd@gateway/web/freenode/ip.80.180.43.205) has joined
*	Whitesquall has quit (Ping timeout: 240 seconds)
*	insitu has quit (Ping timeout: 240 seconds)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<ga2arch>	hi, i'm trying to get a better understanding of this code http://lpaste.net/1291693641697329152, i don't understand how the third instance recurses
*	osa1 has quit (Ping timeout: 248 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	valentinbuza has quit (Ping timeout: 240 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	afarmer (~afarmer@94.119.64.4) has joined
*	soniku has quit (Ping timeout: 240 seconds)
*	ds has quit ()
*	project2501a1 (~project25@185.65.134.79) has joined
*	elpfen has quit (Quit: Lost terminal)
*	apo (~apo@2001:41d0:8:684e::3) has joined
*	raichoo has quit (Ping timeout: 240 seconds)
<apo>	hey
*	twandy has quit (Client Quit)
<apo>	does nomeata still hang out in here?
*	caumeslasal has quit (Ping timeout: 248 seconds)
<hexagoxel>	ga2arch: it doesn't recurse in the sense "inj = let f = Inr . f in f" only in the sense that it redirects to the (f :>: g) instance.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<hexagoxel>	eh, the f :<: g instance I mean.
<ga2arch>	hexagoxel: mmm, how does the redirect work? 
<geekosaur>	the second inj is referencing a different instance than the first
<c_wraith>	apo: I can't say as I recall him saying anything recently.  He's still active on the mailing lists
<geekosaur>	by the types
<apo>	c_wraith: Well, as long as he still joins occasionally, I should be able to catch him
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<ga2arch>	geekosaur: mmm still confused :|
<geekosaur>	nomeata was last in here 18 Aug, according to my logs
<geekosaur>	for about half an hour
<hexagoxel>	inj :: f a -> (h :+: g) a; inj = Inr . (inj :: f a -> g a)
<apo>	geekosaur: oh, dang.
<apo>	thanks for checking :)
*	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined
<ga2arch>	hexagoxel: thanks, i'm getting there i think
*	twandy has quit (Client Quit)
*	dsantiago has quit (Quit: Computer has gone to sleep.)
*	conal (~conal@client-7-151.visitor-network.oxuni.org.uk) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	sleffy has quit (Ping timeout: 240 seconds)
<ga2arch>	hexagoxel geekosaur: i'm retarded, got it now, thanks 
<geekosaur>	ga2arch, basically you know the first one from the instance definition; you can derive the second by the fact that you applied Inr to its result to get the type from the first
*	Sampuka has quit (Ping timeout: 246 seconds)
*	caumeslasal has quit (Ping timeout: 252 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	thc202 has quit (Ping timeout: 240 seconds)
*	jared--w (~jared-w@138.68.44.28) has joined
*	albertus1 has quit (Quit: Leaving.)
*	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined
*	tarantoga (~tarantoga@x590e70d0.dyn.telefonica.de) has joined
*	conal has quit (Ping timeout: 248 seconds)
*	hackagebot Villefort 0.1.1.13, throttle-io-stream 0.2.0.0, tsuntsun 0.2.0.0
*	hackagebot  → https://hackage.haskell.org/packages/recent
*	jared-w has quit (Quit: ZNC - 1.6.0 - http://znc.in)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	richardmar (~richardma@ool-4577f25c.dyn.optonline.net) has joined
<richardmar>	hey boys
*	jared--w is now known as jared-w
*	Bhootrk_ has quit (Quit: Leaving)
*	ga2arch has quit (Quit: Page closed)
<ignamv>	is there agreement on what constitutes readable Haskell?
*	Bhootrk_ (~Bhootrk_@118.189.203.83) has joined
*	Bhootrk_ has quit (Max SendQ exceeded)
<hpc>	in the sense of consensus, or a list of rules, or a linter?
<jared-w>	ignamv: if you can send the code to 3 people and only 2 of them disagree with how you wrote it, it's readable :p
*	zzq (~zzq@46.120.114.167) has joined
<MarcelineVQ>	jared-w: I had to read that twice, pretty clever though
<hpc>	as the supreme court so hilariously put it, you'll know it when you see it
*	jfo has quit (Quit: Page closed)
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
<ignamv>	haha
<ignamv>	dirty
*	`Guest00000 has quit (Ping timeout: 240 seconds)
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	twandy has quit (Read error: Connection reset by peer)
<ignamv>	any guidelines though?
*	twandy1 is now known as twandy
<hpc>	the most consistent guideline i can think of is "make it look like what it does"
<iqubic>	ignamv: use top level type signatures always.
<MarcelineVQ>	ignamv: oh sure, good ones too  https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md
<hpc>	which is admittedly vague
<ignamv>	hpc: like this? http://blog.aerojockey.com/post/iocccsim
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	djapo (~archie@unaffiliated/djapo) has joined
<ignamv>	argh, I pressed a shortcut with focus on the wrong window and now my PC is launching ze missiles
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	meijiJAPAN (~Mutter@178.241.201.129) has joined
<ignamv>	MarcelineVQ: thanks
<monochrom>	Use your own sense of aesthetics. Go with your heart.
*	mizu_no_oto has quit (Client Quit)
<hpc>	a contrived example might be, if part of your algorithm is printing a newline, use putStr "\n" instead of putStrLn ""
<hpc>	this goes beyond just haskell
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	heebo (~user@13.aa.089f.ip4.static.sl-reverse.com) has joined
*	infinity0 has quit (Ping timeout: 240 seconds)
*	infinity0 (~infinity0@freenet/developer/infinity0) has joined
*	duog has quit (Remote host closed the connection)
<monochrom>	Eliminate XY problems.
*	meijiJAPAN has quit (Client Quit)
*	twandy has quit (Client Quit)
*	heebo has quit (Remote host closed the connection)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	richardmar has quit (Quit: Lost terminal)
*	heebo (~user@13.aa.089f.ip4.static.sl-reverse.com) has joined
<hpc>	it's really hard to clarify any further, i keep arriving at "readable code is code you can read"
*	erisco (~erisco@198-84-159-71.cpe.teksavvy.com) has joined
<hpc>	other than to list classes of mistake and say "avoid these"
<monochrom>	I think that the most important cause of unreadable code is XY problems, not petty things such as indentation style or pointfree vs pointful.
<monochrom>	Debug your mind, not your code.
<Tuplanolla>	Haskell always becomes a mess, so the best thing you can do is a consistent mess.
<MarcelineVQ>	readable code is code that when you lpaste it and your error to ask what you did wrong, people can answer you
*	twandy has quit (Client Quit)
*	amar_ (~amarpotgh@tmo-097-76.customers.d1-online.com) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	amar_ is now known as Guest50010
*	heebo has quit (Remote host closed the connection)
*	chaosmasttter has quit (Ping timeout: 246 seconds)
*	iqubic has quit (Remote host closed the connection)
*	OnkelTem has quit (Ping timeout: 240 seconds)
*	Yuras has quit (Ping timeout: 248 seconds)
*	`Guest00000 (~user@37.113.172.119) has joined
*	marr (~ccc@159-205-229-96.adsl.inetia.pl) has joined
*	amir___ (b283f7d8@gateway/web/freenode/ip.178.131.247.216) has joined
*	caumeslasal has quit (Ping timeout: 252 seconds)
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	Ralith_ (~ralith@c-24-56-225-47.customer.broadstripe.net) has joined
*	meijiJAPAN (~Mutter@178.241.201.129) has joined
<meijiJAPAN>	 Is there any book for functional implementations of data structures and algorithms 
*	zcourts_ (~zcourts@185.92.25.82) has joined
<erisco>	meijiJAPAN, yeah
<hpc>	https://www.cs.cmu.edu/~rwh/theses/okasaki.pdf
<erisco>	that one
<osfameron>	I'm surprised that's still the only one people ever mention though
<hpc>	it's a good book
<osfameron>	okasaki is good but it's dense and hard to read if you haven't got a maths/cs backgound
*	amir___ has quit (Client Quit)
<osfameron>	yeah, it's great.  I'm just surprised there isn't a mid-market equivalent
<osfameron>	or one that covers more/different data-structures
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<eikke>	cocreature: makes sense, thanks
<hpc>	there probably is, it's just lacking the reputation
<hpc>	i imagine it's similar to how if you ask about a book for writing compilers, everyone suggests the dragon book
<monochrom>	Not enough demand. Plus for most programmers they just need to know "use Data.Map" and "use Data.HashMap".
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	zcourts has quit (Ping timeout: 240 seconds)
<monochrom>	Ha but I'll suggest the tiger book.
<monochrom>	Although, as more years go by, the tiger book suffers the same old problem.
*	afarmer has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
<hpc>	there's only one solution
<hpc>	we have to stop advancing computer science :P
*	herr_jth has quit ()
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Tuplanolla>	There are many ways to a Pyrrhic victory.
<Tuplanolla>	Say nothing of substance and you will never be wrong.
*	ericdwhite has quit (Remote host closed the connection)
<monochrom>	Like this? http://www.vex.net/~trebla/humour/tautologies.html
*	meijiJAPAN has quit (Quit: Mutter: www.mutterirc.com)
<jared-w>	Nobody's going to mention the great Pearls of Functional Algorithm Design?
*	epsilonhalbe has quit (Quit: Leaving.)
<ignamv>	aaand hackage is down
*	twandy has quit (Client Quit)
*	dsantiago (~dsantiago@cpe-104-175-193-69.socal.res.rr.com) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<jared-w>	(of course it's got a slight bit of a reputation for being, ahem, mathy)
*	Guest50010 has quit (Ping timeout: 240 seconds)
<epta>	@hackage base
<lambdabot>	http://hackage.haskell.org/package/base
<bennofs>	ignamv: works for me
*	meijiJAPAN (~Mutter@178.241.201.129) has joined
<monochrom>	Oh damn I still have to read Pearls!
<epta>	ignamv: can confirm there was a temporary glitch with 503 response
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	coot____________ has quit (Quit: coot____________)
*	fizbin has quit (Quit: Leaving.)
*	Jeanne-Kamikaze (~Jeanne-Ka@2601:647:4300:f30f:dc29:de55:7143:2279) has joined
<monochrom>	Bought it for myself to celebrate finishing my thesis. Read chapter 1. Since then sitting on the bookshelf along with all the other decorative textbooks such as John Mitchell's Foundations for Programming Languages!
*	eacameron (~eacameron@dsl-50-5-80-133.fuse.net) has joined
<Tuplanolla>	We need Perils of Functional Algorithm Design to balance it out.
*	meijiJAPAN has quit (Client Quit)
*	sepp2k has quit (Quit: Leaving.)
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	simukis has quit (Quit: simukis)
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
<monochrom>	But Pearls tends to be a life-long collection of cute little pieces rather than a systematic textbook.
*	Lazersmoke (~Lazersmok@c-73-45-78-140.hsd1.il.comcast.net) has joined
*	stef204 has quit (Quit: WeeChat 1.9)
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
<Lazersmoke>	Is there way to add haddock documentation to individual constructor fields? Like `data Stuff = Things A B C` and I want to document the A B and C individually
<monochrom>	Yes, see http://haskell-haddock.readthedocs.io/en/latest/index.html
*	twandy has quit (Client Quit)
<monochrom>	Err I guess no, unless you switch to the record syntax.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Lazersmoke>	ok
*	meijiJAPAN (~Mutter@178.241.201.129) has joined
*	hiratara has quit (Ping timeout: 255 seconds)
<ignamv>	yep, it's up
<Lazersmoke>	I just tried GADTs and they didn't work either :(
*	eacameron has quit (Remote host closed the connection)
*	dan_f (~dan@24.148.32.207) has joined
<ignamv>	anyone know of a shapefile library that reads the actual shapes?
<monochrom>	It is also record syntax if it's GADTs.
<ignamv>	the package "shapefile" just gives you the bytes for each shape entry
*	hiratara (~hiratara@240f:7:4708:1:64c1:459e:e8b7:3556) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<eikke>	Is there any way to get the above to work, assuming I can't change A, B or C's definitions, but can change M? http://lpaste.net/358190
*	nitros_ has quit (Quit: WeeChat 1.9)
*	mizu_no_oto has quit (Quit: Computer has gone to sleep.)
<eikke>	I'm aware how instance selection works so I know why this doesn't work, but I'd love to find some kind of work-around :)
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	twandy has quit (Client Quit)
*	cloudhead (~cloudhead@ip5f5bd3e7.dynamic.kabel-deutschland.de) has joined
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	hexfive has quit (Quit: WeeChat 1.9)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	iiqof[m] (iiqofmatri@gateway/shell/matrix.org/x-aimdghenznhfqsmv) has joined
*	chao-tic (~chao@218.101.54.122) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	hexfive (~beknowly@50.35.82.88) has joined
*	meijiJAPAN has quit (Quit: Mutter: www.mutterirc.com)
<Lazersmoke>	does anyone have any advice on what to do about this module? It has a whole bunch of similar `data` definitions in it, with one or two support functions each. I don't really want to use records/lenes because I think it would clutter the namespace. Should I make one module for each type? https://github.com/Lazersmoke/civskell/blob/master/src/Civskell/Packet/Serverbound.hs#L171
*	hexfive has quit (Client Quit)
*	hexfive (~beknowly@50.35.82.88) has joined
*	twandy has quit (Client Quit)
*	SkyPatrol (~SkyPatrol@dsl51B6F885.fixip.t-online.hu) has joined
*	fizbin (~Adium@pool-96-235-144-253.cmdnnj.east.verizon.net) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	SkyPatrol_ has quit (Ping timeout: 240 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	iiqof[m] (iiqofmatri@gateway/shell/matrix.org/x-aimdghenznhfqsmv) has left ("User left")
*	halogenandtoast (~matthew-m@132.69.30.125.dy.iij4u.or.jp) has joined
<epta>	what is 'takeWhile' analogue in trifecta?
*	fizbin has quit (Client Quit)
<pavonia>	Lazersmoke: Have you considered using TH?
*	omilu (~omilu@iceland.sdf.org) has joined
<stevenxl>	hi folks
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Lazersmoke>	I have, but idk how far that will really get me, since they don't all use Generics for serialization
<Lazersmoke>	so I'd have to write so many special cases that it would cancel out the benefit I get from TH
*	halogenandtoast has quit (Ping timeout: 240 seconds)
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
*	setre has quit (Quit: ZNC 1.6.3+deb1 - http://znc.in)
*	hackagebot data-fix 0.0.7, th-typegraph 1.0.2, throttle-io-stream 0.2.0.1
*	hackagebot  → https://hackage.haskell.org/packages/recent
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	zoey has quit (Quit: Leaving)
*	Miroboru has quit (Read error: Connection reset by peer)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	a3Dman has quit (Ping timeout: 240 seconds)
<jared-w>	Lazersmoke: is there any reason you can't use Generics for serialization everywhere in the module so that TH is useful?
<Lazersmoke>	I could kludge it a little more and make that happen, but most of the information is not the same between different types. For instance, the handler functions are all unique
*	twandy has quit (Client Quit)
*	JagaJaga has quit (Ping timeout: 252 seconds)
*	heebo (~user@cpc96302-lewi18-2-0-cust642.2-4.cable.virginm.net) has joined
<Lazersmoke>	I think I'm just gonna put everything in its own module, and put all of that plus an export aggregator thingy in another package later (was planning on doing that for some unrelated stuff anyway)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	eacameron (~eacameron@dsl-50-5-80-133.fuse.net) has joined
*	conal (~conal@client-7-151.visitor-network.oxuni.org.uk) has joined
<jared-w>	That doesn't sound too bad. It's a shame there's no way to have multiple modules per file
*	jedws (~jedws@2001:8003:3582:aa00:890f:cdfd:f901:adf2) has joined
*	Dr_Lambda (~lambda@143.176.214.136) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	sphinxo (~sphinxo@host-212-139-72-55.static.as9105.net) has joined
<dminuoso>	Mmm, so the composition (natural transformation) of monads is constrained to "from functor f to f"? I mean I can't just `join [Just3]` 
*	fizbin (~Adium@pool-96-235-144-253.cmdnnj.east.verizon.net) has joined
*	conal has quit (Ping timeout: 248 seconds)
*	theelous3_ is now known as theelous3
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<Cale>	dminuoso: I'm not sure what the first part means, but you can't join [Just 3], indeed
<Cale>	:t join
<lambdabot>	Monad m => m (m a) -> m a
<Cale>	Has to be the same monad.
<Tuplanolla>	The composition of monads usually means something else, dminuoso.
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<monochrom>	The problem with "express in your own words to confuse the hell of yourself"
*	dsantiago has quit (Quit: Computer has gone to sleep.)
<Tuplanolla>	Take `newtype Jist a = Jist [Just a]` for example. Is `Jist` a monad?
*	twandy has quit (Ping timeout: 248 seconds)
*	twandy1 is now known as twandy
<Cale>	Tuplanolla: What type constructor is Just?
*	heebo has quit (Remote host closed the connection)
*	danthemyth has quit (Ping timeout: 260 seconds)
<monochrom>	+1
<Tuplanolla>	Pfft...
*	eacameron has quit (Remote host closed the connection)
*	nickolay has quit (Ping timeout: 255 seconds)
*	hiratara has quit (Quit: ZNC - http://znc.in)
<Tuplanolla>	I meant to write `newtype Mist a = Mist [Maybe a]`.
<monochrom>	That's better. Was wondering "what does jist mean?" too.
*	eacameron (~eacameron@dsl-50-5-80-133.fuse.net) has joined
*	hiratara (~hiratara@240f:7:4708:1:717c:9ac6:2d90:4a99) has joined
<monochrom>	Hrm that's going to be a difficult question.
*	twandy has quit (Client Quit)
*	xinming has quit (Ping timeout: 240 seconds)
*	Dr_Lambda (~lambda@143.176.214.136) has left
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Tuplanolla>	In my experience accidentally writing jist is more common than correctly writing gist.
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<koz_>	Tuplanolla: English's semi-phonetic nature strikes again!
<DigitalKiwi>	are you someone that pronounces gif like the peanut butter?
<jared-w>	DigitalKiwi: you mean "wrong"? :p
<DigitalKiwi>	your words
<DigitalKiwi>	they hurt
<koz_>	jared-w: I'm confused.
<dminuoso>	Cale, Im still a bit stuck on some details of "monads are monoids in the category of endofunctors". The thing that Im not entirely clear on, is that group operation of the monoid.
<hpc>	someone needs to make a photoshop now of "peanut buttery cat"
*	systemfa_ (~rcyr@unaffiliated/rcyr) has joined
<orzo>	How do I write an instance for type-level naturals?  I'm getting Illegal type synonym family application in instance when I use (n+1)
<dminuoso>	Cale, I mean if I can't do join [Just 3], then it seems like the monoid operation is constrained to only some functor compositions
<Eduard_Munteanu>	dminuoso, unit is the unit and join does the "multiplication"
*	sfcg has quit (Remote host closed the connection)
<orzo>	GHC.TypeLits doesn't seem to havea Succ operator
<Cale>	dminuoso: Well, okay, so in the monoidal category (Set, ×, 1)
*	gugah (~gugah@181.28.219.193) has joined
*	gugah has quit (Max SendQ exceeded)
<Cale>	dminuoso: You have that a monoid comes equipped with a multiplication map: M × M -> M
<jared-w>	koz_: There are two ways to pronounce the file extension .gif--with a hard g or a soft g. I'm joking that only the hard 'g' is a valid pronounciation of 'gif' (even though, ironically, the creator of the format insists the soft 'g' is the correct way to pronounce it)
*	gugah (~gugah@181.28.219.193) has joined
*	twandy has quit (Client Quit)
<koz_>	jared-w: Hard g is like 'leg', while soft g is like 'germ'?
*	Welkin (~Welkin@107-147-90-29.res.bhn.net) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<jared-w>	precisely
*	systemfault has quit (Ping timeout: 240 seconds)
<Tuplanolla>	Then there's the rally driver g, which is like k, jared-w.
*	BartAdv has quit (Quit: Connection closed for inactivity)
<Eduard_Munteanu>	I thought it was the other way around.
*	mayhew (~mayhew@142.167.222.89) has joined
<koz_>	jared-w: So what's the peanut butter thing about?
<hpc>	there's a company that makes peanut butter called "jif"
*	desperek has quit (Quit: died)
<monochrom>	I propose the new naming scheme "the gift g and the gist g".
<koz_>	hpc: Ah, I see.
<Cale>	In the monoidal category (End(C), . , id), i.e. endofunctors on C with natural transformations between them, with the tensor product being functor composition (which importantly is a bifunctor on this category), and the unit being the identity functor
*	jao (~jao@pdpc/supporter/professional/jao) has joined
<hpc>	(also the cat comment was because of giffycat
<hpc>	)
<Cale>	You have that a monoid object M is equipped with a natural transformation ("multiplication")  M . M -> M
<koz_>	The only 'Jif' I'm familiar with: https://en.wikipedia.org/wiki/Cif#Name
<Cale>	right?
<hpc>	or gfycat or however it's spelled
<koz_>	(although it also used to be called Vim, for extra confusion)
<DigitalKiwi>	http://imgur.com/a/VAKh0
<Cale>	This natural transformation has, for each object X in C, a component at X, which is a map M (M X) -> M X
*	systemfa_ has quit (Read error: Connection reset by peer)
*	zero_byte has quit (Ping timeout: 252 seconds)
<hpc>	koz_: that's hilarious
<koz_>	DigitalKiwi: Consider me enlightened.
<Cale>	In Haskell, we would render that as a polymorphic function M (M a) -> M a
<Cale>	which is exactly join
*	twandy has quit (Client Quit)
*	reactormonk (~tass@p4FE1B55B.dip0.t-ipconnect.de) has joined
<Cale>	dminuoso: Does that help?
<monochrom>	"Use Vim to clean your windows!"
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<hpc>	let's see emacs do that
<jared-w>	M-x windex ;)
<koz_>	monochrom: A 'Vim is not Emacs' joke seems... dammit hpc.
<DigitalKiwi>	that's a jif gif
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	`Guest00000 has quit (Ping timeout: 260 seconds)
*	`Guest00000 (~user@37.113.172.119) has joined
*	oisdk has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	twandy has quit (Client Quit)
*	wroathe (~Mutter@2601:445:480:7d0:dcd:a4e0:dd32:bac3) has joined
*	wroathe has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	ajmccluskey has quit ()
<monochrom>	https://emacsconference.com/about-emacs/
*	whoisxy (~whoisxy@5.42.130.254) has joined
<koz_>	monochrom: Is it Confusing Names Day or something?
<DigitalKiwi>	monochrom can we make a thing where we say gift like jift and gist like jist so they are the same g?
*	Jeanne-Kamikaze has quit (Quit: Leaving)
<DigitalKiwi>	simplifies things, really, it's for the good of all
<Eduard_Munteanu>	It's RSI injury awareness day. :P
*	MoarSpaceFi (~Forgot_my@71-32-236-66.slkc.qwest.net) has joined
*	peterbecich has quit (Read error: Connection reset by peer)
<MarcelineVQ>	gist is like jist already
*	takle has quit (Remote host closed the connection)
<DigitalKiwi>	also I need a citation on that the creator of gif pronounces it the way I do thing...cause that is one battle I want to win
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	a3Dman has quit (Ping timeout: 240 seconds)
<dminuoso>	Cale, well here's the thing I dont get: The natural transformation η: M x M -> M means for every a,b out of M, there exists a mapping from (a,b) 
<koz_>	DigitalKiwi: On a somewhat-related note, is your name the demonym, the fruit or the bird?
*	bennofs has quit (Ping timeout: 246 seconds)
<dminuoso>	Cale, so I guess the question is: What is this set limited to?
*	takle (~takle@host86-166-243-7.range86-166.btcentralplus.com) has joined
<DigitalKiwi>	[17:50:15]  <phrik>	Digitized, chirping, fruit with citizenship, ftw! lolque? http://i.imgur.com/AT40oPm.jpg
<koz_>	Well, that just explains everything! :P
*	rickerbh (~rickerbh@14-203-105-198.static.tpgi.com.au) has joined
*	systemfault has quit (Quit: Bye!)
<DigitalKiwi>	all and none at the same time, I'm not even from NZ >.>
<koz_>	DigitalKiwi: Not many people are. :P
<Eduard_Munteanu>	dminuoso, you mean mu
<dminuoso>	Eduard_Munteanu, uh yes.
<DigitalKiwi>	too bad they're like the friendly version of australians
<dminuoso>	Or. No
<koz_>	DigitalKiwi: I'm from NZ, so thanks! :)
*	twandy has quit (Client Quit)
<Eduard_Munteanu>	dminuoso, eta is 1 -> M
*	`Guest00000 has quit (Ping timeout: 248 seconds)
*	twandy (~Thunderbi@69.36.49.34) has joined
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	`Guest00000 (~user@37.113.172.119) has joined
*	twandy has quit (Client Quit)
*	dsantiago (~dsantiago@cpe-104-175-193-69.socal.res.rr.com) has joined
*	forgottenone (~forgotten@176.40.57.105) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	soitgoes has quit (Ping timeout: 264 seconds)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	sfcg (~sfcg@79.97.176.188) has joined
*	twandy has quit (Client Quit)
*	eacameron has quit (Remote host closed the connection)
<Cale>	dminuoso: I'm not sure I understand the question. There's another map (actually usually the one you wrote there is called μ and the other one is η) for the unit, and then they satisfy some laws.
*	sfcg has quit (Remote host closed the connection)
<Cale>	Oh, also, that's not a natural transformation in that case
<Cale>	It's just a function
<Cale>	dminuoso: You wrote ×, so you must be talking about Set monoids.
*	milesrout (~milesrout@unaffiliated/milesrout) has joined
<Cale>	In the case of the category of endofunctors and natural transformations, × gets replaced by functor composition, so pairs aren't around.
*	jellowj has quit (Ping timeout: 260 seconds)
<dminuoso>	Cale, for a monoid (S, ., 1), the monoid operation is defined as .: S x S -> S right?
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	conal (~conal@client-7-151.visitor-network.oxuni.org.uk) has joined
<milesrout>	data Pair a = (a, a); Free Pair = BinaryTree. Free [] = RoseTree. Free Maybe ~ Maybe. Free Tree ~ Tree
<milesrout>	is that right?
*	nighty- has quit (Quit: Disappears in a puff of smoke)
*	sfcg (~sfcg@79.97.176.188) has joined
*	zero_byte (~zer0@ip-89-103-110-138.net.upcbroadband.cz) has joined
*	marvin2 has quit ()
*	jellowj (~yellow-ja@dbn234.neoplus.adsl.tpnet.pl) has joined
<milesrout>	Free Maybe = Pure x | Free Nothing | Free (Just (Pure x)) | Free (Just (Free Nothing)) | ..., so it's either something, or nothing, so it's basically just Maybe...?
*	twandy has quit (Read error: Connection reset by peer)
*	jedws has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<milesrout>	plus the let x = Free (Just x) in x case?
*	mizu_no_oto has quit (Quit: Computer has gone to sleep.)
*	conal has quit (Ping timeout: 260 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Cale>	dminuoso: We're talking about *Set* monoids now?
*	alveric (~LordAlver@i577A65F5.versanet.de) has joined
<Cale>	dminuoso: yes
*	preyalone has quit (Quit: Connection closed for inactivity)
<dminuoso>	Cale, wait a second. So in the world of haskell, that set is implicitly reduced to just one element?
<Cale>	dminuoso: The "a monad is a monoid in the category of endofunctors" thing is using a vastly more general notion of what the word "monoid" means.
<Cale>	https://en.wikipedia.org/wiki/Monoid_(category_theory) -- specifically, this one
*	alveric4 has quit (Ping timeout: 255 seconds)
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
<Cale>	It's so called, because if you pick the category of sets, and for the tensor product ⊗ you pick Cartesian product, and for 1 you pick a one element set, then you get something equivalent to the original definition of a monoid.
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
<Cale>	But when we're talking about monads, those aren't the choices we make
*	twanvl has quit (Ping timeout: 260 seconds)
<Cale>	Instead of the category of sets and functions, we choose the category of endofunctors on whatever category C it is that we're interested in, and the natural transformations between them
<Cale>	Instead of the Cartesian product, we choose ⊗ to be composition of functors
<Cale>	and instead of a one-element set, 1 becomes the identity functor
*	lambda-11235 (~lambda-11@70.41.58.147) has joined
<Cale>	and then out falls the definition of a monad
*	zcourts (~zcourts@162.229-30-62.static.virginmediabusiness.co.uk) has joined
<c_wraith>	Yeah, the important thing to know about "monoid in the category of endofunctors" is that it's a restatement of the definition that only makes sense if you already know category theory.
<Cale>	haha, yeah, that's one way to put it
*	twandy has quit (Client Quit)
*	conal (~conal@client-7-151.visitor-network.oxuni.org.uk) has joined
*	ziyourenxiang has quit (Ping timeout: 252 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Cale>	I'm assuming that dminuoso is trying to learn some category theory, and is not just interested in learning about monads in Haskell.
<Welkin>	and category theory is *not* required (or even all that helpful) in understanding and being able to use haskell
<Cale>	(If not, this whole thing might as well be considered offtopic)
<dminuoso>	Cale, monads I have understood rather early actually.
*	zcourts has quit (Remote host closed the connection)
*	zcourts (~zcourts@162.229-30-62.static.virginmediabusiness.co.uk) has joined
<Welkin>	haskell monads are easy, but people think they are some special thing that is heavy in theory
<Cale>	It's somewhat helpful, but it's not worth its time cost to learn if you're only interested in Haskell. As far as applications are concerned, category theory becomes more and more worthwhile the more other mathematics you're interested in.
<Welkin>	even though it's just an interface with >>= and join
<Welkin>	er
<Welkin>	>>= and return
<Cale>	But it's also quite nice for its own sake too.
*	zcourts_ has quit (Ping timeout: 252 seconds)
<hpc>	it's even less than that now
*	zcourts has quit (Remote host closed the connection)
<hpc>	the entirety of Monad can be summed up in join, since return is always pure
<Profpatsch>	Cheatsheet for the Dhall Configuration language
<Profpatsch>	https://github.com/Profpatsch/blog/blob/master/notes/dhall-cheatsheet.md
<Profpatsch>	non-turing-complete, typed, functional, interplolation/templating
<Profpatsch>	Would be happy about feedback. The cheatsheet should give a good overview if one already knows Haskell.
*	zcourts (~zcourts@162.229-30-62.static.virginmediabusiness.co.uk) has joined
<Cale>	hpc: Well, you need to define it somehow.
<Profpatsch>	(Dhall is by Gabriel Gonzalez)
*	mizu_no_oto has quit (Quit: Computer has gone to sleep.)
<Cale>	hpc: You could say (>>=) and Applicative
<Cale>	though that's a bit redundant
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Cale>	You'll get (<*>) for free from (>>=) and return also :)
*	conal has quit (Ping timeout: 248 seconds)
<Cale>	Usually, I prefer just to write a Monad instance and then use it to get Functor and Applicative
*	scottj (~s@unaffiliated/scottj) has left
<dminuoso>	Cale, oh. I think I may have been conflating "a monoidial category" and a "monoid"
<dminuoso>	Which might explain exactly the confusion I have been experiencing for a while
<Welkin>	Cale: you can only do that in haskell though because of liftM, ap, and pure
<Welkin>	in purescript you can't do this, because liftM, ap, and return don't exist
<c_wraith>	You could define them to use as helpers.
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<c_wraith>	much like Traversable provides foldMapDefault and fmapDefault as helpers in the module.  (in case you don't want to derive those definitions, I guess?)
<dminuoso>	Cale, oh yeah. Thanks a lot for your patience and that last link on monoid. The term is truly overloaded in math it seems. :(
*	SkyPatrol_ (~SkyPatrol@netacc-gpn-7-138-113.pool.telenor.hu) has joined
*	sfcg has quit (Remote host closed the connection)
*	twandy has quit (Client Quit)
<dminuoso>	Cale, so monads are monoid *objects* of the monoidal *category* of endofunctors?
*	SkyPatrol has quit (Ping timeout: 240 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	cyborg-one has quit (Quit: cyborg-one)
<dminuoso>	I definitely need a book on this.
<paf31>	Welkin: ap exists https://pursuit.purescript.org/packages/purescript-prelude/3.1.0/docs/Control.Monad#v:ap
*	markus1199 (~markus118@p4FDC0141.dip0.t-ipconnect.de) has joined
<paf31>	liftM is liftM1
*	kipras is now known as kipras`away
*	kipras`away is now known as kipras
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
**** ENDING LOGGING AT Sun Sep  3 16:32:00 2017

**** BEGIN LOGGING AT Sun Sep  3 17:59:08 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	acidjnk (~acidjnk22@p4FFBD86B.dip0.t-ipconnect.de) has joined
*	twandy has quit (Client Quit)
*	rcat has quit (Remote host closed the connection)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	MoarSpaceFi has quit (Ping timeout: 240 seconds)
*	twandy has quit (Client Quit)
*	jellowj has quit (Ping timeout: 252 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	acarrico has quit (Ping timeout: 240 seconds)
*	Destol has quit (Quit: leaving)
*	danthemyth has quit (Remote host closed the connection)
*	acarrico (~acarrico@pppoe-68-142-58-22.gmavt.net) has joined
<crucify_me>	https://ptpb.pw/w-zU   hi again, the constant function looks like it takes more than two arguments in the ghci examples. but isn't it defined to take just 2?
<c_wraith>	> const id () 5
<lambdabot>	 5
<c_wraith>	crucify_me: any function with a sufficiently polymorphic return type can return a function
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<c_wraith>	> const const () const () id 5
<lambdabot>	 error:
<lambdabot>	     • No instance for (Typeable a0)
<lambdabot>	         arising from a use of ‘show_M326319284077136244216352’
<c_wraith>	heh, whoops
<c_wraith>	> const const () const const () id 5
<lambdabot>	 error:
<lambdabot>	     • Couldn't match expected type ‘Integer -> t’ with actual type ‘()’
<lambdabot>	     • The function ‘const’ is applied to 7 arguments,
<c_wraith>	Hmm.  I should give up now.
<crucify_me>	sorry I don't see what you're doing. 
<erisco>	crucify_me, all functions take exactly one argument
*	plutoniix has quit (Quit: Leaving)
*	twandy has quit (Client Quit)
<crucify_me>	actually yeah erisco that I see...
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<crucify_me>	so here's the thing...
<erisco>	so, the mystery can be reduced to: why does const take two arguments if all functions just take one argument?
<crucify_me>	that I know the answer to
<crucify_me>	because
<DigitalKiwi>	higher functions?
*	dfeuer (~dfeuer@wikimedia/Dfeuer) has joined
<crucify_me>	const id 6 is all const takes there. it *resolves* to id
<erisco>	reduces to, yes
*	Guest50103 has quit (Changing host)
*	Guest50103 (~nitrix@haskell/developer/nitrix) has joined
*	Guest50103 is now known as nitrix
<c_wraith>	crucify_me: but then how do you apply that function to an argument?
<c_wraith>	crucify_me: (whitespace!)
*	Ralith__ (~ralith@c-24-56-225-47.customer.broadstripe.net) has joined
*	twandy has quit (Client Quit)
<crucify_me>	right, it reduces to id, then whitespace, then you get 5
<erisco>	const x  reduces to the function  \y -> x
*	vaibhavsagar (~vaibhavsa@42.61.209.77) has joined
<erisco>	(\y -> x) z  reduces to  x
<erisco>	hence  const x z  reduces to x
<erisco>	const x z a  reduces to  x a
*	Ralith_ has quit (Ping timeout: 260 seconds)
<crucify_me>	thanks hold on please
<erisco>	adding parentheses may help
<crucify_me>	erisco there's an example there with the parens
<c_wraith>	:t \f z t -> foldr (\c g x -> x : g (f c x)) (:[]) t -- let's just admit this was sort of hard to write the first time.
<lambdabot>	Foldable t => (t3 -> t2 -> t2) -> t1 -> t t3 -> t2 -> [t2]
<erisco>	I mean that adding parens to what I just said may help
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<erisco>	(const x) z  reduces to  x;  ((const x) z) a  reduces to  x a
*	AxelAlex (~AxelAlex@dynamic-addr-130-13.resnet.rochester.edu) has joined
<c_wraith>	Err.  I have no idea where that t1 snuck in from
<erisco>	the latter is evident by the former
<crucify_me>	wha?
*	nlis has quit (Remote host closed the connection)
<crucify_me>	let me ask some questions about the beginning of the paste, where ....
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<erisco>	if  x reduces to y  then  x a reduces to y a
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
<crucify_me>	all 3 of these functions are combinators.
*	a3Dman has quit (Ping timeout: 240 seconds)
*	hackagebot wai-secure-cookies 0.1.0.2 – <i>Added by alaminium, Mon Sep 4 00:18:43 UTC 2017.</i> – https://hackage.haskell.org/package/wai-secure-cookies
<crucify_me>	so is there something more grand going on in this example, that will help me understand combinators and their opposites(?) closures
<crucify_me>	?
<erisco>	which example?
<crucify_me>	https://ptpb.pw/w-zU
*	Welkin has quit (Quit: leaving)
<crucify_me>	the whole thing with const id = flip const
*	twandy has quit (Client Quit)
*	Big_G (~Big_G@75-165-48-101.tukw.qwest.net) has joined
<erisco>	what particular thing do you not understand?
*	tromp (~tromp@ip-217-103-3-94.ip.prioritytelecom.net) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<erisco>	I don't know any grand reason for their equivalence other than you can show it by their definitions
<crucify_me>	so, what exactly does the constant func do?
<erisco>	it throws away the second argument and keeps the first
<crucify_me>	like I know pi is a constant
*	jle` just now realizes how weird of a name 'direct sum' is
*	louispan (~textual@203.38.203.134) has joined
<Cale>	crucify_me: A constant function is one which gives the same result no matter which argument is supplied
<jle`>	( eschnett, mniip )
<erisco>	ah, well it constructs constant functions
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<erisco>	you are familiar with lines, yes? y=mx+b ?
*	a3Dman (~3Dman@156.222.116.81) has joined
*	a3Dman has quit (Changing host)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<crucify_me>	essentially
*	MP2E has quit (Quit: reboot)
<erisco>	well, const lets you make all the flat (horizontal) lines
<erisco>	the ones which remain constant as x varies
*	tromp has quit (Ping timeout: 260 seconds)
*	MP2E (~cray@ip68-224-146-82.lv.lv.cox.net) has joined
<erisco>	so,  const 2  is the horizontal line at y=2,  and generally  const x is the horizontal line at y=x
<crucify_me>	right, y doesn't change
<erisco>	that's right
*	forgottenone (~forgotten@176.40.57.105) has joined
*	Guest5326 has quit (Ping timeout: 252 seconds)
<erisco>	lines are a specialisation, since const doesn't depend on theory to talk about lines, but it is a valid application of it
*	twandy has quit (Read error: Connection reset by peer)
<erisco>	generally speaking it just constructs the constant functions
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<crucify_me>	thanks I feel its easy, but I think I'm also trying to see what links these 3 functions together, the common thread that makes them "combinators"
<crucify_me>	erisco, 
<crucify_me>	Cale
<crucify_me>	is it just coincidence that these 3 are combinators?
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	theelous3 has quit (Ping timeout: 260 seconds)
<erisco>	crucify_me, well you said at the top they are combinators because they have no free variables
*	andyhuzhill has quit (Ping timeout: 248 seconds)
*	a3Dman has quit (Ping timeout: 260 seconds)
*	darjeeling_ (~darjeelin@115.215.40.70) has joined
*	dddddd has quit (Read error: Connection reset by peer)
<erisco>	that is a necessary and sufficient condition
*	kvda (~kvda@unaffiliated/kvda) has joined
*	twandy has quit (Client Quit)
*	ystael (~ystael@209.6.53.93) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<erisco>	but "combinator" might also be used in a nontechnical sense
<crucify_me>	I was reading about that. I think its technical in this context
<erisco>	so, just an operator that puts two things together into a like object
<erisco>	in lambda calculus yes, it is techincal
<crucify_me>	then there's the y-combinator, which I don't understnad
*	fresheyeball (~isaac@h88.129.189.173.dynamic.ip.windstream.net) has joined
*	Youmu (uid129469@gateway/web/irccloud.com/x-kcldraqgvspwvayr) has joined
<fresheyeball>	hey out there
<erisco>	it is important but I haven't spent the time to study it
<erisco>	you should figure it out and teach it to me sometime :)
<fresheyeball>	I have a sqlite db with a column of type timestamp
<fresheyeball>	the date times are stored as unix time
<crucify_me>	also , at the bottom of the paste, where it says const id is a terrible way to express the concept. word erisco will do !
<fresheyeball>	I'm using the sqlite-simple library and can't get it to parse
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	kuttifunk1 (~Thunderbi@host-188-174-201-62.customer.m-online.net) has joined
<erisco>	nothing wrong with const id that I can see
<DigitalKiwi>	dibblego help we need timedate help
*	kuttifunk has quit (Ping timeout: 240 seconds)
*	kuttifunk1 is now known as kuttifunk
<dibblego>	u wot m8?
<DigitalKiwi>	this person is having time problems! we need a link
<erisco>	const id  is the constant function of id
<Axman6>	when is their problem???
<DigitalKiwi>	UTC NOW 
<Axman6>	oh, I can't help for 10 hours then, until they catch up!
<erisco>	but if a human is more likely to think about the problem as "I want the second argument" then maybe this is a convoluted process
<dibblego>	https://gist.github.com/tonymorris/90522094bb964fd0d7bb42acd43ff4fb#times
<crucify_me>	the constant function of id ?  
<erisco>	if instead they're likely to be thinking about constant functions then const id is better
<erisco>	since flip const doesn't make constant functions
*	louispan has quit (Quit: louispan)
<erisco>	yes, same as the constant function of 3 and so forth
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	ali_bush has quit (Remote host closed the connection)
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	louispan (~textual@203.38.203.134) has joined
*	andyhuzhill (~Thunderbi@14.23.45.178) has joined
*	mou has quit (Quit: WeeChat 1.4)
<erisco>	using const as "I want the first argument" is a bit strange but common
<erisco>	more deliberate might be  curry fst
<erisco>	then the second argument is  curry snd
<crucify_me>	its sort of trippy, this
<crucify_me>	just pure logic
*	twandy has quit (Client Quit)
<crucify_me>	thanks.. I'm going to sleep on it
<erisco>	variables are not unlogic
*	halogenandtoast (~matthew-m@132.69.30.125.dy.iij4u.or.jp) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<erisco>	they're just cretinous warts
*	cranej (~cranej@42.120.74.200) has joined
<crucify_me>	lovely, why?
<nisstyre>	programming is a total sham
<nisstyre>	variables are definitely warts
*	takle (~takle@host86-166-243-7.range86-166.btcentralplus.com) has joined
*	cranej has quit (Client Quit)
<crucify_me>	funny
<erisco>	I am using hyperbole, but first of all they're horribly complicated to explain relative to the rest of the system
<erisco>	definitely easy to get wrong
*	cranej (~cranej@42.120.74.200) has joined
*	argent0 has quit (Ping timeout: 255 seconds)
*	sigmundv__ has quit (Ping timeout: 252 seconds)
<erisco>	secondly, they can be a symptom of… poor design
<erisco>	not that @pl is a design genius either
*	mathieu (~Topolo@185.79.221.206) has joined
<crucify_me>	>const id 6 5
<erisco>	you've probably been advised not to use explicit recursion. why? because we have functions that do that already
*	twandy has quit (Client Quit)
<erisco>	in a similar vein, why use variables if we have functions which do the appropriate plumbing already
*	halogenandtoast has quit (Ping timeout: 240 seconds)
*	plutoniix (~q@118.174.194.115) has joined
*	mizu_no_oto_work has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<crucify_me>	erisco, how do we invoke lambdabot here?
*	ali_bush (~ali_bush@gentoo/developer/alibush) has joined
<erisco>	> const id 6 5
<lambdabot>	 5
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<nisstyre>	erisco: how would you implement binary search without explicit recursion?
*	lev1athan (~lev1athan@185.16.85.56) has joined
*	MP2E has quit (Quit: leaving)
<Axman6>	fix
<nisstyre>	just curious
*	takle has quit (Ping timeout: 240 seconds)
*	lev1athan has quit (Quit: leaving)
<crucify_me>	> const id 6 5
<lambdabot>	 5
<erisco>	well, like @pl is not a design genius, neither is fix ;)
*	lev1athan (~lev1athan@185.16.85.56) has joined
<crucify_me>	well this is how I finally got it:
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<crucify_me>	> const (id 6) 5
<lambdabot>	 6
*	ali_bush has quit (Read error: Connection reset by peer)
<crucify_me>	so not rocket science
*	twandy has quit (Client Quit)
<crucify_me>	thanks gotta go I'm turning into a cretinous wart.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<crucify_me>	thanks alot
*	louispan has quit (Quit: louispan)
*	ali_bush (~ali_bush@2407:7000:8141:cf00::2) has joined
*	ali_bush has quit (Changing host)
*	ali_bush (~ali_bush@gentoo/developer/alibush) has joined
<eschnett>	is there (un)currying for arrows? i’m looking for the signature   Arrow a => a b (a c d) -> a (b, c) d
*	reactormonk has quit (Ping timeout: 248 seconds)
<eschnett>	`app` seems related, but has the other arrow in the first argument.
*	mathieu has quit (Quit: mathieu)
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sun Sep  3 18:54:13 2017

**** BEGIN LOGGING AT Mon Sep  4 12:05:32 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<sqooq>	cocreature, I kind of wanted to make a terminal program
<cocreature>	sqooq: not sure how that’s related to default options
<sqooq>	only problem is that usually the instrument is created interactively in ghci
*	IlanGodik (uid40361@gateway/web/irccloud.com/x-ikepcpfsikzlwvoa) has joined
<sqooq>	cocreature, like you call the program with two necessary parameters, the input and output file, but  you can alter the other options, for example instrument to use, tempo, etc.
*	JeanCarloMachado (~jean@177.34.74.251) has joined
*	pera (~pera@unaffiliated/pera) has joined
*	JeanCarloMachado has quit (Client Quit)
<cocreature>	sqooq: can you be a bit more specific? what problem are you currently having?
*	twandy has quit (Client Quit)
*	JeanCarloMachado (~jean@177.34.74.251) has joined
<crucify_me>	hello I'm still confused about sumptin'  ..  if we have this const id = flip const  .. when would you ever use that (in a very simple case)?
<sqooq>	I want it to be like (my program is called gould) : gould input.txt output.wav -i instr1 -t 80
*	JeanCarloMachado has quit (Client Quit)
*	JeanCarloMachado (~jean@177.34.74.251) has joined
<sqooq>	cocreature, only thing is that "instr1" is a haskell function using csound expression.
<sqooq>	and it's quite comfortable to build that instrument in ghci
*	takle (~takle@host109-153-108-68.range109-153.btcentralplus.com) has joined
<sqooq>	yeah nvm maybe a terminal executable isn't the right path
*	jao (~jao@pdpc/supporter/professional/jao) has joined
<geekosaur>	could just make that a haskell expression via hint or whatever
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<geekosaur>	also I think a terminal program would be the hard way. run it in a terminal, go steal chunks from:
<geekosaur>	@hackage ghci-ng
<lambdabot>	http://hackage.haskell.org/package/ghci-ng
<geekosaur>	which is a standalone ghci used as a testbed for ghci improvements
<sqooq>	the instrument can be done in a file too
<cocreature>	depending on how restricted these expressions are, making a custom parser might also be a reasonable option
<geekosaur>	("standalone" meaning you don't have to build all of ghc to change it)
<sqooq>	honestly if the instrument is going to be complex, that's probably going to be the case
*	twandy has quit (Client Quit)
<sqooq>	cocreature, well yeah my idea is to use getargs and figure something out from there
*	coot____________ has quit (Quit: coot____________)
<geekosaur>	so, the hint package lets you evaluate arbitrary Haskell expressions
<cocreature>	sqooq: I highly recommend using a library such as "optparse-applicative" for parsing cli args instead of using "getArgs"
<geekosaur>	if you also need sandboxing, consider the MuEval package oinstead (it's what lambdabot uses)
<sqooq>	cocreature, noted, thank you
<sqooq>	geekosaur, i'm trying to consider users too
<geekosaur>	if you're considering users, you're building a GUI and letting that deal with e.g. defaults
<sqooq>	kek who am I kidding, I'm not going to have any users
<geekosaur>	and yes, the usual way to do defaults for this kind of thing is a record with the defaults and record updates for overrides
<sqooq>	maybe I should alter my program to do midi with pitchbends instead
*	Mon_Ouie has quit (Ping timeout: 240 seconds)
*	mlehmk has quit ()
*	staafl_ (~staafl@95-43-31-54.ip.btc-net.bg) has joined
<sqooq>	geekosaur: ok
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<sqooq>	problem with that, is that my function changes depending on the default
<sqooq>	for example if the user doesn't include a line representation, then I have to omit that entirely from the final function.
<crucify_me>	I mean, what is the concept behind " const id " or " flip const " ? (I read a comment that 'const id' was a "terrible way to express the concept")
<geekosaur>	sqooq, so the default is id
<sqooq>	geekosaur, sorry, no like within the function definition itself
<sqooq>	it's basically a bunch of composed functions, and one section of that composition has to be removed
<geekosaur>	yes, and?
<geekosaur>	functions are first class...
*	Natch (~Natch@h-155-122.A444.priv.bahnhof.se) has joined
<geekosaur>	so you have a record of functions, at the end you compose them together, at the beginning they're all id
*	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined
<geekosaur>	or other suitable default
<crucify_me>	sorry moved that to beginners channel
<sqooq>	i'm missing something
*	ashpokemonZ has quit (Ping timeout: 246 seconds)
<geekosaur>	it would be easier to explain if you provided something to start with, so I can match it; a generic example might not help you much
<geekosaur>	@paste
<lambdabot>	Haskell pastebin: http://lpaste.net/
<sqooq>	my code is here
<sqooq>	https://github.com/Cypress-the-Kinaesthetician/Goulds-Mark
<sqooq>	go to src/Parser
*	twandy has quit (Client Quit)
<sqooq>	actually hold on
<pikajude>	i've just created a program that's like stylish-haskell for cabal files
<pikajude>	would anyone be interested in trying it out
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	quobo has quit (Quit: Connection closed for inactivity)
*	cloudhead (~cloudhead@ip5f5bd3e7.dynamic.kabel-deutschland.de) has joined
<geekosaur>	https://github.com/Cypress-the-Kinaesthetician/Goulds-Mark/blob/master/src/Parser.hs#L226 is this what you want to make changeable?
<sqooq>	geekosaur, i would have to rework things. I lied it's not as simple as removing a composition but I can make it that way.
<sqooq>	yes
<geekosaur>	although, seems llike housekeeping finally reached this part of the building so I may vanish abruptly :/
<geekosaur>	("just a minute please" is not a thing...)
<sqooq>	that's fine
*	samrat has quit (Ping timeout: 252 seconds)
<sqooq>	right now it's like in testing form
<sqooq>	really i would have to switch out quite a few function
*	Destol (~Destol@108.63.167.16) has joined
*	meadowlark (~meadowlar@unaffiliated/meadowlark) has joined
*	sfcg (~sfcg@79.97.176.188) has joined
*	sfcg has quit (Remote host closed the connection)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	sfcg (~sfcg@8.25.196.26) has joined
*	hackagebot has quit (Read error: error:1408F119:SSL routines:SSL3_GET_RECORD:decryption failed or bad record mac)
*	hackagebot (~hackagebo@octavia.lambda.xyz) has joined
<iqubic>	Bottom is weird.
<iqubic>	> fix id
<lambdabot>	 mueval-core: Time limit exceeded
<iqubic>	> fix (id 5)
<lambdabot>	 error:
<lambdabot>	     • Ambiguous type variable ‘a0’ arising from a use of ‘show_M713643997305...
<lambdabot>	       prevents the constraint ‘(Show a0)’ from being solved.
<iqubic>	> fix id 5
<lambdabot>	 mueval-core: Time limit exceeded
<iqubic>	Fix is a funny beast.
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Mon_Ouie has quit (Ping timeout: 240 seconds)
*	jakub_ (~jakub@171.15.broadband2.iol.cz) has joined
*	twandy has quit (Client Quit)
<orzo>	just think of it as a looping control structure
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	decached has quit (Ping timeout: 246 seconds)
<c_wraith>	In fact, think of it as *the* looping control structure.
<c_wraith>	It's an abstraction of general recursion.
*	dsantiago (~dsantiago@cpe-23-242-86-141.socal.res.rr.com) has joined
<orzo>	it was years ago, but once improved performance by using fix rather than simple recursion
<c_wraith>	> fix (\x loop -> if x == 0 then 1 else x * loop (x - 1)) 5
<lambdabot>	 error:
<lambdabot>	     • Occurs check: cannot construct the infinite type: t ~ t0 -> t
<lambdabot>	       Expected type: t0 -> t
<orzo>	so ghc, at least at the time, seems to prefer it
<orzo>	c_wraith, arguments are reversed
<iqubic>	orzo: How does one use fix as a looping construct.
<c_wraith>	> fix (\loop  x-> if x == 0 then 1 else x * loop (x - 1)) 5
<lambdabot>	 120
<c_wraith>	orzo: yeah, I figured it out
<c_wraith>	iqubic: like that
*	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined
<iqubic>	How does that work?
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<jakub_>	how are instances selected in haskell? at compile time? how does someone debug the reasons why some instances are / aren't picked?
<orzo>	don't give the compiler much choice
<c_wraith>	iqubic: The lambda represent an "open" version of factorial.  That is, instead of being recursive, it just hands off to some function passed as its first argument
<orzo>	avoid overlapping instances
<Philonous>	jakub_, They are selected at compile time, yes. 
<c_wraith>	jakub_: don't use overlapping or incoherent instances.
<iqubic>	jakub_: What issues are you having? Can I see the code?
*	twandy has quit (Ping timeout: 260 seconds)
*	twandy1 is now known as twandy
<iqubic>	but c_wraith, how does the recursion happen?
*	sigmundv__ (~sigmundv@31.200.141.195.threembb.ie) has joined
<c_wraith>	iqubic: fix "closes" the definition, but passing the function to itself
<iqubic>	I see.
<c_wraith>	*by
<iqubic>	And how does fix terminate the computation?
<jakub_>	iqubic: i will have to make a gist of it, its rather complicated and i doubt most part are relevant to the problem, i will come back with code later :)
<c_wraith>	It doesn't.  The lambda does that by not recursing.
*	vlatkoB has quit (Remote host closed the connection)
<iqubic>	Oh, I see.
*	twandy has quit (Client Quit)
<iqubic>	@src fix
<lambdabot>	fix f = let x = f x in x
*	emmanuel_erc has quit (Remote host closed the connection)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	quobo (uid178934@gateway/web/irccloud.com/x-bdltkcjsyknngwra) has joined
<iqubic>	OH, I see how that works.
<iqubic>	Why does the loop argument have to come first?
<orzo>	because of the way currying works
<c_wraith>	:t (\loop  x-> if x == 0 then 1 else x * loop (x - 1))
<lambdabot>	(Num t, Eq t) => (t -> t) -> t -> t
<c_wraith>	iqubic: that's how you make the types line up :)
<orzo>	a two argument function is actually a single-argument function that returns a function
*	robotroll (~robotroll@unaffiliated/robotroll) has joined
*	BlueRavenGT (~BlueRaven@8-22-13-219.utopiafiber.net) has joined
<iqubic>	orzo: I see that.
<orzo>	so fix accepts a single argument function
<c_wraith>	iqubic: you unify (a -> a) with ((t -> t) -> (t -> t)), and get fix :: ((t -> t) -> (t -> t)) -> (t -> t)
<orzo>	if you give it a two-argument lambada, you're using currying
*	monochrom (trebla@216.138.220.146) has joined
*	robotroll has quit (Read error: Connection reset by peer)
*	albertus1 (~seb@x55b4bb70.dyn.telefonica.de) has joined
<c_wraith>	orzo: the only way I can ever imagine fix being a performance win is if your general-recursion version missed tying a knot that the fix definition does tie, so used more memory
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	augur has quit (Remote host closed the connection)
*	Guest52771 has quit (Remote host closed the connection)
*	augur (~augur@c-73-71-242-163.hsd1.ca.comcast.net) has joined
*	bs0d has quit (Quit: Leaving)
<c_wraith>	Hmm.  that's not fully true.  since you pass non-recursive things to fix, the optimizer can be more aggressive with them without the loop-breaker nonsense.  That's also an avenue for better optimization, potentially
*	LnL has quit (Ping timeout: 255 seconds)
*	decached (~decached@cpe-198-255-143-137.stny.res.rr.com) has joined
<pgiarrusso>	c_wraith: that can actually matter a lot
<orzo>	shrug, it's usually not hard to compare a fix-based version, so just keep it in mind when optimizing
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<pgiarrusso>	I forget details/source, but I've had GHC completely optimize away an interpreter (for a given source program), but only once some recursion was replaced via fix
*	ltielen (~ltielen@ptr-3z2lko2bunnpt1ahjk9.18120a2.ip6.access.telenet.be) has joined
*	t7 (~chatzilla@host86-138-8-152.range86-138.btcentralplus.com) has joined
<c_wraith>	that sounds like a ridiculous amount of inlining/simplification.  That also sounds pretty cool.
<monochrom>	Tomorrow's news headline all over Hacker News: GHC -O2 optimizes away all of GHCi. >:)
*	xaviergmail (~xavier@24-54-43-73.si.cgocable.ca) has joined
*	connrs has quit (Ping timeout: 246 seconds)
*	augur has quit (Ping timeout: 260 seconds)
*	bossin (4c40f3be@gateway/web/cgi-irc/kiwiirc.com/ip.76.64.243.190) has joined
*	LnL (~L0CKnL0aD@78-23-24-36.access.telenet.be) has joined
*	xaviergmail has quit (Client Quit)
*	connrs (~connrs@conners.plus.com) has joined
<pgiarrusso>	well, GHC *does* remove interpretative overhead, doesn't it :-)
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	cdg (~cdg@162-226-219-152.lightspeed.tukrga.sbcglobal.net) has joined
*	bossin (4c40f3be@gateway/web/cgi-irc/kiwiirc.com/ip.76.64.243.190) has left
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
<pgiarrusso>	it was a pretty academic example, but GHC still acted as a (Jones-)optimal partial evaluator on that interpreter, which was fun :-)
*	Lazersmoke (~Lazersmok@c-73-45-78-140.hsd1.il.comcast.net) has joined
<Lazersmoke>	is there a way to make haddock link to the documentation for the unit type () ? I tried '()' and it just left it with the single quotes in the generated docs
*	dsantiago has quit (Quit: Computer has gone to sleep.)
*	halogenandtoast (~matthew-m@132.69.30.125.dy.iij4u.or.jp) has joined
*	inhortte has quit (Quit: Leaving.)
<c_wraith>	Lazersmoke: haddock only really documents definitions, and () doesn't have a definition in Haskell source, because it's syntactically special.
*	takle has quit (Remote host closed the connection)
*	amar_ (~amarpotgh@p57967C29.dip0.t-ipconnect.de) has joined
<Lazersmoke>	rip
<pikajude>	it's data () = ()
*	amar_ is now known as Guest79700
*	jbalint has quit (Ping timeout: 264 seconds)
*	takle (~takle@host109-153-108-68.range109-153.btcentralplus.com) has joined
<monochrom>	https://mail.haskell.org/pipermail/haskell-cafe/2013-April/107775.html
<Lazersmoke>	[()](https://www.youtube.com/watch?v=dQw4w9WgXcQ)
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Lazersmoke>	:P
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	ChanServ gives channel operator status to monochrom
*	Lazersmoke (~Lazersmok@c-73-45-78-140.hsd1.il.comcast.net) has left (requested by monochrom (Lazersmoke))
*	monochrom removes channel operator status from monochrom
*	jao has quit (Ping timeout: 260 seconds)
*	cdg has quit (Ping timeout: 240 seconds)
<Tuplanolla>	I recognize that heat differential.
*	takle has quit (Read error: No route to host)
*	Lazersmoke (~Lazersmok@c-73-45-78-140.hsd1.il.comcast.net) has joined
*	halogenandtoast has quit (Ping timeout: 248 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	zen_ (2d1fb5c8@gateway/web/cgi-irc/kiwiirc.com/ip.45.31.181.200) has joined
**** ENDING LOGGING AT Mon Sep  4 12:55:57 2017

**** BEGIN LOGGING AT Mon Sep  4 13:19:52 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<kuribas>	hm, okey
<cocreature>	if you’re interested in matching the behavior of an external program, then sure test against it
<monochrom>	Also handcode some wrong byte sequences and see if the decoder successfully flag them as erroneous.
<dsal>	quickcheck is super nice for this sort of thing.
<kuribas>	then the tests can only be run when the user has the external program.
<cocreature>	well nobody is forced to run your tests
*	sleffy has quit (Ping timeout: 248 seconds)
<zen_>	as cocreature said, if you're trying to test against microsoft's standards then use their validator
<zen_>	that seems totally reasonable
*	dmj` (sid72307@gateway/web/irccloud.com/x-mmvuaxfdqwtexifw) has joined
<dsal>	Being able to run a battery against the reference implementation is nice.
*	hackebeilchen has quit (Read error: Connection reset by peer)
*	dkov has quit (Quit: dkov)
<kuribas>	right, I can separate tests which require the external program, and ones which don't.
<dsal>	I had a CRC thing to do and just had quickcheck generate me 1000 inputs and exported those to my other implementation and harvested the values and pulled them back in.  That's fine for something so simple and static.
<zen_>	^ and validate whether the program is available before running
*	ericdwhite (~ericdwhit@host86-181-34-104.range86-181.btcentralplus.com) has joined
*	Theophane has quit (Remote host closed the connection)
<kuribas>	dsal: yes sure.  But truetype is hardly simple...
<kuribas>	dsal: Microsoft and Apple don't even agree on many points.
<kuribas>	dsal: which is why fonts are often distributed separately for Apple and Microsoft.
<zen_>	are you implementing a TT parser?
<kuribas>	zen_: yeah.  Well, opentype
*	dgpratt (sid193493@gateway/web/irccloud.com/x-rbyctmcqbturertf) has joined
<zen_>	cool!
*	`Guest00000 has quit (Ping timeout: 240 seconds)
*	`Guest00000 (~user@37.113.156.61) has joined
<kuribas>	zen_: I want to make a compiler from metafont to opentype variable fonts.
<kuribas>	zen_: or a metafont DSL in haskell.
*	AxelAlex has quit (Quit: AxelAlex)
<zen_>	I didn't know about metafont
*	osa1 has quit (Ping timeout: 240 seconds)
<zen_>	is it widely used?
<kuribas>	zen_: not really
<geekosaur>	tex/latex, basically
*	tobhe has quit (Ping timeout: 248 seconds)
<kuribas>	zen_: the TeX font, and also the fonts from lilypond
<geekosaur>	although it's vaguely useful as a common vector font source format that can be translated to other formats
<zen_>	still seems like a fun challenge
<kuribas>	geekosaur: well, currently metafont can only generate bitmaps.
<kuribas>	currently meaning the last 40 years :)
<kuribas>	zen_: yeah
*	coot____________ (~coot@188.146.162.0.nat.umts.dynamic.t-mobile.pl) has joined
<geekosaur>	mm, I am remembering things that generated truetype from metafont, and not simply as bitmaps reencoded
<kuribas>	geekosaur: well, there are programs that trace the bitmaps generated from metafont, and programs that actually use metapost, which doesn't implement the full metafont language.
<kuribas>	geekosaur: the autotraced font have artifacts, and need to be cleaned up.
*	JuanDaugherty (~jdaughert@98.4.124.117) has joined
<kuribas>	but metafont uses just bezier curves under the hood, so it can be done.
<kuribas>	Just nobody did it.
*	theelous3 (~theelous3@unaffiliated/theelous3) has joined
*	ericdwhite has quit (Remote host closed the connection)
*	pera has quit (Ping timeout: 240 seconds)
*	ericdwhite (~ericdwhit@host86-181-34-104.range86-181.btcentralplus.com) has joined
*	kuribas has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
*	jao (~jao@pdpc/supporter/professional/jao) has joined
*	tsaka_ (~torstein@84-52-234.108.3p.ntebredband.no) has joined
<orzo>	anyone have experience with GHC.TypeLits naturals?
<orzo>	i find them pretty hard to use
*	pandeiro has quit (Ping timeout: 246 seconds)
*	ericdwhite has quit (Ping timeout: 248 seconds)
<orzo>	Typically, with type-level naturals, people define recursive code over the peano structure
*	Youmu has quit (Quit: Connection closed for inactivity)
*	danvet has quit (Ping timeout: 252 seconds)
<orzo>	i don't know how to do the equivelent with the + and - type functions
<orzo>	if it's possible, i'd really like to see how it's done
*	Tops2 has quit (Read error: Connection reset by peer)
*	eacameron has quit (Remote host closed the connection)
<orzo>	I could always roll my own, but i really like being able to use numeric literals in the types
<jle`>	orzo: GHC.TypeLits are just types for literals
<jle`>	like literal ints
<jle`>	there's a type for the 0 literal, the 1 litera, the 3 literal, etc.
<jle`>	there is no internal structure
<jle`>	it's basically like data Nat = 0 | 1 | 2 | 3 | 4 | ...
<jle`>	(just like for Int, for instance)
<jle`>	like for Int, ghc provides +/-/* as primitives of Int's public API
<jle`>	and it's the same case for Nat
<orzo>	is there a way to add the structure using extra foo while still using the literals?
<jle`>	that's a different type
<orzo>	maybe i could make a mapping to peano types
<orzo>	and use the literal in the exported type
<jle`>	yeah, similar to how you'd do it at the value level
<jle`>	you can make a value-level peano type, and define an Int -> MyPeano function
*	Denommus (~user@unaffiliated/denommus) has joined
<jle`>	you can do the same thing at the type leve -- create a type-level peano, and write a Nat -> MyPeano type family
<geekosaur>	orzo, did you notice https://github.com/konn/ghc-typelits-presburger#readme ?
<jle`>	but yes first you should consider if you "really want" peano nats
<jle`>	usually you don't
<jle`>	peano nats are a tool to solve certain problems, they aren't usually a goal in and of themselves
*	oisdk (~textual@83.136.43.133) has joined
<jle`>	"i find them pretty hard to use" => "can i turn them into peano nats" seems like a funny way of thinking
*	eacameron (~eacameron@dsl-50-5-80-133.fuse.net) has joined
<orzo>	uh, i'm having to repeat a bunch of code, i have to do something for 0, and then something else for 1 2 and 3, and i'd rather not have to repeat the 1 2 and 3 cases
<orzo>	seems like peano is what i'd want
<EvanR>	not to mention 4
<jle`>	well, what problem are you actually trying to solve?
<orzo>	well, i don't actually need 4
<orzo>	but if i did, then yeah, even more peano
<EvanR>	then... youre talking about Fin 4, not Nat
<EvanR>	0 1 2 and 3
*	katyucha_ is now known as katyucha
<jle`>	my "XY problem" senses are tingling
<orzo>	I'm doing onion routing, the number of cryptographic wraps is indicated in the type.  Theoretically 4 makes sense, but i'm going up to 3 layers tops
*	ackpacket (~ackpacket@unaffiliated/ackpacket) has joined
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	mzf has quit (Ping timeout: 260 seconds)
<orzo>	i think nat is a better fit than Fin 4
*	dsantiago (~dsantiago@cpe-104-175-193-69.socal.res.rr.com) has joined
<jle`>	if you are using things to model some sort of inductive structure (like successive wrapping), peano nats might make sense
<orzo>	yes
<jle`>	you can provide type synonyms for 0/1/2/3/4
*	unK_ (~drunK@178-37-179-218.adsl.inetia.pl) has joined
*	davr0s (~textual@host86-142-61-82.range86-142.btcentralplus.com) has joined
<jle`>	you can write a Nat -> MyPeano type family as well, but GHC can't be used to prove properties about your Nat -> MyPeano
<jle`>	it's basically 'FromInteger'
*	rickerbh (~rickerbh@27-32-1-82.static.tpgi.com.au) has joined
<jle`>	in fact, the singletons library exports a promoted Num class with FromInteger
*	`Guest00000 has quit (Ping timeout: 240 seconds)
<jle`>	'FromInteger' meaning from Nat, of course, heh
*	alex`` has quit (Quit: WeeChat 1.9)
<jle`>	and you can use 'FromInteger 3', if you really really wanted to re-use Nat literals
*	tomphp (~tomphp@cpc73822-dals21-2-0-cust404.20-2.cable.virginm.net) has joined
<jle`>	but if you really only are using 0/1/2/3, you can probably do just as well by exporting type synonyms for Z, S Z, S (S Z), and S (S (S Z))
*	SpinTensor has quit (Quit: WeeChat 1.9)
*	`Guest00000 (~user@37.113.156.61) has joined
*	emilypi has quit (Ping timeout: 260 seconds)
<jle`>	type-level literals are not polymorphic in the sense that value-level numeric literals are; you just have to manually fromInteger things if you want to use them to describe your custom type.
*	Rodya_ has quit (Remote host closed the connection)
<orzo>	I can't make synonyms that are the actual literals 0, 1, 2, 3, can I?
*	rickerbh has quit (Client Quit)
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:1d83:686d:41da:2c74) has joined
<orzo>	You're saying One, Two, Three, or something
*	BrAsS_mOnKeY is now known as g2
<orzo>	file:///usr/share/doc/libghc-vec-doc/html/Data-Vec-Nat.html#t:N1
<orzo>	oops
<orzo>	sorry
*	mcbears (~user@c-67-180-86-120.hsd1.ca.comcast.net) has joined
*	true-asset has quit ()
<orzo>	anyway, you're suggesting what Data.Vec.Nat does
*	Guest79700 has quit (Ping timeout: 260 seconds)
*	argent0 (~aner@186.133.132.26) has joined
*	Beetstra (~Beetstra@h5-152-210-244.host.redstation.co.uk) has joined
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Mon Sep  4 14:01:03 2017

**** BEGIN LOGGING AT Tue Sep  5 12:41:06 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	dan_f_ has quit (Quit: dan_f_)
*	Destol has quit (Quit: leaving)
*	dan_f_ (~dan@24.148.32.207) has joined
*	Deide (~Deide@2.220.50.147) has joined
*	dan_f_ is now known as dan_f
*	Psybur has quit (Ping timeout: 240 seconds)
*	Rodya_ has quit (Remote host closed the connection)
*	Rodya_ (~Rodya_@c-71-224-101-129.hsd1.pa.comcast.net) has joined
*	dfeuer (~dfeuer@wikimedia/Dfeuer) has joined
*	Infinisil has quit (Quit: leaving)
<orzo>	i have a type that involves two peano numbers that sum to a constant (3)
*	sellout- (~Adium@65-128-67-246.hlrn.qwest.net) has joined
*	Xal has quit (Ping timeout: 248 seconds)
<orzo>	i tried making a ThreeMinus type function, but it was unable to infer that S (ThreeMinus (S n)) and ThreeMinus n are the same
<orzo>	What's a better way?
*	nickolay_ has quit (Remote host closed the connection)
*	Xal (~Xal@S010664777dabacc3.vw.shawcable.net) has joined
*	robotroll (~robotroll@unaffiliated/robotroll) has joined
*	buff3r has quit (Quit: leaving)
*	Guest887 has quit (Remote host closed the connection)
<sqooq>	Hey I need to implement a gui interface where there's a graph presented and one can draw points on it with the mouse, where do I start to do something like that?
*	kipras is now known as kipras`away
*	exarkun has quit (Ping timeout: 240 seconds)
<sqooq>	is that considered gui or graphics?
*	Dembel has quit (Quit: WeeChat 0.4.2)
<tdammers>	both
*	exarkun (~exarkun@vtelinet-66-220-238-250.vermontel.net) has joined
<mniip>	it's also user interface
*	LesterLee (~Lester@aftr-88-217-181-220.dynamic.mnet-online.de) has joined
<mniip>	also UI and interface as well
<tdammers>	and a graphical interface, let's not forget that
<tdammers>	:P
*	hackebeilchen1 has quit (Read error: Connection reset by peer)
<mniip>	not a user though
<maerwald>	sqooq: gtk+ canvas with cairo and diagrams
<Gurkenglas>	A graph as nodes connected by edges, or as a curve on graph paper? gloss is easy.
<sqooq>	as a curve I think
<sqooq>	y axis and time axis
<mniip>	maerwald, can cairo draw fast enough to provide an interactive interface?
<sqooq>	cartesian
*	drewbert has quit (Remote host closed the connection)
*	kipras`away is now known as kipras
<eikke>	are there any guarantees in which haskell thread a ctrl-c exception will be delivered?
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
<maerwald>	mniip: whole of gtk depends on it?
*	coot____________ (~coot@188.146.162.0.nat.umts.dynamic.t-mobile.pl) has joined
*	kus_ubuntui686 has quit (Remote host closed the connection)
*	quobo has quit (Quit: Connection closed for inactivity)
*	theelous3 has quit (Ping timeout: 252 seconds)
*	eschnett has quit (Quit: eschnett)
<thoughtpolice>	eikke: Main thread, according to the docs https://hackage.haskell.org/package/base-4.10.0.0/docs/Control-Exception.html#t:AsyncException
<mniip>	hmm, perhaps my experience with cairo has been hindered by other software in the way
*	Infinisil (~infinisil@xdsl-31-165-62-80.adslplus.ch) has joined
<Gurkenglas>	sqooq, you may be able to learn from the Chart library
*	sfcg (~sfcg@79.97.176.188) has joined
*	forgottenone (~forgotten@176.234.122.239) has joined
*	mkoenig has quit (Ping timeout: 248 seconds)
*	mkoenig_ (~mkoenig@93.115.89.214) has joined
<Gurkenglas>	Maybe you can use Chart to make the plot, and use http://hackage.haskell.org/package/Chart-gtk-1.8.2/docs/Graphics-Rendering-Chart-Gtk.html#v:createRenderableWindow to get a Window that'll tell you when and where it's clicked
<sqooq>	Gurkenglas: Yes, that seems like the right track
<sqooq>	thanks
*	xClueless (~xClueless@host86-163-64-22.range86-163.btcentralplus.com) has joined
*	cdg (~cdg@157.166.173.4) has joined
*	cdg_ (~cdg@157.166.173.4) has joined
*	XorSwap has quit (Remote host closed the connection)
*	mayhew (~mayhew@142.167.222.89) has joined
*	Nd-69-M (~nend@109.72.55.120) has joined
*	Destol (~Destol@public-254-17.nat.utoronto.ca) has joined
<LesterLee>	Hi, I'm lost in lens operators. I want to add a SecurityRequirement to every GET-Operation of a Swagger object. My attempt: line 58 of http://lpaste.net/495376949485502464
*	cdg has quit (Ping timeout: 260 seconds)
<LesterLee>	I think I understand the issue (get returns a Maybe Operation not a Operation), but find myself unable to specify that I want leave each Nothing unchanged.
*	raichoo has quit (Quit: leaving)
*	amar_ (~amarpotgh@p5796792B.dip0.t-ipconnect.de) has joined
<Gurkenglas>	LesterLee, replace get with _Just . get
*	amar_ is now known as Guest73367
<eikke>	thoughtpolice: thanks
*	drewbert has quit (Remote host closed the connection)
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
<Gurkenglas>	By the way, you can do "paths . traverse . _Just . get . security"
<dsal>	I'm having a moment of stupid -- how do you make a function to add (a,a) ?
<LesterLee>	Gurkenglas: sry afk, brb :/
<Gurkenglas>	:t \(x,y) (z,w) -> (x+z, y+w) -- dsal
<lambdabot>	(Num t, Num t1) => (t1, t) -> (t1, t) -> (t1, t)
*	Youmu has quit (Quit: Connection closed for inactivity)
<Gurkenglas>	dsal, the NumInstances package lets you just do (x,y) + (z,w)
<dsal>	Gurkenglas: Sorry, I get that -- I mean I want to make (a,a) applicable to +.  Seems like some combination of • and uncurry would do it, but that's not it.
<Gurkenglas>	:t uncurry (+)
<lambdabot>	Num c => (c, c) -> c
<dsal>	oh.  ha.
<dsal>	I was putting a . in there and really confusing myself.
<dsal>	Thanks.  That seems really obvious.
<Gurkenglas>	LesterLee, or "paths . each . _Just . get . security" if you prefer
*	davr0s (~textual@host86-142-61-82.range86-142.btcentralplus.com) has joined
*	Thunderfunk has quit (Ping timeout: 240 seconds)
<Gurkenglas>	You can even replace _Just with traverse.
<mniip>	Gurkenglas, this is the future - literally just writing code in english
<Gurkenglas>	LesterLee, compare with if that Maybe had been []
*	asmyers has quit (Ping timeout: 240 seconds)
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	hackagebot has quit (Read error: error:1408F119:SSL routines:SSL3_GET_RECORD:decryption failed or bad record mac)
*	hackagebot (~hackagebo@octavia.lambda.xyz) has joined
*	peterbecich has quit (Ping timeout: 260 seconds)
*	Yuras has quit (Read error: Connection reset by peer)
*	tsmish (~tsmish@77.43.219.246) has joined
*	Thunderfunk (~Thunderfu@31.131.65.175) has joined
<Gurkenglas>	Oh wait, it's "paths . each . get . _Just . security", was confused by the position of the ^ in the paste :P
<Gurkenglas>	If you like english you can turn that _Just into each.
*	goodboy has quit (Ping timeout: 248 seconds)
*	soniku has quit (Ping timeout: 255 seconds)
*	BlueRavenGT (~BlueRaven@8-22-13-219.utopiafiber.net) has joined
*	pgiarrusso__ (~pgiarruss@151.97.64.34) has joined
*	fr33domlover1 is now known as fr33domlover
*	pgiarrusso_ has quit (Ping timeout: 240 seconds)
<sqooq>	I upgraded stack but it's still using the older version
*	kuribas has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
*	XorSwap (~XorSwap@wnpgmb016qw-ds01-58-40.dynamic.bellmts.net) has joined
<sqooq>	.local/bin is in my environmental vairiables already
<sqooq>	and stack is in there
*	ortmage has quit (Ping timeout: 246 seconds)
*	ryanpcmcquen (sid124388@gateway/web/irccloud.com/x-wxcuvgshbzzueqmk) has left
<MarcelineVQ>	enrionment variables?
<sqooq>	ye
<MarcelineVQ>	What do you mean by that?
<sqooq>	my PATH
<MarcelineVQ>	ah good, is it at the front of your path?
<sqooq>	yes
<geekosaur>	hash -r
<MarcelineVQ>	what does  which stack  say?
*	SpinTensor has quit (Quit: WeeChat 1.9)
<geekosaur>	if you already ran stack and it was found at one place in $PATH, that will be remembered; if a new one is added later, even if it is earlier in $PATH, it will not be used
<MarcelineVQ>	and have you tried it in a new terminal
*	twanvl (~twanvl@92.110.121.28) has joined
<geekosaur>	"which" often does not show you this!
<sqooq>	it says .local/bin
<geekosaur>	use "type"
<sqooq>	type stack?
<geekosaur>	yes
<sqooq>	It shows the right location
<sqooq>	hmm let me try again
<sqooq>	O
<MarcelineVQ>	and what does  stack --version  say?
<sqooq>	it's updated now
<sqooq>	nvm
<sqooq>	Guess it took a bit to kick in idk
<geekosaur>	did you do the hash -r I suggested?
<geekosaur>	that resets the remembered locations of things
<sqooq>	o
<sqooq>	yes
<sqooq>	i did lol
<MarcelineVQ>	I've never ran into that but now I know to look for it, thanks geekosaur 
<sqooq>	"In the dependencies for gould-0.2.1:     chart must match -any, but the stack configuration has no specified version     chart-gtk must match -any, but the stack configuration has no specified version"
<sqooq>	wat
<shapr>	what's the difference between hash -r and rehash?
<MarcelineVQ>	sqooq: put plainly stackage doesn't currently have gould
<MarcelineVQ>	https://docs.haskellstack.org/en/stable/GUIDE/
<Cale>	sqooq: That means that chart and chart-gtk are not available from any of the sources that stack is configured to use.
<MarcelineVQ>	er chart sorry
*	drewbert has quit (Remote host closed the connection)
<sqooq>	but it's in hackage
*	sm has which aliased to type -a
<sqooq>	and csound-expression worked
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
<MarcelineVQ>	however it might have Chart
<geekosaur>	shapr, they're the same. "rehash" is how csh (which introduced the idea) did it, "hash -r" is how ksh did it]
<sm>	one of bash's fearsome arsenal of foot guns
<geekosaur>	various shells may support one or the other or both
<shapr>	geekosaur: neat, I learned something new!
<geekosaur>	and "hash -r" is the one blessed by POSIX
<sm>	slightly related, would anybody recommend using oil shell ?
<shapr>	what's type?
*	harfangk has quit (Ping timeout: 240 seconds)
<Xe>	the action of inputting things with a keyboard
<sm>	shapr: a built in command, like /usr/bin/which but knows about shell aliases etc.
<sqooq>	o it is a capital C
<shapr>	oh neat
<geekosaur>	shows what the shell knows about something: builtin, alias, function, hashed executable, exeuctable found on $PATH (and here it is in the latter two cases)
<geekosaur>	in shells that can autoload functions it may show you where it was autoloaded from
<shapr>	ohh
<Infinisil>	sm: Have heard lots about oil shell with the blog posts, but I won't use any new shell unless it has significant benefits
<shapr>	I like my heavily customized zsh
<geekosaur>	it is required by POSIX to show state like whether it's been hashed, so in general it's the best bet to see where your current shell thinks some command came from
*	Sampuka has quit (Ping timeout: 260 seconds)
<shapr>	nifty
*	Swizec has quit (Quit: Computer has gone to sleep.)
*	Swizec (~swizec@199.21.86.210) has joined
<sm>	Infinisil: I just discovered those posts, going to start at the beginning
<shapr>	zsh has whence, neat
*	ubsan has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	ortmage (ortmage@nat/google/x-dcaychxdaxvlxpda) has joined
*	DataComputist (uid228606@gateway/web/irccloud.com/x-bqdocnnqovoekpca) has joined
<LesterLee>	Gurkenglas: Thanks for the suggestions! (That looks nice! :)) Sadly ghc is not yet convinced: http://lpaste.net/495376949485502464
<Infinisil>	shapr: What's the difference to which?
*	afarmer has quit (Ping timeout: 240 seconds)
*	forgottenone has quit (Quit: Konversation terminated!)
*	iAmerikan has quit (Ping timeout: 252 seconds)
*	Swizec has quit (Ping timeout: 240 seconds)
<shapr>	Infinisil: which is a separate binary, whence is built into zsh
<shapr>	oh well, maybe not
<Gurkenglas>	LesterLee, oh for some reason I expected paths to be a list. Use traverse instead of each
*	xClueless has quit (Quit: Leaving)
<shapr>	Infinisil: I don't know
*	beanbagula (~bean_bag@2a00:23c5:4b04:9200:146f:8ee1:4e09:9ee2) has joined
*	Jesin has quit (Quit: Leaving)
*	SenzaVita (~androirc@46.198.141.26) has joined
<SenzaVita>	Hi
*	SenzaVita has quit (Remote host closed the connection)
<shapr>	uhh
<shapr>	bye?
<shapr>	I've seen people get frustrated with Haskell, but that was INSTANT
<geekosaur>	it will depend on the shell. whence and which came from different unix development origins, type was created by POSIX. type *must* be a shell builtin; traditionally BSD which was an external command and "whence" was built into some shells. these days' your best bet is to check your shell's documentation
<LesterLee>	Gurkenglas: Awesome, that did it - thanks! :) http://lpaste.net/495376949485502464
*	sepp2k has quit (Ping timeout: 240 seconds)
*	geekosaur wonders if that was another Italian bot probe (the "ciao"/"!list" bit which seems to be happening a bit more often than usual the past couple days; some users seem confused about how to use it though so you get other behaviors...)
*	Infinisil has quit (Ping timeout: 260 seconds)
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
<Gurkenglas>	Do we have the thing yet that lets you use @Foo to not need "Proxy :: Proxy Foo"?
*	ystael has quit (Ping timeout: 255 seconds)
*	zero_byte (~zer0@ip-89-103-110-138.net.upcbroadband.cz) has joined
*	iqubic (~iqubic@c-24-17-229-56.hsd1.wa.comcast.net) has joined
*	MP2E (~cray@ip68-224-146-82.lv.lv.cox.net) has joined
<lyxia>	TypeApplications?
<lyxia>	We have that since 8.0
*	jollygood2 (~bc815bf3@217.29.117.252) has joined
*	ericdwhite has quit (Remote host closed the connection)
*	danvet has quit (Ping timeout: 252 seconds)
*	pfurla (~textual@38.86.167.91) has joined
*	inhortte has quit (Quit: Leaving.)
*	vBm1 has quit ()
*	Eartaker (~Eartaker@89.238.178.75) has joined
*	goodboy (~goodboy@toroon0335w-lp130-01-142-112-179-8.dsl.bell.ca) has joined
*	danthemy_ has quit (Remote host closed the connection)
*	tsaka_ (~torstein@84-52-234.108.3p.ntebredband.no) has joined
*	Guest73367 has quit (Ping timeout: 248 seconds)
*	danthemyth (~danthemyt@50-246-66-201-static.hfc.comcastbusiness.net) has joined
*	kuwze (ad4c64cb@gateway/web/freenode/ip.173.76.100.203) has joined
*	cpennington has quit (Remote host closed the connection)
*	iAmerikan has quit (Ping timeout: 248 seconds)
*	whoisxy (~whoisxy@46.254.251.34) has joined
*	egis has quit (Quit: Leaving)
*	tobloron_ (~toblorone@162.246.216.202) has joined
<nshepperd_>	Some people just aren't used to a response to their messages taking longer than 30 seconds, and assume the room is empty
<mud>	Is there an instance of Floating somewhere that's arbitrary precision in some way? Or at least possible to get more precise values than Double can give?
<sm>	Decimal
*	toblorone has quit (Ping timeout: 240 seconds)
<mud>	Ah, thanks
<ClaudiusMaximus>	any library to solve matrix system A x = b over Rational?
*	toblorone (~toblorone@162.246.216.28) has joined
*	robotroll has quit (Read error: Connection reset by peer)
<mud>	sm: Hm, doesn't actually appear to be an instance of Floating
<ClaudiusMaximus>	mud: there's 'compensated' for double-double style arithmetic, and 'rounded' which binds to mpfr (though i don't think rounded is on hackage, there are a couple of pull requests on github to bring it up to date)
*	daishi has quit (Read error: Connection reset by peer)
*	caasih has quit (Ping timeout: 246 seconds)
<sm>	mud: I'm not sure, then
*	caasih (~caasihuan@106.186.125.58) has joined
<mud>	ClaudiusMaximus: Thanks, I'll peek at those
<mud>	sm: Thanks anyway
*	tobloro__ (~toblorone@162.246.216.202) has joined
*	tobloron_ has quit (Read error: Connection reset by peer)
*	ninja_in1 has quit (Quit: WeeChat 1.8)
<alpounet>	mud: https://hackage.haskell.org/package/numbers-3000.2.0.1/docs/Data-Number-CReal.html might be close to what you want?
**** ENDING LOGGING AT Tue Sep  5 14:09:10 2017

**** BEGIN LOGGING AT Tue Sep  5 18:28:30 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
<boj>	so is this an efficiency problem? i still have no clue what you are having trouble actually doing
*	Channel #haskell url: http://www.haskell.org/
<andromeda-galaxy>	boj, erisco: so the problem is that when we see a matching pair of keywords we need to hang onto the parse result of the data which is going to be of some type 'a' and properly combine it with the parse results of the other pieces of data from the file which are of disparate types
*	pera has quit (Ping timeout: 252 seconds)
<andromeda-galaxy>	boj: okay so lets say I'm writing an applicative instance for this thing
*	mek42 (~quassel@2604:6000:1418:c11c:8f84:49f7:3537:7a26) has joined
<andromeda-galaxy>	and I'm writing (<*>)
<andromeda-galaxy>	f <*> x say
<andromeda-galaxy>	then the obvious thing to do is to basically say parse (f <*> x) string = (parse f string) (parse x string)
<erisco>	okay, so this is like parsing XML tags
<erisco>	what is the need of this thing with Applicative?
*	gaze__ (~textual@c-67-161-12-206.hsd1.ca.comcast.net) has joined
<boj>	i assume that was a path towards dialing the explanation back from 11 to a 3
<andromeda-galaxy>	combining together the "actions" (C generator + obj "parser") that compute data
<andromeda-galaxy>	so that for example I can write dealWithAlignment <$> figureOutAlignment <*> theRawData
<erisco>	this problem is too big to fit into my head
*	mac10688 has quit (Remote host closed the connection)
<boj>	well, if erisco doesn't get it i definitely don't
*	chaoyi (~chaoyi@pool-72-88-209-93.nwrknj.fios.verizon.net) has joined
*	mac10688 (~mac10688@c-24-21-116-24.hsd1.or.comcast.net) has joined
<andromeda-galaxy>	erisco, boj: we can reduce the problem from composing these generators+parsers to composing just parsers, would that help?
*	toblorone (~toblorone@162.246.216.28) has joined
<boj>	andromeda-galaxy: maybe take a deep breath and distill your problem down to 1 to 2 lines, maybe an lpaste
<erisco>	if you want to focus on just the parsing problem, that is more manageable
<andromeda-galaxy>	yeah
<erisco>	am I right that it is like parsing XML tags?
<ClaudiusMaximus>	there are some parser/printer pairs out there in research-land, probably some of them use Applicative
*	kuttifunk1 (~Thunderbi@host-188-174-199-223.customer.m-online.net) has joined
<andromeda-galaxy>	erisco: maybe? except that there's no nesting and the each tag might have different delimiters
<erisco>	what do you mean by tags having different delimiters? I thought tags were delimiters
<ClaudiusMaximus>	eg http://www.staff.science.uu.nl/~swier004/publications/2017-tyde-a.pdf
*	kuttifunk has quit (Ping timeout: 248 seconds)
*	kuttifunk1 is now known as kuttifunk
<andromeda-galaxy>	oh okay I misunderstood you
<andromeda-galaxy>	then the differences are: no nesting, no delimiters around tags (no '<', '>') and the possible tags are known aot
<andromeda-galaxy>	or, not aot, but while building/before running the parser
*	tobloron_ has quit (Ping timeout: 248 seconds)
<erisco>	what have you tried to parse these tags thus far?
<andromeda-galaxy>	ClaudiusMaximus: this is dead easy to do using standard applicative parsing techniques but those aren't efficient
*	toblorone has quit (Remote host closed the connection)
<andromeda-galaxy>	erisco: well the obvoius and relatively easy implementation is to just scan the string once for each kind of tag that we want to get the value out of
<andromeda-galaxy>	that makes it easy because your parser for f <*> x is just (parse f) (parse x) and you can just let each of the subparsers do its own scan
*	toblorone (~toblorone@162.246.216.28) has joined
<c_wraith>	andromeda-galaxy: what's the basis of your claim that applicative parsers aren't efficient?
<andromeda-galaxy>	the problem is that I would rather lift all the scans up to the top so that they can be fused into one scan via Aho-Corasick
*	neoncontrails has quit (Read error: Connection reset by peer)
*	akamaus has quit (Ping timeout: 246 seconds)
*	dfeuer (~dfeuer@wikimedia/Dfeuer) has joined
*	neoncontrails (~neoncontr@wsip-98-186-230-186.sd.sd.cox.net) has joined
<andromeda-galaxy>	c_wraith: not that they aren't efficient in general, but that they can be beaten in this case. this particular case comes down to lots of basically (string a <|> string b <|> string c <|> char) kinds of parsers where the standard applicative parsing techniques will run a string comparsion once for each option once on every charactor
<erisco>	eh, I took a few second look at this algorithm and it seems to me to throw the needles into a trie
<andromeda-galaxy>	erisco: so implementing the algorithm isn't the hard part, the hard part is what to do when you find a needle
<erisco>	I don't see the importance of this unless your tags are very long
<erisco>	what have you tried?
*	akamaus (~akamaus@ppp91-79-53-141.pppoe.mtu-net.ru) has joined
<andromeda-galaxy>	oh so I'm not trying to do it this way because there are actual performance problems with the other way
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	beemo has quit (Ping timeout: 260 seconds)
*	tsmish has quit (Quit: Lost terminal)
<andromeda-galaxy>	I'm trying to do it this way because I'm doing this project for fun and want to do everything the "right" way
<erisco>	lesson one: the right way is the simple way.
*	Youmu (uid129469@gateway/web/irccloud.com/x-wiuuiefmuiwxsthx) has joined
<andromeda-galaxy>	oh sure I agree in lots of cases
*	toblorone has quit (Ping timeout: 260 seconds)
<andromeda-galaxy>	in this case I'm interested in the challenge of doing it neatly with a better but weirder algorithm
<erisco>	have you done it neatly with a less weird algorithm?
<c_wraith>	andromeda-galaxy: write your own parser library that builds a data structure reifying the parser and analyze that to derive your target algorithm.
<c_wraith>	andromeda-galaxy: that's a thing you can do with Applicative, and the main advantage of Applicative over Monad - the structure is statically available.
<andromeda-galaxy>	erisco: yes, with standard applicative parsing techniques
*	iomotoko (~iomotoko@unaffiliated/iomotoko) has joined
<andromeda-galaxy>	c_wraith: yeah, I know - that's what I'm trying to do now, and why I've been talking about Applicative instead of Monad
<erisco>	c_wraith, what do you suggest for reification? I got stuck with the technique I tried
<c_wraith>	I'm lazy and would use a free Applicative.
<c_wraith>	Someone else has already done the work.
<andromeda-galaxy>	oh right, I also know how to do this if we have existentialquantification, rankntypes, any/unsafecoerce, etc. but this has to be in vanilla H98
*	brunocaad has quit (Ping timeout: 260 seconds)
<erisco>	andromeda-galaxy, I would figure out if there is a known class of grammars this falls into
*	danthemyth has quit (Ping timeout: 260 seconds)
<erisco>	andromeda-galaxy, because then I can focus on implementing combinators for this class of grammars and be less confused with unnecessary detail of this particular problem
<andromeda-galaxy>	the difficulty is in putting the functons being fmapped over things into the reified structure/using them in the string matcher loop, because they return arbitrary types
<andromeda-galaxy>	erisco: I did try to look into that a bit, but I couldn't figure out an obvious way to generalize the grammar
<erisco>	you just look at the class of grammars and see "yes, all the grammars I am interested in are in this class"
*	pparkkin has quit (Remote host closed the connection)
<andromeda-galaxy>	afaict all the grammars that I'm interested in are sub-regular in the chomsky hierarchy
<erisco>	okay, and so dig around and see what you can find
<andromeda-galaxy>	using an overly powerful class of grammar like regular languages leads to not being able to work as efficiently
<erisco>	or alternatively, figure out a construction for your grammars
*	Johannes13__ (~Johannes1@unaffiliated/johannes13) has joined
<andromeda-galaxy>	no I mean the bottom of the standard hierarchy of grammars is way to high for this particular problem
<erisco>	Haskell is definitely not the place to start with this problem
<Cale>	Why not?
<erisco>	because it is going to add unnecessary noise
*	taki has quit (Quit: Leaving)
*	neoncontrails has quit (Remote host closed the connection)
<erisco>	if regular languages are too much then, again, dig around for even simpler ones
*	neoncontrails (~neoncontr@wsip-98-186-230-186.sd.sd.cox.net) has joined
<erisco>	I don't know any myself but I am sure there is something to find
<erisco>	alternatively, figure out a construction for your grammars
<Cale>	Well, if you're suggesting the right place to begin is pure mathematics, I might agree :)
<erisco>	yes, I am
<andromeda-galaxy>	the language class is only "languages" that are recognizable purely by looking up constant substrings
*	jellowj has quit (Ping timeout: 260 seconds)
<andromeda-galaxy>	the math formulation is completely trivial and doesn't shine any light on the haskell problem at all
<Cale>	Sometimes Bird-style equational reasoning about programs can produce good results
<erisco>	the problem you described to me does not suggest only grammars of constants
<erisco>	you said there were tags which delimited blocks of text
*	Johannes13 has quit (Ping timeout: 240 seconds)
<andromeda-galaxy>	oh sure but now we're talking about math and they're reducable to the same easily: since we know the tags we're interested in we only need to look up the indices of all of them, and at that point we know that the string is a member of the language. To construct which member of the language we can just run arbitrary functions on the string and those indices
<erisco>	the point is to make clear what simple things you need for your program to work, and then you worry about implementing this in Haskell
<erisco>	at least then you're directed in what you need to do
<erisco>	so problems with reification and type systems and so forth must serve this ideal you already have defined
*	halogenandtoast (~matthew-m@122x220x193x90.ap122.ftth.ucom.ne.jp) has joined
<andromeda-galaxy>	I already basically have that though. I know what the parsing algorithm should look like and what the grammar construction should look like
*	neoncontrails has quit (Ping timeout: 248 seconds)
*	banc has quit (Quit: ZNC - http://znc.in)
*	perrier-jouet (~perrier-j@gateway/vpn/privateinternetaccess/perrier-jouet) has joined
*	hucksy (~hucksy@p4FD1F92D.dip0.t-ipconnect.de) has joined
*	keith_asdf has quit (Remote host closed the connection)
*	peterbecich (~peterbeci@47.37.164.78) has joined
*	cdg (~cdg@2600:1700:3120:40e0:5cb6:8380:8cf3:1ce1) has joined
*	mj_k (~mj_k@59.10.109.21) has joined
*	hucksy_ has quit (Ping timeout: 240 seconds)
<erisco>	well, how do you construct a grammar in your language then
<erisco>	a grammar for your languages
*	a3Dman has quit (Ping timeout: 240 seconds)
*	cranej (~cranej@42.120.74.200) has joined
<andromeda-galaxy>	applicatives
*	brynedwardz (~bryn@109.76.5.35) has joined
*	vtomole has quit (Ping timeout: 260 seconds)
*	brynedwards has quit (Disconnected by services)
*	brynedwardz is now known as brynedwards
<erisco>	that seems weaksauce to me
<erisco>	if you look up how to construct regular grammars then you will see it is precise and clear
*	twoolie (~twoolie@101.166.213.164) has joined
<erisco>	I am not sure how "applicatives" is a sufficient description
*	Thunderfunk has quit (Read error: Connection reset by peer)
*	Thunderfunk (~Thunderfu@31.131.65.175) has joined
<c_wraith>	You won't really be able to reify this without existentials using Applicative.
*	cdg has quit (Ping timeout: 240 seconds)
<c_wraith>	The nature of Applicative composition is that intermediate type information is lost.
<andromeda-galaxy>	c_wraith: thank you. that is what I've been trying to get at during this whole thing
<andromeda-galaxy>	that is precisely what was wrong
<c_wraith>	So just create a tree.
*	jeltsch has quit (Quit: jeltsch)
<andromeda-galaxy>	I was looking for solutions
<andromeda-galaxy>	ah right
<andromeda-galaxy>	so that's the obvious way to do it
*	neoncontrails (~neoncontr@2602:306:31a7:a1a0:6dea:b9cd:7602:9fed) has joined
<c_wraith>	Yes, the obvious solution is usually the good one.
<andromeda-galaxy>	not quite here though
<andromeda-galaxy>	the tree has the same problem that we can't run the optimized string matcher
<c_wraith>	I'd just use existentials.  They work.
<c_wraith>	You can if you build the right tree.
<andromeda-galaxy>	re: existentials: they don't exist in nch98 though
<andromeda-galaxy>	re: the right tree: how?
<c_wraith>	However you need to.
*	banc (~master@217.151.98.163) has joined
<andromeda-galaxy>	don't you end up losing the type information again inside the scanner function?
<andromeda-galaxy>	the type of the produced data depends on the keyword that we just scanned is the problem
*	pera (~pera@unaffiliated/pera) has joined
<c_wraith>	so get rid of the typed intermediate representation
<c_wraith>	If you refuse to use language extensions that let you type it, you can't type it.
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	ystael (~ystael@209.6.53.93) has joined
<andromeda-galaxy>	I'd love to use them but I'm working on a project that I /think/ wants to remain compatible with nhc98
*	eklavya (~eklavya@2405:205:138e:ea3d:d0ed:e927:f3af:c2ae) has joined
*	unyu has quit (Ping timeout: 260 seconds)
*	emilypi has quit (Ping timeout: 248 seconds)
<andromeda-galaxy>	how do you get rid of the typed intermediate representation without using Data.Dynamic or GHC.Prim.Any/unsafeCoerce?
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	mrkgnao (~mrkgnao@115.187.56.122) has joined
*	nykros (c9b10560@gateway/web/freenode/ip.201.177.5.96) has joined
*	ystael has quit (Ping timeout: 240 seconds)
<c_wraith>	I mean, it sounds like the intermediate representation you actually want is slices of the input, anyway.
<andromeda-galaxy>	yeah, but you can't get the slices of input while building the tree - only after you've finished - since the input-slicing algorithm needs to consider all the leaves of the tree
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	hackagebot has quit (Read error: error:1408F119:SSL routines:SSL3_GET_RECORD:decryption failed or bad record mac)
<c_wraith>	I had envisioned those as independent phases. phase 1: grammar tree. phase 2: anything that actually handles input.
*	hackagebot (~hackagebo@2a00:dcc0:eda:88:245:71:269a:892d) has joined
<andromeda-galaxy>	oh yeah exactly
<andromeda-galaxy>	but you can't build the grammar tree out of slices of input if you don't have the input until phase 2
<c_wraith>	was the entire point here to build a self-modifying data structure?
*	louispan has quit (Quit: louispan)
<c_wraith>	I was operating on the assumption that reading the rules and using them were independent
<andromeda-galaxy>	no. I think I must have misunderstood what you said
<c_wraith>	but if the rules impact how further rules are parsed, you're in a world of trouble.
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
<andromeda-galaxy>	when you said that the intermediate representation should be slices of input I thought you were talking about the representation of the grammar tree
<andromeda-galaxy>	rules do not impact how further rules are parsed
*	eacameron has quit (Ping timeout: 248 seconds)
*	beerdrop has quit (Ping timeout: 248 seconds)
<c_wraith>	So let me back way up here.  Why doesn't something as simple as [(Input, [Input] -> Output)] work as your rule representation?
<andromeda-galaxy>	what do the elements of that tuple represent?
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Tue Sep  5 19:30:04 2017

**** BEGIN LOGGING AT Wed Sep  6 18:50:46 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:46:51 2017)
*	Channel #haskell url: http://www.haskell.org/
<erisco>	it seems buried and strewn about
*	Johannes13__ (~Johannes1@unaffiliated/johannes13) has joined
*	quobo has quit (Quit: Connection closed for inactivity)
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
*	I331846 (~I331846@113.200.157.163) has joined
*	I331846 has quit (Client Quit)
*	rashub (~rashub@113.200.157.163) has joined
*	Johannes13 has quit (Ping timeout: 240 seconds)
*	exarkun has quit (Ping timeout: 240 seconds)
*	exarkun (~exarkun@vtelinet-66-220-238-250.vermontel.net) has joined
*	connrs (~connrs@conners.plus.com) has joined
*	Bhootrk_ has quit (Quit: Leaving)
*	iAmerikan has quit (Ping timeout: 252 seconds)
*	JeanCarloMachado has quit (Read error: Connection reset by peer)
*	Psybur (~broseph@pool-108-44-203-65.clppva.fios.verizon.net) has joined
*	banc has quit (Quit: ZNC - http://znc.in)
*	Big_G (~Big_G@75-165-48-101.tukw.qwest.net) has joined
*	unyu has quit (Remote host closed the connection)
*	juhp (~juhp@redhat/juhp) has joined
*	connrs has quit (Ping timeout: 240 seconds)
*	fresheyeball has quit (Ping timeout: 248 seconds)
*	hucksy_ (~hucksy@p4FD1F8D7.dip0.t-ipconnect.de) has joined
*	hexfive (~beknowly@50.35.82.88) has joined
*	unyu (~pyon@unaffiliated/pyon) has joined
*	connrs (~connrs@conners.plus.com) has joined
*	hucksy has quit (Ping timeout: 248 seconds)
*	connrs has quit (Ping timeout: 248 seconds)
*	heebo has quit (Ping timeout: 264 seconds)
*	jeltsch has quit (Quit: jeltsch)
*	sdothum_ (~znc@108.63.142.95) has joined
*	mj_k (~mj_k@59.10.109.21) has joined
*	tromp (~tromp@ip-217-103-3-94.ip.prioritytelecom.net) has joined
*	safe (~safe@unaffiliated/safe) has joined
*	connrs (~connrs@conners.plus.com) has joined
*	sdothum has quit (Ping timeout: 240 seconds)
*	banc (~master@217.151.98.163) has joined
*	connrs has quit (Ping timeout: 240 seconds)
*	tromp has quit (Ping timeout: 240 seconds)
*	Psybur has quit (Ping timeout: 240 seconds)
*	Guest36961 has quit (Remote host closed the connection)
*	cjwelborn has quit (Remote host closed the connection)
*	_ja has quit (Ping timeout: 260 seconds)
*	Goplat (~goplat@reactos/developer/Goplat) has joined
*	peterbecich has quit (Ping timeout: 260 seconds)
*	BartAdv has quit (Quit: Connection closed for inactivity)
*	acowley is now known as acowley_away
*	Gurkenglas has quit (Ping timeout: 240 seconds)
*	knudLeopold has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	MoarSpaceFi (~Forgot_my@65.126.126.193) has joined
*	jchia1 (~jchia@116.192.24.142) has joined
*	amarp (~amarpotgh@p57967DBF.dip0.t-ipconnect.de) has joined
*	jchia has quit (Ping timeout: 260 seconds)
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
*	mj_k has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	h0pper (~h0pper@249.sub-174-198-10.myvzw.com) has joined
*	amarp has quit (Ping timeout: 240 seconds)
<dsal>	@pl \c -> c^2 <= n
<lambdabot>	(<= n) . (^ 2)
*	Orion3k has quit (Ping timeout: 240 seconds)
*	hololeap (~hololeap@unaffiliated/hololeap) has joined
*	h0pper has quit (Remote host closed the connection)
<hololeap>	if i have something like `i = length [1,2,3,4,5]`, will the compiler shrink this down to just a static "5" in the executable, or will it always have to span the whole list?
<monochrom>	I don't know. Do you know how to read core? It can tell you.
<hololeap>	core?
<hololeap>	what is core?
<lyxia>	it's the intermediate language GHC uses to optimize your programs
<monochrom>	This refers to GHC's intermediate language. You can obtain some by "ghc -O -ddump-simpl -dsuppress-all"
*	iAmerikan has quit (Ping timeout: 248 seconds)
<hololeap>	ok, i'll check it out
*	iomotoko (~iomotoko@unaffiliated/iomotoko) has joined
*	dddddd has quit (Remote host closed the connection)
<geekosaur>	hololeap, in general ghc does not do compile time evaluation, only compile time replacement (via RULES). since RULES are type driven and literals do not have distinct types from computed values, it cannot know to apply a RULE to reduce it at compile time
*	revprez has quit (Quit: Lost terminal)
*	rickerbh (~rickerbh@14-203-105-198.static.tpgi.com.au) has joined
*	knudLeopold (~knudLeopo@gateway/vpn/privateinternetaccess/knudleopold) has joined
*	abe (~abe@c-24-11-14-152.hsd1.ut.comcast.net) has joined
*	Orion3k (~Orion3k@47-51-33-228.static.mtpk.ca.charter.com) has joined
*	Thunderfunk has quit (Ping timeout: 240 seconds)
*	Thunderfunk (~Thunderfu@31.131.65.175) has joined
*	abe has quit (Client Quit)
*	xtreak (~xtreak@42.111.168.31) has joined
*	mizu_no_oto has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	Orion3k has quit (Ping timeout: 260 seconds)
*	peterbecich (~peterbeci@47.37.164.78) has joined
*	connrs (~connrs@conners.plus.com) has joined
*	Orion3k (~Orion3k@47-51-33-228.static.mtpk.ca.charter.com) has joined
<hololeap>	geeokosaur, could you please give me a simple example of a rule that it uses?
<hololeap>	just for reference
*	darjeeling_ (~darjeelin@115.215.43.56) has joined
<geekosaur>	not off the top of my head. thing is, RULES are not wired in, they are pragmas in library source.
*	xtreak has quit (Client Quit)
*	jchia (~jchia@116.192.25.115) has joined
<geekosaur>	there is not a lot wired in at this level. hypothetically they could be, but as ghc is currently designed it would be difficult to do so
*	cpennington (~cpenningt@pool-108-7-186-67.bstnma.fios.verizon.net) has joined
*	jchia1 has quit (Ping timeout: 240 seconds)
*	revprez (~revprez@pool-108-20-156-103.bstnma.fios.verizon.net) has joined
<monochrom>	Data.List probably has a lot of them.
*	armyriad has quit (Read error: Connection reset by peer)
<geekosaur>	I'm not sure it dfoes these days
*	rickerbh (~rickerbh@14-203-105-198.static.tpgi.com.au) has joined
<geekosaur>	GHC.OldList likely does
*	armyriad (~armyriad@gateway/vpn/privateinternetaccess/armyriad) has joined
<geekosaur>	(Data.List is mostly reexports of Data.Foldable at this point)
*	revprez has quit (Client Quit)
*	revprez (~revprez@pool-108-20-156-103.bstnma.fios.verizon.net) has joined
<dfeuer>	A lot of the list rules are in GHC.Base and GHC.List, IIRC.
<dfeuer>	Some are in Data.OldList.
<dfeuer>	Probably.
*	jchia1 (~jchia@116.192.25.95) has joined
*	dsantiago has quit (Ping timeout: 260 seconds)
*	connrs has quit (Ping timeout: 248 seconds)
*	fingerzam has quit (Ping timeout: 240 seconds)
*	`Guest00000 has quit (Ping timeout: 240 seconds)
*	fingerzam (sid193798@gateway/web/irccloud.com/x-mtrcxdinabdreqyy) has joined
*	jchia has quit (Ping timeout: 240 seconds)
<andromeda-galaxy>	hmm, I wonder what the nicest safe way to write partition :: (a -> Either b c) -> [a] -> ([b],[c]) is...
*	twandy (~Thunderbi@69.36.49.34) has joined
*	dsantiago (~dsantiago@cpe-104-175-193-69.socal.res.rr.com) has joined
<jle`>	probably using pattern matching
<geekosaur>	:t Data.Either.partitionEithers
<lambdabot>	[Either a b] -> ([a], [b])
<glguy>	:t \f xs -> partitionEithers (map f xs)
<lambdabot>	(a1 -> Either a b) -> [a1] -> ([a], [b])
*	`Guest00000 (~user@37.113.176.12) has joined
*	soLucien has quit (Ping timeout: 240 seconds)
**** ENDING LOGGING AT Wed Sep  6 19:57:19 2017

**** BEGIN LOGGING AT Thu Sep  7 11:25:21 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	caumeslasal has quit (Ping timeout: 248 seconds)
*	hackagebot has quit (Read error: error:1408F119:SSL routines:SSL3_GET_RECORD:decryption failed or bad record mac)
*	hackagebot (~hackagebo@2a00:dcc0:eda:88:245:71:269a:892d) has joined
*	shafox has quit (Quit: This computer has gone to sleep)
*	quobo (uid178934@gateway/web/irccloud.com/x-wjyepkjgifpbivps) has joined
*	JuanMiguel has quit (Quit: This computer has gone to sleep)
**** ENDING LOGGING AT Thu Sep  7 11:28:00 2017

**** BEGIN LOGGING AT Thu Sep  7 11:58:17 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	burkaman has quit (Client Quit)
<Psybur>	Can anyone tell me what ".~" means in the second code block in https://github.com/timbod7/haskell-chart/wiki/example-2 ?
<Psybur>	Is it something to do with lens?
<Psybur>	Oh and what does ".=" do?
*	urdh (~urdh@unaffiliated/urdh) has joined
*	nicktest (604313de@gateway/web/cgi-irc/kiwiirc.com/ip.96.67.19.222) has joined
<mizu_no_oto>	Psybur: https://hackage.haskell.org/package/lens
*	nicktest has quit (Client Quit)
<Psybur>	Damn looks like I finally have to learn lens. Been putting it off. Looks scary :D
<phadej>	dejavu, someone asked exactly same question yesterday (or day before)
<monochrom>	Or you can postpone learning Chart.
*	albertus1 (~seb@ip-109-45-3-52.web.vodafone.de) has joined
<mizu_no_oto>	Simon P.J.'s lens talk is pretty good
<phadej>	monochrom: could you be more supportive?
<monochrom>	Why is everyone asking about it anyway?
<hexagoxel>	or you can learn exactly these to operators and move on.
<Psybur>	monochrom, do you mean just blindly try to copy the Chart examples or use a different library?
<monochrom>	No.
<hexagoxel>	*two
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<monochrom>	Use a different library.
<Psybur>	monochrom, any recommendations?
<c_wraith>	Psybur, those are both "set this value" operations. the latter implicitly works on the state in MonadState
<monochrom>	I don't have one.
*	crownose (~weechat@2a02:8010:6173:0:2ab2:bdff:fe2b:c456) has joined
*	castlelore has quit (Ping timeout: 248 seconds)
*	cschneid_ (~cschneid@2603:300b:901:300:4197:dd08:6079:15d) has joined
*	C0_c0ax_ has quit (Ping timeout: 248 seconds)
*	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined
*	connrs has quit (Ping timeout: 248 seconds)
*	mek42 has quit (Ping timeout: 246 seconds)
*	chlong_ has quit (Ping timeout: 240 seconds)
*	biglama has quit (Remote host closed the connection)
*	zv (~zv@unaffiliated/zv) has joined
<monochrom>	For the record: What phadej really means is: "could you be more supportive for going down a rabbit hole, aka depth-first search?"
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
<monochrom>	The answer is no, because I believe that depth-first search is the cause of XY problems. I am supportive for breadth-first search.
*	chlong_ (~chlong|go@71.181.74.172) has joined
*	terrorjack has quit (Quit: Connection closed for inactivity)
<mizu_no_oto>	Psybur: do you understand, at a basic level, what lenses are for?
*	oish (~charlie@159.22.169.217.in-addr.arpa) has joined
<Psybur>	mizu_no_oto, manipulating nested data structures I believe
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
<mizu_no_oto>	More or less, yeah.
*	takle (~takle@host109-153-108-68.range109-153.btcentralplus.com) has joined
<mizu_no_oto>	originally, lenses were composable getters and setters.
*	connrs (~connrs@conners.plus.com) has joined
*	chlong__ (~chlong|go@71.181.28.233) has joined
*	zzq has quit (Ping timeout: 240 seconds)
<mizu_no_oto>	the 'lens' library is built off of the observation that you don't need separate getters and setters, but can use a modifier as a getter or setter.
*	chlong_ has quit (Ping timeout: 248 seconds)
*	saurabhn_ has quit (Remote host closed the connection)
*	a3Dman has quit (Ping timeout: 240 seconds)
*	zzq (~zzq@37.26.147.158) has joined
*	soLucien (~soLucien@130.225.188.33) has joined
*	takle has quit (Ping timeout: 255 seconds)
*	bennofs (~benno@217-68-187-120.dynamic.primacom.net) has joined
*	jlanglois (jlanglois@nat/yahoo/x-aucrzdvacgegkfis) has joined
*	jellowj has quit (Ping timeout: 260 seconds)
*	sfcg (~sfcg@79.97.176.188) has joined
*	rcat (~us3r@51.15.69.111) has joined
*	bergey has quit (Ping timeout: 240 seconds)
*	crobbins (~crobbins@2600:1700:6391:1c20:99f9:9016:aa95:c3ac) has joined
*	egis has quit (Quit: Leaving)
*	crosleyt has quit (Ping timeout: 264 seconds)
*	aglorei1 has quit (Ping timeout: 268 seconds)
*	muesli4 (~muesli4@p200300E6ABC29892496A8555A03D7BB8.dip0.t-ipconnect.de) has joined
*	sellout- (~Adium@65-128-95-202.hlrn.qwest.net) has joined
*	alex`` (~alex@2a01cb000bb310000e31f98b4cdf4eae.ipv6.abo.wanadoo.fr) has joined
*	alex`` is now known as alexherbo2
*	alexherbo2 is now known as alex``
*	Dembel (~Dembel@31.132.180.188) has joined
*	aglorei1 (~aglorei@gateway/tor-sasl/aglorei) has joined
<hexagoxel>	Psybur: Chart also exports the record fields, so you can translate the example to be lens-free, too.
*	heebo has quit (Ping timeout: 248 seconds)
*	soLucien has quit (Ping timeout: 246 seconds)
*	crosleyt (~troy@209-217-208-226.northland.net) has joined
*	heebo (~user@host-92-15-229-61.as43234.net) has joined
*	Itkovian has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	herr_jth (~HerrJth@ip5f5bf4db.dynamic.kabel-deutschland.de) has joined
<drdo>	Hmm, got an "Illegal instruction" when running something compiled in a different machine
*	lambda-11235 (~lambda-11@70.41.58.147) has joined
*	FreeBirdLjj has quit (Remote host closed the connection)
<drdo>	Same architecture but different cpus, is there some sort of compat mode I need to enable in ghc?
*	FreeBirdLjj (~freebirdl@180.159.174.81) has joined
*	chlong__ has quit (Read error: Connection reset by peer)
<hexagoxel>	Psybur: roughly like this: http://lpaste.net/358274
*	bergey (~user@pool-96-246-43-125.nycmny.fios.verizon.net) has joined
*	ubsan has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	hackagebot has quit (Read error: error:1408F119:SSL routines:SSL3_GET_RECORD:decryption failed or bad record mac)
*	chlong_ (~chlong|go@pool-71-168-103-125.cncdnh.east.myfairpoint.net) has joined
*	hackagebot (~hackagebo@2a00:dcc0:eda:88:245:71:269a:892d) has joined
<Psybur>	hexagoxel, thanks
*	Dembel has quit (Read error: Connection reset by peer)
*	oish has quit (Ping timeout: 248 seconds)
*	mattyw has quit (Ping timeout: 252 seconds)
*	NinjaTrappeur has quit (Ping timeout: 246 seconds)
*	oisdk (~textual@83.136.43.132) has joined
*	mattyw (~mattyw@gateway/vpn/privateinternetaccess/mattyw) has joined
*	FreeBirdLjj has quit (Ping timeout: 248 seconds)
*	heebo has quit (Ping timeout: 240 seconds)
*	iomotoko has quit (Ping timeout: 240 seconds)
*	NinjaTrappeur (~ninja@2001:41d0:2:2f1e::1) has joined
*	dsub has quit (Quit: Lost terminal)
*	chlong_ has quit (Ping timeout: 248 seconds)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	chlong_ (~chlong|go@71.181.103.243) has joined
*	oish (~charlie@159.22.169.217.in-addr.arpa) has joined
*	ziocroc (~ziocroc@151.74.52.127) has joined
*	jellowj (~yellow-ja@epp147.neoplus.adsl.tpnet.pl) has joined
*	heebo (~user@host-92-15-229-61.as43234.net) has joined
*	tromp (~tromp@ip-217-103-3-94.ip.prioritytelecom.net) has joined
*	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined
*	heebo has quit (Ping timeout: 255 seconds)
*	tromp has quit (Ping timeout: 260 seconds)
*	pja has quit (Quit: pja)
*	Psybur has quit (Ping timeout: 248 seconds)
*	heebo (~user@host-92-15-229-61.as43234.net) has joined
*	cyborg-one (~cyborg-on@37.203.8.40) has joined
*	cmr has quit (Quit: FIN)
*	chlong__ (~chlong|go@71.181.119.51) has joined
**** ENDING LOGGING AT Thu Sep  7 12:42:31 2017

**** BEGIN LOGGING AT Thu Sep  7 19:13:33 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	alveric3 has quit (Ping timeout: 240 seconds)
*	jmcarthur has quit (Ping timeout: 252 seconds)
<tomasino>	how's things tonight? much chat-itude?
<orzo>	I'm translating C code that multiplies two 64 bit numbers to obtain 128 bits as a pair of 64-bit words
*	Wizek has quit (Quit: Connection closed for inactivity)
<orzo>	should i use Integer?
<orzo>	or do something similar in haskell
*	Fylwind has quit (Quit: ZNC 1.6.5 - http://znc.in)
<Hafydd>	Why are you translating C code into Haskell?
<orzo>	why not
*	Fylwind (~Fylwind@unaffiliated/fylwind) has joined
<orzo>	its a good way to grok c code
<Hafydd>	You can just run the C program right away.
<Hafydd>	And the Haskell you obtain by translating it literally will probably be horrible.
<orzo>	eh
<orzo>	you've never done this
<Hafydd>	I would recommend using Integer, anyway, unless there is some special performance need.
<Axman6>	orzo: there are ptimitives for that in GHC.Prim IIRC
*	alveric3 (~LordAlver@i577B9F35.versanet.de) has joined
<Hafydd>	In which case you could use a 128-bit integer type, perahaps.
*	Achylles has quit (Quit: Leaving)
*	rdes (~ryan@c-73-16-127-221.hsd1.me.comcast.net) has joined
*	iqubic (~iqubic@2601:602:8a00:1bd7::4c09) has joined
<Axman6>	orzo: hmm, this is related, but not what I thought was there: https://hackage.haskell.org/package/ghc-prim-0.5.1.0/docs/GHC-Prim.html#v:mulIntMayOflo-35-
<dumptruckman>	How can I add a debug print to a function?
<Axman6>	(I was thinking of addIntC# whcih returns the any carry value of an add, useful for big int implementations)
<orzo>	well i've got unsigned numbers
<Axman6>	dumptruckman: that's generally not a good idea, but can be done, can you explain why you want that?
<dumptruckman>	just to figure out why this function isn't working
<dumptruckman>	it's not for the final version
<Axman6>	dumptruckman: Look at Debug.Trace
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<Axman6>	orzo: timesWord2# might be what you want (but would need testing since there's no docs)
<dumptruckman>	Ah, thanks
<Axman6>	Anyone have a preferred library for parsing HTML and extracting links?
<tomasino>	BTW, there's a bunch of bots rampaging around freenode spamming racist stuff in channels. They may come this way in a bit.
<tomasino>	#vim just got bombarded
*	plutoniix has quit (Quit: Leaving)
*	louispan has quit (Quit: louispan)
*	XorSwap has quit (Quit: Leaving)
*	XorSwap (~XorSwap@kite.riseup.net) has joined
*	rickerbh (~rickerbh@14-203-105-198.static.tpgi.com.au) has joined
*	earthy has quit (Ping timeout: 240 seconds)
<alx741>	tomasino: I think #vim is one out of very few victims
*	earthy (~arthurvl@c34040f1.ftth.concepts.nl) has joined
<tomasino>	hope so! I just don't get why people bother
*	LysergicDreams has quit (Ping timeout: 248 seconds)
*	alx741 has quit (Quit: alx741)
*	alx741 (~alx741@190.152.50.171) has joined
*	Arcaelyx (~Arcaelyx@pool-100-35-184-196.nwrknj.fios.verizon.net) has joined
*	ensyde (~ensyde@2602:306:3b9e:b750:81af:df57:a051:baa3) has joined
<orzo>	Axman6: trying to test your suggestion, but I don't know how to make a literal of Word#.  I tried 1# but ghci says type error and infered Int#
*	alx741 has quit (Client Quit)
*	alx741 (~alx741@190.152.50.171) has joined
*	cyborg-one has quit (Quit: cyborg-one)
*	gehmehgeh has quit (Ping timeout: 268 seconds)
*	eklavya (~eklavya@2405:205:1480:e9a9:7539:f7db:879c:6b53) has joined
<geekosaur>	I don't think there is such a thing? at that level it's the operations that know whether something is a Word or an Int
<geekosaur>	not the types, because Int# is a hardware word and the hardware doesn't have types
*	joebetz (~Joseph_Be@c-73-176-149-193.hsd1.il.comcast.net) has joined
*	dsantiago has quit (Quit: Computer has gone to sleep.)
*	steeze has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
<monochrom>	Dear friends, is there one extension that implies both RankNTypes and ExistentialQuantification?
<dumptruckman>	the same bots were spamming on other networks a while back too
*	pera has quit (Quit: leaving)
<MarcelineVQ>	monochrom: ^^;  just -fglasgow-exts afaik
<MarcelineVQ>	which isn't an extension of course, but just in case it matters
<monochrom>	Ah excellent, PolymorphicComponents is deprecated and is aliased to RankNTypes.
*	alveric3 has quit (Ping timeout: 260 seconds)
<crucify_me>	thanks all .. happy to report I understand this now:   gg f a c = f a  
*	safe (~safe@unaffiliated/safe) has joined
*	alveric3 (~LordAlver@i577B9F35.versanet.de) has joined
<iqubic>	How does that work?
*	geekosaur has quit (Excess Flood)
<monochrom>	I'm going to write out both RankNTypes and ExistentialQuantification. -fglasgow-exts is too much a sledgehammer.
<MarcelineVQ>	it surely is
<monochrom>	Don't worry! So far I'm only using five: RankNTypes, ExistentialQuantification, DataKinds, KindSignatures, TypeFamilies
<orzo>	timesWord2# seems to be it.
*	geekosaur (allbery@dreamshell.ttuttle.net) has joined
*	texasmynsted_ has quit (Quit: ZNC - http://znc.in)
*	texasmynsted (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has joined
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Thu Sep  7 19:45:21 2017

**** BEGIN LOGGING AT Fri Sep  8 10:51:25 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	louispan (~textual@14-203-219-236.static.tpgi.com.au) has joined
Python interface unloaded
**** ENDING LOGGING AT Fri Sep  8 10:52:29 2017

**** BEGIN LOGGING AT Fri Sep  8 19:55:26 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	ericsagnes has quit (Ping timeout: 260 seconds)
*	soLucien has quit (Ping timeout: 240 seconds)
Python interface unloaded
**** ENDING LOGGING AT Fri Sep  8 19:59:07 2017

**** BEGIN LOGGING AT Sat Sep  9 10:57:18 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	Myrl-saki (~myrl@unaffiliated/myrl) has joined
<Rembane>	I want to create somekind of storage data type in memory where I can lookup records in different ways, by for instance on their title or uuid, and I want to be able to update the records and let the changes update everywhere. Can you give me some directions?
<Welkin>	Rembane: Acid state?
<Welkin>	https://hackage.haskell.org/package/acid-state
*	codrinb has quit (Ping timeout: 248 seconds)
*	fancyremarker has quit ()
<Rembane>	Welkin: Thank you, I'll look into it.
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	coot___________ (~coot@188.146.166.152.nat.umts.dynamic.t-mobile.pl) has joined
*	ianandrich has quit (Ping timeout: 252 seconds)
*	tromp has quit (Remote host closed the connection)
*	codrinb (~codrinb@94.177.40.42) has joined
*	plakband (~jmc@541A357D.cm-5-3a.dynamic.ziggo.nl) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
*	Maqs1 (~Maqs@185.103.96.135) has joined
*	OnkelTem has quit (Ping timeout: 248 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	BartAdv has quit (Quit: Connection closed for inactivity)
*	conal (~conal@185.145.156.43) has joined
*	BirchSoft (~BirchSoft@2a02:908:d72:1320:3210:b3ff:fee9:33b4) has joined
<erisco>	Could not deduce: (rmap :$ (rmap :$ r1)) ~ (rmap :$ (rmap :$ r1))
<erisco>	now this is reminding me of Idris
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
<c_wraith>	erisco: you're probably being bitten by non-injectivity somewhere
<erisco>	but that particular complaint looks absurd
*	pera has quit (Ping timeout: 260 seconds)
*	conal has quit (Ping timeout: 248 seconds)
<c_wraith>	I've managed to get messages about not being able to convert forall a. a -> a to forall b. b -> b
*	conal (~conal@23.226.128.35) has joined
<c_wraith>	But that requires enabling -XImpredicativeTypes, and they're known to be broken...
*	codrinb has quit (Ping timeout: 260 seconds)
*	safe (~safe@unaffiliated/safe) has joined
<erisco>	I don't know how to clearly explain what I am trying to do
<erisco>	that is probably the first reason I can't solve it
*	soniku has quit (Ping timeout: 252 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sat Sep  9 11:24:04 2017

**** BEGIN LOGGING AT Sat Sep  9 11:38:53 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<erisco>	I can have  F b a -> a -> b  which would be for <*> but I don't see this happening generally
<crucify_me>	<< see moniker
*	codrinb (~codrinb@94.177.40.42) has joined
**** BEGIN LOGGING AT Sat Sep  9 12:14:20 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:12 2017)
*	Channel #haskell url: http://www.haskell.org/
*	trigone (c2d63e8a@gateway/web/freenode/ip.194.214.62.138) has joined
Python interface unloaded
**** ENDING LOGGING AT Sat Sep  9 12:15:37 2017

**** BEGIN LOGGING AT Sat Sep  9 12:15:48 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<trigone>	hi! say i have two IO handles for two files. i truncated file B and i'd like to copy the end of file A (from the current position onwards) right at the end of file B. what's the easiest and fastest method?
<trigone>	(binary files, if it makes a difference)
*	conal has quit (Quit: Computer has gone to sleep.)
*	conal (~conal@client-7-151.visitor-network.oxuni.org.uk) has joined
*	soLucien has quit (Ping timeout: 240 seconds)
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sat Sep  9 12:17:23 2017

**** BEGIN LOGGING AT Sat Sep  9 12:17:36 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:12 2017)
*	Channel #haskell url: http://www.haskell.org/
<dmwit>	hGetContents hA >>= hPutStr hB
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sat Sep  9 12:17:40 2017

**** BEGIN LOGGING AT Mon Sep 11 11:18:07 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:46:51 2017)
*	Channel #haskell url: http://www.haskell.org/
*	Infinisil (~infinisil@178.197.225.52) has joined
<StrangeLoop>	Hi. So I wrote a small program for simulating a riffle shuffle. It works but I feel its kinda clunky. Would it be terribly imposing to paste it and ask you to have a look and tell me what you'd have done differently? I really don't feel that I applied the basic Haskell toolbox properly
*	codrinb has quit (Ping timeout: 260 seconds)
<jle`>	StrangeLoop: just paste it and the people who care would read it
<jle`>	and if they don't, they won't :)
<jle`>	it's not too much noise and it's not like you're forcing everyone to help you :)
<jle`>	a lto of poeple here would be happy to
<hc>	So basically I'll use "addFinalizer" from the System.Mem.Weak package?
<hc>	That sounds easy enough :)
*	purplelambda has quit (Remote host closed the connection)
<StrangeLoop>	OK, so here it is. I am especially displeased with the way I incorporated randomness: http://lpaste.net/7901426131583107072
*	Infinisi1 has quit (Ping timeout: 240 seconds)
<jle`>	handling randomness there looks fine to me, as a simple way to start off
<monochrom>	hc: But how do you obtain the ThreadId?
<jle`>	StrangeLoop: be aware that the convention is to have functions that regurn (g -> (a, g))'s
<jle`>	s/the/a
<jle`>	so taking your 'g' as the last argument is a common convention when working with seeds/state like that
<hc>	monochrom: forkIO
<ski>	StrangeLoop : the type ascriptions in `values' and `suits' are redundant
*	freeman42x[m] (~freeman42@5.149.170.122) has joined
<jle`>	StrangeLoop: it's that way because there are a lot of higher-order functions and combinators that can take advantage of that particular argument order
<hc>	The purpose of the thread is to close idle network connections.. It's a connection pool I'm managing
<jle`>	and so it makes it a bit more convenient to use it with those hof's/combinators
<monochrom>	Oh, you are the author of newSession and you can do this in its code.
<hc>	precisely
*	XorSwap has quit (Ping timeout: 246 seconds)
*	twanvl (~twanvl@92.110.121.28) has joined
<ski>	(the brackets around `RandomGen g' are also redundant)
<monochrom>	OK yeah I didn't know that.
*	gawen (~gawen@movzbl.root.sx) has joined
<hc>	I should have mentioned that.. sorry
<jle`>	StrangeLoop: you don't use any of such combinators at this moment so it's not too bad either way; just letting you know in case you do one day decide to take advantage of them
<[exa]>	StrangeLoop: you might want to have data Card = Card Suit Deck explicitly (it looks nicer)
<[exa]>	StrangeLoop: also, for capturing randomness there's a nice tutorial somewhere that teaches you to write a StateM-like monad, so that you don't have to pass the 'g' around yourself
*	freeman42y[m] has quit (Ping timeout: 248 seconds)
*	conal has quit (Quit: Computer has gone to sleep.)
*	codrinb (~codrinb@94.177.40.42) has joined
*	gxt (~gxt@2a02:908:a30:e5a0:1459:bf5:763:25a7) has joined
<StrangeLoop>	passing that g around was a real hassle, and made the code considerably more clumsy
<StrangeLoop>	So if that's avoidable I'm all ears :)
<[exa]>	StrangeLoop: (in fact the code almost looks like if you just inlined the StateM into that :] ) Lemme find the tutorial
*	pond (~pondpremt@dhcp-18-111-55-159.dyn.mit.edu) has joined
<StrangeLoop>	Other than that you'd say that code is fine, for a first program?
*	purplelambda (~purplelam@c83-251-30-225.bredband.comhem.se) has joined
<StrangeLoop>	I'm trying to evaluate myself here :P
<jle`>	passing g this way is fine for a simple start and it wouldn't be too bad to see it in production code
<jle`>	the main issue is that you might accidentally pass in the wrong 'g'
<ski>	possibly better to get in the habit of using `newStdGen' rather than `getStdGen', if you're going to use `StdGen'
<jle`>	and the type system wouldn't check this
<[exa]>	StrangeLoop: this is probably good: https://en.wikibooks.org/wiki/Haskell/Understanding_monads/State#Introducing_State
<jle`>	*wouldn't catch this
<[exa]>	StrangeLoop: are you new into monads?
<StrangeLoop>	I read LYAH about a a year and a half ago and made some toy programs, and then I forgot all about it, and now I'm repeating
<jle`>	State is a nice abstraction for this because (1) it handles passing g's properly so you can't accidentally mess up and pass the wrong one or re-use them and (2) it allows you to use the many useful combinators in the Control.Monad module
*	newbie57 has quit (Ping timeout: 248 seconds)
<[exa]>	yes
<jle`>	like replicateM :: Int -> Rand g a -> Rand g [a]
<jle`>	for taking something that samples once and turning it into something that samples 'n' times
<StrangeLoop>	Oh I need that
<jle`>	but at this point the complexity is low enough that you won't gain too much
<jle`>	it's when you build more complex code that this would become useful
*	peterbecich has quit (Ping timeout: 260 seconds)
<StrangeLoop>	I think what I like about Haskell is how clean the code is and all this g juggling doesn't feel clean
*	cdg (~cdg@2600:1700:3120:40e0:f07b:aa19:e259:95d3) has joined
<ski>	that's what the `State' monad was invented for
<StrangeLoop>	I'm all for the aesthetics :D
*	codrinb has quit (Ping timeout: 240 seconds)
<StrangeLoop>	ski: "possibly better to get in the habit of using `newStdGen' rather than `getStdGen', if you're going to use `StdGen'" Could you elaborate a bit?
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
<[exa]>	if it looks like a program could generate it just right (which it looks like), it's best to generate it by program right.
*	HarveyPwca has quit (Ping timeout: 240 seconds)
*	crobbins_ has quit (Remote host closed the connection)
*	ccomb has quit (Ping timeout: 240 seconds)
*	HarveyPwca (~HarveyPwc@ip-64-134-197-81.public.wayport.net) has joined
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
<ski>	StrangeLoop : "What the hell are monads?" by Noel Winstanley in 1999-02-17 at <http://www-users.mat.uni.torun.pl/~fly/materialy/fp/haskell-doc/Monads.html> (one of the first monad tutorials) might perhaps be interesting to take a glance at, even considering it's a bit dated (names of some operations are now different)
*	unK_ (~drunK@78.10.133.54) has joined
<StrangeLoop>	Does it have any advantage over "Understanding Monads" from the Wiki?
<ski>	StrangeLoop : `getStdGen' just grabs the global `StdGen' residing in `IO'. if you do it twice, you get the same PRNG state. `newStdGen' calls `split' to split it, so that you get a new one each time
*	pfurla (~textual@38.86.167.91) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
<monochrom>	I still have the much procratinated secret project of translating Wadler's monad tutorial to today's notation.
<ski>	well, it's short and to the (pragmatic) point
*	robotroll has quit (Remote host closed the connection)
<maerwald>	Maybe is a poor way to model failure :>
<monochrom>	Then again since AMP it is no longer a straight translation either.
<maerwald>	so the tutorial starts alread weird
<ski>	not getting lost in analogies about whether to liken monads to spacesuits or burritos
*	royal_screwup21 (5c622177@gateway/web/cgi-irc/kiwiirc.com/ip.92.98.33.119) has joined
*	conal (~conal@104.255.240.10) has joined
*	crobbins_ (~crobbins@2600:1700:6391:1c20::48) has joined
*	soniku has quit (Ping timeout: 246 seconds)
*	pgiarrusso_ (~pgiarruss@5.92.77.76) has joined
<ski>	(not intending to insinuate that the wiki one does that. but a lot of the tutorials found in the wild seem to be preoocupied with such matters, to the detriment of practicalities)
<maerwald>	I find it funny
*	cfricke (~cfricke@unaffiliated/cfricke) has joined
<maerwald>	haskell and monads have been there for so long and there is still widespread confusion about how to explain them :>
*	pgiarrusso has quit (Ping timeout: 260 seconds)
*	codrinb has quit (Ping timeout: 260 seconds)
*	gxt has quit (Ping timeout: 246 seconds)
*	pyon (~pyon@unaffiliated/pyon) has joined
*	freeman42y[m] (~freeman42@83.136.43.150) has joined
<royal_screwup21>	https://thepasteb.in/p/98hRE36WRMyIk super noob question, but why isn't this valid in haskell?
<ski>	@type getStdRandom  -- there's also this one
<lambdabot>	(StdGen -> (a, StdGen)) -> IO a
<ski>	@type getStdRandom . runState
<lambdabot>	State StdGen a -> IO a
*	jdnavarro (~danny@200.111.121.146) has joined
<monochrom>	It is valid in Haskell.
<mnoonan>	royal_screwup21, it is (afaict), but  in "x=x+1", the LHS x is the same as the RHS x. in other words, you wrote a recursive definition.
*	HarveyPwca has quit (Ping timeout: 252 seconds)
<monochrom>	Or rather, it is valid Haskell.
<ski>	`x' is defined to be `x' plus one
*	Infinisi1 (~infinisil@xdsl-31-165-62-80.adslplus.ch) has joined
<ski>	this local variable `x' shadows the parameter `x'. the local variable `x' is the one that's used in `x+y'
*	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined
*	mek42 (~quassel@2604:6000:1418:c11c:75e6:4b83:d07c:d9db) has joined
<monochrom>	In general next time you need to say something more specific than "valid" or "works".
*	freeman42x[m] has quit (Ping timeout: 248 seconds)
<ski>	(and similarly for `y')
<royal_screwup21>	thanks guys! And yeah, I should have rephrased my question :)
*	sphinxo (~sphinxo@213.86.221.35) has joined
<monochrom>	Because as a programmer, even you know how end-users are unhelpful when they just say "your software doesn't work" without saying what they tried and what they observed.
*	codrinb (~codrinb@94.177.40.42) has joined
*	Enigmagic (~enigmo@unaffiliated/enigmagic) has joined
*	ski idly considers the case when implementors coincide with end-users
<monochrom>	Programmers should be the ones most sensitive to this. Because they suffer it from end-users all the time.
*	osa1 has quit (Ping timeout: 260 seconds)
<monochrom>	And yet programmers are also the worst offenders of this.
*	JeanCarloMachado has quit (Ping timeout: 252 seconds)
*	HarveyPwca (~HarveyPwc@ip-64-134-197-81.public.wayport.net) has joined
<monochrom>	Is this some kind of revenge psychology?
<tomasmu>	:D
*	Unhammer (~Unhammer@gateway/tor-sasl/unhammer) has joined
*	Luke (~luke@unaffiliated/luke) has joined
*	Infinisil has quit (Ping timeout: 240 seconds)
*	taktoa has quit (Remote host closed the connection)
*	ilyaigpetrov (uid120452@gateway/web/irccloud.com/x-wicbjejksawzkqkr) has joined
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
*	unyurysohn is now known as unyu
*	mnoonan has quit (Ping timeout: 260 seconds)
<tomasmu>	i'm trying to use getLine or readLn, and sending it to a function that takes (x:xs)
*	pond has quit (Quit: pond)
<monochrom>	Probably it's getLine.
*	conal has quit (Ping timeout: 252 seconds)
*	jay (~jay@117.209.128.168) has joined
<mauke>	>>=
<tomasmu>	with getLine, i'm getting Couldn't match type ‘Char’ with ‘[Char]’  Expected type: [[Char]]  Actual type: String
*	JuanDaugherty (~jdaughert@98.4.124.117) has joined
*	pyon has quit (Ping timeout: 248 seconds)
<tomasmu>	only four data types involved in the error message :P
*	conal (~conal@23.226.128.37) has joined
<mauke>	three
*	jay is now known as Guest20399
<mauke>	String = [Char]
*	crobbins_ has quit (Ping timeout: 252 seconds)
<tomasmu>	oh :)
*	henriksod (~Thunderbi@89.160.47.146) has joined
*	vjacob has quit (Ping timeout: 240 seconds)
<mauke>	your function expects a list of strings
*	ltielen (~ltielen@d54c2eac9.access.telenet.be) has joined
<mauke>	you're giving it a single string (a list of chars)
*	Guest17608 has quit (Ping timeout: 240 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	djapo (~archie@unaffiliated/djapo) has joined
<tomasmu>	oh, so this is where function definition is useful :)
*	locallycompact has quit (Ping timeout: 240 seconds)
<monochrom>	If you use readLn for this, the input format is going to be a bit strange.
*	aarvar (~foewfoiew@50.34.105.170) has left
<StrangeLoop>	Is there a reason to use "liftA2 foo bar baz" rather than "foo <$> bar <*> baz" like I see a lot of tutorials do?
<monochrom>	There is no reason to reject either one.
<mauke>	liftA2 is nicer if you don't have bar/baz at hand
*	codrinb has quit (Ping timeout: 240 seconds)
<mauke>	like quux = liftA2 foo
*	crownose (~weechat@2a02:8010:6173:0:2ab2:bdff:fe2b:c456) has joined
<StrangeLoop>	Ohhh cool
*	peterbecich (~peterbeci@47.37.164.78) has joined
*	eminhi has quit (Quit: leaving)
*	sellout- (~Adium@c-67-188-42-8.hsd1.ca.comcast.net) has joined
*	jellowj has quit (Ping timeout: 240 seconds)
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
*	vjacob (~vjacob@173.208.58.195) has joined
<tomasmu>	so yeah, i think the function definition was the missing piece of the puzzle
*	pond (~pondpremt@dhcp-18-111-55-159.dyn.mit.edu) has joined
*	jeltsch (~wolfgang@82.131.87.29.cable.starman.ee) has joined
<tomasmu>	thanks mauke for sending me in the right direction :)
*	codrinb (~codrinb@94.177.40.42) has joined
*	Luke has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<tomasmu>	and monochrom for getLine =)
*	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined
*	JeanCarloMachado (~jean@186.222.2.205) has joined
*	samrat has quit (Ping timeout: 240 seconds)
*	perrier-jouet (~perrier-j@gateway/vpn/privateinternetaccess/perrier-jouet) has joined
*	aarvar (~foewfoiew@50.34.105.170) has joined
*	codrinb has quit (Ping timeout: 246 seconds)
*	qwedfg has quit (Ping timeout: 248 seconds)
*	sellout- has quit (Quit: Leaving.)
*	neoncont_ (~neoncontr@2001:579:e09c:101:e0d3:f5ca:9046:a40e) has joined
<tomasmu>	and now when i tried to replicate the issue i failed
<tomasmu>	removed the function definition and it still worked
*	neoncontrails has quit (Ping timeout: 255 seconds)
<tomasmu>	so i think the error lied in having : or ++ in the wrong place?
*	anonymouse22929_ (51938b0e@gateway/web/freenode/ip.81.147.139.14) has joined
*	anonymouse22929 has quit (Ping timeout: 260 seconds)
*	zzq has quit (Ping timeout: 246 seconds)
<tomasmu>	i have no idea, but this is confusing
*	codrinb (~codrinb@94.177.40.42) has joined
*	Guest20399 has quit (Ping timeout: 246 seconds)
*	BartAdv (uid90451@gateway/web/irccloud.com/x-arhqxrtgtcfycbaf) has joined
*	dxld has quit (Ping timeout: 252 seconds)
*	dxld (~dxld@2002:506d:9110:0:be5f:f4ff:fe9b:ef7c) has joined
*	mkali has quit (Quit: mkali)
*	cdg has quit (Remote host closed the connection)
<tomasmu>	i've been doing too much powershell lately, which is implicit and dynamic typed, so everything "just works" :)
*	anonymouse22929_ has quit (Ping timeout: 260 seconds)
*	cdg (~cdg@2600:1700:3120:40e0:f07b:aa19:e259:95d3) has joined
*	codrinb has quit (Ping timeout: 255 seconds)
<jakub>	can I somehow mark an orphan instance so that compiler does not complain?
*	mnoonan (~mnoonan@98.159.213.242) has joined
*	zzq (~zzq@37.26.147.186) has joined
*	neoncontrails (~neoncontr@2001:579:e09c:101:f8e6:27b8:e561:b378) has joined
*	cronokirby (bc3dc504@gateway/web/cgi-irc/kiwiirc.com/ip.188.61.197.4) has joined
*	oish has quit (Ping timeout: 260 seconds)
*	neoncont_ has quit (Ping timeout: 246 seconds)
*	tremon (~aschuring@53541C2B.cm-6-5a.dynamic.ziggo.nl) has joined
*	Saukk has quit (Quit: Leaving)
*	StoneToad has quit (Ping timeout: 248 seconds)
*	cdg has quit (Ping timeout: 246 seconds)
*	JuanDaugherty (~jdaughert@98.4.124.117) has left ("Exeunt")
*	noddy (~self@82.193.222.101) has joined
*	crobbins_ (~crobbins@2600:1700:6391:1c20::48) has joined
*	cronokirby (bc3dc504@gateway/web/cgi-irc/kiwiirc.com/ip.188.61.197.4) has left
*	oish (~charlie@159.22.169.217.in-addr.arpa) has joined
*	StoneToad (~StoneToad@ppp-199-167-119-216.storm.ca) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
<byorgey>	jakub: there is no way to mark a particular instance (see https://ghc.haskell.org/trac/ghc/ticket/602) .  However, you can ignore orphan instance warnings in an entire module with {-# OPTIONS_GHC -fno-warn-orphans #-} .
<jakub>	byorgey: thanks
*	tnecniv (~textual@unaffiliated/jimihendrix) has joined
*	exarkun has quit (Read error: Connection reset by peer)
*	bigos has quit (Ping timeout: 246 seconds)
*	rootmos has quit (Remote host closed the connection)
*	cdg (~cdg@2600:1700:3120:40e0:f07b:aa19:e259:95d3) has joined
*	crobbins_ has quit (Ping timeout: 246 seconds)
*	neoncontrails has quit (Ping timeout: 246 seconds)
*	keep_learning has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	danilo_ (~danilo@static-186-121-242-83.acelerate.net) has joined
*	danilo_ has quit (Read error: Connection reset by peer)
*	freeman42x[m] (~freeman42@2a02:8084:e82:4880:f0d4:40b2:5721:7653) has joined
*	keep_learning (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has joined
*	theelous3 (~theelous3@unaffiliated/theelous3) has joined
*	jellowj (~yellow-ja@dee52.neoplus.adsl.tpnet.pl) has joined
*	rnhmjoj[m] (rnhmjojmax@gateway/shell/matrix.org/x-cyozcfclimezddep) has left ("User left")
*	neoncontrails (~neoncontr@2001:579:e09c:101:4821:9299:4a5f:bff5) has joined
*	toblorone has quit (Remote host closed the connection)
*	caumeslasal has quit (Ping timeout: 248 seconds)
*	freeman42y[m] has quit (Ping timeout: 260 seconds)
*	exarkun (~exarkun@vtelinet-66-220-238-250.vermontel.net) has joined
*	Immune has quit (Read error: Connection reset by peer)
*	steeze has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
*	Immune (~Immune@47.145.46.247) has joined
*	neoncont_ (~neoncontr@2001:579:e09c:101:10c9:8e11:3a3e:4aca) has joined
*	neoncont_ has quit (Remote host closed the connection)
*	neoncontrails has quit (Ping timeout: 246 seconds)
*	Luke (~luke@unaffiliated/luke) has joined
*	whoisxy (~whoisxy@83.137.254.176) has joined
*	brandly has quit (Remote host closed the connection)
*	eklavya has quit (Remote host closed the connection)
*	hackagebot has quit (Read error: error:1408F119:SSL routines:SSL3_GET_RECORD:decryption failed or bad record mac)
*	hackagebot (~hackagebo@2a00:dcc0:eda:88:245:71:269a:892d) has joined
*	steeze (~steeze@63.76.231.82) has joined
*	augur has quit (Remote host closed the connection)
*	cdg has quit (Remote host closed the connection)
*	Unhammer has quit (Remote host closed the connection)
*	joncfoo has quit (Ping timeout: 240 seconds)
*	romanzolotarev[m (romanzolot@gateway/shell/matrix.org/x-fmfiodwwwydvimvq) has joined
*	dsh has quit (Read error: Connection reset by peer)
*	Unhammer (~Unhammer@gateway/tor-sasl/unhammer) has joined
*	henriksod has quit (Ping timeout: 260 seconds)
*	mohsen_ has quit (Quit: WeeChat 1.9)
*	henriksod (~Thunderbi@89.160.47.146) has joined
*	plutoniix has quit (Ping timeout: 240 seconds)
*	plutoniix (~q@node-nke.pool-101-108.dynamic.totbb.net) has joined
*	sellout- (~Adium@c-67-188-42-8.hsd1.ca.comcast.net) has joined
*	conal has quit (Ping timeout: 240 seconds)
*	coot___________ (~coot@188.146.166.152.nat.umts.dynamic.t-mobile.pl) has joined
*	odites (~odites@95.141.37.164) has joined
*	cyborg-one (~cyborg-on@188-115-190-24.broadband.tenet.odessa.ua) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
*	MP2E (~cray@ip68-224-146-82.lv.lv.cox.net) has joined
*	cpup- (~cpup@32.218.115.128) has joined
*	cfricke has quit (Quit: WeeChat 1.9)
*	Guest58799 is now known as baweaver
*	baweaver has quit (Changing host)
*	baweaver (~baweaver@ruby/staff/baweaver) has joined
*	cpup has quit (Ping timeout: 260 seconds)
*	joncfoo (~jonathan@c-67-176-93-55.hsd1.co.comcast.net) has joined
*	danthemyth has quit (Remote host closed the connection)
*	XorSwap (~XorSwap@wnpgmb016qw-ds01-58-40.dynamic.bellmts.net) has joined
*	afarmer has quit (Ping timeout: 252 seconds)
*	cpup (~cpup@32.218.115.128) has joined
*	conal (~conal@23.226.128.37) has joined
*	biglama has quit (Quit: Lost terminal)
*	schoppenhauer has quit (Ping timeout: 248 seconds)
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	CoderPuppy has quit (Ping timeout: 260 seconds)
*	keep_learning has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	amarp (~amarpotgh@p57967E46.dip0.t-ipconnect.de) has joined
*	keep_learning (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	toblorone (~toblorone@162.246.216.28) has joined
*	qwedfg (~adam@aare146.neoplus.adsl.tpnet.pl) has joined
*	aarvar1 (~foewfoiew@50.34.105.170) has joined
<royal_screwup21>	have a statement within a guard like so: "otherwise = n:(replicate' (n-1) x)". What's the difference between that and "otherwise = n:(replicate' n-1 x)". Doing the latter returned an error https://thepasteb.in/p/oYhl3qR9566tZ  (the function is replicate' n x)
<monochrom>	precedence.
<royal_screwup21>	I guess the more general question is: when should you put parantheses?
<monochrom>	Clearly, "sin x - 1" does not mean "sin (x - 1)".
*	mson has quit (Quit: Connection closed for inactivity)
<royal_screwup21>	ah okay
<monochrom>	Be aware of all operator precedence.
*	aarvar has quit (Ping timeout: 240 seconds)
<royal_screwup21>	thanks monochrom
*	amarp has quit (Ping timeout: 248 seconds)
<StrangeLoop>	Ok. So I'm trying this monadic random thing. The thing is, that it uses mkStdGen. If I want the execution to be random every time I need to use newStdGen, but it is an IO, so either I make everything IO, or I pass a seed around, which kinda contradicts using a state monad to avoid passing the generator around, am I missing something?
*	codrinb has quit (Ping timeout: 240 seconds)
*	aarvar1 is now known as aarvar
*	amarp (~amarpotgh@p57967E46.dip0.t-ipconnect.de) has joined
<Psybur>	In the case of using (++), its better to use foldr than foldl?
<Psybur>	So that you dont iterate over the accumulation each step?
*	pond has quit (Quit: pond)
*	umib0zu (~umib0zu@216.57.91.6) has left
*	sellout- has quit (Quit: Leaving.)
*	keep_learning has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	toblorone has quit (Ping timeout: 240 seconds)
*	takle has quit (Remote host closed the connection)
<maerwald>	Psybur: foldl' maybe
*	keep_learning (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has joined
<maerwald>	or was that (+)
<maerwald>	I'm too drunk to remember
<maerwald>	https://wiki.haskell.org/Foldr_Foldl_Foldl%27
<lyxia>	StrangeLoop: how does passing a seed around contradict using a state monad
*	schoppenhauer (~schoppenh@unaffiliated/schoppenhauer) has joined
*	takle (~takle@88.211.111.206) has joined
<StrangeLoop>	lyxia: I thought the entire point of the state monad is to avoid passing the random generator around. What is the benefit if I still have to pass the seed around?
<Psybur>	So that we get ("dude" ++ ("bro" ++ "sweet")) instead of (("dude" ++ "bro") ++ ("sweet")). The former there will be iteration over "bro" and then "dude" whereas the latter there will be iteration over "dude" and then "dudebro" ?
*	qwedfg has quit (Ping timeout: 248 seconds)
<Psybur>	Since a ++ b means iterate over a until we get to the end then put and the end?
*	codrinb (~codrinb@94.177.40.42) has joined
*	toblorone (~toblorone@162.246.216.28) has joined
<maerwald>	see the conclusion in the wiki article
<Psybur>	*  Since a ++ b means iterate over a until we get to the end then put b at the end
<maerwald>	foldl' has different strictness properties than foldl
<maerwald>	depends on what you are doing
*	quobo has quit (Quit: Connection closed for inactivity)
<lyxia>	StrangeLoop: the point is to not have to pass the generator *explicitly* because it is a source of bugs. You still have to say where the seed comes from.
*	glguy has quit (Ping timeout: 255 seconds)
*	Youmu has quit (Quit: Connection closed for inactivity)
<barrucadu>	StrangeLoop: If all your things are in 'State g' for some random generator 'g', then you create the generator once when you call 'runState'.
*	takle has quit (Ping timeout: 240 seconds)
*	curtis (uid251740@gateway/web/irccloud.com/x-gxwnbzbcmsehlbwf) has joined
<dsal>	@pl (\x -> x * x < n)
<lambdabot>	(< n) . join (*)
*	codrinb has quit (Ping timeout: 240 seconds)
<jared-w>	dsal: why do I get the feeling you're obsessed by point free notation? :p
*	toblorone has quit (Ping timeout: 248 seconds)
<StrangeLoop>	I'm trying to implement a function which takes a list and splits it in a random location, how would you achieve this?
<dsal>	heh.  I'm just looking to see if there's a nice way to do a thing.  I don't like a lot of these, but sometimes I miss something obvious.
*	pavonia has quit (Read error: Connection reset by peer)
*	pavonia (~user@unaffiliated/siracusa) has joined
*	oisdk (~textual@83.136.43.150) has joined
*	curtis is now known as cgag_
*	glguy (~glguy@haskell/developer/glguy) has joined
<jle`>	StrangeLoop: how do you want the splits to be distributed?
<monochrom>	Not obsessed. Just a beginner and getting a feel of what looks good and what looks bad and what it looks like at all.
<StrangeLoop>	jle`: say uniformly
<barrucadu>	Well, I probably wouldn't.  But if I did want such a function I'd use something like :: RandomGen g => [a] -> g -> ([a], g)
<jle`>	StrangeLoop: uniformly in proportion?
<jle`>	lists are kind of a weird data structure for this
<jle`>	but you could do it by picking a random number from 0 to the length, and then splitting at that spot using 'splitAt'
*	anton__ has quit (Quit: Lost terminal)
<jle`>	a better data structure for this sort of operation would be vector/array
*	bmeynell_ (~bmeynell@142-197-108-175.res.bhn.net) has joined
*	ystael has quit (Ping timeout: 248 seconds)
<StrangeLoop>	I want to do splitAt r a where r is chosen uniformly at random from (1..length a)
<jle`>	exactly
*	Flechette (~Sundancer@unaffiliated/sundancertp) has joined
<jle`>	lists are actually really good for splitting according to the geometric distribution
<monochrom>	That doesn't sound very much like riffling, but meh.
*	urodna_ (~urodna@unaffiliated/urodna) has joined
<barrucadu>	splitRandomly [] g = ([], [], g); splitRandomly xs g = let (i, g') = randomR (0, length xs - 1); (before, after) = splitAt i xs in (before, after, g') -- something like that, perhaps?
*	ventonegro has quit (Ping timeout: 246 seconds)
*	sdx23 (~sdx23@unaffiliated/sdx23) has joined
<jle`>	riffling follows the geometric distribution very well so there's that
<barrucadu>	Whoops, pass 'g' to 'randomR' there
*	inhortte has quit (Quit: Leaving.)
*	sa1_ (sid7690@gateway/web/irccloud.com/x-gscrbqbqxkdwyeqf) has joined
*	nbouscal_ (sid60097@gateway/web/irccloud.com/x-htluaqhahaajnqeh) has joined
*	thoradam_ (sid154141@gateway/web/irccloud.com/x-qrlchqsqycsjrenf) has joined
*	mystfox_ (sid36625@gateway/web/irccloud.com/x-qahywlzbcyjdxqro) has joined
*	monad_cat_ (sid157798@gateway/web/irccloud.com/x-gcbtrvlanmgsppqi) has joined
*	gornikm_ (sid133224@gateway/web/irccloud.com/x-ozivblsjfwuhqaph) has joined
*	dgonyeo_ (sid148958@csh/dgonyeo) has joined
*	wavewave_ (sid213670@gateway/web/irccloud.com/x-pdoycuhqwetfqwjg) has joined
*	spinda_ (sid139604@gateway/web/irccloud.com/x-ngtsabiyfdgxbrdy) has joined
*	worch has quit (Ping timeout: 240 seconds)
*	noobst_ (sid201439@gateway/web/irccloud.com/x-uvelbnjpudlfqugb) has joined
*	ryantm_ (uid53768@gateway/web/irccloud.com/x-jkbzlmdoohjcotes) has joined
*	solidsnack_ (sid135249@pdpc/supporter/active/solidsnack) has joined
<monochrom>	My riffling is first splitting at a normally distributed point with the middle as the mean and a very small variance. And then the real random fun begins, the interleaving is randomized.
*	feltnerm_ (sid197554@gateway/web/irccloud.com/x-bawtcxfdnbrcqdjr) has joined
*	bgyss_ (sid11244@gateway/web/irccloud.com/x-bhquvhmrkujwskwb) has joined
*	unyu has quit (Ping timeout: 260 seconds)
*	oldsk00l has quit (Ping timeout: 260 seconds)
<StrangeLoop>	When you say geometric distribution you mean that I should think of the splitting point as the first point where I tossed a tail?
*	jamiecook__ (uid37575@gateway/web/irccloud.com/x-fvxghzvszhzidzpg) has joined
<monochrom>	At least that's how I do it by hand.
*	mkurkov__ (sid23448@gateway/web/irccloud.com/x-telrpxevbtjwiqnj) has joined
*	rotaerk has quit (Ping timeout: 252 seconds)
*	mpickering_ (sid78412@gateway/web/irccloud.com/x-zpuxrooagvkfeoni) has joined
*	zmanian_______ (sid113594@gateway/web/irccloud.com/x-roncdvgyqtxwmhgz) has joined
*	lumimies_ (sid18496@gateway/web/irccloud.com/x-njqxgxdggvuohpvd) has joined
<jle`>	StrangeLoop: yes that's one method to produce a split following the geometric distribution
*	billstclair_ (sid77830@gateway/web/irccloud.com/x-vpghwuixikofdjyl) has joined
*	jml_ (sid162989@gateway/web/irccloud.com/x-mgzfgwptyuiaxpzq) has joined
<jle`>	and lists are a particularly good data structure for this
*	lopex_ (uid4272@gateway/web/irccloud.com/x-wdoigvfzdciquael) has joined
*	adelbertc_ (sid26183@gateway/web/irccloud.com/x-obwpumwkvshlehbv) has joined
<jle`>	like amazingly good
*	freeman42y[m] (~freeman42@83.136.43.77) has joined
*	ocharles_ (sid30093@musicbrainz/user/ocharles) has joined
*	Xorlev_ (sid226@gateway/web/irccloud.com/x-wawdbxfcvqxuuvgi) has joined
*	sclv_ (sid39734@haskell/developer/sclv) has joined
<jle`>	(they are a bad data structure for uniform random splits)
*	OliPicard_ (sid88086@gateway/web/irccloud.com/x-flzhhbzaawltzcyl) has joined
*	PotatoGim_ (sid99505@gateway/web/irccloud.com/x-qdorgnovdfspbtsx) has joined
*	jadrian_ (~jadrian@2001:8a0:f039:a101:eab0:47e4:8e5d:b8c6) has joined
<ltielen>	:q
*	ltielen has quit (Quit: WeeChat 1.9)
<monochrom>	That's neat, jle`
*	`Guest00100 (~user@37.113.180.54) has joined
*	bjobjo_ (~bjobjo@117.51-174-197.customer.lyse.net) has joined
*	Neo__ (~neo@opennic/Neo) has joined
*	xnyhps_ (~xnyhps@2a02:2770:3:0:216:3eff:fe67:3288) has joined
<StrangeLoop>	Anyway, I don't see why choosing the splitting point geometrically is a good model for cutting a deck. I would guess normal distribution around the middle.
*	atomi_ (~atomi@71-83-179-177.dhcp.lnbh.ca.charter.com) has joined
*	idupree2 (~quassel@2604:a880:400:d0::9bb:2001) has joined
*	TRMander1on (~s4315893@2407:2e00:602:306:21ad:f401:ef31:9800) has joined
*	angular_mike___ (sid45533@gateway/web/irccloud.com/x-sjbymsbxnhfporqg) has joined
*	aweinsto1k (~aweinstoc@cpe-67-248-70-212.nycap.res.rr.com) has joined
*	Ferdiran1 (~max@xolus.net) has joined
*	chelfi3 (~chelfi@2001:41d0:8:167f::1) has joined
*	kubrat_ (~val@mail.bogda.co.uk) has joined
*	oldsk00l (~znc@ec2-52-57-49-181.eu-central-1.compute.amazonaws.com) has joined
<jle`>	StrangeLoop: it's good for riffling two halves back together
*	lexi-lambda_ (sid92601@gateway/web/irccloud.com/x-mtbqxuvfhoopkxlp) has joined
<jle`>	you iterate adding between one stack and the other to a final combined stack
*	sivs (~quassel@lurga.iskrembilen.com) has joined
*	unidan (~quassel@2001:41d0:a:21b8::1) has joined
*	lizzie_ (~quassel@2604:a880:1:20::119c:3001) has joined
*	Bigcheese_ (~quassel@unaffiliated/bigcheese) has joined
*	intelux_ (~intelux@2604:180:2:59c::5b32) has joined
<jle`>	and the number of items you pull from either half every time follows the geometric distribution
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<jle`>	ie, you pick from a random half every time
*	xkapastel_ (uid17782@gateway/web/irccloud.com/x-ymqjkjjljonhhpmm) has joined
*	crobbins_ (~crobbins@2600:1700:6391:1c20::48) has joined
*	tjbp_ (~tom@tjbp.net) has joined
*	lexi-lambda has quit (Disconnected by services)
*	lexi-lambda_ is now known as lexi-lambda
*	freeman42x[m] has quit (Ping timeout: 252 seconds)
*	cranej (~cranej@42.120.74.202) has joined
*	catsup_ (d@ps38852.dreamhost.com) has joined
<StrangeLoop>	jle`: I recently read that empirical data showed that a random coinflip merge is a very good model of how non professional players riffle
<dsal>	Is there a thing that does @pl without having to spam the channel?  :)
*	hexfive has quit (Quit: WeeChat 1.9)
<jle`>	StrangeLoop: indeed :)
<jle`>	huh that's nice to see that there's actual data
*	JeanCarloMachado has quit (Ping timeout: 246 seconds)
<jle`>	dsal: you can pm lambdabot
*	grayhatt3r (~grayhatte@epicwalnutcreek.com) has joined
<jle`>	using /query lambdabot
*	rembo10_ (~rembo10@2a01:4f8:c17:5b49::2) has joined
*	scav_ (~scav@devbugger.com) has joined
*	sdhandsucks (~sam@2001:41c8:51:10d::) has joined
*	GreySunshine_ (~vasanth@2400:8901::f03c:91ff:fe28:26e8) has joined
<dsal>	Oh cool.  Seems obvious.
*	nek0- (~nek0@watch.chelnok.de) has joined
*	hydraz_ (hydraz@coleridge.vehk.de) has joined
*	ystael (~ystael@209.6.50.55) has joined
<jle`>	not obvious!
*	bjs_ (~bjs@lfdfq.com) has joined
*	SexHendrix (NextHendri@2a01:7e00::f03c:91ff:fee0:e785) has joined
*	sanitypassing (~sanitypas@unaffiliated/sanitypassing) has joined
<jle`>	:)
*	cschneid_ (cschneid@2600:3c00::f03c:91ff:fe73:9540) has joined
*	jrpls_ (~jrpls@2001:41d0:a:fee1::1) has joined
*	Frodo1337 (~Ninja3047@valkyria.foobar.network) has joined
*	pmade_ (~ident@mail.pmade.com) has joined
*	sqrt2_ (~ben@unaffiliated/sqrt2) has joined
*	exferenc- (~exference@hexagoxel.de) has joined
*	vikraman (~vh4x0r@gentoo/developer/vikraman) has joined
*	ons1 (~olof@helios.knark.io) has joined
*	dysfigur- (~DANtheBEA@2a05:dfc7:dfc8:1d1::6a47) has joined
*	mstruebing1 (~mstruebin@2a00-1dc0-cafe--298f-12e7.ip.as43289.net) has joined
*	Mindless- (~MindlessD@HSI-KBW-091-089-161-079.hsi2.kabel-badenwuerttemberg.de) has joined
<StrangeLoop>	I recently studied shuffles a bit, so I want to implement them to see the stopping and mixing times in action
*	acfoltzer_ (Adam@2600:3c01::f03c:91ff:fedf:682e) has joined
<Tuplanolla>	You can also install the program separately, dsal.
*	oberste1n (~ober@2605:6400:20:748::ddee:deee) has joined
*	SexHendrix is now known as Guest38905
<dsal>	Obvious as in, "I should've tried that."
*	cdg (~cdg@162-226-219-152.lightspeed.tukrga.sbcglobal.net) has joined
*	Elsi (~Elsi@luwin.ulrar.net) has joined
<Tuplanolla>	@hackage pointfree
*	m00n_ (~m00nsl47r@enterprise.whatbox.ca) has joined
<Tuplanolla>	Serve us, lambdabot.
*	sdhand has quit (Disconnected by services)
*	dxld_ (~dxld@80-109-145-16.cable.dynamic.surfer.at) has joined
*	sdhandsucks is now known as sdhand
*	maerwald_ (~maerwald@mail.hasufell.de) has joined
*	sdhand has quit (Changing host)
*	sdhand (~sam@unaffiliated/kyubiko) has joined
*	langkid1_ (~langkid1@2604:180:0:ce:5f69:7263::) has joined
<StrangeLoop>	I can tell you that the first conclusion is that using randomness in Haskell is significantly harder for me than doing a Markovian analysis of card shuffling methods
*	Unhammer has quit (*.net *.split)
*	gehmehgeh has quit (*.net *.split)
*	LiaoTao has quit (*.net *.split)
*	dxld has quit (*.net *.split)
*	codesoup has quit (*.net *.split)
*	xkapastel has quit (*.net *.split)
*	chaosmasttter has quit (*.net *.split)
*	MindlessDrone has quit (*.net *.split)
*	urodna has quit (*.net *.split)
*	bmeynell has quit (*.net *.split)
*	simukis has quit (*.net *.split)
*	KeyJoo has quit (*.net *.split)
*	jadrian has quit (*.net *.split)
*	whitephoenix has quit (*.net *.split)
*	macrover has quit (*.net *.split)
*	scinawa has quit (*.net *.split)
*	`Guest00000 has quit (*.net *.split)
*	maerwald has quit (*.net *.split)
*	catsup has quit (*.net *.split)
*	pmade has quit (*.net *.split)
*	aweinstock has quit (*.net *.split)
*	rembo10 has quit (*.net *.split)
*	jamiecook_ has quit (*.net *.split)
*	ContessaTP has quit (*.net *.split)
*	Guest41452 has quit (*.net *.split)
*	KENNYNR1[m] has quit (*.net *.split)
*	bennofs[m] has quit (*.net *.split)
*	prot[m] has quit (*.net *.split)
*	s0ra[m] has quit (*.net *.split)
*	cjwelborn has quit (*.net *.split)
*	mimi_vx has quit (*.net *.split)
*	infandum has quit (*.net *.split)
*	sudoreboot[m] has quit (*.net *.split)
*	M-ms has quit (*.net *.split)
*	lambdabot has quit (*.net *.split)
*	sdx32 has quit (*.net *.split)
*	Elsi_ has quit (*.net *.split)
*	bjs has quit (*.net *.split)
*	sanitypa- has quit (*.net *.split)
*	kubrat has quit (*.net *.split)
*	chelfi2 has quit (*.net *.split)
*	sivs_ has quit (*.net *.split)
*	unidan_ has quit (*.net *.split)
*	solidsnack has quit (*.net *.split)
*	Xorlev has quit (*.net *.split)
*	zmanian______ has quit (*.net *.split)
*	lumimies has quit (*.net *.split)
*	spinda has quit (*.net *.split)
*	thoradam has quit (*.net *.split)
*	Neo has quit (*.net *.split)
*	Purlox has quit (*.net *.split)
*	dkellner[m] has quit (*.net *.split)
*	ons has quit (*.net *.split)
*	rimon[m] has quit (*.net *.split)
*	Ninja3047 has quit (*.net *.split)
*	atomi has quit (*.net *.split)
*	intelux has quit (*.net *.split)
*	jrpls has quit (*.net *.split)
*	plll[m] has quit (*.net *.split)
*	CryptoCalsius[m] has quit (*.net *.split)
*	zmre[m] has quit (*.net *.split)
*	dgonyeo has quit (*.net *.split)
*	sqrt2 has quit (*.net *.split)
*	langkid1 has quit (*.net *.split)
*	bjobjo has quit (*.net *.split)
*	tjbp has quit (*.net *.split)
*	idupree has quit (*.net *.split)
*	exferenceBot has quit (*.net *.split)
*	hydraz has quit (*.net *.split)
*	mstruebing has quit (*.net *.split)
*	pacak has quit (*.net *.split)
*	nisstyre has quit (*.net *.split)
*	l_zzie has quit (*.net *.split)
*	ocharles has quit (*.net *.split)
*	sa1 has quit (*.net *.split)
*	mkurkov_ has quit (*.net *.split)
*	mystfox has quit (*.net *.split)
*	feltnerm has quit (*.net *.split)
*	TRManderson has quit (*.net *.split)
*	gornikm has quit (*.net *.split)
*	scav has quit (*.net *.split)
*	Cerise has quit (*.net *.split)
*	nek0 has quit (*.net *.split)
*	jml has quit (*.net *.split)
*	NextHendrix has quit (*.net *.split)
*	wavewave has quit (*.net *.split)
*	ryantm has quit (*.net *.split)
*	mpickering has quit (*.net *.split)
*	angular_mike_ has quit (*.net *.split)
*	OliPicard has quit (*.net *.split)
*	sclv has quit (*.net *.split)
*	bgyss has quit (*.net *.split)
*	Guest291964[m] has quit (*.net *.split)
*	Ferdirand has quit (*.net *.split)
*	fbreitwieser[m] has quit (*.net *.split)
*	ggherdov has quit (*.net *.split)
*	Pilfers has quit (*.net *.split)
*	kwantam1 has quit (*.net *.split)
*	thekyriarchy has quit (*.net *.split)
*	srenatus[m] has quit (*.net *.split)
*	razvanc-r[m] has quit (*.net *.split)
*	Dako300[m] has quit (*.net *.split)
*	gesindel has quit (*.net *.split)
*	lopex has quit (*.net *.split)
*	emerson has quit (*.net *.split)
*	dsm__ has quit (*.net *.split)
*	chriswk has quit (*.net *.split)
*	runde has quit (*.net *.split)
*	dysfigured has quit (*.net *.split)
*	alem0lars has quit (*.net *.split)
*	GreySunshine has quit (*.net *.split)
*	grayhatter has quit (*.net *.split)
*	PotatoGim has quit (*.net *.split)
*	billstclair has quit (*.net *.split)
*	xnyhps has quit (*.net *.split)
*	Bigcheese has quit (*.net *.split)
*	m00n has quit (*.net *.split)
*	cschneid has quit (*.net *.split)
*	oberstein has quit (*.net *.split)
*	noobst has quit (*.net *.split)
*	no-n has quit (*.net *.split)
*	xacktm has quit (*.net *.split)
*	nelll has quit (*.net *.split)
*	nbouscal has quit (*.net *.split)
*	acfoltzer has quit (*.net *.split)
*	monad_cat has quit (*.net *.split)
*	adelbertc has quit (*.net *.split)
*	dumptruckman has quit (*.net *.split)
*	exferenc- is now known as exferenceBot
*	langkid1_ is now known as langkid1
*	grayhatt3r is now known as grayhatter
*	pmade_ is now known as pmade
*	bjs_ is now known as bjs
*	mstruebing1 is now known as mstruebing
*	grayhatter has quit (Changing host)
*	grayhatter (~grayhatte@utox/developer/grayhatter) has joined
*	lumimies_ is now known as lumimies
*	jamiecook__ is now known as jamiecook_
*	thoradam_ is now known as thoradam
*	spinda_ is now known as spinda
*	xkapastel_ is now known as xkapastel
*	solidsnack_ is now known as solidsnack
*	mkurkov__ is now known as mkurkov_
*	danthemyth has quit (Remote host closed the connection)
*	gornikm_ is now known as gornikm
*	mpickering_ is now known as mpickering
*	wavewave_ is now known as wavewave
*	sa1_ is now known as sa1
*	dgonyeo_ is now known as dgonyeo
*	nbouscal_ is now known as nbouscal
*	adelbertc_ is now known as adelbertc
*	jml_ is now known as jml
*	sclv_ is now known as sclv
*	monad_cat_ is now known as monad_cat
*	codesoup (~codesoup@2607:fea8:e2e0:240:5df0:2f95:5e96:59a4) has joined
*	ryantm_ is now known as ryantm
<jle`>	StrangeLoop: if you write coinflip merge in haskell you'll find that it's actually very pleasant if you use lists
*	lopex_ is now known as lopex
*	billstclair_ is now known as billstclair
*	bgyss_ is now known as bgyss
*	Xorlev_ is now known as Xorlev
*	mystfox_ is now known as mystfox
*	OliPicard_ is now known as OliPicard
*	mimi_vx (~mimi_vx@2002:59b1:3a11::1) has joined
*	ocharles_ is now known as ocharles
*	PotatoGim_ is now known as PotatoGim
*	feltnerm_ is now known as feltnerm
*	noobst_ is now known as noobst
*	slackman has quit (Remote host closed the connection)
<jle`>	it's a bit similar to how merge part of merge sort is so fun to write in haskell
<jle`>	(using lists)
*	kuttifunk has quit (Remote host closed the connection)
*	Purlox (~fox@2607:5300:60:14bc::) has joined
*	Bleem_ (~Bleem@2600:380:856d:ea71:e2e8:91d5:9714:2937) has joined
*	kuttifunk (~Thunderbi@host-188-174-198-104.customer.m-online.net) has joined
<StrangeLoop>	jle`: I currently want to get the randomness thing down, then I could have my fun with different data types and shuffling methods
*	Pilfey (Pillfersr@gateway/shell/elitebnc/x-zjmgjuvzwcucjhnt) has joined
*	slackman (~slackman@a5.df.a86c.ip4.static.sl-reverse.com) has joined
*	SiCC has quit (Ping timeout: 260 seconds)
*	owickstrom has quit (Ping timeout: 260 seconds)
*	dfeuer (~dfeuer@wikimedia/Dfeuer) has joined
*	Volt_ (~Volt_@c-68-51-145-60.hsd1.mi.comcast.net) has joined
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	vaibhavsagar has quit (Ping timeout: 240 seconds)
<Tuplanolla>	If you just want to wrangle indices, I'd expect your type to be `RandomGen g => Vector a -> State g (Vector a)` or `MonadRandom m => Vector a -> m (Vector a)`, StrangeLoop.
*	Bleem has quit (Ping timeout: 248 seconds)
*	cranej has quit (Ping timeout: 252 seconds)
*	guios has quit (Ping timeout: 260 seconds)
*	aaron7 has quit (Ping timeout: 260 seconds)
*	sleepynate has quit (Ping timeout: 240 seconds)
*	ystael has quit (Ping timeout: 240 seconds)
<StrangeLoop>	I think there's something fundamental about how randomness works in Haskell which I am not getting. Something about where the actual obtaining of random values takes place
*	keep_learning has quit (Ping timeout: 240 seconds)
*	dmiles has quit (Ping timeout: 240 seconds)
*	oisdk has quit (Ping timeout: 255 seconds)
*	SiCC (~sicc@192.241.228.24) has joined
*	owickstrom (~owickstro@ec2-52-17-47-197.eu-west-1.compute.amazonaws.com) has joined
*	guios (~gio@s18011586.domainepardefaut.fr) has joined
*	diegoksp (~diegoksp@190.153.194.178) has joined
*	ziocroc (~ziocroc@151.74.95.103) has joined
<jle`>	StrangeLoop: the basic method you're working here is using a PRNG from an initial seed
*	aaron7 (~aaron@178.62.69.194) has joined
<jle`>	(there are other approaches as well)
<jle`>	'State' is just an abstraction that makes this method nicer to use/cleaner and also less error-prone
*	vaibhavsagar (~vaibhavsa@128.199.234.106) has joined
<jle`>	getRandom :: g -> (a, g) is a pure function, so it returns the same 'random value' when given the same initial seed
*	dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) has joined
*	sleepynate (~sleepynat@162.243.79.61) has joined
<jle`>	getRandom is a typeclass method for an instance for 'a', so basically every type is allowed the ability to define how to construct a random value of that type
*	keep_learning (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has joined
<monochrom>	You need to understand that "random" and "pure function, i.e., deterministic" is at a fundamental conflict.
<jle`>	so if i define my type Foo, i can write a Random instance for Foo, and if i do that, i have to define getRandom, or how it would be possible to make a random value of Foo from an input seed
<monochrom>	And understand that other languages "simplify" it by giving you effectful procedures not functions.
<jle`>	Int, Bool, String, Double, etc. all provide their own methods, and so 'getRandom', as a typeclass method, uses the implementation that each gives
*	nisstyre (wes@2600:3c00::f03c:91ff:fe69:7f3d) has joined
<mlehmk>	but a random function can return another function, which can give a random number once and another function, which can do the same with the next random number...
*	Volt_ has quit (Ping timeout: 246 seconds)
<monochrom>	So that random(6) + random(6) ≠ (\x -> x+x)(random(6))
*	kwantam1 (~kwantam@graviton.stanford.edu) has joined
*	oisdk (~textual@83.136.43.150) has joined
*	KeyJoo (~keyjoo@37.1.34.138) has joined
<mlehmk>	I think this would be a reader monad then
<StrangeLoop>	Man, Haskell is so fun until you try to actually write something
*	scinawa (~scinawa@37.139.16.185) has joined
*	toblorone (~toblorone@162.246.216.28) has joined
<mlehmk>	something that can behave like a list of random numbers, where you can use head and tail
<jle`>	that has been the opposite of my experience :O haskell is fun when you actually start writing real things
<jle`>	cause then you get to reap all of its benefits in real projects
*	pacak (~pacak@2401:7400:e800:359c:62f8:1dff:fec8:da28) has joined
*	gesindel (Pygz76I1Fv@aries.uberspace.de) has joined
<monochrom>	So the logical conclusion is that when you insist on pure functions you have to expose the presence of a PRNG, and that the initial seed has to come from an external source such as IO.
<royal_screwup21>	is this a correct implementation of the "take" function https://thepasteb.in/p/oYhl3qnZjpYtZ It seems to work okay on my ghci console but the implementation on LYAH looks a little different (or maybe it's basically the same - I just have to look harder)
*	KENNYNR1[m] (kennynr1ma@gateway/shell/matrix.org/x-iarjcuumrnwkcxgm) has joined
<StrangeLoop>	Anyway, I get that everything is pseudorandom, and will get the same results every time unless you change the seed, and if you want to change the seed with every run you need IO
*	prot[m] (protmatrix@gateway/shell/matrix.org/x-tdnrdxqayygbqgfk) has joined
*	Guest291964[m] (m291964mat@gateway/shell/matrix.org/x-opddwphqkcljvext) has joined
*	plll[m] (plllmatrix@gateway/shell/matrix.org/x-qufryzzjdhzmnzln) has joined
*	zmre[m] (zmrematrix@gateway/shell/matrix.org/x-pzlijyjemjzuzrtc) has joined
<StrangeLoop>	What I am really not getting, is at which point of the code should I use evalState
<lyxia>	royal_screwup21: take' 1 []
*	CryptoCalsius[m] (cryptocals@gateway/shell/matrix.org/x-oayhmuybcvumhczz) has joined
*	s0ra[m] (s0ramatrix@gateway/shell/matrix.org/x-qmhfvsrgkopupktb) has joined
*	bennofs[m] (bennofsmat@gateway/shell/matrix.org/x-oecigwzrmyoxhkjw) has joined
*	chaosmasttter (~chaosmast@p5B0D2D39.dip0.t-ipconnect.de) has joined
<monochrom>	Also it is a biased to view that Haskell becomes hard as soon as you "actually write something".
*	srenatus[m] (srenatusma@gateway/shell/matrix.org/x-larmaghkebxacpfj) has joined
<jle`>	StrangeLoop: you can think of 'State' as a way to build up a big fat (g -> (a, g)) by composing smaller simpler ones
*	rimon[m] (rimonmatri@gateway/shell/matrix.org/x-ndatotsukvkmnnbh) has joined
<royal_screwup21>	lyxia ah thanks, missed that edge case!
<StrangeLoop>	monochrom: Yeah, it's a survivor bias, I was just kidding
*	sudoreboot[m] (sudoreboot@gateway/shell/matrix.org/x-dtyrsyikqjjrggpg) has joined
*	Dako300[m] (dako300mat@gateway/shell/matrix.org/x-lkvgluearyfjmxql) has joined
*	razvanc-r[m] (razvanc-rm@gateway/shell/matrix.org/x-avgadiithcbynxdn) has joined
<monochrom>	It is biased because it is true for your current project but false for other projects.
*	codrinb (~codrinb@94.177.40.42) has joined
*	dkellner[m] (dkellnerma@gateway/shell/matrix.org/x-ezjiheikjoupbbkp) has joined
*	purplelambda has quit (Remote host closed the connection)
*	M-ms (msmatrixor@gateway/shell/matrix.org/x-jxsdvdwwzmenbplo) has joined
<jle`>	StrangeLoop: if you have a bunch of random actions, you can use State to "sequence" them in a nice way
<monochrom>	Or rather, in this case, the victim bias.
*	thekyriarchy (thekyriarc@gateway/shell/matrix.org/x-qpgnnoojypypcdhu) has joined
<monochrom>	Dead men tell grave tales.
*	Ferdiran1 has quit (Ping timeout: 246 seconds)
<mniip>	royal_screwup21, as it stands your function is a bit too lazy
<StrangeLoop>	monochrom: If you were hinting that I am being a bit of a crybaby, you aren't too far off from the truth I guess
*	fbreitwieser[m] (fbreitwies@gateway/shell/matrix.org/x-lszhdaxvnlrvasns) has joined
<jle`>	StrangeLoop: at the end of the day, once you get the "g -> (a, g)" of your high-level program, then you can evalState :: State g a -> g -> a that
<lyxia>	royal_screwup21: and turn on -Wall
<mniip>	take 3 [] = [_|_, _|_, _|_]
*	whitephoenix (~whitephoe@2600:100f:b026:2506:c952:3754:4640:4879) has joined
*	nisstyre has quit (Changing host)
*	nisstyre (wes@oftn/oswg-member/Nisstyre) has joined
<ski>	> length (take 3 [])
*	mayhew (~mayhew@142.167.222.89) has joined
<jle`>	StrangeLoop: the benefit of State is that you can manipulate (g -> (a, g))'s in a "first class way"; you can combine simple ones to create more complex ones
*	Ferdirand (~max@xolus.net) has joined
<jle`>	using useful combinators
<StrangeLoop>	So the state monad is a fancy way to abstract a composed calculation, whereas evalState is an abstraction of the result of that calculation?
<monochrom>	For a more balanced view, if your project is to code up AVL tree algorithms, Haskell is the easy one, C/Java/PHP are the ones "become hard as soon as you actually write something".
<jle`>	evalState is a part of the API/interface of the State monad
<mniip>	"composed calculation" is vague af
<mniip>	state monad is specific
*	freeman42y[m] has quit (Read error: Connection reset by peer)
<jle`>	StrangeLoop: so if 'State g a' describes a stateful computation, evalState "executes" that stateful computation to create a result :: a
*	pgiarrusso_ has quit (Quit: This computer has gone to sleep)
<royal_screwup21>	mniip thanks for the feedback!
<StrangeLoop>	mniip: vague, abstract, potato, potato
<mauke>	vaguetables
*	castlelore (~castlelor@unaffiliated/castlelore) has joined
*	Wizek has quit (Quit: Connection closed for inactivity)
<mauke>	:t runState
<mauke>	:-(
<monochrom>	I don't think it's healthy to pick on "composed calculation" so early.
<jle`>	using state, you build the (g -> (a, g)) you want at the high level...and you get the ability to build it by composing simpler ones together
<ski>	`evalState' (or `execState' or `runState') is used (typically only once) when you're satisfied with your big `State s'-action, and want to "get out"
*	oish has quit (Ping timeout: 248 seconds)
<mniip>	ha!
<mniip>	my chance to shine
*	codrinb has quit (Ping timeout: 240 seconds)
<StrangeLoop>	I have a functioning code which does not use it but its ugly af
<ski>	  runState :: State s a -> (s -> (a,s))
<mniip>	% :t runState
<yahb>	mniip: runState :: State s a -> s -> (a, s)
*	steeze has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
<ski>	  evalState :: State s a -> (s -> a)
<ski>	  exexState :: State s a -> (s -> s)
<monochrom>	I mean you will have to pick on it eventually. Just not now. Get the code to work first. Then you can pick on semantics.
*	tobloron_ (~toblorone@162.246.216.28) has joined
<monochrom>	It's all empty talk until you have both an example and a counterexample.
<StrangeLoop>	monochrom: I have a working code
<mlehmk>	a reader monad from a list generator would be enough for prng I think
*	leah2 has quit (Ping timeout: 264 seconds)
<mniip>	mlehmk, no?
<mauke>	mlehmk: how do you consume things?
<StrangeLoop>	monochrom: http://lpaste.net/2214921880157028352
<mlehmk>	am I confusing reader and writer?
<mniip>	neither of those work
<barrucadu>	StrangeLoop: Here's how I did it, without using State: https://gist.github.com/barrucadu/8996405669274d6b1567ed3a4c49a9c0
*	steeze (~steeze@63.76.231.82) has joined
<monochrom>	Yeah, but I mean after you convert that into using some State monad.
<mniip>	unless by writer you really mean Writer (Endo s) which is really just state
<barrucadu>	There's lots of blank lines so you can avoid looking at the definition of a function if you want to think about it first
*	toblorone has quit (Ping timeout: 240 seconds)
*	leah2 (~leah@vuxu.org) has joined
*	toblorone (~toblorone@162.246.216.28) has joined
<StrangeLoop>	So generating a newStdIo and dropping it whenever I want a new random number is an acceptable practice? Seeing your code I realize I was subconsciously avoiding it
*	free_beard (~mircea@unaffiliated/free-beard/x-6152516) has joined
<StrangeLoop>	Because that's definitely the easiest solution
*	tremon has quit (Quit: getting boxed in)
*	codrinb (~codrinb@94.177.40.42) has joined
<jle`>	hm, i think the point is to chain together your (g -> (a, g)'s
<barrucadu>	Unless I were already in an IO context, I'd tend to use the pure shuffle function
<jle`>	so that you only need to newStdIO once
<jle`>	like you do already
*	inkbottle (~inkbottle@AAubervilliers-655-1-85-62.w86-218.abo.wanadoo.fr) has joined
<monochrom>	Do you all mean newStdGen?
<StrangeLoop>	OK
*	cjwelborn (cjwelborn@gateway/shell/firrre/x-shwyipotyfllwfub) has joined
<monochrom>	Also yeah newStdGen is a better habit than getStdGen.
<jle`>	StrangeLoop: note that your whole program is building up to your shuffle function, which is one complicated g -> (a, g), built up from simpler ones
*	ski blinks slowly
<mauke>	% :t randomIO
<yahb>	mauke: randomIO :: Random a => IO a
*	tobloron_ has quit (Ping timeout: 260 seconds)
<monochrom>	Not to say that getStdGen is always wrong, but you need to know what it does and doesn't.
<mauke>	fuck the police
*	eliasr has quit (Quit: Connection closed for inactivity)
*	lkolstad has quit (Ping timeout: 240 seconds)
<StrangeLoop>	getStdGen gets a seed and creates a pseudorandom generator, newStdGen chooses an external seed for me via an IO action, right?
*	tnecniv has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
<monochrom>	No. Did you read that from the doc?
*	cdg has quit (Ping timeout: 240 seconds)
*	haskellwelp has quit (Ping timeout: 260 seconds)
<StrangeLoop>	no, I extrapolated from :t'ing them in GHCi :(
*	hsk has quit (Quit: Page closed)
<ski>	`getStdGen' grabs the current contents of a mutable location, but doesn't change it
*	lkolstad (~ljk@c-24-16-12-195.hsd1.wa.comcast.net) has joined
*	revprez_apollo (~revprez_a@pool-108-20-156-103.bstnma.fios.verizon.net) has joined
<ski>	`newStdGen' also changes it
<monochrom>	With IO and a secret mutable variable behind it, you can't deduce much from types. You learned that from stupid imperative languages.
*	codrinb has quit (Ping timeout: 248 seconds)
<monochrom>	getStdGen doesn't mutate the seed, so every time it gives you the same damn thing again. Until you quit the program and run it anew.
<monochrom>	newStdGen does mutate the seed.
*	takle (~takle@host109-153-109-219.range109-153.btcentralplus.com) has joined
<ski>	`newStdGen' does both a `getStdGen' and a `setStdGen'
*	sqrt2_ is now known as sqrt2
<StrangeLoop>	OK
<monochrom>	If you getStdGen but you promise "I'll setStdGen promptly" that's also OK. But with the convenience of newStdGen why bother.
<ski>	(`newStdGen' uses `split :: RandomGen g => g -> (g,g)' inbetween those two operations)
*	ystael (~ystael@209.6.50.55) has joined
<jle`>	StrangeLoop: i rewrote your original code using state to demonstrate how your logic would be managed using the State abstraction
<jle`>	http://lpaste.net/358354
<mauke>	horizontal split or vertical split?
*	parsnip (~parsnip@unaffiliated/parsnip) has left ("WeeChat 1.9-dev")
<StrangeLoop>	jle`: That was seriously awesome of you
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Mon Sep 11 13:50:38 2017

**** BEGIN LOGGING AT Thu Sep 14 10:13:48 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	sellout- has quit (Ping timeout: 240 seconds)
<monochrom>	But "pointer" is astonishingly tautological. A typical compiler like GHC uses pointers for everything.
*	newhoggy (~newhoggy@37.205.56.245) has joined
<mniip>	Limeth_, no
<erisco>	Limeth_, however, if you go through and figure out the answer, you'll probably find the result is unusable, because it is partial
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
<glguy>	(\_ -> []) :: IO [t] -> [t]
*	eacamero_ (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	zapbranig_ (~zapbranig@cpc92882-cmbg20-2-0-cust147.5-4.cable.virginm.net) has joined
<erisco>	well you can be much more interesting than that
*	codrinb has quit (Ping timeout: 252 seconds)
*	charsch has quit (Read error: Connection reset by peer)
<monochrom>	Well, \_ -> [] doesn't count as conversion.
<dolio>	Says who?
<mbrock>	Limeth_: that's a common desire when you start with IO in Haskell, but probably you need to re-think a bit
*	_Mzungu_ (~digitalmk@rrcs-67-78-218-162.se.biz.rr.com) has joined
<glguy>	monochrom: 
<monochrom>	ME
*	quobo (uid178934@gateway/web/irccloud.com/x-lsdrqdmmvsrhxrpt) has joined
*	Gurkenglas has quit (Ping timeout: 240 seconds)
*	telekid (~telekid@136.24.48.241) has joined
<mniip>	:t \xs -> [(!! i) <$> xs | i < [0..]]
*	eacameron has quit (Ping timeout: 240 seconds)
<lambdabot>	error:
<lambdabot>	    • Couldn't match expected type ‘Int’ with actual type ‘Expr’
<lambdabot>	    • In the second argument of ‘(!!)’, namely ‘i’
<mniip>	:t \xs -> [(!! i) <$> xs | i <- [0..]]
<lambdabot>	Functor f => f [b] -> [f b]
*	charsch (~charsch@108.178.247.138) has joined
<nshepperd_>	erisco: "Monad m => m (t1 -> t -> m b) -> t1 -> t -> m b" combines together the effects from outer and inner m. You can make a new outer m with return but it won't have its fair share of effects
<erisco>	yeah I should have said it was IO [a] to [IO a]
<Limeth_>	mbrock: Yes, I am learning haskell with the cis194 course, but didn't get to the chapter addressing IO yet.
*	charsch has quit (Client Quit)
*	sellout- (~Adium@c-67-188-42-8.hsd1.ca.comcast.net) has joined
*	zapbranig has quit (Ping timeout: 240 seconds)
<mbrock>	Limeth_: in a way the very meaning of Haskell being a pure language is that you can't go from `IO a` to `a`
<erisco>	so, the fun thing is that you can take out the list, spine, but only infinite ones!
*	Guest61165 has quit (Ping timeout: 240 seconds)
<monochrom>	OK so none of the exercises require IO[T]->[T], in fact most exercises don't even require IO.
<erisco>	if you were able to do otherwise you would uncover the length, and that would leak information
*	newhoggy has quit (Ping timeout: 240 seconds)
<mniip>	erisco, well,
<erisco>	IO (Stream a) -> Stream (IO a)  can be implemented total
<mniip>	if it has a fixed spine
<mniip>	then it is representable
<mniip>	and hence distributive
<mbrock>	Limeth_: however, you can get access to the value inside the IO value, but only in order to construct a new IO value... it's kind of like safety gloves
*	emilypi (~emilypi@65.246.174.100) has joined
*	mniip (mniip@freenode/staff/mniip) has left ("This page is intentionally left blank")
*	mniip (mniip@freenode/staff/mniip) has joined
<erisco>	mniip, what do you mean? what I am saying is we can choose how many cells we take out of IO, but not dependent on any information within
<mniip>	oops
*	telekid has quit (Quit: WeeChat 1.9)
<Limeth_>	Hmm, okay
<erisco>	so taking infinite cells is one option, taking zero is another (that is glguy's example)
<erisco>	taking 10 is a third option
*	codrinb (~codrinb@94.177.40.42) has joined
*	halogenandtoast (~matthew-m@132.69.30.125.dy.iij4u.or.jp) has joined
<mniip>	erisco, no I mean if you have a datatype whose tree is always fixed
<mniip>	such as type-indexed vectors, or Stream
<mniip>	such data are distributive
*	aloiscochard has quit (Quit: Connection closed for inactivity)
<erisco>	Stream is coinductive … what do you mean by fixed?
<mbrock>	Limeth_: inside of `do` blocks is where you get access to values like that, but the final result value of the `do` block will also be tagged as `IO`
<erisco>	tuples work too
<nshepperd_>	Fixed, not variable
<dolio>	It means pick any N, not just infinity.
<Limeth_>	I guess I'll wait until I get to the chapter about IO
<dolio>	If you assume your list has exactly that size (I.E. you're not actually dealing with lists), then you can do it.
*	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined
<mbrock>	Limeth_: yeah, it's one of the biggest things to get your head around when learning Haskell
<monochrom>	@type (\m -> liftA3 (\xs ys zs -> xs ++ ys ++ zs) m m m)
<lambdabot>	Applicative f => f [a] -> f [a]
<monochrom>	Oh nevermind.
*	adeohluwa (uid223641@gateway/web/irccloud.com/x-mxkcnbigdslpnbtf) has joined
<mniip>	erisco, if the type is...
<mniip>	logarithmiable
<mniip>	which is apparently just another word for representable
<erisco>	you'll have to explain that one to me
<mniip>	F representable <=> exists X. Fa \iso a^X, natural in a
<mbrock>	Limeth_: but basically because of this "purity", if you have some function that doesn't return some `IO` value, like say `sqrt :: Float -> Float`, then you can know that using this `sqrt` will not cause any I/O or side effects (like, it's definitely not going to try to open a log file or something)
<nshepperd_>	T a = (U -> a) for some U
<erisco>	okay I give up
<mniip>	iow
*	afarmer has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
<nshepperd_>	Streams satisfy this, with U = Natural
<mniip>	X = ln_a Fa
<Limeth_>	mbrock: Ah, that's pretty handy, good to know.
*	halogenandtoast has quit (Ping timeout: 248 seconds)
*	a3Dman has quit (Ping timeout: 248 seconds)
<mbrock>	Limeth_: and Haskell programmers usually try to do as much as possible without using `IO`, because such code is really nice and clean and predictable
*	codrinb has quit (Ping timeout: 252 seconds)
*	oish has quit (Quit: Lost terminal)
*	telekid (~telekid@136.24.48.241) has joined
<crucify_me>	hi is the recursion in the where clause, here in the split function?   https://ptpb.pw/2wG7
<nshepperd_>	erisco: what's so difficult about "fixed size"?
*	telekid has quit (Client Quit)
*	telekid (~telekid@136.24.48.241) has joined
<lightstep>	crucify_me, yes
<nshepperd_>	Lists have a variable size because they can be [] or [a,b] or ...
<lightstep>	crucify_me, why?
<erisco>	because it was said Stream has a fixed size, and I have a difficult time accepting that
<crucify_me>	lightstep, thanks, I'm rather naive
<nshepperd_>	Streams have a fixed size because they always contain infinite elements
<mbrock>	Limeth_: ...which makes it so that Haskell encourages some pretty interesting program designs; one pattern is to have a "pure core" that does all your calculations and decisions, and then a relatively simple I/O layer "around" it, and this has some very nice benefits...
<erisco>	stretching the meaning of "size"…
<crucify_me>	lightstep, why ...
*	Zyxoas (~zyxoas@41.113.79.92) has joined
<Limeth_>	I see
*	toby1851 (~toby@88-110-104-87.dynamic.dsl.as9105.com) has joined
*	ystael has quit (Ping timeout: 264 seconds)
<mbrock>	Limeth_: ...but yeah, it's probably best to hold out until the course gets to I/O. If you google around there's quite a lot of explanations of Haskell I/O that aren't actually all that helpful, so it's unfortunately easy to get confused
<crucify_me>	why is it set up with the tuple like that? I'm not sure I see how that works
*	newhoggy (~newhoggy@37.205.56.245) has joined
<nshepperd_>	Steam is isomorphic to a function from the natural numbers
<lightstep>	on the last line?
*	mthek (~mthek@12.145.98.253) has joined
<nshepperd_>	Fixed sized vectors are isomorphic to functions from finite sets (Z_n)
*	codrinb (~codrinb@94.177.40.42) has joined
*	augur has quit (Remote host closed the connection)
<crucify_me>	lightstep, so does that mean for as long as the tuple is incomplete, it will recurse?
<Zyxoas>	Hello y'all.
*	Deide (~Deide@2.220.50.147) has joined
*	dan_f has quit (Quit: dan_f)
*	Paker (Pantura@36.76.110.147) has joined
<crucify_me>	yeah the last line
<lightstep>	the recursion is triggered by the "otherwise" condition, that is y >= x
<Zyxoas>	Inspired by this GHC proposal: https://github.com/treeowl/ghc-proposals/blob/magic-reflection/proposals/0000-magic-reflection.rst I tried to implement a reflection thingie, but based on TypeApplications and concrete instances.
<nshepperd_>	Vec n a = (Fin n -> a)
<lightstep>	the tuple syntax in the last line is to break down the result of "split", which is a tuple
*	OnkelTem has quit (Ping timeout: 240 seconds)
<erisco>	monochrom, yes that works, thanks
<erisco>	works for some, not-so-interesting monads, and not generally
*	BartAdv has quit (Quit: Connection closed for inactivity)
*	newhoggy has quit (Ping timeout: 248 seconds)
<crucify_me>	so the last y is consed to the greater list, then the tuple has nothing to cons, so it triggers the recursion with (less, greater)  ?  is that how to think of it?
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<crucify_me>	lightstep, 
*	pja has quit (Quit: pja)
*	pja (~pja@2a02:8010:6098:0:6af:be1f:1474:6f2a) has joined
*	afarmer (~afarmer@199.201.64.139) has joined
*	mthek has quit (Ping timeout: 240 seconds)
<erisco>	so, in conclusion, if you have  f :: A -> B -> m C  then  return f  is reversible
*	pja has quit (Remote host closed the connection)
<lightstep>	no, the stuff under "where" runs first
*	codrinb has quit (Ping timeout: 260 seconds)
<erisco>	but if you have  mf :: m (A -> B -> m C)  a conversion to  A -> B -> m C  is not
<lightstep>	if y >= x, it calls "split x ys", and separates the result into (less, greater), then combining it to (less, y:greater)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	hackagebot has quit (Read error: error:1408F119:SSL routines:SSL3_GET_RECORD:decryption failed or bad record mac)
*	hackagebot (~hackagebo@2a00:dcc0:eda:88:245:71:269a:892d) has joined
*	xcmw (~textual@host-129-137-24-3.vpn.uc.edu) has joined
*	cpennington (~cpenningt@pool-108-7-186-67.bstnma.fios.verizon.net) has joined
*	codesoup (~codesoup@2607:fea8:e2e0:240:5df0:2f95:5e96:59a4) has joined
*	iAmerikan has quit (Ping timeout: 248 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
<crucify_me>	right, lightstep thank you. one thing..
*	a3Dman has quit (Ping timeout: 240 seconds)
<crucify_me>	(less, greater) on the last line, does that express a state (ie, incomplete tuple of 2 lists) ?
<lightstep>	yes, exactly
<Zyxoas>	As I was saying, I tried doing my own variation of reflection: http://lpaste.net/358450
*	a3Dman (~3Dman@156.222.91.177) has joined
*	a3Dman has quit (Changing host)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	xcmw has quit (Client Quit)
<Zyxoas>	But I seem to have screwed it up. Can someone please help me understand why I can't seem to fit all the pieces together? :-)
*	Vq (~vq@90-227-195-41-no77.tbcn.telia.com) has joined
<crucify_me>	excellent.. my coffee worked ! thanks kindly lightstep 
<lightstep>	np :)
*	xcmw (~textual@216.48.140.139) has joined
*	johnk (~john@78-67-125-96-no247.tbcn.telia.com) has joined
*	replay (~replay@pdpc/supporter/student/replay) has joined
<erisco>	crucify_me, I got 5 hours of sleep last night… will coffee fix that?
*	wrengr (~wrengr@104.132.1.65) has joined
*	zariuq has quit (Ping timeout: 248 seconds)
*	wrengr has quit (Client Quit)
*	pfurla (~textual@38.86.167.91) has joined
*	xcmw has quit (Client Quit)
*	wrengr (~wrengr@104.132.1.65) has joined
*	danthemyth has quit (Remote host closed the connection)
*	ritre (~ritre@bband-dyn92.178-40-248.t-com.sk) has joined
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
*	danthemyth (~danthemyt@50-246-66-201-static.hfc.comcastbusiness.net) has joined
*	xcmw (~textual@216.48.140.139) has joined
*	pja (~pja@2a02:8010:6098:0:55c0:ec2a:80f2:33d9) has joined
*	nickoh has quit (Remote host closed the connection)
*	pyon (~pyon@unaffiliated/pyon) has joined
*	cpennington has quit (Remote host closed the connection)
*	Cogitabundus (~NOBODY@122.15.77.139) has joined
*	a3Dman has quit (Ping timeout: 240 seconds)
*	ystael (~ystael@50-199-243-61-static.hfc.comcastbusiness.net) has joined
*	ianandrich (~ianandric@c-73-223-61-224.hsd1.ca.comcast.net) has joined
*	hc (~ircd@unaffiliated/hc) has joined
<Zyxoas>	Ambiguous type variables? I'm in way over my head...
*	newhoggy (~newhoggy@37.205.56.245) has joined
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	xcmw has quit (Client Quit)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	FreeBirdLjj has quit (Remote host closed the connection)
*	hc_ has quit (Ping timeout: 246 seconds)
<Limeth_>	How can I create anonymous functions (lambdas)? Doing `filter (== 2) [1, 2]` works, but something like `filter (x = x == 2) [1, 2]` doesn't.
<lightstep>	Limeth_, it's (\x -> x == 2)
*	icedev (~icedev@0x62.de) has left
<glguy>	Zyxoas: You're missing a bunch of extensions at the top of your file
<glguy>	Zyxoas: If that's because you're using other-extensions in a .cabal file, this is a good example of why you shouldn't be doing that
<Zyxoas>	Yep. I am. Sorry. glguy
*	amarp (~amarpotgh@p57967FE9.dip0.t-ipconnect.de) has joined
<Zyxoas>	Might they be pertinent?
<Limeth_>	lightstep: Ah, thanks
*	newhoggy has quit (Ping timeout: 248 seconds)
<Zyxoas>	let me edit the lpaste quickly...
<glguy>	Zyxoas: What you pasted doesn't load in GHC, so yeah it matters
*	hc_ (~ircd@unaffiliated/hc) has joined
*	hc has quit (Ping timeout: 240 seconds)
*	chlong (chlong|gon@nat/redhat/x-oajszzcubfgjxert) has joined
*	Gurkenglas (~Gurkengla@dslb-094-223-136-111.094.223.pools.vodafone-ip.de) has joined
*	ccomb has quit (Ping timeout: 240 seconds)
<glguy>	Zyxoas: Also your instances don't make sense. 'Widget and 'Doodah don't have kinds Type, so you can't make those instances
*	oish (~charlie@159.22.169.217.in-addr.arpa) has joined
*	amarp has quit (Ping timeout: 240 seconds)
*	mohsen_ (~Mohsen@2.182.173.122) has joined
<dsal>	Is there a more convenient way to write / builtin variant of this:
<dsal>	succ' :: (Bounded a, Enum a, Eq a) => a -> a
<dsal>	succ' x
<dsal>	  | x == maxBound = minBound
<dsal>	  | otherwise = succ x
*	lbown (~logan@131.194.164.131) has joined
<Zyxoas>	glguy those must be typos from trying my luck with writing code sans a compiler!
*	amarp (~amarpotgh@p57967FE9.dip0.t-ipconnect.de) has joined
*	refold has quit (Ping timeout: 240 seconds)
*	jdt has quit (Ping timeout: 260 seconds)
*	ccomb (~ccomb@151.135.212.67) has joined
*	schwuk has quit ()
*	jdt (~jdt@208.85.233.130) has joined
*	lightstep has quit (Ping timeout: 240 seconds)
*	jadrian_ (~jadrian@2001:8a0:f039:a101:eab0:47e4:8e5d:b8c6) has joined
*	kotangent has quit (Quit: WeeChat 1.4)
*	hc (~ircd@unaffiliated/hc) has joined
*	OnkelTem has quit (Ping timeout: 240 seconds)
*	cyphase has quit (Ping timeout: 240 seconds)
<barrucadu>	dsal: You can drop the Eq constraint by using fromEnum, but it's still not great
<dsal>	Without eq, it can't match the minbound/maxbound
<Zyxoas>	Apologies once again, glguy. The code has been cleaned up now, and only the real problem remains: http://lpaste.net/358450
<barrucadu>	succ' :: forall a. (Bounded a, Enuma) => a -> a; succ' x = if fromEnum x == fromEnum (maxBound :: a) then minBound else succ a
*	hc_ has quit (Ping timeout: 252 seconds)
<dsal>	Oh, I see.
<barrucadu>	This avoids the forall: succ' x = if ((==) `on` fromEnum) x maxBound then minBound else succ a
<barrucadu>	Whoops, "succ x"
*	Cogitabundus has quit (Quit: Leaving)
<Zyxoas>	In the real code I'm trying to fix, the Doodah on line 39 is actually a variable that iterates over a list of data constructors. I wanna see if I can somehow reflect only a single one -- tell GHC to ignore all other instances of Reifies x Thing except for the one I give it...
*	Snircle has quit (Quit: Textual IRC Client: www.textualapp.com)
*	hc_ (~ircd@unaffiliated/hc) has joined
*	lightstep (~amir@141.226.217.226) has joined
*	pyon has quit (Ping timeout: 240 seconds)
*	mohsen_ has quit (Ping timeout: 252 seconds)
*	hc has quit (Ping timeout: 240 seconds)
*	codrinb has quit (Ping timeout: 240 seconds)
*	mmn80 (uid194575@gateway/web/irccloud.com/x-nooynmvvyywfpydn) has joined
*	_Mzungu_ has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	alx741 (~alx741@190.152.170.76) has joined
*	mthek (~mthek@12.145.98.253) has joined
*	alx741 has quit (Client Quit)
*	alx741 (~alx741@190.152.170.76) has joined
*	hc_ has quit (Ping timeout: 248 seconds)
*	replay has quit (Ping timeout: 248 seconds)
*	albertus1 (~seb@ip-109-84-3-150.web.vodafone.de) has joined
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	hc (~ircd@unaffiliated/hc) has joined
*	ziocroc2 has quit (Ping timeout: 248 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	caumeslasal has quit (Quit: caumeslasal)
*	jathan has quit (Ping timeout: 260 seconds)
*	mohsen_ (~Mohsen@2.182.173.122) has joined
*	ccomb has quit (Ping timeout: 240 seconds)
*	cyphase (~cyphase@unaffiliated/cyphase) has joined
<dsal>	OK, I can't figure out how forall works.
*	pfoetchen has quit (Ping timeout: 255 seconds)
<dsal>	I was trying this:
<dsal>	> succ' :: forall a. (Bounded a, Enum a) => a -> a; succ' x = toEnum $ (succ $ fromEnum x) `mod` fromEnum (maxBound :: a)
<lambdabot>	 <hint>:1:49: error: parse error on input ‘;’
*	pfoetchen (~pfoetchen@beiboot1.petschge.de) has joined
<monochrom>	You used "mod" there.
<barrucadu>	forall requires ScopedTypeVariables.  I'd probably just use the '(==) `on` fromEnum' one though
*	Snircle (~textual@2600:8801:c404:7900:8050:940f:7ebf:330c) has joined
*	hc_ (~ircd@unaffiliated/hc) has joined
<barrucadu>	In fact I think I have used that one, when I wanted to solve this exact problem and found there was no standard function :(
*	hc has quit (Ping timeout: 240 seconds)
*	louispan (~textual@14-203-219-236.static.tpgi.com.au) has joined
<dsal>	I was using mod so I could run off the edge and then wrap around easily.  It *almost* works, except I don't know the type name..
*	codrinb has quit (Ping timeout: 240 seconds)
<monochrom>	@type mod
<lambdabot>	Integral a => a -> a -> a
<dsal>	Yeah, I've fromEnum'd my enum.
*	cdg (~cdg@157.166.173.4) has joined
<dsal>	Though it's acting... not like what I want.
<dsal>	I clearly don't understand forall.
<monochrom>	@type \x -> toEnum $ (succ $ fromEnum x) `mod` fromEnum (maxBound `asTypeOf` x)
<lambdabot>	(Bounded a1, Enum a1, Enum a) => a1 -> a
*	replay (~replay@pdpc/supporter/student/replay) has joined
<monochrom>	Oh I see.
*	reactormonk has quit (Ping timeout: 246 seconds)
<monochrom>	@type \x -> toEnum (succ $ fromEnum x) `mod` fromEnum (maxBound `asTypeOf` x)
<dsal>	I'm missing it -- it seems to be getting the wrong maxBound
<lambdabot>	(Bounded a, Enum a) => a -> Int
*	codrinb (~codrinb@94.177.40.42) has joined
*	cdg_ has quit (Ping timeout: 255 seconds)
<lyxia>	Zyxoas: http://lpaste.net/358450#a358456 your reify was too ambiguous
*	cyphase has quit (Ping timeout: 240 seconds)
<monochrom>	> let {s :: forall a. (Bounded a, Enum a) => a -> a; s x = toEnum $ (succ $ fromEnum x) `mod` fromEnum (maxBound :: a)} in s True
<lambdabot>	 False
<monochrom>	Works for me.
*	jellowj has quit (Ping timeout: 260 seconds)
<dsal>	Yes, it seems to return like, 1 for maxBound
<dsal>	My type has four values, and it goes   v1, v2, v1 ...
*	cyphase (~cyphase@unaffiliated/cyphase) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
<monochrom>	I have a meta-comment on methods of learning and testing.
<monochrom>	Do you use solely this example to determine whether or not you understand forall.
<dsal>	No.  I'm trying to make a succ' that wraps.
*	simendsjo has quit (Remote host closed the connection)
<monochrom>	Or do you have a million examples and you can get forall to work in all other examples except this one.
<dsal>	My initial implementation worked, but required Bounded, Enum, and Eq
<dsal>	I have one example and it doesn't work.
<monochrom>	Because if the former, that's a confirmation bias.
<dsal>	data Bearing = North | East | South | West deriving (Bounded, Ord, Enum, Eq, Show)
<monochrom>	And if the latter, it seems it's pretty clear what's the real culprit.
*	simendsjo (~user@125.37-191-135.fiber.lynet.no) has joined
<dsal>	λ> map succ' [minBound..maxBound] :: [Bearing]
<dsal>	[East,South,North,East]
*	hc (~ircd@unaffiliated/hc) has joined
<Zyxoas>	Thanks so much, lyxia! :-D
<monochrom>	> let {s :: forall a. (Bounded a, Enum a) => a -> a; s x = toEnum $ (succ $ fromEnum x) `mod` fromEnum (maxBound :: a)} in s South
<lambdabot>	 error: Data constructor not in scope: South
<erisco>	that's what happens when you're standing on the West pole
<dminuoso>	How do you folks type things like λ usually? Do you have custom input method? Do you just google for them and copy/paste?
<dminuoso>	I have a feeling nobody is going to remember their unicode codepoints
<Zyxoas>	Damn. I was hoping I could avoid proxies, though. Otherwise I would have no need for TypeApplication...
<monochrom>	OK I'm going to add Bearing to lambdabot
*	newhoggy (~newhoggy@37.205.56.245) has joined
<monochrom>	@let data Bearing = North | East | South | West deriving (Bounded, Ord, Enum, Eq, Show)
<lambdabot>	 Defined.
<monochrom>	> let {s :: forall a. (Bounded a, Enum a) => a -> a; s x = toEnum $ (succ $ fromEnum x) `mod` fromEnum (maxBound :: a)} in s South
<lambdabot>	 North
*	codrinb (~codrinb@94.177.40.42) has joined
*	peacememories has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<monochrom>	> maxBound :: Bearing
*	mkali has quit (Quit: mkali)
<lambdabot>	 West
<erisco>	dminuoso, I type <ctrl> <*> <l> and I can do this thanks to WinCompose, which is based on XCompose
<monochrom>	> fromEnum (maxBound :: Bearing)
<lambdabot>	 3
*	cyborg-one (~cyborg-on@212-178-2-183.broadband.tenet.odessa.ua) has joined
*	Gurkenglas has quit (Ping timeout: 240 seconds)
<Zyxoas>	In particular, the Given class in Kmett's reflection library does not use proxies...
<monochrom>	> fromEnum (minBound :: Bearing)
<lambdabot>	 0
<monochrom>	> length [minBound .. maxBound :: Bearing]
*	implementation_ is now known as enum_
<lambdabot>	 4
*	twanvl (~twanvl@92.110.121.28) has joined
*	jathan (~jathan@fixed-187-190-159-133.totalplay.net) has joined
<erisco>	> map succ [minBound..maxBound] :: [Bearing]
<lambdabot>	 [East,South,West,*Exception: succ{Bearing}: tried to take `succ' of last tag...
*	mohsen_ has quit (Read error: No route to host)
<monochrom>	I think this is enough clues.
<erisco>	no modulo cardinals? oh well
*	mohsen_ (~Mohsen@2.182.173.122) has joined
<monochrom>	Ah I should have also checked "s False".
*	hc_ has quit (Ping timeout: 264 seconds)
*	_Mzungu_ (~digitalmk@rrcs-67-78-218-162.se.biz.rr.com) has joined
*	Neron (~Jeron@ip-88-220-45-224.kampinostelco.pl) has joined
*	peacememories (~textual@84-114-121-230.cable.dynamic.surfer.at) has joined
<monochrom>	P.S. You will run into a similar problem in Python.
*	cdg_ (~cdg@157.166.173.4) has joined
*	eklavya has quit (Remote host closed the connection)
*	hc_ (~ircd@unaffiliated/hc) has joined
*	codrinb has quit (Ping timeout: 260 seconds)
*	Costar (~Costar@2804:14d:7e85:305:e41d:5cff:5eff:6f9c) has joined
*	cdg__ (~cdg@157.166.173.4) has joined
*	simendsjo has quit (Remote host closed the connection)
*	peacememories has quit (Client Quit)
*	cdg has quit (Ping timeout: 248 seconds)
*	hannofcart (6a336d5c@gateway/web/freenode/ip.106.51.109.92) has joined
*	peacememories (~textual@84-114-121-230.cable.dynamic.surfer.at) has joined
*	hc has quit (Ping timeout: 248 seconds)
*	cdg_ has quit (Ping timeout: 246 seconds)
*	hc_ has quit (Ping timeout: 246 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
<jle`>	Zyxoas: given can avoid proxies because there is only one value associated with every type
*	cdg__ has quit (Ping timeout: 248 seconds)
*	hc (~ircd@unaffiliated/hc) has joined
<jle`>	Zyxoas: but with Reifies, there is potentially more than one thing you can reflect from a given type
<jle`>	er acutally,, sorry, everything i just wrote as wrong
<jle`>	ignore me :)
*	HoloIRCUser1 (~holoirc@197.156.95.205) has joined
*	eklavya (~eklavya@2405:205:1285:9022:916f:cc9e:3df5:8039) has joined
<dsal>	dminuoso: M-x insert-char RET lambda   or C-/ and then it's just \lambda
*	eminhi has quit (Quit: leaving)
*	acowley_away is now known as acowley
*	codrinb has quit (Ping timeout: 252 seconds)
*	shwouchk (uid154201@gateway/web/irccloud.com/x-nrmccrhdcuaumhax) has joined
*	hc has quit (Ping timeout: 248 seconds)
*	FreeBirdLjj (~freebirdl@180.159.175.114) has joined
*	hc (~ircd@unaffiliated/hc) has joined
*	eklavya has quit (Remote host closed the connection)
*	tromp (~tromp@ip-217-103-3-94.ip.prioritytelecom.net) has joined
*	peacememories has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	peacememories (~textual@84-114-121-230.cable.dynamic.surfer.at) has joined
<lyxia>	Zyxoas: reify :: a -> (forall s. Reifies s a => r) -> r   would be the true type, but AFAICT there is no way to call that function due to how type checking works.
*	biglama (~Day_dream@ip-188.net-82-216-175.joinville2.rev.numericable.fr) has joined
*	Zyxoas has quit (Ping timeout: 248 seconds)
*	Gurkenglas (~Gurkengla@dslb-094-223-136-111.094.223.pools.vodafone-ip.de) has joined
*	petrus (~petrus@unaffiliated/petrus) has joined
*	Yuras has quit (Ping timeout: 260 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	hc has quit (Ping timeout: 252 seconds)
*	conal has quit (Quit: Computer has gone to sleep.)
*	tromp has quit (Ping timeout: 246 seconds)
*	HarveyPwca (~HarveyPwc@ip-64-134-197-81.public.wayport.net) has joined
*	hc (~ircd@unaffiliated/hc) has joined
*	sellout- has quit (Quit: Leaving.)
*	FreeBirdLjj has quit (Remote host closed the connection)
*	sellout- (~Adium@c-67-188-42-8.hsd1.ca.comcast.net) has joined
*	sellout- has quit (Client Quit)
*	sellout- (~Adium@c-67-188-42-8.hsd1.ca.comcast.net) has joined
*	jellowj (~yellow-ja@ewx205.neoplus.adsl.tpnet.pl) has joined
*	sellout- has quit (Client Quit)
*	sellout- (~Adium@c-67-188-42-8.hsd1.ca.comcast.net) has joined
*	handyc (~handyc@c-76-25-33-43.hsd1.co.comcast.net) has joined
*	sellout- has quit (Client Quit)
*	codrinb has quit (Ping timeout: 240 seconds)
*	sellout- (~Adium@c-67-188-42-8.hsd1.ca.comcast.net) has joined
*	Zyxoas (~zyxoas@41.113.79.92) has joined
*	sellout- has quit (Client Quit)
*	Zyxoas has quit (Read error: Connection reset by peer)
*	crownose (~weechat@2a02:8010:6173:0:2ab2:bdff:fe2b:c456) has joined
*	HoloIRCUser1 is now known as birbirtu
*	sellout- (~Adium@c-67-188-42-8.hsd1.ca.comcast.net) has joined
*	Swizec_ has quit (Quit: Computer has gone to sleep.)
<dsal>	monochrom: so, off by one error?  This implementation isn't much more satisfying, though. :(
*	hc_ (~ircd@unaffiliated/hc) has joined
*	lonokhov (~lonokhov@93.185.17.141) has joined
<monochrom>	I don't know what counts as satisfying.
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Thu Sep 14 12:01:11 2017

**** BEGIN LOGGING AT Fri Sep 15 10:34:28 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	nakal_ has quit (Ping timeout: 260 seconds)
*	connrs (~connrs@conners.plus.com) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	tsaka__ (~torstein@84-52-234.108.3p.ntebredband.no) has joined
*	begriffs has quit (Quit: Leaving...)
<Welkin>	__monty__: it's not declared in your .cabal file
<Welkin>	the package name*
*	codrinb has quit (Ping timeout: 240 seconds)
*	LysergicDreams has quit (Ping timeout: 248 seconds)
<__monty__>	Welkin: Containers is declared in my .cabal
<glguy>	__monty__: If you have a question about a specific error message it'll be easier if you paste the error message and then any imports or file contents that seem relevant
<glguy>	than to ask generically about errors
<tomasino>	I'm struggling with the difference of when to use (.) vs ($). I understand that $ has lower order precidence than pretty much everything. Is that the only difference? Is there something I'm missing?
*	codrinb (~codrinb@94.177.40.42) has joined
*	im0nde has quit (Ping timeout: 255 seconds)
<lyxia>	tomasino: ($) applies a function to its argument. (.) composes two functions to make a new function.
<Welkin>	tomasino: they are not actually alternatives; they are completely different
<Welkin>	`$` is oftne used to reduce parentheses
<tomasino>	I guess I was reading it like the (.) was applying a function to the result of another one
<tomasino>	but composition is more than that
<__monty__>	Error: http://ix.io/zXq Cabalfile: http://ix.io/zXm Head of .hs: http://ix.io/zXp
<Welkin>	(.) f g x = f (g x)
<Welkin>	= f $ g x
*	codrinb has quit (Ping timeout: 240 seconds)
*	abrcdbr has quit (Max SendQ exceeded)
<tomasino>	I must be missing something then because it still seems like with that logic: f . g x  would be the same as f $ g x
*	raynold (uid201163@gateway/web/irccloud.com/x-guyydegyjcjbedzp) has joined
<Welkin>	(f . g) x = f .g $ x
<Welkin>	(f . g) x = f . g $ x
<__monty__>	f . g x = f . (g x)
<Welkin>	actually, above, when I wrote `f $ g x`, that is wrong and will be a type error
<tomasino>	oooh, okay
*	Limeth_ has quit (Ping timeout: 252 seconds)
*	reactormonk has quit (Ping timeout: 246 seconds)
*	wvansteen has quit (Ping timeout: 240 seconds)
<glguy>	(f $ g x) === f (g x)     --while--   (f . g x) === (\y -> f ((g x) y))
<tomasino>	glguy: I think that finally gets in into the grey matter. Thank you
*	ziocroc2 has quit (Ping timeout: 248 seconds)
<tomasino>	I'm going to go ahead and read that 10,000 times more
<bjs>	tomasino: it's easier to put brackets around to understand
<byorgey>	Welkin: eh?  f $ g x  is not wrong
**** ENDING LOGGING AT Fri Sep 15 10:53:54 2017

**** BEGIN LOGGING AT Fri Sep 15 10:53:54 2017

<bjs>	Things like (f . g x) are visually ambiguous
<tabaqui>	err
<tabaqui>	(.) f g x /= f (g x)
*	codrinb (~codrinb@94.177.40.42) has joined
<Psybur>	> (f . g x)
<tabaqui>	right: (.) f g x = (f . g) x
<lambdabot>	 error:
<lambdabot>	     • Could not deduce (Show b0) arising from a use of ‘f’
<lambdabot>	       from the context: (FromExpr c, Show a)
*	machinedgod (~machinedg@198-84-249-5.cpe.teksavvy.com) has joined
<Psybur>	> f x
<lambdabot>	 error:
<lambdabot>	     • Ambiguous type variable ‘a0’ arising from a use of ‘show_M172069796709...
<lambdabot>	       prevents the constraint ‘(Show a0)’ from being solved.
<Psybur>	Hmm I thought we could show functions, must have missed something
<ski>	> f x :: Expr
<lambdabot>	 f x
<Psybur>	ah
<Psybur>	> (f . g x) :: Expr
<lambdabot>	 error:
<lambdabot>	     • Couldn't match expected type ‘Expr’ with actual type ‘() -> c0’
<lambdabot>	     • Probable cause: ‘(.)’ is applied to too few arguments
<ski>	> (f . g x) :: Expr -> Expr
<lambdabot>	 error:
<lambdabot>	     • Ambiguous type variable ‘b0’ arising from a use of ‘f’
<lambdabot>	       prevents the constraint ‘(Show b0)’ from being solved.
<ski>	> not  -- showing functions
<lambdabot>	 <Bool -> Bool>
*	dddddd has quit (Remote host closed the connection)
<tabaqui>	usually that is said to me, but
<tabaqui>	you can /query lambdabot
<tomasino>	one last question on the subject. I'm saying "f before g" based on the category theory videos I've been watching when referring to (f . g). How do you "say" (f $ g)?
*	sssilver (~sssilver@38.122.48.218) has joined
<ski>	"apply `f' to `g'" ?
<tomasino>	thanks
<cocreature>	“f applied to g”
<tabaqui>	f deistvuet na g, I would say
*	codrinb has quit (Ping timeout: 240 seconds)
*	djce has quit ()
<tabaqui>	we have discussed earlier about "monoid over addition" and "monoid under addition"
*	im0nde (~im0nde@2001-4dd1-6877-0-c8bc-1fca-c5de-f2d2.ipv6dyn.netcologne.de) has joined
*	mjevans- (~mjevans-@89.238.178.75) has joined
<bjs>	tomasino: f applied to g?
*	tomus_ is now known as tomus
*	eschnett (~eschnett@38.104.158.162) has joined
<bjs>	tomasino: it's funny because I've always heard "f after g" for that notation
*	tromp has quit (Remote host closed the connection)
<tomasino>	bjs: i don't really know for sure. "Before" was what Bartosz Milewski used in the videos about Category Theory. Maybe it's different in Haskell world, maybe not?
*	jeltsch (~wolfgang@82.131.87.29.cable.starman.ee) has joined
*	cyborg-one has quit (Ping timeout: 260 seconds)
*	sssilver has quit (Ping timeout: 248 seconds)
<tomasino>	bjs: regarding (.) i mean
*	saurabhnanda (~saurabhna@42.106.19.25) has joined
<dmwit>	> (f :: Expr -> Expr) . g (x :: Expr)
<lambdabot>	 <() -> Expr>
<dmwit>	> ((f :: Expr -> Expr) . (g :: Expr -> Expr)) x
<lambdabot>	 f (g x)
*	mercato (~mercato@c-50-135-215-23.hsd1.wa.comcast.net) has joined
*	replay (~replay@pdpc/supporter/student/replay) has joined
*	__monty__ (~toonn@unaffiliated/toonn) has left
*	codrinb (~codrinb@94.177.40.42) has joined
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Fri Sep 15 11:04:13 2017

**** BEGIN LOGGING AT Fri Sep 15 11:05:50 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	mou has quit (Quit: WeeChat 1.4)
*	tabaqui has quit (Quit: WeeChat 1.9)
*	codrinb has quit (Ping timeout: 248 seconds)
*	jellowj (~yellow-ja@dat187.neoplus.adsl.tpnet.pl) has joined
*	tabaqui (~Tabaqui@31.44.93.25) has joined
*	sssilver has quit (Ping timeout: 248 seconds)
*	mthek (~mthek@47.59.105.208) has joined
*	tabaqui has quit (Client Quit)
*	_Mzungu_ (~digitalmk@rrcs-67-78-218-162.se.biz.rr.com) has joined
*	tabaqui (~Tabaqui@31.44.93.25) has joined
*	jeltsch (~wolfgang@82.131.87.29.cable.starman.ee) has left
*	govg has quit (Ping timeout: 240 seconds)
*	kuribas (~user@ptr-25vy0i9sxw6dqwiqm8c.18120a2.ip6.access.telenet.be) has joined
*	tabaqui has quit (Client Quit)
*	danthemyth has quit (Remote host closed the connection)
*	cschneid has quit (Remote host closed the connection)
*	shangxiao has quit (Ping timeout: 248 seconds)
*	cschneid (~cschneid@2603:300b:901:300:318a:1d2e:cc0b:5563) has joined
*	revtintin has quit (Ping timeout: 248 seconds)
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
<infandum>	cocreature: In case you were wondering, that was the issue, the getDirectory wildcard stuff in shake.
<infandum>	 
<infandum>	It works now.
*	codrinb (~codrinb@94.177.40.42) has joined
*	telekid (~telekid@136.24.48.241) has joined
*	Jesin has quit (Quit: Leaving)
*	eminhi (~eminhi@157.48.14.26) has joined
*	sssilver_ (~sssilver@38.122.48.218) has joined
*	cschneid has quit (Ping timeout: 246 seconds)
*	tabaqui (~Tabaqui@31.44.93.25) has joined
*	jellowj has quit (Ping timeout: 248 seconds)
*	codrinb has quit (Ping timeout: 240 seconds)
*	Limeth_ (~Limeth@94.142.238.158) has joined
*	xcmw (~textual@host-129-137-24-3.vpn.uc.edu) has joined
*	mizu_no_oto_work has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	jellowj (~yellow-ja@dat187.neoplus.adsl.tpnet.pl) has joined
*	mizu_no_oto_work (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
<cocreature>	infandum: nice!
*	jmelesky has quit (Read error: Connection reset by peer)
*	codrinb (~codrinb@94.177.40.42) has joined
*	telekid has quit (Quit: WeeChat 1.9)
*	nickoh (~nhamilton@93-138-224-52.adsl.net.t-com.hr) has joined
*	xcmw has quit (Ping timeout: 240 seconds)
<saurabhnanda>	intero: 7 GB+ ... why is this taking up so much memory?!
*	jmelesky (~jmelesky@162.213.77.59) has joined
<d6e_>	saurabhnanda: what is?
<saurabhnanda>	d6e_: intero
<jared-w>	saurabhnanda: it depends on a lot of things. How many modules do you have in your project, how many files do you have open, etc
<saurabhnanda>	jared-w: 1,000+ modules and files. Mostly small.
<jared-w>	The general LOC amount for the project can also affect that. The more you load into GHCi the more memory intero sucks up
<saurabhnanda>	But 7 gigs! and it keeps growing with time. In the afternoon it was 5 gigs. Is there a space leak in intero?
*	teggi has quit (Quit: Leaving...)
<jared-w>	saurabhnanda: In that case you're trying to load up 1,000+ modules and files into Intero simultaneously so it'll take quite a bit of ram in general :p
*	HarveyPwca has quit (Ping timeout: 240 seconds)
<jared-w>	saurabhnanda: I'm not sure if it's a space leak or just a consequence of tracking changes and re-running checkers. Most of intero is really just GHCi wrapped around stack compatibility
*	machinedgod has quit (Quit: leaving)
*	zcourts has quit ()
<saurabhnanda>	but why?! we have a similar sized project in Rails (in fact, accessing the same underlying DB schame), and irb (or rails console) doesn't take up anywhere close to this much RAM!
*	machinedgod (~machinedg@198-84-249-5.cpe.teksavvy.com) has joined
<glguy>	Oh, maybe open the project in irb then
*	alex`` has quit (Ping timeout: 248 seconds)
<saurabhnanda>	what is going on internally for it to continuously keep increasing the RAM usage. Two problems: (a) too much RAM, and (b) RAM usage keeps growigng!
*	nickoh has quit (Ping timeout: 240 seconds)
*	ianandrich (~ianandric@c-73-223-61-224.hsd1.ca.comcast.net) has joined
*	tsaka__ has quit (Ping timeout: 240 seconds)
*	twanvl (~twanvl@92.110.121.28) has joined
*	mson has quit (Quit: Connection closed for inactivity)
*	kuribas has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
*	tromp (~tromp@ip-217-103-3-94.ip.prioritytelecom.net) has joined
<mnoonan>	i wonder if some intero action ends up binding a unqiue name in ghci or something.. then the gc would never let go of it
<mnoonan>	can you get a heap profile on intero?
<saurabhnanda>	mnoonan: how do I do that?
*	kaftoot (~textual@104.193.14.42) has joined
*	mkali has quit (Quit: mkali)
<mnoonan>	¯\_(ツ)_/¯
*	Achylles (~Achylles@191.193.215.70) has joined
<mnoonan>	maybe like this.. i've never tried: https://stackoverflow.com/questions/44698036/using-rts-profiling-within-interos-ghci
*	Durbley (~Durbley@c-73-148-179-151.hsd1.fl.comcast.net) has joined
*	whoisxy (~whoisxy@83.137.254.176) has joined
<mnoonan>	actually, that probably isn't profiling intero itself
*	HarveyPwca (~HarveyPwc@ip-64-134-197-81.public.wayport.net) has joined
<saurabhnanda>	has anyone tried keeping a GhCi open and constantly loading/reloading stuff in it?
<saurabhnanda>	does the memory usage of GHCi also keep growing?
*	des_ has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
*	tromp has quit (Ping timeout: 240 seconds)
<mnoonan>	actually, did you see this issue report? https://github.com/commercialhaskell/intero/issues/84
*	pfurla has quit (Ping timeout: 240 seconds)
<mnoonan>	and a possibly-related ghci report: https://ghc.haskell.org/trac/ghc/ticket/12848
*	chakri (40801608@gateway/web/freenode/ip.64.128.22.8) has joined
<chakri>	HELP
<saurabhnanda>	checking
<chakri>	are there any good exercises to understand types and typeclasses?
*	grizwako (~grizwako_@93-143-147-108.adsl.net.t-com.hr) has joined
*	vuto has quit (Ping timeout: 240 seconds)
*	zoey (~zoey@2601:448:8400:2a30:4de0:f61:ea4c:a30) has joined
<monochrom>	Most textbooks have some.
<saurabhnanda>	mnoonan: thasnks for the links. Exactly what I'm facing!
*	mthek has quit (Ping timeout: 246 seconds)
*	banc has quit (Ping timeout: 240 seconds)
<mnoonan>	saurabhnanda: at least you aren't alone :)  good luck!
*	nakal has quit (Disconnected by services)
*	nakal_ (~nakal@port-92-201-103-243.dynamic.qsc.de) has joined
*	tsaka__ (~torstein@84-52-234.108.3p.ntebredband.no) has joined
*	aarvar (~foewfoiew@50.34.105.170) has joined
<saurabhnanda>	restarted intero and it came down to 800MB (from 7 GB)
*	acarrico (~acarrico@pppoe-68-142-58-22.gmavt.net) has joined
*	kaftoot has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<jared-w>	Sounds like a weird sort of leak then...
*	Guest26 (~textual@104.193.14.42) has joined
*	banc (~master@217.151.98.168) has joined
*	tromp (~tromp@ip-217-103-3-94.ip.prioritytelecom.net) has joined
*	zero_byte (~zer0@ip-89-103-110-138.net.upcbroadband.cz) has joined
*	_Mzungu_ has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	dhil has quit (Ping timeout: 240 seconds)
*	alx741 (~alx741@190.152.170.201) has joined
*	mizu_no_oto_work has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	codrinb has quit (Ping timeout: 240 seconds)
*	alx741 has quit (Client Quit)
*	cschnei__ (~cschneid@2603:300b:901:300:3408:3d26:b808:da6a) has joined
*	alx741 (~alx741@190.152.170.201) has joined
*	obihann has quit (Quit: Lost terminal)
*	robotroll (~robotroll@unaffiliated/robotroll) has joined
*	ziocroc2 (~ziocroc@151.74.6.150) has joined
*	_Mzungu_ (~digitalmk@rrcs-67-78-218-162.se.biz.rr.com) has joined
*	taktoa has quit (Remote host closed the connection)
*	codrinb (~codrinb@94.177.40.42) has joined
*	pikhq (~pikhq@c-73-181-126-9.hsd1.co.comcast.net) has joined
*	Wizek_ has quit (Ping timeout: 246 seconds)
*	ertes has quit (Ping timeout: 240 seconds)
*	sssilver (~sssilver@38.122.48.218) has joined
*	sssilver_ has quit (Ping timeout: 246 seconds)
*	cpennington has quit (Remote host closed the connection)
*	codrinb has quit (Ping timeout: 248 seconds)
*	samrat_ has quit (Ping timeout: 240 seconds)
*	Qommand0r has quit (Quit: WeeChat 1.9)
*	m0rphism (~m0rphism@HSI-KBW-085-216-002-127.hsi.kabelbw.de) has joined
*	twandy has quit (Quit: twandy)
*	zachk (~Zach@unaffiliated/zachk) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	Guest26 has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	zachk has quit (Max SendQ exceeded)
<chakri>	?
*	shangxiao (~shangxiao@106-68-92-108.dyn.iinet.net.au) has joined
<geekosaur>	??
*	zachk (~Zach@unaffiliated/zachk) has joined
*	zero_byte has quit (Ping timeout: 240 seconds)
<ski>	???
<chakri>	are there any good exercises to understand types and typeclasses?
<ski>	<monochrom> Most textbooks have some.
*	sssilver has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	codrinb has quit (Ping timeout: 240 seconds)
<Welkin>	@where typeclassopedia
<lambdabot>	http://www.haskell.org/haskellwiki/Typeclassopedia
<Welkin>	chakri: use that
*	biglama has quit (Ping timeout: 248 seconds)
<ski>	chakri : do you understand basics, like type signatures, lists, `Maybe', `Either', trees ?
<chakri>	yes, I understand basics
<ski>	ok, good
*	Destol has quit (Quit: Lost terminal)
<ski>	(that wasn't clear to me, from what you said)
*	biglama (~Day_dream@ip-188.net-82-216-175.joinville2.rev.numericable.fr) has joined
<monochrom>	Then again, don't trust it when people say they understand.
*	sw1nn has quit (Quit: WeeChat 1.9)
<mnoonan>	"trust, but verify"
<Psybur>	"trust, but don't trust"
<monochrom>	Yeah, but Occam's Razor cuts it down to "just verify".
*	preyalone (uid21561@gateway/web/irccloud.com/x-jfsfaskfiblhdedv) has joined
<ski>	yea, but they thinking they understand has at least somewhat higher chance of being able to tackle that, than they knowing they don't understand
<mnoonan>	"don't really trust, but act like a decent human being and put on a facade of trustiness"
<Welkin>	admitting that you don't understand is the first step to recovery
<Psybur>	"the grey matter in my head makes me do things!"
<nshepperd>	thinking that you understand, but being wrong, is the most common form of non-understanding
*	codrinb (~codrinb@94.177.40.42) has joined
<Welkin>	what is they believe that they overstand?
<Welkin>	if*
*	sw1nn (~neale@2001:8b0:caed:24b4:c4a0:db91:8b06:92e6) has joined
*	nnplv has quit (Ping timeout: 248 seconds)
<ski>	nshepperd : it's a step on the way ..
<Welkin>	the more you know, the less you realize you know
<monochrom>	I disagree that it is decent.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Welkin>	if you think you know everything, you know nothing. If you think you know nothing, you probably know a lot
<trevortknguyen[m>	Does anyone know how to compare using frp-arduino to using Copilot from Galois for programming Arduinos?
*	sssilver_ (~sssilver@38.122.48.218) has joined
<Welkin>	the more you know, the less you realize you don't know*
*	Sampuka (~Sampuka@x1-6-24-7f-20-00-22-92.cpe.webspeed.dk) has joined
<Welkin>	the more you know, the more you realize you don't know*
<Welkin>	o.o
<Welkin>	that one
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Fri Sep 15 12:22:28 2017

**** BEGIN LOGGING AT Fri Sep 15 18:38:36 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<cr1t1cal>	ah. and why 2? i use 8
<cr1t1cal>	hehe
<idolator>	`expandtab` is the one
*	codrinb has quit (Ping timeout: 240 seconds)
*	kav (~kari@dsl-hkibng42-5673d7-15.dhcp.inet.fi) has joined
<cr1t1cal>	ye i got that. thanks
*	jellowj has quit (Ping timeout: 255 seconds)
<idolator>	because my monitor isn't quadruple wide
<cr1t1cal>	lol
<cr1t1cal>	have fun ppl
*	cr1t1cal has quit (Quit: WeeChat 1.6)
*	zoey has quit (Quit: Leaving)
*	uwap (~uwap@genja.uwap.name) has joined
*	asthasr has quit (Quit: Leaving)
*	dfeuer has quit (Ping timeout: 240 seconds)
*	cranej (~crane@180.164.160.183) has joined
*	mayhew has quit (Quit: WeeChat 1.6)
*	olligobber (~olligobbe@unaffiliated/olligobber) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	jedws (~jedws@2001:8003:359f:a700:bcf2:f9de:aac:1a98) has joined
<Welkin>	what is a "vim-like"?
<juri_>	bad.
<Welkin>	vim came out in 1991. emacs came out in 1976
*	codrinb has quit (Ping timeout: 246 seconds)
*	Costar has quit (Remote host closed the connection)
<idolator>	emacs is quite not vim-like
*	Guest26 (~textual@2605:e000:60d7:7d00:a97b:c9e6:b1c9:7766) has joined
*	ystael has quit (Ping timeout: 260 seconds)
*	cranej has quit (Quit: WeeChat 1.9)
*	jmcarthur (~jmcarthur@2601:86:100:1620:11f3:5a14:fc98:ceb1) has joined
*	Ojd has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	fizbin (~Adium@pool-96-235-150-81.cmdnnj.east.verizon.net) has joined
*	hackagebot (~hackagebo@2a00:dcc0:eda:88:245:71:269a:892d) has joined
*	kuttifunk1 (~Thunderbi@188.174.193.197) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	xuanrui (~xuanrui@209.6.192.227) has joined
*	kuttifunk has quit (Ping timeout: 248 seconds)
*	kuttifunk1 is now known as kuttifunk
*	Guest26 has quit (Ping timeout: 255 seconds)
*	quobo has quit (Quit: Connection closed for inactivity)
*	Costar (~Costar@179.215.124.226) has joined
*	vuto (~vuto@42.119.112.149) has joined
*	Flechette (~Sundancer@unaffiliated/sundancertp) has joined
<crucify_me>	hi is the commented type signature here an error of an online solution set?   https://ptpb.pw/8CTc
*	codrinb has quit (Ping timeout: 248 seconds)
<crucify_me>	*ie is it in error?
*	marcux has quit (Quit: leaving)
*	marcux (~marco@209.160.121.241) has joined
<crucify_me>	I don't understand that signature
<mniip>	no that looks like a more generic type
<mniip>	that is still valid for this function
<crucify_me>	mniip thanks, really? I couldn't get it to run... one moment pls
*	pera has quit (Ping timeout: 240 seconds)
*	banc has quit (Quit: ZNC - http://znc.in)
*	Contessa has quit (Ping timeout: 264 seconds)
<mniip>	@let signum_ x | x < 0 = -1; | x == 0 = 0; | x > 0 = 1
<lambdabot>	 Parse failed: Parse error: |
<mniip>	@let signum_ x | x < 0 = -1 | x == 0 = 0 | x > 0 = 1
<lambdabot>	 Defined.
*	hucksy_ (~hucksy@p4FD1FAFD.dip0.t-ipconnect.de) has joined
<mniip>	:t signum_
<lambdabot>	(Ord a, Num a, Num t) => a -> t
*	marcux has quit (Client Quit)
*	marcux (~marco@209.160.121.241) has joined
*	Mon_Ouie has quit (Ping timeout: 240 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
<crucify_me>	mniip, odd it does work thank you. could you explain why there are two Num constraints there?
<mniip>	because there are two constrained types?
*	Swizec has quit (Quit: Computer has gone to sleep.)
<crucify_me>	mniip, er..
*	unK_ has quit (Quit: KVIrc 4.9.2 Aria http://www.kvirc.net/)
*	hucksy has quit (Ping timeout: 240 seconds)
<crucify_me>	sorry I don't know how that signature works
*	groscoe has quit (Ping timeout: 260 seconds)
<idolator>	a is both a Num and an Ord (Ord because you're applying order comparisons on it)
<mniip>	well
<idolator>	t need only be a Num
<mniip>	signum_ is a function from any a to any t
<mniip>	as long as a is Ord and Num
<mniip>	and t is Num
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
<crucify_me>	if idolator wanted to see the paste https://ptpb.pw/8CTc
*	codrinb has quit (Ping timeout: 240 seconds)
<crucify_me>	the first signature there I guessed and it works fine I thought
*	marcux has quit (Quit: leaving)
*	lefinch (~Adium@2401:7400:e800:359c:6042:ca1e:41dc:3d60) has joined
*	marcux (~marco@209.160.121.241) has joined
<crucify_me>	the commented one is causing me trouble
<idolator>	you're requiring that the output type also be of typeclass Ord
*	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined
*	marcux has quit (Client Quit)
<idolator>	which is fine
<crucify_me>	but isn't the output type just a?
<idolator>	but it doesn't need to be
*	`^_^v (~nycs@pool-173-61-30-116.cmdnnj.fios.verizon.net) has joined
<crucify_me>	> signum 3.0
<lambdabot>	 1.0
*	didpul (~quassel@201.141.37.80) has joined
*	mac10688 (~mac10688@c-24-21-116-24.hsd1.or.comcast.net) has joined
<idolator>	it need not be. after all, you're losing all of the `a` value but the sign
<crucify_me>	interesting please hold on
*	codrinb (~codrinb@94.177.40.42) has joined
*	`^_^v has quit (Client Quit)
<idolator>	any set of three elements with an equivalence relation should do
*	lispy has quit (Remote host closed the connection)
*	didpul has quit (Remote host closed the connection)
*	banc (~master@217.151.98.168) has joined
*	hackagebot positron 0.1.0.0 – Experiment – https://hackage.haskell.org/package/positron
<idolator>	Ord represents that the output set should have an ordering relation over it, which is a step further
*	`^_^v (~nycs@pool-173-61-30-116.cmdnnj.fios.verizon.net) has joined
<crucify_me>	right, the last point you made, that program requires Ord because of the way the case statements are written
<crucify_me>	idolator, 
<crucify_me>	correct?
*	twandy has quit (Ping timeout: 240 seconds)
<olligobber>	:t signum
<lambdabot>	Num a => a -> a
<olligobber>	:t signum_
<lambdabot>	(Ord a, Num a, Num t) => a -> t
*	lefinch (~Adium@2401:7400:e800:359c:6042:ca1e:41dc:3d60) has left
*	lefinch (~Adium@2401:7400:e800:359c:6042:ca1e:41dc:3d60) has joined
*	cranej (~crane@180.164.160.183) has joined
*	afarmer has quit (Ping timeout: 260 seconds)
*	marcux (~marco@209.160.121.241) has joined
*	eschnett (~eschnett@ktnron0916w-lp130-1-65-94-201-103.dsl.bell.ca) has joined
*	iqubic (~iqubic@2601:602:9901:2c9f::da25) has joined
*	jmcarthur has quit (Ping timeout: 252 seconds)
*	Welkin has quit (Quit: leaving)
<crucify_me>	sorry no capiche. signum doesn't require Ord at all?
<zoid1>	Why did lambdabot spit out two different type signatures?
*	chlong has quit (Ping timeout: 252 seconds)
<crucify_me>	one of the signums is signum_ which was written for helping me out
<crucify_me>	I'm a bit confused as usual
<crucify_me>	https://ptpb.pw/8CTc zoid1 see comments
<olligobber>	zoid1, I asked about two functions, hence two types
*	devjason has quit (Ping timeout: 260 seconds)
<crucify_me>	olligobber, et al , so because of the way the case statements are written sequentially, is that why it needs that longer signature?
*	Jesin (~Jesin@pool-72-83-138-15.washdc.fios.verizon.net) has joined
<olligobber>	I don't know enough about signum_ to answer that
<olligobber>	oh, it was defined up there
*	afarmer (~afarmer@199.201.64.3) has joined
<olligobber>	it's because you used < on x, which can only happen if x is Ord
<olligobber>	you compared x to a number, which can only happen if x is Num
*	ystael (~ystael@209.6.50.55) has joined
*	sigmundv (~sigmundv@178.167.153.106.threembb.ie) has joined
*	Noldorin has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<crucify_me>	ok yes, so there are 2 versions of Num : Num a and Num a1. why is that?
<olligobber>	and you returned numbers, so the return value of signum_ must be Num
*	sigmundv has quit (Remote host closed the connection)
<olligobber>	crucify_me, because what it's given doesn't have to be the same as what it returns
<olligobber>	that function is fine if I give it a Float and expect it to return an Integer
*	lefinch has quit (Quit: Leaving.)
<olligobber>	those two types can be the same too, it will work either way
<crucify_me>	oh because ie if you enter 1.2   ..? excellent I see, yes you need to make it more flexible
<crucify_me>	thanks!
*	justan0theruser has quit (Ping timeout: 240 seconds)
<olligobber>	in general if you don't tell Haskell what type something will be, it will make it as general as possible
<olligobber>	if you want it to be less general, declare its type
<crucify_me>	right, however with the Num a  alone, it does take a Float I believe olligobber 
<olligobber>	yeah, it will take a Float as it is
<crucify_me>	what would be a case where the Num a1 is essential?
<olligobber>	if I give it 'a', it can
<olligobber>	can't do 'a' < 0
*	ystael has quit (Ping timeout: 240 seconds)
<olligobber>	cos 'a' isn't a number but 0 is
<olligobber>	:t (<)
<lambdabot>	Ord a => a -> a -> Bool
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	cdg (~cdg@2600:1700:3120:40e0:c57:34b8:c7a6:6985) has joined
*	ianandrich (~ianandric@c-73-223-61-224.hsd1.ca.comcast.net) has joined
*	augur has quit (Remote host closed the connection)
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
<crucify_me>	yes, but what would be an input that illustrates how the Num a1 is utilized olligobber ?
*	mercato (~mercato@c-50-135-215-23.hsd1.wa.comcast.net) has joined
<crucify_me>	since a Float doesn't require the additional value in the signature
*	cdg has quit (Ping timeout: 246 seconds)
<idolator>	signum -1.0
<idolator>	signum (-1.0)
*	vuto has quit (Ping timeout: 260 seconds)
<idolator>	lambdabot, help
<zoid1>	> signum (-1.0)
<idolator>	:help
<lambdabot>	 -1.0
<idolator>	ty
<idolator>	> signum (-1.0)
<crucify_me>	ok it goes unevaluated
<lambdabot>	 -1.0
<idolator>	that's your version
<crucify_me>	> signum_ (-1.0)
<lambdabot>	 -1
*	eacamero_ is now known as eacameron
<olligobber>	I'm not sure if we're talking about signum or signum_ right now...
<idolator>	that's the version you're asking about
*	augur has quit (Ping timeout: 240 seconds)
<olligobber>	the reason signum_ needs the input to be Num is so it can compare the input to something that is a Num
<olligobber>	so signum_ 'a' won't work, since signum_ tries to do 'a' < 0 which doesn't make sense
<olligobber>	signum_ 0.1 will work, since signum_ can do 0.1 < 0
*	koz_ has quit (Ping timeout: 240 seconds)
*	mercato has quit (Quit: mercato)
<olligobber>	but signum_ (2::Integer) will also work, even though (2::Integer) isn't a Float, it can be compared to 0
*	codrinb has quit (Ping timeout: 246 seconds)
*	devjason (~devjason@173.216.228.58) has joined
<crucify_me>	ok so the extra value, Num a1, is to distinguish between potential numerical types, and the numerical type, Integer, which is used in the case statements
<olligobber>	no type is used in the case statements
<olligobber>	in the case statements, the input is compared to 0
<olligobber>	:t 0
<lambdabot>	Num t => t
<olligobber>	0 can be any numerical type
<pikajude>	because that secretly becomes "fromInteger 0"
<pikajude>	i think
<pikajude>	yeah it does
<pikajude>	if you turn on RebindableSyntax and try to use an integer literal, you'll get an error about fromInteger missing
*	xcmw (~textual@cpe-98-28-136-79.cinci.res.rr.com) has joined
*	alviprofluvium (~diarrea@pc-77-133-44-190.cm.vtr.net) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	sssilver (~sssilver@2605:6000:ead6:6700:194b:7e5c:3637:d7f5) has joined
<JazzyEagle>	Odd question...  Trying to figure out a web framework and a corresponding template language...  The only templating langauge I see that seems to support the three big web languages (HTML/CSS/JS) is Shakespeare, which has a more complex backend...
<crucify_me>	thanks pikajude olligobber I need a tutor. still don't get why Num a and Num a1 are required, when signum seems to do everything that signum_ does . very sorry
<JazzyEagle>	Most of the other templating languages I'm seeing appear to focus purely on HTML....
<JazzyEagle>	blaze-html looks nice, but I'm not seeing a blaze-css nor blaze-js
<JazzyEagle>	Does anyone have any other recommendations?
*	codrinb has quit (Ping timeout: 248 seconds)
*	didpul (~quassel@201.141.37.80) has joined
<boj>	JazzyEagle: if you want to step into crazy SPA world look at Reflex/Reflex-Dom
<JazzyEagle>	SPA?
<boj>	single page application
<zoid1>	What do you mean with 'backend'? I don't think you have to use Yesod for Shakespear templates
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Fri Sep 15 19:56:02 2017

**** BEGIN LOGGING AT Sat Sep 16 10:49:07 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	codrinb (~codrinb@94.177.40.42) has joined
*	Scip (~scip@76.121.6.102) has joined
*	lukaramu (~lukaramu@port-17697.pppoe.wtnet.de) has joined
*	afarmer (~afarmer@199.201.64.3) has joined
*	begriffs has quit (Quit: Leaving...)
*	luiz_ (~luiz@2804:214:81c1:cc75:78ec:e68d:90ad:5f1e) has joined
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	luiz_ is now known as Guest51179
*	vuto has quit (Ping timeout: 248 seconds)
*	fizbin (~Adium@pool-96-235-150-81.cmdnnj.east.verizon.net) has joined
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	mek42 (~quassel@cpe-184-153-249-203.twcny.res.rr.com) has joined
*	kille has quit (Ping timeout: 246 seconds)
*	ltielen has quit (Ping timeout: 246 seconds)
*	inhortte has quit (Quit: Leaving.)
*	Scip has quit (Ping timeout: 240 seconds)
*	conal has quit (Quit: Computer has gone to sleep.)
<vimalloc>	I just discovered MonadClasses (MonadReader for example) compared to monad stacks with transformers (ReaderT for example). I'm migrating my stuff to the former, and am trying to understand the point of this `MonadBaseControl IO m`.
*	argent0 has quit (Ping timeout: 264 seconds)
<geekosaur>	MonadBaseControl is about exception handling
<vimalloc>	I'm using Data.Pool, which has the `MonadBaseControl IO m` for the `withResource` function, so I include that in my function and everything works. But I'm trying to figure out why that is different then MonadIO and why it is needed compared to MonadIO
*	conal (~conal@104.255.240.10) has joined
*	zachk (~Zach@unaffiliated/zachk) has joined
<geekosaur>	basically, it's really difficult to correctly thread an exception through multiple monads which control external resources, without leaking the resource
<geekosaur>	for example an exception thrown at the wrong time could cause a connection to a database to be lost; the process is still holding it but it can't be accessed from Haskell any more
*	forgottenone (~forgotten@176.40.57.101) has joined
<geekosaur>	MonadBaseControl provides fine grained exception control and routing, so you can always clean up after an exception without losing track of any resources.
*	codesoup (~codesoup@2607:fea8:e2e0:240:5df0:2f95:5e96:59a4) has joined
*	aavogt has quit (Ping timeout: 252 seconds)
<vimalloc>	Ah, makes sense why it would be in the Data.Pool then. Thanks for the info.
<vimalloc>	used in*
<zachk>	would handling the resources using cloud haskell processes be cleaner then regular threads, as far as exceptions are concerned?
*	aavogt (~aavogt@24-52-245-124.cable.teksavvy.com) has joined
*	pera (~pera@unaffiliated/pera) has joined
*	eklavya_ (~eklavya@2405:205:1489:d668:906:d590:a778:e6f3) has joined
*	Drinfeld has quit (Quit: ChatZilla 0.9.93 [Firefox 55.0.3/20170824053622])
*	davr0s has quit (Read error: Connection reset by peer)
*	eklavya has quit (Ping timeout: 246 seconds)
*	hous (~hous@cpe-70-121-86-187.austin.res.rr.com) has joined
*	conal has quit (Quit: Computer has gone to sleep.)
*	didpul (~quassel@201.141.37.80) has joined
*	ptsd has quit (Ping timeout: 246 seconds)
*	teggi has quit (Quit: Leaving...)
*	ptsd (~u0_a233@31.218.37.190) has joined
*	Saukk has quit (Quit: Leaving)
*	emilypi has quit (Ping timeout: 264 seconds)
*	Guest51179 has quit (Ping timeout: 264 seconds)
*	johnk has quit (Ping timeout: 264 seconds)
*	FreeBirdLjj has quit (Remote host closed the connection)
*	Ojd (4c4276db@gateway/web/cgi-irc/kiwiirc.com/ip.76.66.118.219) has joined
*	sdothum (~znc@dsl-173-206-154-102.tor.primus.ca) has joined
*	hackagebot haskell-names 0.9.0 – Name resolution library for Haskell – https://hackage.haskell.org/package/haskell-names
<cloudhead>	is there an Async package which works with MonadIO?
<cloudhead>	hmm I guess MonadConc is the equivalent, is this used in the wild?
<barrucadu>	cloudhead: I know of very few users
<barrucadu>	So, not really :(
*	oish (~charlie@159.22.169.217.in-addr.arpa) has joined
*	afarmer has quit (Ping timeout: 248 seconds)
*	sleffy has quit (Ping timeout: 260 seconds)
*	sedeki has quit (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
<hous>	how do I edit the cabal file for a stack package
<hous>	I can't find it anywhere
<barrucadu>	hous: Is there a package.yaml?  The package might be using hpack (which stack supports)
<cloudhead>	barrucadu: do people just not mind using IO directly? or is the async package not used that much?
*	conal (~conal@104.255.240.10) has joined
<glguy>	cloudhead: Using IO directly is the most common
<barrucadu>	cloudhead: The async package is pretty widely used, but people just use IO.
<cloudhead>	I see
<glguy>	and using IO directly isn't in conflict with using the async package
<glguy>	that's also quite common
<cloudhead>	yeah it seems difficult to do otherwise
*	codrinb has quit (Ping timeout: 240 seconds)
<hous>	barrucadu: it's definitely a cabal file. I guess I just don't know where it's downloading the package, and then where it unzips it, and then where it's building it, and then after it fails build is stack deleting that folder?
<barrucadu>	Yes, stack cleans up after it builds things
<hous>	can I tell it to just download and unzip the package and then not build it so I can do that manually?
*	a3Dman has quit (Ping timeout: 240 seconds)
<barrucadu>	If you want to modify the package, you'll probably have to fork it (or download a local copy), make your changes, and point to your copy in your stack.yaml.  I'm not sure if there's a way to just tell stack to use a different cabal file manually.
*	eklavya_ has quit (Remote host closed the connection)
<hous>	what's the easiest way to do that, and after I install it, will stack recognize the package as installed so it can use it as a dependency?
*	conal has quit (Client Quit)
<zzq>	cloudhead: The lifted-async package is like the async package with the functions lifted to MonadBase/MonadBaseControl instead of IO.
*	joncfoo has quit (Ping timeout: 264 seconds)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	pyon has quit (Ping timeout: 252 seconds)
*	conal (~conal@104.255.240.10) has joined
<barrucadu>	Here's an example: https://github.com/barrucadu/dejafu/blob/master/stack.yaml  I needed to use a different version of test-framework, so I did that in my stack.yaml.
<cloudhead>	zzq: ah thanks, will have a look
<hous>	ok I'll fork it
<hous>	thanks
*	codrinb (~codrinb@94.177.40.42) has joined
*	ystael (~ystael@209.6.50.55) has joined
<Ojd>	hello  i am wondering if there is any way to library to solve equations in haskell... for example P=P*y1 + P*y2. If I have y1 I can find y2 easily (and vicerversa) by re-arranging elemnts
<Ojd>	but more complex equations are difficult to solve like that
<EvanR>	is that a recursive definition
<zachk>	ojd, if it's a linear equation you can use a linear algebra package to solve the system of linear equations
<EvanR>	> fix (\p -> p * 3 + p * 4)
<lambdabot>	 mueval-core: Time limit exceeded
<EvanR>	oh well
<cloudhead>	barrucadu: didn't realize you wrote dejafu - I think I'll give it a try since I'm having a hard time with concurrency testing
<barrucadu>	Cool, let me know if you have any problems
<cloudhead>	cheers :)
*	Darwin226 (5d88f9f4@gateway/web/freenode/ip.93.136.249.244) has joined
<Darwin226>	monochrom: Sorry, I had to go. The line that errors is the last one (http://lpaste.net/6335466087500480512)
<Darwin226>	More precisely, the second parameter
*	codrinb has quit (Ping timeout: 240 seconds)
*	conal has quit (Quit: Computer has gone to sleep.)
<Ojd>	EvanR, you would likely have y1 and P, or y2 and P... so it would be more like \y1 P -> P = y1 *P + y2*P and I would like to find y2
*	mrkgnao has quit (Quit: WeeChat 1.7.1)
*	ltielen (~ltielen@ptr-3z2lko2bunnpt1ahjk9.18120a2.ip6.access.telenet.be) has joined
<Ojd>	zachk, I would look for the linear algebra package as recommended
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
<zachk>	you can solve single variable equations of degrees greater then 1 using the quadratic or like ilk up to the 4th degree, sadly, it is proven no general formula for solving 5th degree or higher equations exists
<geekosaur>	Darwin226, 'class C k (a :: k)' tells ghc that k is a kind. You cannot simultaneously use it as a type, which you are trying to do there
<Darwin226>	geekosaur: Oh but you can with TypeInType
<Darwin226>	the class definition works fine
<Darwin226>	the instance errors out
<geekosaur>	not exactly. you have T identifying both a kind and a type. but technically you are using 'T there not T
<Darwin226>	and even the instance works if I remove the Num constraint from the constructor
<Darwin226>	Sure, and ('T :: T x)
*	fizbin has quit (Quit: Leaving.)
*	codrinb (~codrinb@94.177.40.42) has joined
<monochrom>	"no general formula for 5th degree" is an urban legend.
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
*	bennofs has quit (Read error: Connection reset by peer)
<monochrom>	The precise sentence is "no general formula if you only allow + * - / nth-root"
<c_wraith>	that is, algebraic numbers
<c_wraith>	err, not quite.
<monochrom>	But there are formulas like http://mathworld.wolfram.com/QuinticEquation.html
<epta>	in cabal file one can wrap test-related library dependency (like quickcheck) with a flag. Instead of a custom flag, can '--enable-tests' flag be used somehow?
<c_wraith>	It means there are algebraic numbers without a representation with just radicals
*	rdes (~ryan@c-73-16-127-221.hsd1.me.comcast.net) has joined
*	`Guest00000 has quit (Ping timeout: 260 seconds)
*	`Guest00000 (~user@37.113.156.118) has joined
*	robotroll has quit (Read error: Connection reset by peer)
*	codrinb has quit (Ping timeout: 264 seconds)
*	eacameron has quit (Remote host closed the connection)
*	fizbin (~Adium@pool-96-235-150-81.cmdnnj.east.verizon.net) has joined
*	conal (~conal@104.255.240.10) has joined
*	monoidal (1f04d42f@gateway/web/freenode/ip.31.4.212.47) has joined
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	chaosmasttter (~chaosmast@p54B46F7A.dip0.t-ipconnect.de) has joined
<monoidal>	Well well well, what's going on in the Haskell community?
<ongy>	everything!
<monoidal>	That's what makes us Haskellers I suppose
*	DTZUZU has quit (Quit: WeeChat 1.9)
<monoidal>	Always everything is going on
<monochrom>	Nothing.
*	minos_ has quit (Quit: This computer has gone to sleep)
*	OscarZ has quit (Read error: Connection reset by peer)
*	j2j (~Thunderbi@ool-457f1aab.dyn.optonline.net) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
<monoidal>	I have a little question, how's Haskell 2020 going? I haven't heard much about it recently. It's still under development? 
<monoidal>	do you know something about its current state?
*	hous has quit (Quit: Textual IRC Client: www.textualapp.com)
*	DTZUZU (~DTZUZU@S0106bcd16584b0aa.vs.shawcable.net) has joined
*	codrinb has quit (Ping timeout: 260 seconds)
*	minos_ (~simonbosm@58-135-145-85.ftth.glasoperator.nl) has joined
*	eacameron has quit (Ping timeout: 240 seconds)
*	shangxiao (~shangxiao@106-68-92-108.dyn.iinet.net.au) has joined
*	clay1 has quit (Ping timeout: 246 seconds)
*	OnkelTem has quit (Ping timeout: 252 seconds)
<monoidal>	anyone out there?
*	codrinb (~codrinb@94.177.40.42) has joined
<AndreasK>	As far as I know it's still worked on. But I don't really know much more about it
<Ojd>	yup
<Ojd>	question, what would be a good package for plotting?
<monoidal>	Look at its Hackage section, and find out which is more appropiate to you from there
*	Scip (~scip@76.121.6.102) has joined
<nshepperd>	you can write a general formula for anything, by just defining a new function as "the solution to X"
<nshepperd>	so any talk of there being "no general formula" for something needs to circumscribe what formula would 'count'
*	codrinb has quit (Ping timeout: 255 seconds)
<cloudhead>	barrucadu: any reason your MonadSTM can't be an Alternative? I see you have a note there.
<monochrom>	I grew out of "formulas" a long time ago. The issue that matters is never "formulas", but rather algorithms and computability.
<nshepperd>	having an effective procedure to approximate the value would be a minimal requirement
<monochrom>	Not to mention that a lot of nice-looking formulas are computationally dumb.
*	codrinb (~codrinb@94.177.40.42) has joined
<monochrom>	There is even a sum-and-cosine formula for spitting out the prime numbers (all prime numbers and only prime numbers).
<AndreasK>	Quiz question, given {f 1 True = 1; f 2 False = 2; f 1 False = 3} . How can (f x True == f x False) give true
<monochrom>	It is also grossly impractical.
*	Scip has quit (Ping timeout: 264 seconds)
*	StoneToad has quit (Ping timeout: 260 seconds)
<erisco>	AndreasK, do you have some work to show?
*	LysergicDreams (~Lysergia@client-104-245-228-34.cvalink.com) has joined
<AndreasK>	erisco: As in hints? I already have a solution if that is what you meant
<erisco>	so you are quizzing us? okay
*	StoneToad (~StoneToad@ppp-199-167-119-216.storm.ca) has joined
*	Ojd has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
<monochrom>	I don't understand the question. Is it "for all x" or is it "for some x" or is it "find x such that" or what?
*	codrinb has quit (Ping timeout: 240 seconds)
<nshepperd>	is it a trick question. f undefined True = f undefined False = undefined
<monoidal>	AndreasK : that sounds like doesn't have any solution, the pattern matching wouldn't behave un any way that returns True afaik
*	AegonTarg (~AegonTarg@node-1w7jr9qocwjeplh4cwxl1q6li.ipv6.telus.net) has joined
<monoidal>	Oh, undefined
*	diegoksp (~diegoksp@190.153.194.178) has joined
<AndreasK>	nshepperd: It actually gives the result true in ghci, undefined would give an exception
*	bennofs (~benno@217-68-187-120.dynamic.primacom.net) has joined
<erisco>	do you mean True?
<AndreasK>	yes
<monoidal>	AndreasK : doesn't make sense to me
<nshepperd>	then the output :: Z2 instead of Integer
<nshepperd>	such that 1 == 3
<monoidal>	For any x, either the pattern matching fails or It returns False
<AndreasK>	Thats the beaty of it. It didn't make sense for me at first either. Has to do with how literals are desugared
*	MindlessDrone (~MindlessD@unaffiliated/mindlessdrone) has joined
<erisco>	well I thought about making a num instance
*	minos_ has quit (Quit: This computer has gone to sleep)
<erisco>	but I am not sure if there is one available
<monoidal>	First, have you bound that x to a value?
<AndreasK>	Yes x is just a regular value
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
<monoidal>	It's either 1 2 or 3 otherwise the pattern matching fails
*	AegonTarg (~AegonTarg@node-1w7jr9qocwjeplh4cwxl1q6li.ipv6.telus.net) has left
<AndreasK>	monoidal: But what does it mean if the expression is "1"
<erisco>	we can just pick any Num instance such that 1 == 3
<erisco>	but I don't know what sensible Num instance has this… and partly because I don't know what is expected of good Num instances
*	codrinb (~codrinb@94.177.40.42) has joined
<monochrom>	I think "valuation ring" is good enough.
<AndreasK>	Not sure about sensible. But the only law I know for Num is the abs one
<erisco>	my first though is whether () works
<monochrom>	Mostly you just need "ring" but the abs adds the "valuation" part.
*	raichoo (~raichoo@dslb-084-062-115-036.084.062.pools.vodafone-ip.de) has joined
<monochrom>	() should be pretty OK.
<monoidal>	erisco: overriding the Integer instance if that's possible?
<monochrom>	() is the {0} ring.
<erisco>	if that is the case, then why is () not already an instance of Num, but okay, I'll trust your summary judgement monochrom
*	minos_ (~simonbosm@58-135-145-85.ftth.glasoperator.nl) has joined
*	marr has quit (Read error: Connection reset by peer)
*	ltielen has quit (Quit: WeeChat 1.9)
<monochrom>	Although there is 50% chance a mathematician disagree because they insist 0/=1 for rings.
*	conal has quit (Quit: Computer has gone to sleep.)
<erisco>	heh
*	biglama has quit (Ping timeout: 240 seconds)
<erisco>	though we're going to run into a type defaulting problem for  f x True == f x False
<monochrom>	But bear in mind there is also 50% chance a mathematician insists "ring means commutative ring".
<erisco>	f was defined without a type declaration, so we get the general inferred type, whereby the output type is independent of the input type
<monoidal>	Don't understand how It could actually work with (), shouldn't that be a type error or something?
<erisco>	now we get default Integer for the equality test, and (1 :: Integer) == (3 :: Integer) is False
<barrucadu>	cloudhead: It can be an Alternative, but isn't required to be.  Having said that, I don't think the testing implementation I have is an Alternative or MonadPlus, and that definitely should be.
*	cyborg-one (~cyborg-on@212-178-2-183.broadband.tenet.odessa.ua) has joined
*	conal (~conal@104.255.240.10) has joined
<erisco>	monoidal, (1 :: ()) == (3 :: ()) is True
<barrucadu>	Maybe I should put a MonadPlus constraint on MonadSTM anyway
*	j2j has quit (Quit: j2j)
<monoidal>	erisco: isn't () the only possible value of type ()?
<monochrom>	monoidal: Prelude doesn't make () a Num instance but you can.
*	codrinb has quit (Ping timeout: 264 seconds)
*	biglama (~Day_dream@ip-188.net-82-216-175.joinville2.rev.numericable.fr) has joined
<erisco>	monoidal, precisely (and technically no)
<cloudhead>	barrucadu: ok I see, just find it convenient to use <|> etc.
<monochrom>	And yes () + () = (), () * () = (), etc
<AndreasK>	I forgot one type signature in the initial claim. But http://lpaste.net/3646718291352748032 is one way
<monoidal>	So that quiz question has no answer?
<monoidal>	For me at least, i might have missed something
*	marr (~ccc@213-238-125-175.adsl.inetia.pl) has joined
<erisco>	AndreasK, it looks to me that FNum is iso to ()
<MarcelineVQ>	data FNum = F = ()
<AndreasK>	monoidal: FNum might not be a valid ring, but its a valid Num instance according to all laws I know for Num
*	neoncontrails has quit (Remote host closed the connection)
*	neoncontrails (~neoncontr@wsip-70-183-99-212.sd.sd.cox.net) has joined
*	hackagebot graphite 0.2.0.0 – Graphs and networks library – https://hackage.haskell.org/package/graphite
*	hackagebot errors 2.2.2 – Simplified error-handling – https://hackage.haskell.org/package/errors
<AndreasK>	But yes sorry for the missing last type sig. Even weireder is if you give f the type FNum -> Bool -> Num
<monoidal>	Yeah, but the type inference for the number would be Integer afaik, not Num a => a ?
<AndreasK>	Depends on the Monomorphic restriction
<AndreasK>	I used ghc so it's off by default
<monoidal>	Okay
<AndreasK>	ghci
*	codrinb (~codrinb@94.177.40.42) has joined
<monoidal>	So you have to modify its type signature?
<monoidal>	To make the expression return True
<AndreasK>	For the initial one yes sadly. That was a mistake of mine
<erisco>	I don't have any new quizzes lately… so I'll have to repeat my quiz of finding a correct type for \x -> x x
*	Fekinox has quit (Quit: See ya!)
<monoidal>	erisco: It would be infinitely recursive
<monoidal>	I thought about it recently
<AndreasK>	But my own takeaway from that was that one can't trust numbers unless they are typed to something concrete
*	Fekinox (~Fekinox@cpe-74-72-183-234.nyc.res.rr.com) has joined
<erisco>	monoidal, there is an answer, and it is not an infinitely recursive type
<monoidal>	Well, that goes beyond my knowledge then
*	neoncontrails has quit (Ping timeout: 264 seconds)
<pierrot>	Good afternoon. If I have a function g such that g x xs = xs ++ [x], then the evaluation of (foldr g []) [1..n] goes like this: http://sprunge.us/MYKF ? Is it correct?
*	karetsu (~karetsu@2a02:c7f:8a4f:ba00:9eb6:d0ff:fe19:6741) has joined
<monochrom>	Actually I wonder if you can really write that as "\x -> x x" in Haskell. I mean "f x = x x" plus type sig would be accepted but lambda has an extra restriction that function binding doesn't have.
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
<erisco>	does it? I don't know what it is actually, but yes  \x -> x x  can work
<monoidal>	I tried it once and gave me an error "couldn't resolve type signature" or something like that
<AndreasK>	Someone ping me when someone posts an answer. I'm interest but need to get back to other things. 
*	ptsd has quit (Quit: leaving)
<monoidal>	I thought It would be recursive because It takes a function which operates in functions which operate in functions, etc
<monochrom>	Oh, I guess lambda's restriction is lifted under that context. I see an example in the GHC users guide.
*	nilg has quit (Remote host closed the connection)
<monoidal>	Ghci tells me it's a infinite type
*	desperek (~draco@unaffiliated/desperek) has joined
*	d6e_ has quit (Quit: WeeChat 1.7.1)
<erisco>	it wouldn't be a quiz if you could just put  :t \x -> x x  into GHCi, now would it? :)
*	dfeuer has quit (Ping timeout: 240 seconds)
<monochrom>	There is also a reason I said "under that context". So, what context?
<c_wraith>	Am I allowed to use extensions?
<monochrom>	Or perhaps computer environment
<c_wraith>	Because I can do it with extensions.
<Ferdirand>	i'd like to see the solution as well
<erisco>	c_wraith, yes
<monochrom>	Yes.
<monochrom>	Indeed my "context" means turning on an extension.
<monoidal>	I didn't type that, i just went: f x = x x; and then used f which gave that error
<c_wraith>	So yeah.  With the correct extension enabled and a type signature provided, I can make "f = \x -> x x " work
<monoidal>	A forall maybe
*	fizbin has quit (Quit: Leaving.)
*	fizbin (~Adium@pool-96-235-150-81.cmdnnj.east.verizon.net) has joined
<Ferdirand>	when you write f = \x -> x x, both x must refer to the same monomorphic value, yes ?
<monoidal>	Yes
<c_wraith>	Ferdirand: that depends on the extensions...
<erisco>	it is actually a good demonstration of the difference between  let x = y in m  and  (\x -> m) y
*	shangxiao has quit (Ping timeout: 252 seconds)
*	zivoni_ has quit (Quit: WeeChat 1.9)
<monochrom>	erisco: So the extra restriction I'm referring to is when standard Haskell (or ML for that matter) "let f x = x in (f 5, f 'x')" cannot be rewritten as "(\f -> (f 5, f 'x')) id"
*	cloudhead has quit (Ping timeout: 248 seconds)
<erisco>	monochrom, right :)
*	d6e (~paritybit@165.227.24.197) has joined
<erisco>	you can choose other things too, like const
<monochrom>	So lambda monomorphizes your bound variable. Or maybe let is giving you a bonus feature of polymorphizing your bound variable.
*	alviprofluvium (~diarrea@pc-77-133-44-190.cm.vtr.net) has joined
*	minos_ has quit (Quit: This computer has gone to sleep)
<pierrot>	I first thought that (foldr g []) [1..n] would go like this http://sprunge.us/eEba, but that is wrong, right? I mean.. in each step, the outer function g should be applied first like in this reduction http://sprunge.us/MYKF... Is that correct?
<monoidal>	Why does lambda give such restriction, and what exactly is It?
<erisco>	SPJ mentioned briefly in a talk on Core that he kept let/in (rather than rewriting to a lambda) but it wasn't clear whether this was the reason
*	`^_^v (~nycs@pool-173-61-30-116.cmdnnj.fios.verizon.net) has joined
*	minos_ (~simonbosm@58-135-145-85.ftth.glasoperator.nl) has joined
<c_wraith>	monochrom: are you talking about the explicit let-generalization step in HM?
<monochrom>	YES!
<c_wraith>	pierrot: it's most accurate to say foldr g [] [1..n] = g 1 (foldr g [] [2..n]) where you can't say anything further without knowing what g is
*	minos_ has quit (Client Quit)
<monochrom>	monoidal, I was hinting that it depends on your point of view, you could call it "lambda is being restrictive" or you could call it "no, let is being generous".
<pierrot>	In my first message:
<pierrot>	pierrot: ―Good afternoon. If I have a function g such that g x xs = xs ++ [x], then the evaluation of (foldr g []) [1..n] goes like this: http://sprunge.us/MYKF ? Is it correct?
<pierrot>	I gave a definition for g
<c_wraith>	pierrot: ah, missed that one.
<monochrom>	If you look into Hindley-Milner type inference, or the very definition of "rank-1 types", when you try to infer the type of "\x -> whatever" you are pretty much forced to monomorphize x.
<c_wraith>	pierrot: foldr's strictness is entirely dependent on how the function argument treats *its* second argument.  You've picked a case that's incredibly complicated. :)
*	sepp2k (~Sepp2k@x4e3359b0.dyn.telefonica.de) has joined
<monochrom>	And you could hold the opinion that "let x = ... in whatever" should get the same treatment. Except then in practice it will be a let-down because people like to write "let f x = x in (f 5, f 'x')" all the time.
<c_wraith>	pierrot: with that definition, the first thing g does is pattern-match on xs.
*	danthemyth has quit (Ping timeout: 264 seconds)
<c_wraith>	pierrot: that forces evaluation of the next level of foldr, which means another evaluation of g, which means another pattern-match on xs, recursively all through the list.
<monochrom>	So H & M decided to relax let to make everyone happy, and it didn't really cost the theory anything.
<erisco>	how generous of them!
*	bbear (~david@81-67-234-46.rev.numericable.fr) has joined
*	t7 has quit (Ping timeout: 240 seconds)
<bbear>	are you using array in Haskell ?
<bbear>	(I mean are you using them a lot ?)
*	remexre has quit (Ping timeout: 246 seconds)
<monochrom>	Yes. I use Data.Vector a lot of times.
*	Fekinox has quit (Quit: See ya!)
<c_wraith>	pierrot: But there's more to it than that.  Once it's evaluated the entire input, it calculates enough to determine that the result of g has a form (_:_), at which point it constructs the two thunks, passes them as arguments to (:), and returns.
*	jellowj has quit (Ping timeout: 246 seconds)
<c_wraith>	pierrot: it's really a pain to trace the exact evaluation process through all the suspensions caused by laziness and (:) constructors.
*	remexre (~remexre@c-107-4-203-126.hsd1.mn.comcast.net) has joined
*	Fekinox (~Zen@cpe-74-72-183-234.nyc.res.rr.com) has joined
<c_wraith>	pierrot: also, it will depend on how the result is consumed.
<monoidal>	monochrom, but in your example f is just id, what "permissive" part of the typesystem does that show?
*	jellowj (~yellow-ja@afy253.neoplus.adsl.tpnet.pl) has joined
<monoidal>	As in let
*	minos_ (~simonbosm@58-135-145-85.ftth.glasoperator.nl) has joined
<pierrot>	c_wraith: I ask this question because I have to explain the graphic of a heap profile of a program that prints the list generated by that foldr
*	eitanChatav (499e7526@gateway/web/freenode/ip.73.158.117.38) has joined
<c_wraith>	pierrot: that's a rather different question, though.  It cares mostly about sharing of the results, not the process of lazy evaluation
<monochrom>	I don't understand the question. But how about "let {n [] = True; n _ = False} in n [1,2,3] && n ['1','2','3']"
*	Fekinox has quit (Client Quit)
*	Fekinox (~Zen@cpe-74-72-183-234.nyc.res.rr.com) has joined
<c_wraith>	pierrot: you can pretend it's entirely strict and still get the same sharing graph
*	pluplog has quit (Quit: Leaving.)
*	Bleem_ has quit (Ping timeout: 246 seconds)
<maerwald>	https://mars-lang.appspot.com nice, wonder if that will ever takt off. They have IO type too
<monoidal>	Okay, so n is polymorphic, and that doesn't happen in lambdas?
<bbear>	I am wondering something. Lets say you are using Data.Map.Lazy and you are filtering against the keys in a certain integer range.
<monochrom>	erisco: In your "SPJ kept let/in", were you referring to Core?
*	kanshazan (~kanshazan@84-245-13-88.dsl.cambrium.nl) has joined
<bbear>	Do you still need to compute all the keys ?
<erisco>	monochrom, yes
*	takle (~takle@host109-153-109-219.range109-153.btcentralplus.com) has joined
*	luiz (~luiz@179.222.48.144) has joined
*	luiz is now known as Guest96124
<c_wraith>	maerwald: is that an IO type, or just a flag on definitions?  The difference matters.  Being a real type in haskell means things like IO (IO Foo) make sense.
<maerwald>	I have no idea, but it's a pure language
*	inhortte (~polaris@31.4.242.42) has joined
<c_wraith>	pierrot: arg.  Sorry, I misread that as "heap graph", not heap profile.  Nevermind, laziness does matter, and I clearly should have had more sleep.
*	fizbin has quit (Quit: Leaving.)
<monochrom>	OK so I think the main concern is this. You are about to generate asm code. And you want to distinguish "this is a function" from "this is a thunk". So use lambda for function, use let for thunk.
*	ianandrich (~ianandric@c-73-223-61-224.hsd1.ca.comcast.net) has joined
<eitanChatav>	does anyone here use hledger?
*	ritre has quit (Quit: WeeChat 1.9)
*	Scip (~scip@76.121.6.102) has joined
<pierrot>	c_wraith: this is the program http://sprunge.us/SJMa
<JuanDaugherty>	eitanChatav, i do but you want #ledger
<maerwald>	eitanChatav: sm certainly does :>
<pierrot>	and this is the graph I've generated https://i.imgur.com/WNDOWhU.png
*	takle has quit (Read error: Connection reset by peer)
*	minos_ has quit (Quit: This computer has gone to sleep)
<monoidal>	Okay monochrom, i was a little bit Lost..
<pierrot>	I have to explain in words that behaviour...
<c_wraith>	pierrot: as I always forget these things, which profile is -hc ?
<erisco>	"my bank account"
<eitanChatav>	@JuanDaugherty, ledger as opposed to hledger or #hledger as opposed to #haskell
<lambdabot>	Unknown command, try @list
<maerwald>	and sm is a friendly guy, so I don't mind pinging him :P
<MarcelineVQ>	sm?
*	chaosmasttter has quit (Ping timeout: 240 seconds)
<eitanChatav>	simon michael presumably
<maerwald>	yeah, it's simon
<eitanChatav>	I just have stupid beginner questions
<MarcelineVQ>	so many simons.
<JuanDaugherty>	eitanChatav, it's a common ecosys and more people hang in #ledger
<pierrot>	c_wraith cost center
*	codrinb has quit (Ping timeout: 248 seconds)
*	Hknwb77 (~Hknwb77@195.154.204.27) has joined
<maerwald>	MarcelineVQ: not the cat
<eitanChatav>	JuanDaugherty, thanks I guess I'll try there but I'll post my first q here too in case someone can just bat it out
<eitanChatav>	I'm just trying to get started with hledger; As step 0 I downloaded the CSV from a single checking account and wrote a rules file; Now I'm a little confused how to use hledger to run using the rules file on the CSV.
<MarcelineVQ>	maerwald: they come in pairs you know
<eitanChatav>	they're all closed under the simonoid operation
*	jellowj has quit (Ping timeout: 246 seconds)
<maerwald>	MarcelineVQ: cats or simons?
<c_wraith>	pierrot: have you done any analysis to see what curve those are?  I'd guess they're both roughly sqrt(total runtime - current time) curves.
*	lyxia has quit (Ping timeout: 246 seconds)
<c_wraith>	pierrot: as in, the current runtime memory use is proportional to the square of the number of elements left to output.
*	codrinb (~codrinb@94.177.40.42) has joined
<monochrom>	bbear: Yes it still computes all the keys.
*	conal has quit (Quit: Computer has gone to sleep.)
<monochrom>	Or rather, compute each key enough to determine where it should sit in a binary search tree.
*	inhortte has quit (Ping timeout: 248 seconds)
<pierrot>	c_wraith: Yeah, I see.
*	seto[m] (setomatrix@gateway/shell/matrix.org/x-bfmsvmtyeqfwibhp) has joined
<pierrot>	But why the curve is jagged?
*	conal (~conal@104.255.240.10) has joined
<c_wraith>	pierrot: that's normal. the GC doesn't run constantly, only when the nursery generations are filled
*	minos_ (~simonbosm@58-135-145-85.ftth.glasoperator.nl) has joined
<lpsmith>	Hmm, did travis remove support for GHC <= 7.8
<lpsmith>	?
<c_wraith>	pierrot: so any memory profile is going to have a little spikiness.  It can be ignored.
<pierrot>	Hmm.. I'm not sure. I thought that the peaks were there for a reason...
*	codrinb has quit (Ping timeout: 248 seconds)
*	takle (~takle@host109-153-109-219.range109-153.btcentralplus.com) has joined
*	midiparse (~david@catv-89-132-217-22.catv.broadband.hu) has joined
<pierrot>	For example, I also have to explain the graph for this program http://sprunge.us/bUbd. It's this: https://i.imgur.com/hcUh6QK.png
<pierrot>	It also reverses the list but using a foldl
*	chaosmasttter (~chaosmast@p54B46F7A.dip0.t-ipconnect.de) has joined
<pierrot>	the graph is quite simpler
<pierrot>	and isn't jagged
*	conal has quit (Client Quit)
<c_wraith>	pierrot: yes, it allocates a lot less.  the GC doesn't constantly run. :)
<hexagoxel>	pierrot: it ran for a total of 0.0 seconds. have you compared the number of data points for both graphs?
<c_wraith>	pierrot: also, consider that heap profiling is done by sampling.  the number of...  hexagoxel beat me to it. :)
<pierrot>	yeah, the number of points isn't the same
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
*	eitanChatav (499e7526@gateway/web/freenode/ip.73.158.117.38) has left
*	justanotheruser has quit (Client Quit)
*	robotroll (~robotroll@unaffiliated/robotroll) has joined
<c_wraith>	it looks like you have maybe 30 samples in the foldl' version.  there's no way it can be that spiky with so few samples
*	codrinb (~codrinb@94.177.40.42) has joined
*	justan0theruser has quit (Ping timeout: 264 seconds)
*	robotroll has quit (Read error: Connection reset by peer)
*	safe (~safe@unaffiliated/safe) has joined
<hexagoxel>	what happens when you decrease GC amount on purpose (passing +RTS -H..)? if c_wraith is correct, this should make things smoother, right?
*	monoidal has quit (Ping timeout: 260 seconds)
<pierrot>	hexagoxel: hehe. yeah. I did that with -i2 (sample each two seconds) and the graph is smoother..
*	minos_ has quit (Quit: This computer has gone to sleep)
*	codrinb has quit (Ping timeout: 246 seconds)
<hexagoxel>	that's different though. i don't completely trust that GC affects heap profiles yet.
*	OnkelTem has quit (Ping timeout: 240 seconds)
*	hackagebot concurrency 1.2.0.0, data-fix 0.2.0, dejafu 0.7.2.0, graphite 0.2.1.0
*	hackagebot  → https://hackage.haskell.org/packages/recent
<pierrot>	back to my original question... the evaluation of (foldr g []) [1..n] goes like this http://sprunge.us/eEba or like this http://sprunge.us/MYKF ?
*	eliasr has quit (Quit: Connection closed for inactivity)
*	AndreasK has quit (Remote host closed the connection)
*	jellowj (~yellow-ja@afy253.neoplus.adsl.tpnet.pl) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
<pierrot>	c_wraith: ―pierrot: with that definition, the first thing g does is pattern-match on xs.
<pierrot>	why it does pattern matching in xs?
<c_wraith>	@src (++)
<lambdabot>	[]     ++ ys = ys
<lambdabot>	(x:xs) ++ ys = x : (xs ++ ys)
<lambdabot>	-- OR
<lambdabot>	xs ++ ys = foldr (:) ys xs
*	karetsu has quit (Quit: WeeChat 1.9)
<c_wraith>	pierrot: that's just what (++) does.  and it's the top-level expression in the function
*	Qommand0r (~HENKiE@unaffiliated/schaap137) has joined
*	marcux (~marco@209.160.118.215) has joined
<pierrot>	c_wraith: hmm I see. so the foldr should be reduced first
<pierrot>	Then this is more accurate: http://sprunge.us/eEba
*	codrinb has quit (Ping timeout: 240 seconds)
*	djapo (~archie@unaffiliated/djapo) has joined
*	`^_^v has quit (Quit: This computer has gone to sleep)
<c_wraith>	pierrot: with that g, yes
*	johnk (~john@78-67-125-96-no247.tbcn.telia.com) has joined
<pierrot>	and with the lambda function of the code I shared before?
<pierrot>	instead of g, (\x r -> r++[x])
<pierrot>	it should be the same because of ++
<c_wraith>	it's the same function
<c_wraith>	writing it differently doesn't change anything. :)
<pierrot>	it makes sense :)
<`Guest00000>	is there a library which interprets (Num a => [a])'s as numbers? in this way: toInteger = sum
<c_wraith>	`Guest00000: that seems unlikely.  what would [1,2,3] * [4,5] be?
*	Achylles has quit (Ping timeout: 240 seconds)
<`Guest00000>	c_wraith: concat ((`replicate` [1,2,3]) <$> [4,5])
*	codrinb (~codrinb@94.177.40.42) has joined
<c_wraith>	`Guest00000: hm.  I guess that makes some sense if (+) is just (++), then
<`Guest00000>	yeah
<`Guest00000>	the idea is
<`Guest00000>	partial list is partial number
*	wvansteen has quit (Ping timeout: 240 seconds)
<jle`>	is there any advantage of over just usming the sum of the list the entire time?
<jle`>	*using
<c_wraith>	`Guest00000: I haven't seen that anywhere, though
<`Guest00000>	a number which you know for sure is greater or equal than N
<jle`>	N ?
<`Guest00000>	where N is the sum of the already known part
<jle`>	sounds like the same thing as if you just used numbers
<jle`>	and also your guaruntee isn't true if any of the lists contain negative numbers
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
<jle`>	like, if n and m are both positive, then 'n + m' is a number that is greater than or equal to n
<`Guest00000>	so that if there is a big computation which returns a long such list and you need to compare it to another number, you can abort the computation after you're sure
*	alviprofluvium has quit (Ping timeout: 264 seconds)
<`Guest00000>	jle`: i don't use negative numbers in the list.
*	inhortte (~polaris@31.4.242.107) has joined
<jle`>	oh so the advantage is basically faster > and <
<jle`>	potentially lazy >/<
<`Guest00000>	usual integers are strict
<`Guest00000>	this is more lazy
*	Shatnerz has quit (Ping timeout: 246 seconds)
*	XorSwap has quit (Quit: Leaving)
*	codrinb has quit (Ping timeout: 255 seconds)
<jle`>	yeah, this only works if all of the items are positive, but Num a => [a] makes no guaruntees
*	Newdell (~newdell@95.38.158.70) has joined
*	mkali (~sigu@41.90.199.150) has joined
<Newdell>	how can i get list of packages with more filter?
<jle`>	so such a Numeric type would be useless even for this
<jle`>	if you're only using Integer, and not *all* Num's, you can use [Natural]
*	Newdell (~newdell@95.38.158.70) has left
*	neoncontrails (~neoncontr@wsip-98-186-230-186.sd.sd.cox.net) has joined
<koala_man>	how would you check whether one simple wildcard pattern (e.g. *.txt) is a superset of another (e.g. f??.txt)? I don't intend to support any fancy regex grouping or alternation
<jle`>	is ? a special character there or do you mean the literal '?' character
<ski>	@check \m n -> (min m n >= (0 :: Integer)) ==> (m + n >= max m n)
<lambdabot>	 +++ OK, passed 100 tests.
<koala_man>	any one character, as per DOS rules
<c_wraith>	jle`: I'm assuming glob rules
<geekosaur>	also do you mean shell globbing or regex or ?
*	alviprofluvium (~diarrea@pc-77-133-44-190.cm.vtr.net) has joined
<geekosaur>	(and, er, which variant of regex, if so?)
<c_wraith>	a leading * really says 'glob' to me
<`Guest00000>	jle`: Natural is exotic, GHC-specific
<jle`>	are you planning on compiling with things other than GHC ...?
<koala_man>	just *, ? and literals. no glob ranges or regex features
<`Guest00000>	i may
<koala_man>	I mean, full regex would be pretty sweet, but significantly harder
*	codrinb (~codrinb@94.177.40.42) has joined
<jle`>	if you use a compiler other than GHC then you can just write a Natural there, too
*	t7 (~chatzilla@host86-138-8-152.range86-138.btcentralplus.com) has joined
<jle`>	it doesn't exactly use compiler hacks...it's just a normal Haskell type
*	castlelore has quit (Ping timeout: 240 seconds)
<jle`>	but unless you are doing something extremely specialized, it's pretty safe to assume GHC
<jle`>	like planning for non-GHC usage only makes sense in very esoteric cases
<c_wraith>	or if you're doing something for Utrecht
*	minos_ (~simonbosm@58-135-145-85.ftth.glasoperator.nl) has joined
<koala_man>	if one pattern matches another as a string, though with * only matching at least another *, then it should be a superset, right? 
<erisco>	@check \n -> let collatz :: Integer -> (); collatz 1 = (); collatz n | (n `mod` 2) == 0 = collatz (n `div` 2) | otherwise = collatz (3*n + 1) in collatz n
<lambdabot>	 error:
<lambdabot>	 • No instance for (STestable ()) arising from a use of ‘myquickcheck’ • In t...
<c_wraith>	I could swear that when I did automata theory, I proved there was an efficient algorithm to determine if one regular language was a subset of another.  But I can't remember it now at all.
<erisco>	oh, needs to be True or False I suppose
<erisco>	@check \n -> let collatz :: Integer -> (); collatz 1 = (); collatz n | (n `mod` 2) == 0 = collatz (n `div` 2) | otherwise = collatz (3*n + 1) in collatz n == ()
<lambdabot>	 mueval-core: Time limit exceeded
<erisco>	must have tried 0 or a negative :)
*	codrinb has quit (Ping timeout: 260 seconds)
*	sepp2k1 (~Sepp2k@x4e3359b0.dyn.telefonica.de) has joined
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	kuribas has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
<erisco>	@check \n -> let collatz :: Natural -> (); collatz 0 = (); collatz 1 = (); collatz n | (n `mod` 2) == 0 = collatz (n `div` 2) | otherwise = collatz (3*n + 1) in collatz n == ()
<lambdabot>	 error:
<lambdabot>	 • No instance for (Arbitrary Natural) arising from a use of ‘myquickcheck’ T...
<erisco>	gee this quickcheck program… well, the idea was, maybe if we add that to a test suite somewhere it will get run enough that it finds a counter example
*	djapo has quit (Quit: leaving)
*	sepp2k has quit (Ping timeout: 264 seconds)
<Tuplanolla>	Is the inclusion problem for regular languages decidable, koala_man?
<koala_man>	c_wraith: ah. given two languages L and M, you can check whether L intersect (not M) is empty
<c_wraith>	koala_man: that would do it
*	Shatnerz (~Shatnerz@2601:151:c302:ed90:adcd:3b49:5d29:5a90) has joined
<koala_man>	I wrote a regex complement tool at some point, and it was... not straight forward
*	minos_ has quit (Quit: This computer has gone to sleep)
<monochrom>	Yeah, expect an exponential blowup when complementing.
*	codrinb (~codrinb@94.177.40.42) has joined
*	danthemyth has quit (Ping timeout: 240 seconds)
<c_wraith>	well that algorithm isn't efficient then.
*	ystael has quit (Ping timeout: 240 seconds)
<erisco>	I was working on a reg lang lib as a means for defining lexers more sensibly
*	minos_ (~simonbosm@58-135-145-85.ftth.glasoperator.nl) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
<erisco>	you can say something like  identifer = word \ keyword \ number
<hexagoxel>	could you not also just intersect both, and check that all final states are paired with final states?
<hexagoxel>	(re regex stuff)
<hexagoxel>	or is that trivially the same thing?
*	vuto (~vuto@42.119.233.193) has joined
<koala_man>	wouldn't that get me equivalence and not inclusion?
<hexagoxel>	ah, indeed. i mean implication, not equality, to compare the is-final-state
*	Hknwb77 has quit (Quit: Hknwb77)
*	codrinb (~codrinb@94.177.40.42) has joined
*	minos_ has quit (Quit: This computer has gone to sleep)
*	vuto has quit (Ping timeout: 252 seconds)
*	cpape` has quit (Remote host closed the connection)
*	inhortte has quit (Ping timeout: 264 seconds)
*	Jesin has quit (Quit: Leaving)
*	cpape` (~user@cpape.eu) has joined
*	refold (~refold@88.98.220.30) has joined
*	xdelv has quit (Read error: Connection reset by peer)
<hexagoxel>	any state reachable that is a final state in the first but not in the second means the first language is not a subset of the second.
<hexagoxel>	(in the intersection of the two DFAs)
*	xdelv (~xdelv@184.75.212.78) has joined
*	inhortte (~polaris@31.4.242.97) has joined
*	emilypi has quit (Ping timeout: 260 seconds)
*	alviprofluvium has quit (Ping timeout: 248 seconds)
**** ENDING LOGGING AT Sat Sep 16 14:03:42 2017

**** BEGIN LOGGING AT Sat Sep 16 17:09:00 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	fizruk (~anonymous@89-178-211-68.broadband.corbina.ru) has joined
*	Psybur has quit (Ping timeout: 264 seconds)
*	louispan (~textual@1.144.97.130) has joined
*	Psybur (~broseph@pool-108-44-203-65.clppva.fios.verizon.net) has joined
*	louispan has quit (Client Quit)
*	augur has quit (Quit: Leaving...)
**** ENDING LOGGING AT Sat Sep 16 17:15:18 2017

**** BEGIN LOGGING AT Sat Sep 16 17:15:18 2017

*	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has joined
**** ENDING LOGGING AT Sat Sep 16 17:15:38 2017

**** BEGIN LOGGING AT Sat Sep 16 17:15:50 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	djapo (~archie@unaffiliated/djapo) has joined
*	Guest96124 has quit (Quit: Leaving)
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
*	mizu_no_oto_work has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	kille (~kille@unaffiliated/kille) has joined
*	XorSwap has quit (Quit: Leaving)
*	safe has quit (Read error: Connection reset by peer)
*	`Guest00000 has quit (Ping timeout: 240 seconds)
*	`Guest00000 (~user@37.113.156.118) has joined
*	jmorris has quit (Ping timeout: 264 seconds)
*	whitephoenix (~whitephoe@2600:100f:b026:2506:c952:3754:4640:4879) has joined
*	sleffy has quit (Ping timeout: 264 seconds)
*	hackagebot has quit (Ping timeout: 252 seconds)
*	PatrickRobotham (uid18270@gateway/web/irccloud.com/x-ofivkjhnoqngvgqt) has joined
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
*	rdes has quit (Quit: Konversation terminated!)
*	marr has quit (Ping timeout: 246 seconds)
*	plugin (~plugin@2604:2000:8101:3500:dcfe:e35c:bab3:828d) has joined
*	asthasr has quit (Quit: Leaving)
*	whitephoenix has quit (Read error: Connection reset by peer)
*	whitephoenix (~whitephoe@2600:100f:b026:2506:c952:3754:4640:4879) has joined
**** ENDING LOGGING AT Sat Sep 16 17:36:43 2017

**** BEGIN LOGGING AT Sun Sep 17 12:17:05 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	biglama has quit (Ping timeout: 264 seconds)
*	monoidal has quit (Ping timeout: 260 seconds)
*	sepp2k1 has quit (Ping timeout: 246 seconds)
*	Boarders (568443cc@gateway/web/freenode/ip.86.132.67.204) has joined
*	biglama (~Day_dream@ip-188.net-82-216-175.joinville2.rev.numericable.fr) has joined
*	Henning__ (~admin@c-66-41-224-186.hsd1.mn.comcast.net) has joined
*	cyborg-one has quit (Ping timeout: 255 seconds)
*	jellowj (~yellow-ja@dbg149.neoplus.adsl.tpnet.pl) has joined
*	Henning__ is now known as LadyMacDeath
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	osa1 (~omer@91.93.255.36) has joined
*	osa1 has quit (Changing host)
*	osa1 (~omer@haskell/developer/osa1) has joined
*	aarvar (~foewfoiew@50.34.105.170) has left
*	OnkelTem has quit (Ping timeout: 248 seconds)
*	ianandrich has quit (Ping timeout: 260 seconds)
*	codrinb has quit (Ping timeout: 264 seconds)
*	taktoa has quit (Remote host closed the connection)
*	free_beard (~mircea@unaffiliated/free-beard/x-6152516) has joined
*	toad (~torstein@84-52-234.108.3p.ntebredband.no) has joined
*	t7 has quit (Remote host closed the connection)
*	cloudhead has quit (Ping timeout: 240 seconds)
*	wvansteen (~wvansteen@c-24-9-122-60.hsd1.co.comcast.net) has joined
*	LadyMacDeath has quit (Quit: LadyMacDeath)
*	coot___________ (~coot@188.146.168.136.nat.umts.dynamic.t-mobile.pl) has joined
*	aarvar (~foewfoiew@50.34.105.170) has joined
<dminuoso>	Been following some lectures on CT, and the lecturer implies that the monad is actually the kleisli arrow related to the type m. Is there any truth to that?
<hpc>	https://hackage.haskell.org/package/base-4.10.0.0/docs/Control-Arrow.html#t:Kleisli - i don't know about saying it "is" that
<hpc>	but the relationship exists
*	codrinb (~codrinb@94.177.40.42) has joined
*	mek42 has quit (Ping timeout: 248 seconds)
<dminuoso>	hpc, I mean it does sound tons more elegant when describing the associativity laws with >=> over >>=
*	smt_ (~smt@unaffiliated/smt) has joined
<hpc>	it is
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	codrinb has quit (Ping timeout: 260 seconds)
<dminuoso>	hpc, https://wiki.haskell.org/Arrow_tutorial seems to imply that an the arrow a -> m b is exactly then a kleisli arrow, if m is a Monad
*	Youmu has quit (Quit: Connection closed for inactivity)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
<hpc>	yeah
*	dkov has quit (Quit: dkov)
<dminuoso>	So it seems a slip of the tongue to call the kleisli arrow the monad itself
*	hexfive (~beknowly@50.35.82.88) has joined
*	crownose (~weechat@2a02:8010:6173:0:2ab2:bdff:fe2b:c456) has joined
*	smt` has quit (Ping timeout: 246 seconds)
<hpc>	you're right on the rest of it though
*	plutoniix has quit (Read error: Connection reset by peer)
*	marr (~ccc@213-238-125-175.adsl.inetia.pl) has joined
*	tsaka__ has quit (Ping timeout: 264 seconds)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
<c_wraith>	dminuoso: by the way, (Kleisli mº only needs to be a Category for m to be a monad.  It doesn't need the rest of the Arrow stuff.
*	plutoniix has quit (Read error: Connection reset by peer)
<c_wraith>	err, (Kleisli m)
*	revtintin has quit (Ping timeout: 260 seconds)
*	ConTeXnician (~ConTeXnic@host-091-097-200-101.ewe-ip-backbone.de) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	Boarders has quit (Quit: Page closed)
*	codrinb (~codrinb@94.177.40.42) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	crownose has quit (Quit: WeeChat 1.7.1)
*	ConTeXnician has quit (Client Quit)
*	the_2nd has quit (Quit: Leaving)
*	codrinb has quit (Ping timeout: 240 seconds)
*	Infinisil has quit (Quit: Lost terminal)
*	stef204 (~stef204@unaffiliated/stef-204/x-384198) has joined
*	pfurla has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
*	codrinb (~codrinb@94.177.40.42) has joined
*	t7 (~chatzilla@host86-138-8-152.range86-138.btcentralplus.com) has joined
*	osa1 has quit (Ping timeout: 240 seconds)
*	cloudhead (~cloudhead@ip5f5bd3e7.dynamic.kabel-deutschland.de) has joined
*	codrinb has quit (Ping timeout: 260 seconds)
*	Antoxyde has quit (Quit: Leaving)
*	asakeron (~asakeron@191.19.76.125) has joined
*	connrs has quit (Ping timeout: 240 seconds)
*	biglama has quit (Quit: Lost terminal)
*	kuribas has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
*	codrinb (~codrinb@94.177.40.42) has joined
*	connrs (~connrs@conners.plus.com) has joined
*	Scip (~scip@76.121.6.102) has joined
*	bennofs (~benno@217-68-187-120.dynamic.primacom.net) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
*	samrat has quit (Ping timeout: 255 seconds)
*	mson (uid110608@gateway/web/irccloud.com/x-iitrqpreovklubku) has joined
*	chrissl (~chris@mail.meicloud.at) has joined
*	texasmynsted_ (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has joined
*	Scip has quit (Ping timeout: 240 seconds)
*	hc has quit (Read error: Connection reset by peer)
*	hc (~ircd@unaffiliated/hc) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	texasmynsted has quit (Ping timeout: 240 seconds)
*	inhortte has quit (Ping timeout: 255 seconds)
*	ljc (~who@unaffiliated/ljc) has joined
*	newhoggy (~newhoggy@1.144.97.35) has joined
*	Scip (~scip@76.121.6.102) has joined
*	zero_byte (~zer0@ip-89-103-110-138.net.upcbroadband.cz) has joined
*	codrinb has quit (Ping timeout: 248 seconds)
*	newhoggy has quit (Ping timeout: 248 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	alex`` has quit (Ping timeout: 264 seconds)
*	codrinb has quit (Ping timeout: 240 seconds)
*	OnkelTem has quit (Ping timeout: 255 seconds)
*	jao (~jao@pdpc/supporter/professional/jao) has joined
*	gugah has quit (Quit: Leaving)
*	codrinb (~codrinb@94.177.40.42) has joined
*	inhortte (~polaris@31.4.242.119) has joined
*	zzq has quit (Quit: Lost terminal)
*	zzq (~zzq@46.120.114.167) has joined
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	quobo (uid178934@gateway/web/irccloud.com/x-xslvjcgasmnmpaqh) has joined
*	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined
*	raynold has quit (Quit: Connection closed for inactivity)
*	afarmer_ has quit (Ping timeout: 240 seconds)
*	vuto (~vuto@42.119.233.193) has joined
*	Cale (~cale@209.226.201.222) has joined
*	tsaka__ (~torstein@84-52-234.108.3p.ntebredband.no) has joined
*	zapbranig has quit (Quit: zapbranig)
*	cyborg-one (~cyborg-on@188-115-172-176.broadband.tenet.odessa.ua) has joined
*	dminuoso (~dminuoso@unaffiliated/dminuoso) has left ("Leaving")
<maerwald>	where does stack host packages?
*	dminuoso (~dminuoso@unaffiliated/dminuoso) has joined
*	OnkelTem has quit (Ping timeout: 240 seconds)
*	eacameron has quit (Ping timeout: 255 seconds)
*	SkyPatrol_ (~SkyPatrol@193.30.164.133) has joined
<dminuoso>	c_wraith, ah so that's just another way of describing the associativity and identity laws
<c_wraith>	dminuoso: yes.
*	jb55 has quit (Ping timeout: 240 seconds)
*	vuto has quit (Ping timeout: 264 seconds)
*	proofskiddie (~user@pal-210-106-65.itap.purdue.edu) has joined
*	SkyPatrol has quit (Ping timeout: 240 seconds)
*	Mon_Ouie has quit (Ping timeout: 264 seconds)
<sm>	maerwald: IIRC it has a cache of hackage on amazon
<maerwald>	I want to download https://www.stackage.org/nightly-2017-09-17/package/integer-gmp-1.0.1.0 but I don't know how
<sm>	maybe stack issue tracker more
*	PerseusPlease has quit (Quit: Leaving)
<sm>	um.. I accidentally the.. never mind
*	inhortte has quit (Ping timeout: 260 seconds)
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
<sm>	doesn't stack install integer-gmp-1.0.1.0 do it ?
<maerwald>	I don't have or use stack
<maerwald>	I need the url
*	sepp2k has quit (Read error: Connection reset by peer)
*	Big_G has quit (Ping timeout: 248 seconds)
*	oish has quit (Ping timeout: 264 seconds)
<sm>	I humbly beg your pardon for suggesting that you did :)
<maerwald>	I pardon you!
*	Big_G (~Big_G@71-212-94-13.tukw.qwest.net) has joined
*	emmanuel_erc has quit (Remote host closed the connection)
*	armyriad has quit (Quit: Leaving)
<sm>	I think stack gets that by unpacking the ghc 8.2 tarball or whatever
<maerwald>	annoying
*	BartAdv has quit (Quit: Connection closed for inactivity)
*	proofskiddie has quit (Ping timeout: 252 seconds)
*	mmn80 has quit (Quit: Connection closed for inactivity)
<sm>	are you trying to use that newer integer-gmp with older ghc ?
*	ystael (~ystael@209.6.50.55) has joined
<maerwald>	no, I am packaging ghc and the libraries need to be explicit to the package manager
*	crobbins (~crobbins@2600:1700:6391:1c20::48) has joined
<sm>	ok.. maybe #ghc will help
<maerwald>	already tried
<sm>	bah. stupid haskell
<Liskni_si>	maerwald: http://hackage.fpcomplete.com/package/integer-gmp-1.0.0.1.tar.gz
<maerwald>	that's the old version
<maerwald>	ghc-8.2.1 uses integer-gmp-1.0.1.0
<Liskni_si>	oh, sorry, I just did stack -v unpack integer-gmp and pasted the url
<sm>	look for discussion of this from past packaging events ? Otherwise you could ping one of the wizards like bgamari
*	paolino has quit (Remote host closed the connection)
*	ljc has quit (Ping timeout: 255 seconds)
*	gugah (~gugah@181.28.219.193) has joined
<maerwald>	in the past I waited 4 weeks until someone fixed it
<Liskni_si>	then I guess stack unpack with nightly will fail as well :-)
*	OnkelTem has quit (Ping timeout: 248 seconds)
*	cyborg-one has quit (Quit: cyborg-one)
*	nior (~nior@129.10.9.51) has joined
*	knupfer (4fc26c14@gateway/web/cgi-irc/kiwiirc.com/ip.79.194.108.20) has joined
<Liskni_si>	yeah
<Liskni_si>	$ stack --resolver nightly-2017-09-17 unpack integer-gmp
<Liskni_si>	Updating package index Hackage (mirrored at https://s3.amazonaws.com/hackage.fpcomplete.com/) ...The following package identifiers were not found in your indices: integer-gmp-1.0.1.0
*	armyriad (~armyriad@gateway/vpn/privateinternetaccess/armyriad) has joined
*	beanbagula has quit (Ping timeout: 255 seconds)
*	inhortte (~polaris@31.4.242.246) has joined
*	Cale has quit (Ping timeout: 252 seconds)
*	codrinb has quit (Ping timeout: 260 seconds)
*	foundling (~Mutter@2607:fb90:835b:ba77:c54d:f5f:c2d4:a184) has joined
*	Cale (~cale@209.226.201.222) has joined
*	tremon has quit (Quit: getting boxed in)
*	herr_jth has quit ()
*	SpinTensor has quit (Quit: WeeChat 1.9)
*	crobbins has quit (Ping timeout: 252 seconds)
*	Psybur (~broseph@pool-108-44-203-65.clppva.fios.verizon.net) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	kirillow (~kirillow@port-92-195-60-94.dynamic.qsc.de) has joined
*	SkyPatrol (~SkyPatrol@193.30.164.133) has joined
*	ons (~olof@helios.knark.io) has joined
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	desperek has quit (Quit: died)
*	simukis has quit (Ping timeout: 246 seconds)
*	codrinb has quit (Ping timeout: 240 seconds)
*	Psybur has quit (Ping timeout: 240 seconds)
*	piyush-k` has quit (Remote host closed the connection)
*	piyush-k` (~user@14.139.174.50) has joined
*	SkyPatrol_ has quit (Ping timeout: 240 seconds)
*	foundling has quit (Remote host closed the connection)
*	Cale has quit (Read error: Connection reset by peer)
*	SkyPatrol_ (~SkyPatrol@netacc-gpn-7-140-39.pool.telenor.hu) has joined
*	toby1851 has quit (Ping timeout: 240 seconds)
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	LiaoTao has quit (Ping timeout: 248 seconds)
*	Cale (~cale@209.226.201.222) has joined
*	SkyPatrol has quit (Ping timeout: 240 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	marcux (~marcux@2804:14c:67:8454:8c47:3796:8661:660) has joined
*	jellowj has quit (Ping timeout: 255 seconds)
*	ystael has quit (Ping timeout: 252 seconds)
*	ystael (~ystael@209.6.50.55) has joined
*	danthemyth has quit (Ping timeout: 248 seconds)
*	yaun has quit (Ping timeout: 240 seconds)
*	stef204 has quit (Quit: WeeChat 1.9)
*	foundling (~Mutter@2607:fb90:835b:ba77:c54d:f5f:c2d4:a184) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
*	`Guest00000 has quit (Ping timeout: 260 seconds)
<maerwald>	nice, people update .cabal files of packages in-place without bumping too
*	kadoban (~mud@unaffiliated/kadoban) has joined
<maerwald>	https://hackage.haskell.org/package/echo
<maerwald>	says process <1.7, but the tarball still does <1.5
*	LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) has joined
*	marcux has quit (Remote host closed the connection)
*	mcbears (~user@c-67-180-86-120.hsd1.ca.comcast.net) has joined
*	cloudhead has quit (Ping timeout: 260 seconds)
*	mibaz_1 (~m@160-3-177-68.cpe.cableone.net) has joined
*	Swizec has quit (Quit: Computer has gone to sleep.)
<maerwald>	how can people even build cabal-install? the dep-chain is broken
*	Swizec (~swizec@c-76-126-10-27.hsd1.ca.comcast.net) has joined
*	hexfive has quit (Ping timeout: 240 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	`Guest00000 (~user@37.113.156.118) has joined
*	jellowj (~yellow-ja@dbg149.neoplus.adsl.tpnet.pl) has joined
*	Swizec has quit (Quit: Leaving...)
*	gugah has quit (Remote host closed the connection)
*	codrinb has quit (Ping timeout: 240 seconds)
*	gugah (~gugah@181.28.219.193) has joined
*	gugah has quit (Max SendQ exceeded)
*	toby1851 (~toby@88-110-104-87.dynamic.dsl.as9105.com) has joined
*	chaosmasttter has quit (Ping timeout: 240 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	jbergok has quit (Ping timeout: 248 seconds)
<mniip>	maerwald, last time I had to do it I had to patch the dependencies on the bootstrap script
*	hackebeilchen has quit (Read error: Connection reset by peer)
*	codrinb (~codrinb@94.177.40.42) has joined
<maerwald>	Every ghc release is basically a nightmare, because not even the most important packages build. And that after how many months?
*	twandy has quit (Ping timeout: 260 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Noldorin has quit (Ping timeout: 240 seconds)
<knupfer>	maerwald: ghc 8.2 with nix works like a charm
<maerwald>	good for you :>
*	carld (~carldougl@203.97.150.222) has joined
<knupfer>	and potentially good for you :>
<maerwald>	no
*	codrinb has quit (Ping timeout: 240 seconds)
<knupfer>	n8
<benzrf>	just succumb already
<benzrf>	give in to the nix collective
<benzrf>	hope this helps
<maerwald>	I prefer correctly working distros
<hydraz>	great thing nix is a package manager
*	knupfer has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
<maerwald>	gl using it without nixpkgs
<hydraz>	great thing nixpkgs is a package collection..?
<maerwald>	*yawn*
*	KongWubba (~yaaic@a89-182-66-200.net-htp.de) has joined
*	inhortte has quit (Ping timeout: 264 seconds)
*	wvansteen has quit (Ping timeout: 240 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	twandy has quit (Ping timeout: 264 seconds)
*	fizruk_ has quit (Quit: fizruk_)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	tjbp has quit (Ping timeout: 246 seconds)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	Ch3ck (~Ch3ck@162.222.117.226) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	codrinb has quit (Ping timeout: 246 seconds)
*	minos_ has quit (Quit: Leaving)
*	Durbley has quit (Read error: Connection reset by peer)
*	stef204 (~stef204@unaffiliated/stef-204/x-384198) has joined
<maerwald>	next package monkey-patching dependency constraints without a bump
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	foundling has quit (Quit: Mutter: www.mutterirc.com)
*	proofskiddie (~user@104-254-217-150.lfytina2.metronetinc.net) has joined
*	oisdk (~textual@83.136.43.202) has joined
*	tjbp (~tom@tjbp.net) has joined
*	nior has quit (Quit: /thread)
*	phyrex1an has quit (Ping timeout: 264 seconds)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	codrinb (~codrinb@94.177.40.42) has joined
*	hiratara has quit (Ping timeout: 246 seconds)
*	bigos (~jacek@cpc103102-ward12-2-0-cust346.10-2.cable.virginm.net) has joined
*	fizruk_ (~anonymous@89-178-211-68.broadband.corbina.ru) has joined
*	takuan has quit (Remote host closed the connection)
*	beanbagula (~bean_bag@2a00:23c5:4b04:9200:88b8:8a41:fdda:7048) has joined
*	hiratara (~hiratara@240f:7:4708:1:b82d:f882:2c7:4ebc) has joined
*	codrinb has quit (Ping timeout: 248 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	beanbagula has quit (Ping timeout: 264 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	black0range has quit (Ping timeout: 240 seconds)
*	KongWubba has quit (Quit: Yaaic - Yet another Android IRC client - http://www.yaaic.org)
*	twandy has quit (Ping timeout: 240 seconds)
*	plutoniix has quit (Read error: Connection reset by peer)
*	jb55 (~jb55@70-36-49-138.dyn.novuscom.net) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	jbergok (~johan@212.33.145.222) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	Jeanne-Kamikaze has quit (Quit: Leaving)
*	groscoe has quit (Ping timeout: 260 seconds)
*	aarvar has quit (Remote host closed the connection)
*	Arul (62ead957@gateway/web/freenode/ip.98.234.217.87) has joined
*	mson has quit (Quit: Connection closed for inactivity)
*	pera has quit (Ping timeout: 255 seconds)
*	ystael has quit (Ping timeout: 248 seconds)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	newhoggy (~newhoggy@1.144.97.35) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	Vq has quit (Ping timeout: 240 seconds)
*	aavogt (~aavogt@24-52-245-124.cable.teksavvy.com) has joined
*	Fubar^ has quit (Ping timeout: 240 seconds)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	argent0 (~aner@186.133.151.169) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	vuto (~vuto@42.119.233.193) has joined
*	carld has quit (Ping timeout: 260 seconds)
*	groscoe (~nb@187.20.159.147) has joined
*	mizu_no_oto has quit (Ping timeout: 240 seconds)
*	vuto has quit (Ping timeout: 240 seconds)
*	Vq (~vq@90-227-195-41-no77.tbcn.telia.com) has joined
*	Fubar^ (~fubar@90-227-195-41-no77.tbcn.telia.com) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	hiratara has quit (Remote host closed the connection)
*	telser has quit (Ping timeout: 240 seconds)
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	jmorris (~jmorris@165-158-181-180.cpe.skymesh.net.au) has joined
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	telser (~telser@209.195.6.92) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
*	hiratara (~hiratara@240f:7:4708:1:e4c8:5ce8:1f83:1e8e) has joined
*	qwertydvorak has quit (Ping timeout: 252 seconds)
<orzo>	Anybody have any advise on laying out module names for a project?
*	plutoniix has quit (Read error: Connection reset by peer)
*	mizu_no_oto has quit (Ping timeout: 260 seconds)
<orzo>	i've been following the haskell library convention of Data/Control/Crypto/ top levels
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
<orzo>	but i wonder if it wouldn't make more sense to name modules based on where they occur in the dependency graph
*	eacameron has quit (Ping timeout: 240 seconds)
<orzo>	so that you could import the bottom layer with a single import statement
*	stef204 has quit (Quit: WeeChat 1.9)
<orzo>	or the next layer
<orzo>	So I would classify top-levels by layer rather than semantic scope
*	codrinb (~codrinb@94.177.40.42) has joined
*	Sampuka has quit (Ping timeout: 255 seconds)
*	kriztw (~kris@128.199.43.215) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	nous1024 (~kanai@i242032.dynamic.ppp.asahi-net.or.jp) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
*	jb55 has quit (Ping timeout: 260 seconds)
*	Cale has quit (Ping timeout: 240 seconds)
*	plutoniix has quit (Read error: Connection reset by peer)
*	afarmer (~afarmer@199.201.64.4) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	kriztw has quit (Remote host closed the connection)
*	CoderPuppy (~cpup@32.218.113.80) has joined
*	mach (~user@c-24-23-203-109.hsd1.ca.comcast.net) has joined
*	kirillow has quit (Quit: WeeChat 1.7)
*	mach is now known as Guest29766
*	cpup has quit (Ping timeout: 255 seconds)
*	cpup- has quit (Ping timeout: 260 seconds)
*	xaviergmail has quit (Quit: WeeChat 1.9)
*	newhoggy has quit (Remote host closed the connection)
*	codrinb (~codrinb@94.177.40.42) has joined
*	nullifidian_ (~nullifidi@unaffiliated/nullifidian) has joined
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	cpup (~cpup@32.218.113.80) has joined
*	argent0 has quit (Ping timeout: 255 seconds)
*	oisdk has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	plutoniix has quit (Read error: Connection reset by peer)
*	myrl1 has quit (Ping timeout: 246 seconds)
*	Myrl-saki has quit (Ping timeout: 240 seconds)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	sigmundv has quit (Read error: Connection reset by peer)
*	nullifidian has quit (Ping timeout: 240 seconds)
*	derek_c (47ca5444@gateway/web/freenode/ip.71.202.84.68) has joined
<derek_c>	Is there a meaningful difference between a program interpreted in ghci and one compiled via ghc?
<derek_c>	in terms of performance
*	sigmundv (~sigmundv@178.167.153.106.threembb.ie) has joined
<isaac__>	I'm pretty sure there is
*	codrinb has quit (Ping timeout: 264 seconds)
<geekosaur>	define 'meaningful'
<derek_c>	it's a number crunching program of some sort
<geekosaur>	ghci compiles to interpreted bytecode instead of native code. ghci doesn't support optimization at all.
<derek_c>	fairly memory/cpu intensive
<derek_c>	I see
<derek_c>	thanks
<hpc>	geekosaur: if you're a nihilist does haskell perform better? :D
*	Guest29766 has quit (Remote host closed the connection)
*	mach` (~user@c-24-23-203-109.hsd1.ca.comcast.net) has joined
*	mach` has quit (Remote host closed the connection)
*	kanshazan has quit (Ping timeout: 255 seconds)
*	beanbagula (~bean_bag@2a00:23c5:4b04:9200:88b8:8a41:fdda:7048) has joined
<dminuoso>	derek_c, you could have just rent two apartments, set up a bitcoin miner in each - and have the implementation run in ghci in one and ghc in the other. And then look at the electricity bill at the end of the year.
<dminuoso>	Then you would have known.
<dminuoso>	Gives you all information such as speed and efficiency.
*	slomo has quit (Read error: Connection reset by peer)
*	codrinb (~codrinb@94.177.40.42) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	des_ (~textual@2601:8c2:4280:2a91:ac9b:457f:5c1:f2dc) has joined
*	beanbagula has quit (Ping timeout: 246 seconds)
*	fDev2179 (~fDev2179@c-73-169-245-192.hsd1.wa.comcast.net) has joined
*	cpup- (~cpup@32.218.113.106) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
*	cpup has quit (Ping timeout: 248 seconds)
*	Jesin (~Jesin@pool-72-83-138-15.washdc.fios.verizon.net) has joined
*	CoderPuppy has quit (Ping timeout: 248 seconds)
*	twandy has quit (Ping timeout: 264 seconds)
*	numberten has quit (Ping timeout: 264 seconds)
*	cpup (~cpup@32.218.113.106) has joined
<mibaz_1>	boom easy profiling
*	takle has quit (Remote host closed the connection)
<mibaz_1>	check which one can factor the first 10^23 primes first
*	plutoniix has quit (Read error: Connection reset by peer)
*	codrinb (~codrinb@94.177.40.42) has joined
*	`^_^v (~nycs@cpe-98-14-70-190.nyc.res.rr.com) has joined
*	lukaramu_ has quit (Quit: Leaving)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	rickerbh (~rickerbh@14-203-105-198.static.tpgi.com.au) has joined
<kadoban>	That's a lot of primes
*	theelous3 has quit (Ping timeout: 248 seconds)
*	sz0 has quit (Quit: Connection closed for inactivity)
*	codrinb has quit (Ping timeout: 240 seconds)
*	justan0theruser (~justanoth@unaffiliated/justanotheruser) has joined
*	JScully has quit (Quit: JScully)
*	gienah_ has quit (Ping timeout: 252 seconds)
**** BEGIN LOGGING AT Tue Sep 19 18:49:46 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	louispan has quit (Quit: louispan)
<robkennedy>	lyxia: if my program doesn't depend on every field of A, id want it produce results
*	kuttifunk has quit (Ping timeout: 240 seconds)
*	kuttifunk1 is now known as kuttifunk
<geekosaur>	this does not have potential security implications?
<geekosaur>	or correctness implications?
*	a3Dman has quit (Ping timeout: 255 seconds)
<lyxia>	robkennedy: still, what if the fields it does depend on fail to parse?
*	codrinb has quit (Ping timeout: 260 seconds)
*	dargains has quit (Remote host closed the connection)
<robkennedy>	Geekosaur: In the end tbh I don't especially care - which in the history of math v physics tends to side with physics
*	dargains (~dargains@2804:7f7:e282:14c0:cc19:6010:b0ea:b05e) has joined
*	joomy (~joomy@c-73-142-151-191.hsd1.ct.comcast.net) has joined
<robkennedy>	lyxia: yes, those should produce the `Nothing` that I'll handle correctly 
*	Youmu (uid129469@gateway/web/irccloud.com/x-kdmbpwmowryqglie) has joined
<robkennedy>	I'm not asking to give up all safety, just safety on the fields I don't care about/use (which sounds like laziness)
<lyxia>	okay so you have fields that are Maybe, not just any B or C
*	ebsen has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	`Guest00000 has quit (Ping timeout: 264 seconds)
*	mj_k (~mj_k@59.10.109.21) has joined
*	ianandrich has quit (Ping timeout: 240 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	`Guest00000 (~user@37.113.188.55) has joined
*	dargains has quit (Ping timeout: 240 seconds)
*	mj_k has quit (Client Quit)
*	mj_k (~mj_k@59.10.109.21) has joined
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	erisco has quit (Quit: Leaving)
*	robkennedy has quit (Ping timeout: 255 seconds)
*	banc has quit (Quit: ZNC - http://znc.in)
*	hucksy_ (~hucksy@p5B3C5449.dip0.t-ipconnect.de) has joined
*	conal has quit (Quit: Computer has gone to sleep.)
*	conal (~conal@104.255.240.10) has joined
*	Fekinox has quit (Ping timeout: 248 seconds)
*	codrinb has quit (Ping timeout: 260 seconds)
*	Fekinox (~Zen@cpe-74-72-183-234.nyc.res.rr.com) has joined
*	hucksy has quit (Ping timeout: 240 seconds)
*	juhp has quit (Quit: juhp)
*	whitephoenix has quit (Ping timeout: 248 seconds)
*	groscoe has quit (Ping timeout: 248 seconds)
*	eklavya (~eklavya@2405:205:1205:40f6:d07b:4809:a884:3573) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	poindontcare has quit (Ping timeout: 264 seconds)
*	shangxiao has quit (Ping timeout: 240 seconds)
*	sellout- (~Adium@c-98-245-162-101.hsd1.co.comcast.net) has joined
*	iphy has quit (Quit: Connection closed for inactivity)
*	sullyj3 (67e18ca2@gateway/web/freenode/ip.103.225.140.162) has joined
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
*	eklavya has quit (Ping timeout: 255 seconds)
*	codrinb has quit (Ping timeout: 240 seconds)
<sullyj3>	Hey, what's going on with the following?:
*	rdavison has quit (Quit: rdavison)
*	twandy has quit (Ping timeout: 240 seconds)
<sullyj3>	:t liftM (+1) $ return 1
<lambdabot>	(Num r, Monad m) => m r
<sullyj3>	liftM (+1) $ return 1
<sullyj3>	> liftM (+1) $ return 1
<lambdabot>	 error:
<lambdabot>	     • Ambiguous type variable ‘m0’ arising from a use of ‘show_M542518867778...
<lambdabot>	       prevents the constraint ‘(Show (m0 Integer))’ from being solved.
*	Akaz (~Akaz@99-42-124-147.lightspeed.frokca.sbcglobal.net) has joined
<sullyj3>	hm on my machine that gives 2
*	shangxiao (~shangxiao@106-68-92-108.dyn.iinet.net.au) has joined
*	banc (~master@217.151.98.168) has joined
*	poindontcare (~user@107.170.205.20) has joined
*	crobbins has quit (Ping timeout: 240 seconds)
*	jmorris has quit (Ping timeout: 240 seconds)
<Welkin>	liftM is fmap
*	hamishmack has quit (Quit: hamishmack)
<Welkin>	also, what are you `return`ing into?
<geekosaur>	ghci speculatively tries m as IO. lambdabot does not do IO
<Welkin>	> fmap (+1) $ return 1 :: [Int]
<lambdabot>	 [2]
*	codrinb (~codrinb@94.177.40.42) has joined
*	Wizek_ has quit (Ping timeout: 240 seconds)
*	shangxiao has quit (Ping timeout: 240 seconds)
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:fd42:e38e:f163:ea29) has joined
*	shangxiao (~shangxiao@106-68-92-108.dyn.iinet.net.au) has joined
*	koserge has quit (Ping timeout: 240 seconds)
*	robkennedy (~rkennedy@2600:1:9618:476:b03e:4095:2bee:6d3b) has joined
*	jchia has quit (Ping timeout: 240 seconds)
*	pandeiro has quit (Ping timeout: 255 seconds)
*	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has joined
*	joncfoo (~jonathan@c-67-176-93-55.hsd1.co.comcast.net) has joined
*	jchia (~jchia@116.192.18.22) has joined
*	shangxiao has quit (Ping timeout: 240 seconds)
*	eklavya (~eklavya@2405:205:1205:40f6:413d:27aa:ef01:2039) has joined
*	hackagebot checkmate 0.1.3 – Generate checklists relevant to a given patch – https://hackage.haskell.org/package/checkmate
*	samrat (~samrat@202.51.76.69) has joined
*	Big_G has quit (Quit: Leaving)
*	CHCl3 has quit (Quit: Saliendo)
**** BEGIN LOGGING AT Thu Sep 28 12:39:12 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<crucify_me>	> reverseTuple = uncurry (flip (,))
<lambdabot>	 <hint>:1:14: error:
<lambdabot>	     parse error on input ‘=’
<lambdabot>	     Perhaps you need a 'let' in a 'do' block?
*	stoopkid__ has quit (Quit: Connection closed for inactivity)
<crucify_me>	> let reverseTuple = uncurry (flip (,))
<lambdabot>	 <no location info>: error:
<lambdabot>	     not an expression: ‘let reverseTuple = uncurry (flip (,))’
<crucify_me>	hi why does this function need uncurry ^
<maerwald>	@define reverseTuple = uncurry (flip (,))
<lambdabot>	 Defined.
*	Jesin (~Jesin@pool-72-83-138-15.washdc.fios.verizon.net) has joined
<maerwald>	:t reverseTuple
<lambdabot>	(b, a) -> (a, b)
*	jellowj (~yellow-ja@dcn230.neoplus.adsl.tpnet.pl) has joined
<maerwald>	:t flip (,)
<lambdabot>	b -> a -> (a, b)
<maerwald>	because of that
<crucify_me>	oh so its because of how flip is written. 
<cocreature>	:t (,)
<lambdabot>	a -> b -> (a, b)
<cocreature>	:t flip (,)
<maerwald>	it's needlessly tricky pointfree style
<lambdabot>	b -> a -> (a, b)
<maerwald>	write it without flip
<maerwald>	flip is one of those functions I literally never use
<crucify_me>	maerwald, thanks, its a book example against the equivalent reverseTuple' (a, b) = (b, a) 
<maerwald>	ah
*	Wizek_ (~Wizek@catv-89-132-132-110.catv.broadband.hu) has joined
*	tremon (~aschuring@53541C2B.cm-6-5a.dynamic.ziggo.nl) has joined
<crucify_me>	maerwald, you never use it? I'm a beginner. there's a long section on const flip and id that I'm still studying
<maerwald>	:t \(x, y) -> (y, x)
<lambdabot>	(b, a) -> (a, b)
*	iAmerikan has quit (Ping timeout: 260 seconds)
*	path[l] has quit (Quit: path[l])
<maerwald>	I read that function and I understand it within 0.3s
<maerwald>	for the other version I probably need 10 times that time
<crucify_me>	good call
<maerwald>	unless I've seen it in the last 15 minutes
<maerwald>	and it's just as short
<crucify_me>	the point of the lesson is currying so that's why they have flip there I presume
<crucify_me>	assume
<maerwald>	yeah, I guess it's not to come up with real world examples
<crucify_me>	thanks for the quick response
*	zero_byte (~zer0@11.110.broadband5.iol.cz) has joined
*	danieli has quit (Remote host closed the connection)
*	lambda-11235 (~lambda-11@168.150.98.231) has joined
*	hulufei (~hulufei@38.121.61.254) has joined
*	samrat has quit (Ping timeout: 258 seconds)
*	motersen (~user@x4e3460b6.dyn.telefonica.de) has joined
*	rotty has quit (Ping timeout: 255 seconds)
<mizu_no_oto>	crucify_me: flip, const and id are all useful with higher order functions
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
*	albertus1 (~seb@x55b4bdf6.dyn.telefonica.de) has joined
*	albertus1 has quit (Max SendQ exceeded)
<mizu_no_oto>	crucify_me: e.g. foldr (flip foo) bar baz
<mizu_no_oto>	if foo's arguments are the reverse of what you need
*	albertus1 (~seb@x55b4bdf6.dyn.telefonica.de) has joined
<maerwald>	mizu_no_oto: why would you need flip there?
<maerwald>	flip just forces you to visualize the type signature and the omitted arguments, which costs extra time
*	hulufei has quit (Ping timeout: 248 seconds)
<mizu_no_oto>	> foldl (flip (:)) [] [1,2,3,4,5]
<lambdabot>	 [5,4,3,2,1]
<mizu_no_oto>	> foldl (\x acc -> x : acc) [] [1,2,3,4,5]
<lambdabot>	 error:
<lambdabot>	     • Occurs check: cannot construct the infinite type: a ~ [a]
<lambdabot>	       Expected type: [a]
*	nakal_ (~nakal@port-92-201-38-160.dynamic.qsc.de) has joined
*	nakal has quit (Disconnected by services)
*	SkyPatrol_ (~SkyPatrol@193.30.164.133) has joined
<mizu_no_oto>	> foldl (\acc x-> x : acc) [] [1,2,3,4,5]
<lambdabot>	 [5,4,3,2,1]
*	rotty (~rotty@yade.chaostreff.at) has joined
<crucify_me>	maerwald, mizu_no_oto hold on please could I get a little lesson re: foldr ?      re: this sum' xs = foldr (+) 0 xs or the pointfree summ = foldr (+) 0      ?
<crucify_me>	when you have a fold, you need the zero as a counter?
*	iqubic (1811e538@gateway/web/freenode/ip.24.17.229.56) has joined
<shloub>	you need a start value
<maerwald>	or end value :P
<crucify_me>	that's what I meant thanks
<iqubic>	Well, I'm taking the plunge head first. I'm installing NixOS cold turkey.
*	SkyPatrol has quit (Ping timeout: 240 seconds)
<maerwald>	can lambdabot visualize foldr?
<mizu_no_oto>	crucify_me: what's foldr (+) 0 [] going to return?
<shloub>	i believe foldr1 takes the first (or last…) for this value
*	osa1 has quit (Ping timeout: 240 seconds)
*	gypsydave5 has quit (Ping timeout: 248 seconds)
*	mr_sm1th has quit (Ping timeout: 248 seconds)
<crucify_me>	zero?
<crucify_me>	or []
<iqubic>	:t foldr
<lambdabot>	Foldable t => (a -> b -> b) -> b -> t a -> b
<shloub>	> foldr (+) 0 []
<crucify_me>	iqubic, yeah frankly I cannot read that signature quite yet
<lambdabot>	 0
*	jellowj has quit (Ping timeout: 240 seconds)
*	danieli (~duniel@85.113.173.53) has joined
<maerwald>	I remember lamdabot being able to expan simple foldr commands, no?
*	XorSwap has quit (Ping timeout: 240 seconds)
<crucify_me>	I never understood folds when I was doing scheme.
<crucify_me>	*learning
*	pja (~pja@2a02:8010:6098:0:55c0:ec2a:80f2:33d9) has joined
<mizu_no_oto>	you can simplify it to "(a -> b -> b) -> b -> [a] -> b"
<int-e>	> foldr f a [b,c,d]
<lambdabot>	 f b (f c (f d a))
<int-e>	maerwald: like this?
<maerwald>	exactly, you see 'a' being at the "end"
<int-e>	:t f -- dirty trick
<lambdabot>	FromExpr a => a
<maerwald>	so it can be confusing to call it a start value
*	danieli has quit (Changing host)
*	danieli (~duniel@unaffiliated/danieli) has joined
<crucify_me>	I think of it as a "zeroed out" counter. is that wrong?
*	oooooooooooooo (5a034963@gateway/web/freenode/ip.90.3.73.99) has joined
<int-e>	> a^7
<lambdabot>	 a * a * (a * a) * (a * a * a)
<maerwald>	I just think of it as the bouncer
<maerwald>	:P
<int-e>	but fun to play with.
<crucify_me>	sorry I'm losing this thread now
*	oooooooooooooo has quit (Client Quit)
*	pja has quit (Client Quit)
<maerwald>	if there is no one getting into the party, the bouncer is the only person in the club, right?
*	mr_sm1th (~quassel@5ED4F634.cm-7-5d.dynamic.ziggo.nl) has joined
<maerwald>	err, forget that xD
*	Volt_ has quit (Quit: Volt_)
<mizu_no_oto>	crucify_me: basically, it takes a function (a -> b -> b), some initial value of type b, then a list of a's,s and applies that (a -> b -> b) in sequence to get back a single b at the end.
<monochrom>	And if someone is getting into the party, the bouncer kicks them out, so the bouncer ends up stil being the only person.
<maerwald>	well, I meant bouncer more in the sense that when it hits 'a' it "bounces back"
<mizu_no_oto>	It doesn't have to be a 'zero' of some sort, but you often want it to be a 'zero'
<maerwald>	but we are in the land of not-so-useful analogies now
*	raingloom (~raingloom@catv-178-48-182-37.catv.broadband.hu) has joined
*	rotty has quit (Ping timeout: 258 seconds)
<tdammers>	useful analogies are like winnable wars
<maerwald>	lol
<crucify_me>	who let robert mcNamara into the party?
<monochrom>	Me.
*	chlong has quit (Ping timeout: 248 seconds)
<mizu_no_oto>	> foldr (:) [5,6,7] [1,2,3,4]
<lambdabot>	 [1,2,3,4,5,6,7]
*	Sampuka has quit (Remote host closed the connection)
<crucify_me>	excellent example I can probably figure it out now mizu_no_oto 
<mizu_no_oto>	^ that basically evaluates to 1 : 2 : 3 : 4 : [5,6,7]
<iqubic>	> foldl (:) [5,6,7] [1,2,3,4]
<lambdabot>	 error:
<lambdabot>	     • Occurs check: cannot construct the infinite type: a ~ [a]
<lambdabot>	       Expected type: [a] -> [a] -> [a]
<mizu_no_oto>	> foldl (flip (:)) [5,6,7] [1,2,3,4]
<lambdabot>	 [4,3,2,1,5,6,7]
<crucify_me>	> foldl (:) [1,2,3,4] [5,6,7]
<lambdabot>	 error:
<lambdabot>	     • Occurs check: cannot construct the infinite type: a ~ [a]
<lambdabot>	       Expected type: [a] -> [a] -> [a]
*	gypsydave5 (~user@host-2-96-74-231.as13285.net) has joined
<crucify_me>	ok thanks I'm going to look at this for a spell. THANKS ALL
*	quazimodo has quit (Ping timeout: 258 seconds)
<maerwald>	is there an editor that can expand basic expressions like foldr and so on? I mean, not just the type signature
*	Volt_ (~Volt_@0587375903.wireless.umich.net) has joined
<fakenullie>	Expand?
*	xcmw (~textual@2605:a000:132b:2b4:e8ae:62e5:7aea:1f0c) has joined
<maerwald>	> foldr f a [b,c,d]
<lambdabot>	 f b (f c (f d a))
*	towerio (~towerio@137.139.132.70) has joined
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Thu Sep 28 13:13:55 2017

**** BEGIN LOGGING AT Fri Sep 29 11:32:23 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<geekosaur>	What you wrote means the latter. You may have wanted the former; you ahve to use parentheses for that
*	tnecniv (~textual@unaffiliated/jimihendrix) has joined
*	dcoutts (~duncan@31.55.9.224) has joined
*	hulufei (~hulufei@38.121.61.254) has joined
*	revprez_1k (~revprez_y@pool-108-7-200-87.bstnma.fios.verizon.net) has joined
*	peacememories (~textual@84-114-121-230.cable.dynamic.surfer.at) has joined
*	beerdrop (~beerdrop@c-107-2-115-62.hsd1.mn.comcast.net) has joined
*	ccomb has quit (Ping timeout: 258 seconds)
*	hulufei has quit (Ping timeout: 258 seconds)
*	mortum5 (~mortum5@188.227.78.184) has joined
*	zv has quit (Ping timeout: 240 seconds)
*	GreenSands (a845fef8@gateway/web/freenode/ip.168.69.254.248) has joined
*	garphy`aw is now known as garphy
*	revtintin has quit (Ping timeout: 258 seconds)
*	oever (~oever@ip913586c5.adsl-surfen.hetnet.nl) has joined
*	CrazedProgrammer has quit (Remote host closed the connection)
*	halogenandtoast has quit (Ping timeout: 248 seconds)
*	lukaramu (~lukaramu@port-32568.pppoe.wtnet.de) has joined
*	balor (~aidan@27.123.171.204) has joined
*	lambda-11235 has quit (Quit: WeeChat 1.9)
*	theorbtwo (~theorb@cpc81866-swin19-2-0-cust48.3-1.cable.virginm.net) has joined
*	vandenoever has quit (Ping timeout: 258 seconds)
*	mson (uid110608@gateway/web/irccloud.com/x-ieaxzaxgvfwdvclu) has joined
*	tnecniv has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	armyriad (~armyriad@96-39-247-38.dhcp.mtpk.ca.charter.com) has joined
*	mr_sm1th (~quassel@5ED4F634.cm-7-5d.dynamic.ziggo.nl) has joined
<crucify_me>	hi could people please look at this stackoverflow? the upvoted answer has a recent comment "this is downright false." I wondering if I should focus on the second answer. thanks
<crucify_me>	https://stackoverflow.com/questions/1757740/how-does-foldr-work
*	acidjnk (~acidjnk22@p4FFBD829.dip0.t-ipconnect.de) has joined
*	divinespirit[m] (divinespir@gateway/shell/matrix.org/x-gbmlkqfmjunemmtg) has left ("User left")
*	oever is now known as vandenoever
*	rcat has quit (Remote host closed the connection)
*	cuq has quit (Remote host closed the connection)
*	oish (~charlie@159.22.169.217.in-addr.arpa) has joined
*	cuq (~cuq@pc-113-18-45-190.cm.vtr.net) has joined
*	ninedotnine (~dan@modemcable078.123-81-70.mc.videotron.ca) has joined
*	afarmer has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
*	hhhhhhhh77 has quit (Ping timeout: 260 seconds)
*	fendor has quit (Ping timeout: 240 seconds)
*	acarrico (~acarrico@pppoe-68-142-58-22.gmavt.net) has joined
*	tmaja (~valtterim@91-159-56-61.elisa-laajakaista.fi) has joined
*	towerio (~towerio@137.139.199.10) has joined
*	tnecniv (~textual@unaffiliated/jimihendrix) has joined
*	motersen (~user@95.157.8.207) has joined
*	zv (~zv@unaffiliated/zv) has joined
<srhb>	crucify_me: It's hard to find a way to justify "starts from the right", yes. I mean, it's a linked list after all. There's no way to get to the "right" (end) without going through all of it.
*	balor has quit (Ping timeout: 246 seconds)
<srhb>	crucify_me: Also, foldr can work over infinite lists (given compatible arguments) which should give another inkling that it cannot be true.
<crucify_me>	srhb, thank you, your first comment above is what I need to work on. the part about infinite lists makes sense
<NemesisD>	hi all, new to performance-based pragmas. i'm working on some code w/ a bunch of RULES pragmas https://github.com/ozataman/csv-conduit/blob/master/src/Data/CSV/Conduit/Conversion/Internal.hs#L28 and i get warnings the rule may never fire because it might inline. says i should either inline or noinline the function
*	tmaja has quit (Ping timeout: 246 seconds)
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
<NemesisD>	i'm not really sure which i should do...
*	towerio has quit (Ping timeout: 240 seconds)
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	augur has quit (Remote host closed the connection)
<crucify_me>	the next answer is very concise. Is that a good place to start ? (Im working through examples nicely on the 'zvon' site) srhb 
*	armyriad has quit (Ping timeout: 248 seconds)
<srhb>	crucify_me: Sure, if concise works for you. :)
<srhb>	crucify_me: You might also want to look up the definition of foldr and work a few examples out by hand using that.
<srhb>	That always seems to most straightforward path to understanding for me.
<srhb>	(And it's mechanical, no matter the function you're examining)
*	shubhaml (~shubham@pool-173-64-5-237.bflony.fios.verizon.net) has joined
*	GreenSands has quit (Ping timeout: 260 seconds)
*	hulufei (~hulufei@38.121.61.254) has joined
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
*	eacameron has quit (Ping timeout: 255 seconds)
*	ericdwhite (~ericdwhit@host86-181-34-104.range86-181.btcentralplus.com) has joined
*	ekinmur has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	serendependy has quit (Ping timeout: 258 seconds)
*	Durbley (~Durbley@c-73-148-179-151.hsd1.fl.comcast.net) has joined
*	Pilchard123_ (569d5e40@gateway/web/freenode/ip.86.157.94.64) has joined
*	tobhe (~tobhe@141.84.69.68) has joined
*	LiaoTao has quit (Remote host closed the connection)
*	ekinmur (~textual@207.231.170.7) has joined
*	ekinmur has quit (Changing host)
*	ekinmur (~textual@unaffiliated/ekinmur) has joined
*	LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) has joined
*	Durbley_ has quit (Ping timeout: 240 seconds)
*	halogenandtoast (~halogenan@132.69.30.125.dy.iij4u.or.jp) has joined
*	twanvl (~twanvl@92.110.121.28) has joined
*	nickolay has quit (Ping timeout: 255 seconds)
*	oisdk (~textual@51-171-255-121-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined
*	hulufei has quit (Ping timeout: 255 seconds)
<crucify_me>	srhb, thanks ! also I've been looking at scanr which helps explain it
*	balor (~aidan@27.123.171.168) has joined
*	cpennington has quit (Remote host closed the connection)
*	neoncontrails (~neoncontr@2602:306:31a7:a1a0:a415:3769:8f11:829c) has joined
*	agander (~agander@82-132-224-152.dab.02.net) has joined
*	Pilchard123_ (569d5e40@gateway/web/freenode/ip.86.157.94.64) has left
*	peterbecich has quit (Remote host closed the connection)
*	mattyw has quit (Ping timeout: 240 seconds)
*	alx741 (~alx741@200.107.1.203) has joined
*	oisdk has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	jellowj (~yellow-ja@epu67.neoplus.adsl.tpnet.pl) has joined
*	tnecniv has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	towerio (~towerio@137.139.199.10) has joined
*	DTZUZU has quit (Quit: WeeChat 1.9)
*	ekinmur has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
*	tnecniv (~textual@unaffiliated/jimihendrix) has joined
<crucify_me>	srhb if you have time, why is the first commented definition included here: ' foldr _ z [] = z '  ?     it produces a non-exhaustive pattern. a bit confused there
*	balor has quit (Read error: Connection reset by peer)
*	ekinmur (~textual@207.231.170.7) has joined
*	ekinmur has quit (Changing host)
*	ekinmur (~textual@unaffiliated/ekinmur) has joined
<crucify_me>	https://ptpb.pw/n7t1
*	armyriad (~armyriad@96-39-247-38.dhcp.mtpk.ca.charter.com) has joined
<fishythefish>	crucify_me you have to take all the patterns together
<fishythefish>	the second one is non-exhaustive too; it doesn't handle an empty list
<fishythefish>	when you call the function, it'll use the first matching pattern. it's only really a problem if none of the patterns match the input
*	tnecniv has quit (Client Quit)
<crucify_me>	sorry that is a base case listed first there?
<fishythefish>	yup
<crucify_me>	sorry of course, my tea's just coming on. thanks !
<fishythefish>	folding an empty list should just give you the initial accumulator value
*	nakal has quit (Read error: Connection reset by peer)
<crucify_me>	makes perfect sense thank you kindly
*	nakal (~nakal@port-92-201-102-117.dynamic.qsc.de) has joined
<fishythefish>	no problem
<crucify_me>	I have a caffeine problem
*	sternmull (~kringel@p4FF0EB88.dip0.t-ipconnect.de) has joined
<fakenullie>	don't we all
<kit__>	> 1 + 1
<lambdabot>	 2
<kit__>	^o^
*	dc0de has quit (Read error: Connection reset by peer)
*	chaosmasttter (~chaosmast@p4FF1C9C5.dip0.t-ipconnect.de) has joined
*	bennofs has quit (Quit: WeeChat 1.9.1)
*	mustlearnhaskell has quit (Remote host closed the connection)
*	mustlearnhaskell (~user@178.113.169.160.wireless.dyn.drei.com) has joined
*	tnecniv (~textual@unaffiliated/jimihendrix) has joined
*	hulufei (~hulufei@38.121.61.254) has joined
*	maarhart (~Mutter@a91-154-176-32.elisa-laajakaista.fi) has joined
*	Durbley has quit (Ping timeout: 240 seconds)
*	tmaja (~valtterim@91-159-56-61.elisa-laajakaista.fi) has joined
*	Jesin has quit (Quit: Leaving)
*	dc0de (~herpdader@p4FEB6609.dip0.t-ipconnect.de) has joined
<crucify_me>	btw the definition says '( typically the right-identity of the operator) could anyone explain that ? why typically and does that mean the 'accumulator value' ? https://ptpb.pw/n7t1
*	mustlearnhaskell has quit (Ping timeout: 240 seconds)
*	maarhart has quit (Client Quit)
*	peacememories has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	k0001 (~k@unaffiliated/k0001) has joined
*	tobhe has quit (Ping timeout: 248 seconds)
<crucify_me>	lpaste.net/358805 << better paste.
*	hulufei has quit (Ping timeout: 240 seconds)
<fishythefish>	e.g. the identity of (+) is 0, and 0 is typically your accumulator for summing
<fishythefish>	it happens to be a two-sided identity because (+0) and (0+) are both the identity operation
*	Jesin (~Jesin@pool-72-83-138-15.washdc.fios.verizon.net) has joined
<Psybur>	http://planetmath.org/leftidentityandrightidentity
<fishythefish>	basically, your accumulator is typically the value such that folding [x] just gives you x
*	tmaja has quit (Ping timeout: 258 seconds)
<crucify_me>	fishythefish, in the case of (/), does that not hold true?
*	fishythefish has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<Psybur>	No
*	ekinmur has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<crucify_me>	yeah division is what is confusing me with this function
<Psybur>	1 / 100 vs 100 / 1
*	eliasr has quit (Quit: Connection closed for inactivity)
*	axis_of_adam has quit (Ping timeout: 260 seconds)
*	xcmw (~textual@2605:a000:132b:2b4:c90d:dda8:823c:3743) has joined
<crucify_me>	thanks Psybur fishythefish
*	valentinbuza has quit (Ping timeout: 258 seconds)
<fakenullie>	Are there operators without identity?
*	axis_of_adam (~adam@cpe-172-250-2-228.socal.res.rr.com) has joined
*	iAmerikan has quit (Ping timeout: 240 seconds)
*	halogenandtoast has quit (Ping timeout: 248 seconds)
*	heebo (~user@cpc96302-lewi18-2-0-cust642.2-4.cable.virginm.net) has joined
<Psybur>	fakenullie, if you make an operator that multiplies your value by a random number sure :D
*	osa1 (~omer@195.142.79.70) has joined
*	osa1 has quit (Changing host)
*	osa1 (~omer@haskell/developer/osa1) has joined
<crucify_me>	fakenullie, Psybur does (/) have identity. ?  
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
<crucify_me>	I understand the random number possibility
<Psybur>	Yeah /1
<crucify_me>	ok right same as (*)
<fakenullie>	/ has only right identity
*	MP2E (~cray@ip68-224-146-82.lv.lv.cox.net) has joined
<crucify_me>	right ok there's my answer duh! fakenullie 
<crucify_me>	thanks!
<crucify_me>	sometimes its just English that I cannot get. I should stop reading about it unless its code
*	kakashiAL (~kakashiAL@ip-178-202-49-199.hsi09.unitymediagroup.de) has joined
<fakenullie>	Ok, natural numbers without 0 have no identity for addition
*	ekinmur (~textual@unaffiliated/ekinmur) has joined
<crucify_me>	identity is important in category theory. I can't wait until I get my head around it
*	tnecniv has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	HMPerson1 (~HMPerson1@128.210.107.52) has joined
<crucify_me>	natural numbers without 0 ?
*	albertus1 (~seb@x55b4b7e1.dyn.telefonica.de) has joined
<fakenullie>	Yeah, definitions of natural numbers do not include zero
<fakenullie>	Some definitions
*	peacememories (~textual@84-114-121-230.cable.dynamic.surfer.at) has joined
*	mizu_no_oto_work (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	mizu_no_oto_work has quit (Client Quit)
*	jimmyrcom_ (~fold@71-11-240-211.dhcp.dntn.tx.charter.com) has joined
<crucify_me>	thanks more drama later
*	mizu_no_oto_work (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	mizu_no_oto_work has quit (Client Quit)
*	mgttlinger has quit (Quit: Bye)
*	mgttlinger (uid254877@gateway/web/irccloud.com/x-qgxhwscgswqidccn) has joined
*	fishythefish (~fishythef@2620:10d:c090:200::6:8db6) has joined
*	HMPerson1 has quit (Ping timeout: 248 seconds)
*	hackagebot has quit (Read error: error:1408F119:SSL routines:SSL3_GET_RECORD:decryption failed or bad record mac)
*	hackagebot (~hackagebo@octavia.lambda.xyz) has joined
*	vuto (~vuto@42.119.233.193) has joined
*	kipras`away is now known as kipras
*	HMPerson1 (~HMPerson1@128.210.107.52) has joined
*	tmaja (~valtterim@91-159-56-61.elisa-laajakaista.fi) has joined
*	apt415 has quit (Ping timeout: 248 seconds)
<crucify_me>	fakenullie, sorry one thing so I'm certain: (-) also is only right identity, right?
*	`Guest00000 has quit (Ping timeout: 248 seconds)
*	ChristopherBurg has quit (Quit: NO CARRIER)
*	kakashiAL has quit (Quit: WeeChat 1.9)
<fakenullie>	Yeah, I think so
<crucify_me>	thanks just forcing my brain to learn right now.
<fakenullie>	^ too
*	valentinbuza (~valentinb@unaffiliated/valentinbuza) has joined
<crucify_me>	right good call
*	inad922 (~inad925@78-131-82-48.pool.digikabel.hu) has joined
*	fishythefish has quit (Ping timeout: 258 seconds)
*	crobbins_ (~crobbins@172-8-225-158.lightspeed.hstntx.sbcglobal.net) has joined
*	towerio has quit (Ping timeout: 260 seconds)
*	`Guest00000 (~user@37.113.160.113) has joined
*	dcoutts has quit (Ping timeout: 240 seconds)
*	crobbins has quit (Remote host closed the connection)
*	vuto has quit (Ping timeout: 260 seconds)
*	steeze has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
*	agander has quit (Ping timeout: 248 seconds)
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Fri Sep 29 12:54:28 2017

**** BEGIN LOGGING AT Fri Sep 29 18:42:36 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<kaychaks>	geekosaur: `( js ^..  values ) . key "name"` is giving a different error 
<kaychaks>	```
<kaychaks>	Couldn't match expected type ‘(t0 -> f0 t0) -> c0’
<kaychaks>	                  with actual type ‘[aeson-1.1.2.0:Data.Aeson.Types.Internal.Value]’
<kaychaks>	    • Possible cause: ‘(^..)’ is applied to too many arguments
<kaychaks>	```
*	You are now known as crestfallen
*	You are now known as crucify_me
-NickServ-	This nickname is registered. Please choose a different nickname, or identify via /msg NickServ identify <password>.
>nickserv<	identify ****
-NickServ-	You are now identified for n_blownapart.
<kaychaks>	geekosaur: `( js ^..  values ) . nameAndAge` gives similar error 
<geekosaur>	then I cannot help.
<pikajude>	that looks really backwards
<pikajude>	usually when you use ^..
<pikajude>	the RHS is a dot-composed list of lenses
<pikajude>	why would the parentheses be there
<geekosaur>	(but nobody else was answering --- I did see your questions yesterday --- so I did what I could)
<geekosaur>	pikajude, you probably want to look at the original queston. which nobody else was, apparently
<pikajude>	oh ok
<geekosaur>	http://lpaste.net/358787
*	beerdrop has quit (Ping timeout: 258 seconds)
<crucify_me>	hi when you have foldl (flip (:)) [5,6,7] [1,2,3,4] , I see what's happening, except how the (flip (:)) takes in values from [1,2,3,4]
<geekosaur>	they asked several times yesterday with no response and a couple times today. I don't know lens but that was all I could come up with; relaly needs someone who knows more details
<crucify_me>	http://lpaste.net/358815
*	hulufei (~hulufei@38.121.61.254) has joined
<geekosaur>	..."except"? I mean, that's what folds do
*	tonga has quit (Ping timeout: 258 seconds)
<geekosaur>	so if you are not seeing that then I'm not sue what you are seeing at all
<pikajude>	wow that's such a confusing snippet
<pikajude>	but the issue is that it needs a $ before the "f a" at the end of line 12
*	toblorone (~toblorone@172.58.91.108) has joined
<pikajude>	that's about it
<crucify_me>	put differently, the [1,2,3,4] list goes into the left operand position, and is flipped? is that how to visualize that?
-NickServ-	n_blownapart!~n_blownap@128.32.176.159 has just authenticated as you (n_blownapart)
*	lambdamu_ (~lambdamu@p4FE3D132.dip0.t-ipconnect.de) has joined
*	soLucien has quit (Ping timeout: 258 seconds)
*	a3Dman has quit (Read error: Connection reset by peer)
*	_kit_ (~kit@173-27-188-196.client.mchsi.com) has joined
*	theelous3_ has quit (Ping timeout: 240 seconds)
*	crobbins_ has quit (Ping timeout: 248 seconds)
*	lambdamu has quit (Ping timeout: 258 seconds)
<geekosaur>	no
*	crobbins_ (~crobbins@2600:1700:6391:1c20:e77a:acf2:c01f:a212) has joined
<geekosaur>	flip iterates through the list, invoking its function parameter on each element and a base value, resulting in a new base value
<geekosaur>	er, fold does
<geekosaur>	foldl / foldr use different strategies to go through the list
<crucify_me>	my problem is that I don't see why foldr doesn't work with the flip and foldl doesn't work without it.
<geekosaur>	flip is just a convenient way for fixing the ordering of the parameters passed to the function
<geekosaur>	:t foldl
<lambdabot>	Foldable t => (b -> a -> b) -> b -> t a -> b
<geekosaur>	guh
<geekosaur>	:t foldl ?f ?z `asAppliedTo` [undefined]
<lambdabot>	(?z::b, ?f::b -> a -> b) => [a] -> b
<geekosaur>	:t foldr ?f ?z `asAppliedTo` [undefined]
<lambdabot>	(?z::b, ?f::a -> b -> b) => [a] -> b
<crucify_me>	but with (:) why does the ordering matter?
<geekosaur>	:t (:)
<lambdabot>	a -> [a] -> [a]
<pikajude>	it's head : tail
<geekosaur>	it is not symmetrical
<pikajude>	you can't do tail : head, doesn't typecheck
<crucify_me>	so each element in a list here, ie head and tail, are typed differently? sorry
<pikajude>	no
<pikajude>	head is one element
<pikajude>	tail is a list of elements
<geekosaur>	crucify_me, have you even looked at lists yet?
<geekosaur>	Haskell lists are cons-lists
<geekosaur>	elem : elem : elem : ... : elem : []
<crucify_me>	that I understand
<geekosaur>	but you can;t see why it is not allowed to be [] : elem ?
<geekosaur>	even from the type?
*	beerdrop (~beerdrop@c-107-2-115-62.hsd1.mn.comcast.net) has joined
<crucify_me>	put that way I can see it. but I think I'm visually the operation incorrectly
<crucify_me>	visualizing
<geekosaur>	> foldl f z [a,b,c]
<lambdabot>	 f (f (f z a) b) c
<geekosaur>	> foldr f z [a,b,c]
<lambdabot>	 f a (f b (f c z))
<crucify_me>	er..
*	banc has quit (Quit: ZNC - http://znc.in)
<geekosaur>	this visualization brought to you by the simple-reflect package
<kaychaks>	pikajude: on the lens error snippet, `$` at the end is giving me other errors. My use case is to generate a tuple of name and age from the json mentioned in the snippet 
<pikajude>	kaychaks: are you sure there's an applicative instance that does what you want?
<pikajude>	i don't recall ever trying that with lenses
*	ubsan_ (~textual@67.135.43.183) has joined
*	conal has quit (Quit: Computer has gone to sleep.)
<pikajude>	you might want to ask edwardk about this
<pikajude>	or even in #haskell-lens
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<kaychaks>	ok
<pikajude>	i vaguely recall asking if there was a way to combine lenses in that way and i don't remember what the answer was
<pikajude>	hope that's specific enough
*	tsaka__ (~torstein@84-52-234.108.3p.ntebredband.no) has joined
*	hucksy_ has quit (Ping timeout: 258 seconds)
*	refold has quit (Ping timeout: 260 seconds)
<crucify_me>	sorry, all we're doing is consing [10,11,12 onto [1,2,3] with foldl. why does flipping the order of the elements 10 11 12 allow foldl to work? very sorry I understand essentially what is going on I think
<crucify_me>	[10,11,12]*
<kaychaks>	yeah I have tried to look for examples as the theories are still above my head mostly. I got some idea from #haskell-beginners but stuck at that error.
<geekosaur>	you are not flipping those. I said that alreadu
*	mr_sm1th has quit (Remote host closed the connection)
<geekosaur>	you are flipping the current element taken from the list and the base value
*	boj (~bojo@pw126199010085.18.panda-world.ne.jp) has joined
*	Welkin has quit (Quit: leaving)
*	tromp has quit (Remote host closed the connection)
<crucify_me>	am I correct to say 10 is the first element consed?
<geekosaur>	you start out with the base value being [1,2,3]. the first time through, foldl does (yourFunction [1,2,3] 10) and expects a list back
<crucify_me>	oh so 10 is the second argument, we need it to be the first
*	banc (~master@217.151.98.168) has joined
<crucify_me>	yourFunction needs it to be the first, so we flip it.
<geekosaur>	yes, because the effectoive type here is [a] -> a -> [a] but we want to use (:) which is a -> [a] -> [a]
-NickServ-	n_blownapart!~n_blownap@128.32.176.159 has just authenticated as you (n_blownapart)
<crucify_me>	thanks geekosaur you rule
<geekosaur>	so we use (flip (:)) and now it takes them in the right order
<crucify_me>	right. when I first tried one of these functions I got a non-exhaustible error, so perhaps it was for a related reason
*	KoH has quit (Ping timeout: 246 seconds)
<crucify_me>	I forget exactly what I had tried
*	cdg (~cdg@2600:1700:3120:40e0:ac8e:69d4:6c82:c882) has joined
<geekosaur>	that doesn't sound like an existing error, and the closest one I can think of it 'non-exhaustive patterns' which makes me wonder what you tried (and if you forgot to deal with empty lists or something)
*	HMPerson1_ (~HMPerson1@128.211.64.90) has joined
<crucify_me>	geekosaur, if I work another hour, I think I'll really get foldl foldr. I figured out much by using scanl scanr. the flip (once again) was tripping me up geekosaur 
*	ninedotnine (~dan@modemcable078.123-81-70.mc.videotron.ca) has joined
*	HMPerson1 has quit (Ping timeout: 240 seconds)
*	cdg has quit (Ping timeout: 258 seconds)
*	Youmu (uid129469@gateway/web/irccloud.com/x-qotoczhexuoufvde) has joined
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
<crucify_me>	here's the thing: I thought when 10 was first "extracted" from the second list, it was put into the left operand spot for (:). so it was how I visualized it that put me in error. In fact, the element 10 stays* in place, in foldl's 3rd argument spot.
<crucify_me>	geekosaur, ^
*	tmaja (~valtterim@91-159-56-61.elisa-laajakaista.fi) has joined
*	libman (uid211250@gateway/web/irccloud.com/x-gxpfodhkmxqagagw) has left
*	ystael (~ystael@209.6.50.55) has joined
*	takle (~takle@host109-153-109-219.range109-153.btcentralplus.com) has joined
<crucify_me>	is that valid?
*	PatrickRobotham has quit (Quit: Connection closed for inactivity)
*	cdg (~cdg@2600:1700:3120:40e0:ac8e:69d4:6c82:c882) has joined
*	ziyourenxiang has quit (Ping timeout: 240 seconds)
*	tmaja has quit (Ping timeout: 240 seconds)
*	takle has quit (Ping timeout: 240 seconds)
*	KoH (~kane@p200300DE5BFA9500D5BF3A19DF7A2C12.dip0.t-ipconnect.de) has joined
*	Swizec has quit (Quit: Computer has gone to sleep.)
*	tomsn has quit (Ping timeout: 260 seconds)
*	ninedotnine has quit (Ping timeout: 240 seconds)
*	jmcarthur (~jmcarthur@2601:86:100:1620:11f3:5a14:fc98:ceb1) has joined
*	jao (~jao@pdpc/supporter/professional/jao) has joined
*	tobloron_ (~toblorone@172.58.91.108) has joined
*	tsaka__ has quit (Ping timeout: 258 seconds)
*	toblorone has quit (Ping timeout: 248 seconds)
*	ystael has quit (Ping timeout: 240 seconds)
*	Achylles (~Achylles@189-18-241-243.dsl.telesp.net.br) has joined
*	tomsn (~tom@5.146.198.217) has joined
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
-NickServ-	n_blownapart!~n_blownap@128.32.176.159 has just authenticated as you (n_blownapart)
*	tromp (~tromp@ip-217-103-3-94.ip.prioritytelecom.net) has joined
*	eacameron has quit (Remote host closed the connection)
*	ninedotnine (~dan@modemcable078.123-81-70.mc.videotron.ca) has joined
*	Wizek has quit (Quit: Connection closed for inactivity)
*	tromp has quit (Ping timeout: 240 seconds)
*	jao has quit (Ping timeout: 258 seconds)
*	takle (~takle@host109-153-109-219.range109-153.btcentralplus.com) has joined
Python interface unloaded
**** ENDING LOGGING AT Fri Sep 29 19:55:22 2017

**** BEGIN LOGGING AT Sun Oct  1 16:27:12 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:46:51 2017)
*	Channel #haskell url: http://www.haskell.org/
*	tomsn (~tom@5.146.198.217) has joined
*	rschmukler has quit (Ping timeout: 240 seconds)
*	dcoutts has quit (Ping timeout: 240 seconds)
*	erisco (~erisco@198-84-159-71.cpe.teksavvy.com) has joined
*	cdg has quit (Ping timeout: 258 seconds)
*	doyougnu (~user@c-71-237-204-135.hsd1.or.comcast.net) has joined
*	theNeuron has quit (Ping timeout: 258 seconds)
*	Ero (~user@bcddd268.skybroadband.com) has joined
*	connrs has quit (Ping timeout: 240 seconds)
*	towerio has quit (Ping timeout: 258 seconds)
*	Peaker has quit (Ping timeout: 260 seconds)
*	nakal (~nakal@port-92-201-91-132.dynamic.qsc.de) has joined
*	towerio (~towerio@137.139.199.10) has joined
*	theDon_ (~td@mue-88-130-107-233.dsl.tropolys.de) has joined
*	greatgig1 has quit (Ping timeout: 240 seconds)
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	nakal_ has quit (Ping timeout: 248 seconds)
*	theDon has quit (Ping timeout: 258 seconds)
*	theDon_ is now known as theDon
*	towerio has quit (Ping timeout: 248 seconds)
*	systemfault has quit (Quit: Bye!)
*	dan_f has quit (Quit: dan_f)
*	peacememories has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	path[l] has quit (Quit: path[l])
*	peacememories (~textual@84-114-121-230.cable.dynamic.surfer.at) has joined
*	towerio (~towerio@137.139.199.10) has joined
*	markus1189 (~markus118@p4FDC097E.dip0.t-ipconnect.de) has joined
*	connrs (~connrs@conners.plus.com) has joined
*	lukaramu has quit (Quit: Leaving)
*	ddima has quit (Ping timeout: 248 seconds)
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	tnecniv has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	markus1199 has quit (Ping timeout: 248 seconds)
*	darlan (~darlan@191.191.127.66) has joined
*	darlan has quit (Client Quit)
*	towerio has quit (Ping timeout: 264 seconds)
*	retroj1 has quit ()
*	connrs has quit (Ping timeout: 260 seconds)
*	atk has quit (Quit: Well this is unexpected.)
*	atk (Arch-TK@ircpuzzles/staff/Arch-TK) has joined
*	bydo has quit (Quit: nah.)
*	tnecniv (~textual@unaffiliated/jimihendrix) has joined
*	bydo (~cdr@unaffiliated/bydo) has joined
*	ziocroc2 has quit (Ping timeout: 248 seconds)
*	towerio (~towerio@137.139.199.10) has joined
*	cdg (~cdg@c-69-94-206-50.hs.gigamonster.net) has joined
*	tnecniv has quit (Client Quit)
*	hamishmack (~hamishmac@125-236-198-108.adsl.xtra.co.nz) has joined
*	peacememories has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	epta has quit (Ping timeout: 240 seconds)
*	cjwelborn has quit (Remote host closed the connection)
*	Guest431 has quit (Remote host closed the connection)
*	theelous3_ has quit (Ping timeout: 260 seconds)
*	jathan (~jathan@189.216.204.191) has joined
*	JohninLex (~JohninLex@213.136.66.233) has joined
*	towerio has quit (Ping timeout: 240 seconds)
*	serendependy has quit (Quit: Leaving)
*	oisdk (~textual@51-171-255-121-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined
*	mceier has quit (Ping timeout: 258 seconds)
*	peacememories (~textual@84-114-121-230.cable.dynamic.surfer.at) has joined
*	nect has quit (Remote host closed the connection)
*	xcmw (~textual@host-129-137-24-5.vpn.uc.edu) has joined
*	dan_f (~dan@24.148.32.207) has joined
*	raingloom has quit (Quit: WeeChat 1.9.1)
*	oisdk has quit (Client Quit)
*	tomsn has quit (Ping timeout: 240 seconds)
*	tomsn (~tom@5.146.198.217) has joined
*	towerio (~towerio@137.139.199.10) has joined
*	jb55 has quit (Ping timeout: 258 seconds)
*	mortum5 has quit (Ping timeout: 248 seconds)
*	toblorone has quit (Remote host closed the connection)
*	toblorone (~toblorone@h-67-100-94-2.snfc.ca.globalcapacity.com) has joined
*	jeltsch has quit (Quit: jeltsch)
*	towerio has quit (Ping timeout: 248 seconds)
*	peacememories has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	pennywise has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
*	pparkkin (~pparkkin@203.143.158.140) has joined
*	tomsn has quit (Ping timeout: 240 seconds)
*	toblorone has quit (Ping timeout: 240 seconds)
*	epta (~m@nuda.space) has joined
*	peacememories (~textual@84-114-121-230.cable.dynamic.surfer.at) has joined
*	oisdk (~textual@51-171-255-121-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined
*	towerio (~towerio@137.139.199.10) has joined
<unclechu>	hey guys, about templates, how do i declare infix `cons` expression?
<unclechu>	for `TH.InfixE (Just x) (TH.VarE $ TH.mkName ":") (Just y)` i got error: `Illegal variable name: `:'`
*	athaller has quit (Remote host closed the connection)
*	tomsn (~tom@5.146.198.217) has joined
*	Ero has quit (Ping timeout: 240 seconds)
<Cale>	unclechu: It's a ConE
*	toad has quit (Remote host closed the connection)
*	towerio has quit (Ping timeout: 246 seconds)
*	athaller (~quassel@1.rz17.hetzner.thaller.ws) has joined
*	tnecniv (~textual@unaffiliated/jimihendrix) has joined
<unclechu>	Cale: thanks, i just replaced `VarE` to `ConE` and now it's okay
*	cdg has quit (Remote host closed the connection)
*	tsaka__ has quit (Ping timeout: 255 seconds)
*	towerio (~towerio@137.139.199.10) has joined
*	athaller has quit (Read error: Connection reset by peer)
*	jb55 (~jb55@70-36-49-138.dyn.novuscom.net) has joined
*	peacememories has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<pavonia>	How do you truncate a Rational to a certain amount of decimals (in floating point representation)?
*	nighty- (~nighty@kyotolabs.asahinet.com) has joined
*	tomsn has quit (Ping timeout: 248 seconds)
*	athaller (~quassel@1.rz17.hetzner.thaller.ws) has joined
*	towerio has quit (Ping timeout: 248 seconds)
*	jb55 has quit (Ping timeout: 248 seconds)
<pavonia>	Hhm, (% 100) . truncate . (* 100) seems to work
*	towerio (~towerio@137.139.199.10) has joined
*	toblorone (~toblorone@172.58.94.140) has joined
*	nighty- has quit (Remote host closed the connection)
*	marvin2 (~m@cpe-188-129-88-54.dynamic.amis.hr) has left
*	nighty- (~nighty@kyotolabs.asahinet.com) has joined
*	peacememories (~textual@84-114-121-230.cable.dynamic.surfer.at) has joined
*	takle has quit (Remote host closed the connection)
*	acidjnk2 (~acidjnk22@p4FFBD9A1.dip0.t-ipconnect.de) has joined
*	systemfault has quit (Quit: Bye!)
*	acidjnk has quit (Ping timeout: 246 seconds)
*	pacak has quit (Remote host closed the connection)
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sun Oct  1 17:43:48 2017

**** BEGIN LOGGING AT Tue Oct  3 11:36:14 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	ystael waits 850 million years
<Psybur>	:D
*	eacameron has quit (Remote host closed the connection)
*	mniip proves by demonstration
<ahri>	dmwit: ErrorT does look like it would be a useful way to address the problem, i'll read those links
*	fishythefish has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	joomy has quit (Quit: joomy)
*	leah2 has quit (Ping timeout: 255 seconds)
<crucify_me>	https://ptpb.pw/7YOA hi on this program I think I'm confusing something with scheme. first if I may, the composition on line 4 would make this linear combination right?
<crucify_me>	sorry I mean linear recursion
<ahri>	dmwit: heh, the first link is pretty much the problem i'm having
*	fishythefish (~fishythef@2620:10d:c090:200::5:7ebd) has joined
<ski>	ahri : please actually use `ExceptT', not `ErrorT', if you want to use one of them
<dmwit>	crucify_me: Sure. Dunno why "linear recursion" is an interesting concept or what you plan to do with that fact, but the definition of it appears to fit this situation well enough.
<crucify_me>	its a book example dmwit thanks
*	whoisxy (~whoisxy@83.137.254.176) has joined
<crucify_me>	I'm not used to seeing f in the expression twice
*	befuddled has quit (Quit: Computer has gone to sleep.)
*	fragamus has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<ahri>	ski: i was considering asking what the difference is, but also scared that someone might answer. i'm not very familiar at all with monad transformers you see
<crucify_me>	because in linear recursion in scheme you'd just have the function itself immediately on the rhs
<dmwit>	crucify_me: Go on, you've never seen something like `f x = 2*x^2 + 3*x + 1`? Repeating arguments is very normal.
*	tnecniv has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	afarmer (~afarmer@199.201.64.130) has joined
<dmwit>	crucify_me: But `f` isn't the recursive bit. `applyTimes` is.
*	kuribas has quit (Quit: ERC (IRC client for Emacs 24.5.1))
<crucify_me>	yeah thanks hold on dmwit .
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
<mnoonan>	are you thinking of tail calls? your description sort of sounded like it, maybe.
*	acarrico (~acarrico@c-76-19-177-70.hsd1.vt.comcast.net) has joined
*	emilypi has quit (Ping timeout: 248 seconds)
*	tnecniv (~textual@unaffiliated/jimihendrix) has joined
*	twopoint718 (~twopoint7@fsf/member/twopoint718) has joined
<crucify_me>	I think what I mean is that in scheme you don't explicitly have the function twice. with the composition, it's like you can visualize the stack.
*	fragamus (~textual@66.60.181.53) has joined
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Tue Oct  3 11:48:07 2017

**** BEGIN LOGGING AT Tue Oct  3 11:48:25 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	conal has quit (Ping timeout: 258 seconds)
<ski>	ahri : `ErrorT' is an earlier attempt to do basically the same thing as `ExceptT'. however, it has an annoying extra restriction on instances (requiring the "exception type" to include a string-message option. this is not nice if you e.g. want to use `Integer' as the exception type). `ExceptT' is a replacement, without this annoyance
*	mortum5 (~mortum5@188.227.78.184) has joined
*	mortum5 has quit (Max SendQ exceeded)
<n_blownapart>	test
*	mortum5 (~mortum5@188.227.78.184) has joined
*	mortum5 has quit (Max SendQ exceeded)
*	mortum5 (~mortum5@188.227.78.184) has joined
*	path[l] (~vsi@199.201.64.133) has joined
*	soniku has quit (Ping timeout: 258 seconds)
<n_blownapart>	you seeing this dmwit ? I was disconnected
*	alx741 (~alx741@181.112.108.224) has joined
*	sgflt has quit (Quit: WeeChat 1.6)
*	crucify_me has quit (Ping timeout: 240 seconds)
<n_blownapart>	<< crucify_me
*	oish (~charlie@159.22.169.217.in-addr.arpa) has joined
*	You are now known as crucify_me
-NickServ-	This nickname is registered. Please choose a different nickname, or identify via /msg NickServ identify <password>.
*	dcoutts (~duncan@host86-187-175-71.range86-187.btcentralplus.com) has joined
*	maffh (~maffh@i143174.upc-i.chello.nl) has joined
*	Philonous has quit (Remote host closed the connection)
*	conal (~conal@104.255.240.10) has joined
<crucify_me>	anyone ping me please ?
<HaskellLord69>	anyone?
*	luto1 has quit (Ping timeout: 240 seconds)
<crucify_me>	thanks
*	joomy (~joomy@129.133.178.33) has joined
*	leah2 (~leah@vuxu.org) has joined
*	xormor has quit (Quit: Leaving)
*	Ero (~user@bcddd268.skybroadband.com) has joined
*	joomy has quit (Client Quit)
*	sleffy has quit (Quit: Leaving)
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
<Ero>	hi team. I'm really struggling with stack. For some reason any connection it tries to make to 'do the templates' times out. Does stack use Curl?
*	cfricke (~cfricke@unaffiliated/cfricke) has joined
*	eliasr has quit (Quit: Connection closed for inactivity)
*	mnoonan has quit (Ping timeout: 240 seconds)
*	medicijnman has quit (Read error: Connection reset by peer)
*	lambda-11235 (~lambda-11@campus-012-141.ucdavis.edu) has joined
*	lap00zza has quit (Quit: Leaving)
*	ericdwhite (~ericdwhit@host86-181-34-104.range86-181.btcentralplus.com) has joined
*	TCZ (~Johnny@ip-91.246.66.104.skyware.pl) has joined
*	hdqn (~rld@46-165-19-193.static.isp.enf.pl) has joined
*	joomy (~joomy@129.133.178.33) has joined
*	xcmw (~textual@2605:a000:132b:20ac:241f:3a03:1c61:c9ab) has joined
*	cucullus (8de2da3b@gateway/web/freenode/ip.141.226.218.59) has joined
*	jeltsch (~wolfgang@85.253.254.16.cable.starman.ee) has joined
*	path[l] has quit (Quit: path[l])
<cocreature>	Ero: afaik it doesn’t use curl, it uses http-client which is a pure Haskell implementation. maybe try running "stack templates --verbose" to get a better idea what’s causing problems?
*	path[l] (~vsi@199.201.64.133) has joined
*	fishythefish has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	takle (~takle@host109-153-109-219.range109-153.btcentralplus.com) has joined
*	gugah has quit (Remote host closed the connection)
*	juanpauc_ (~juanpauca@190.57.158.6) has joined
*	gugah (~gugah@181.28.221.17) has joined
*	gugah has quit (Max SendQ exceeded)
*	jarno (9dc10a61@gateway/web/freenode/ip.157.193.10.97) has joined
*	shubhaml has quit (Ping timeout: 258 seconds)
*	osa1 (~omer@91.93.255.114) has joined
*	osa1 has quit (Changing host)
*	osa1 (~omer@haskell/developer/osa1) has joined
*	juanpaucar has quit (Ping timeout: 260 seconds)
*	t7 has quit (Quit: ChatZilla 0.9.93 [Firefox 56.0/20170928134926])
*	epsilonhalbe (~epsilonha@84-113-106-42.cable.dynamic.surfer.at) has joined
*	t7 (~chatzilla@host5-81-182-207.range5-81.btcentralplus.com) has joined
*	Lu (~soLucien@alfa.oek.dk) has joined
*	Lu is now known as Guest90388
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Tue Oct  3 12:10:27 2017

**** BEGIN LOGGING AT Sun Oct 15 12:52:24 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<crucify_me>	hello I'm still alive
<crucify_me>	its interesting that graham hutton's book begins the first chapter with an example of a monad. I thought it was for beginners. scary
*	msecundo has quit (Quit: WeeChat 1.9.1)
<crucify_me>	*ends the first chapter
*	eschnett (~eschnett@184.151.36.181) has joined
<fakenullie>	get the haskell book
<fakenullie>	I kind understand the monad now
<crucify_me>	got it, its so long it bums me out
<crucify_me>	nice moniker fakenullie 
<EvanR>	ending the first chapter with an example of a monad doesnt sound bad at all
*	Raptor8m3_ has quit (Remote host closed the connection)
*	IlNominePatre (~Discovery@172.94.0.139) has joined
<iqubic>	What book are we taling about?
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Sun Oct 15 12:57:47 2017

**** BEGIN LOGGING AT Sun Oct 15 12:58:04 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	hackagebot tomlcheck 0.1.0.9 – Command-line tool to check syntax of TOML files – https://hackage.haskell.org/package/tomlcheck
*	iqubic has quit (Remote host closed the connection)
*	Raptor8m3 (~quassel@24.35.64.41) has joined
*	iqubic (~iqubic@2601:602:9901:2c9f:3571:e283:3dd:1591) has joined
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Sun Oct 15 12:59:46 2017

**** BEGIN LOGGING AT Sun Oct 15 13:01:07 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	coot____________ has quit (Quit: coot____________)
*	nschoe has quit (Ping timeout: 255 seconds)
*	doodlehaus has quit (Remote host closed the connection)
*	eschnett has quit (Quit: eschnett)
<stevenxl>	@crucify_me I also have the Haskell Book. It is very long. I had to take it slow. It's a great book. There's a lot of effort learning Haskell (for me), but I think that it is necessary. The book is not making it harder than it needs to be -it's just hard. 
<lambdabot>	Unknown command, try @list
*	gugah (~gugah@181.229.107.78) has joined
*	eschnett (~eschnett@184.151.36.181) has joined
*	n_blownapart has quit (Ping timeout: 248 seconds)
*	forgottenone has quit (Remote host closed the connection)
<maerwald>	Monad is like love... everyone knows what it is, but it's hard to explain
*	forgottenone (~forgotten@176.234.123.254) has joined
<maerwald>	you have to experience it
<johnw>	lol
*	John882 (~John882@185.60.147.79) has joined
<johnw>	I imagine Zen monks in a monastery somewhere: "Ah, monad, so that's nameless name."
*	jb55 (~jb55@216-71-192-56.dyn.novuscom.net) has joined
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	Welkin has quit (Ping timeout: 264 seconds)
<crucify_me>	stevenxl, thanks for the encouragement. 
*	chaosmasttter (~chaosmast@p4FF1C9C5.dip0.t-ipconnect.de) has joined
*	doodlehaus (~doodlehau@h66-222-117-150.mdtnwi.dsl.dynamic.tds.net) has joined
<stevenxl>	crucify_me: sure.
*	peterbecich (~user@47.37.164.78) has joined
*	castlelore (~castlelor@cpe-76-173-200-54.hawaii.res.rr.com) has joined
*	castlelore has quit (Changing host)
*	castlelore (~castlelor@unaffiliated/castlelore) has joined
*	inhortte has quit (Remote host closed the connection)
<etiago>	stevenxl, fakenullie, it´s the second time I see the Haskell Book mentioned here... is it really as good as reviews make it to be?
*	pgiarrusso has quit (Quit: This computer has gone to sleep)
*	cpup (~cpup@32.218.116.36) has joined
<etiago>	or is it Yet Another Haskell Book and I´m just better off sticking to LYAH
*	drostie_ has quit (Remote host closed the connection)
<EvanR>	LYAH :(
*	nshepperd has quit (Ping timeout: 248 seconds)
*	mpg300 (~mpg@108-243-66-84.lightspeed.gnbonc.sbcglobal.net) has left
<Boarders>	personally I found it to be way too long
<stevenxl>	etiago: I don't think I would have gotten anywhere with LYAH by itself. I think it is great if you have an understanding already, and want to use it as a reference, but to actually learn what's going on, I'm a big proponent of the Haskell Book. 
<grizwako_>	if you are self learning and have no functional experience, Haskell Book is great because of the assignments
<maerwald>	lyah is the thing you can do after 3 glasses of wine
*	doodlehaus has quit (Ping timeout: 240 seconds)
<mivael_>	:t (<>) `foldr1` map Data.Semigroup.Max [123,456]
<lambdabot>	(Num a, Bounded a, Ord a) => Data.Semigroup.Max a
<etiago>	maerwald, lol
<mivael_>	> (<>) `foldr1` map Data.Semigroup.Max [123,456]
<lambdabot>	 error:
<lambdabot>	     Not in scope: data constructor ‘Data.Semigroup.Max’
<lambdabot>	     No module named ‘Data.Semigroup’ is imported.
<etiago>	I might get the Haskell Book then
*	drostie (~quassel@136.61.83.17) has joined
<etiago>	I think some small practical exercises will help me
<stevenxl>	etiago: I wish I could use LYAH. It's a funner book I think. Has drawings, is much shorter, but frankly it's not deep enough for me. 
*	CoderPuppy has quit (Ping timeout: 240 seconds)
<EvanR>	if you like pictures...
<EvanR>	http://www.happylearnhaskelltutorial.com/
<mivael_>	How to make lambdabot to "import Data.Semigroup(Max)"?
<etiago>	stevenxl, I get exactly the same feeling
*	jb55 has quit (Quit: WeeChat 1.9)
*	jb55 (~jb55@216-71-192-56.dyn.novuscom.net) has joined
<grizwako_>	LYAH is great resource anyway, if some concepts are foggy after seeing them in Haskell Book, LYAH helps in seeing a different approach to same theme
<stevenxl>	EvanR: Thank you. That does look like fun. ;)
<EvanR>	personally i would like pictures of actual haskell stuff
<Boarders>	I learnt by reading yet another haskell tutorial and then writing some parsers (though I am bad at haskell)
<EvanR>	like, demonstrating lazy evaluation, or heap object sharing, or...
<erisco>	++parsing
*	danthemyth has quit (Ping timeout: 240 seconds)
*	alex`` has quit (Quit: WeeChat 1.9.1)
<etiago>	oh wow, Haskell Book is definitely on the pricey side :(
<erisco>	not many people are interested in parsing though, so not a great example to base a book on
*	dkov has quit (Quit: dkov)
*	eschnett has quit (Read error: Connection reset by peer)
*	dkov (~dkov@2a02:8388:8283:7f00:a156:aae3:8b73:c335) has joined
*	oish has quit (Ping timeout: 252 seconds)
<stevenxl>	etiago: At the end of the day here is my deal. Learning Haskell is not easy. It's not always fun. It takes time, it takes effort, and I'd be embarrassed to tell you how long I've been at it. (Though I am doing all the exercises). 
*	AlexanderWeb (~bragra@v210.system0.mgmtrouter1.dcgd.ams.transip.net) has joined
*	forgottenone has quit (Quit: Konversation terminated!)
<etiago>	stevenxl, that´s the thing though, it´s difficult but rewarding... because it shows a very different perspective on programming than what most people are used to
<stevenxl>	But I want to be able to write software that doesn't turn into a mess after two to three months. I want software that is maintainable, and I don't want to be scared to change things around. 
<EvanR>	learning haskell may not be fun, or easy, or make you rich, or be useful, or teach you anything, or ... wait
<etiago>	that´s my reason for learning Haskell anyway
*	grizwako_ has quit (Quit: Leaving)
<erisco>	Haskell inspires you to write Haskell tutorials
<stevenxl>	lol.
*	eschnett (~eschnett@ktnron0916w-lp130-1-65-94-201-103.dsl.bell.ca) has joined
<EvanR>	its unpopular, it alienates you from mainstream programming, people think youre elitist, 
<Rembane>	And it will make you unhappy when all other programming languages become ugly.
*	mivael_ has quit ()
*	raingloom (~raingloom@C2267141.catv.pool.telekom.hu) has joined
*	doodlehaus (~doodlehau@71-89-72-8.dhcp.bycy.mi.charter.com) has joined
*	rien_ (~rien@2604:2000:c680:8700:dcbe:cba5:9b63:b6d0) has joined
*	chaosmasttter1 (~chaosmast@p54B463EE.dip0.t-ipconnect.de) has joined
*	yellowj has quit (Ping timeout: 248 seconds)
*	ccomb has quit (Ping timeout: 240 seconds)
*	LeaChim has quit (Ping timeout: 240 seconds)
*	acowley_away has quit (Ping timeout: 240 seconds)
*	simendsjo has quit (Quit: ERC (IRC client for Emacs 25.3.1))
*	chaosmasttter has quit (Ping timeout: 248 seconds)
<maerwald>	not all
*	Guest87136 has quit (Ping timeout: 240 seconds)
<etiago>	sure, you´ll still like frege :-)
*	castlelore has quit (Quit: ZNC 1.6.5 - http://znc.in)
*	hackebeilchen1 (~Peter@243-057-210-188.ip-addr.inexio.net) has joined
*	marr (~ccc@87-205-254-96.adsl.inetia.pl) has joined
*	ck (~ck@aipotu.li) has joined
*	hackebeilchen has quit (Ping timeout: 240 seconds)
*	doodlehaus has quit (Ping timeout: 255 seconds)
*	acowley_away (~acowley@c-73-150-130-220.hsd1.nj.comcast.net) has joined
*	ck is now known as Guest27506
*	castlelore (~castlelor@cpe-76-173-200-54.hawaii.res.rr.com) has joined
*	mizu_no_oto_work has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	castlelore has quit (Changing host)
*	castlelore (~castlelor@unaffiliated/castlelore) has joined
*	CoderPuppy (~cpup@32.218.116.72) has joined
*	LeaChim (~LeaChim@xelix.net) has joined
*	dkov has quit (Quit: dkov)
*	dkov (~dkov@2a02:8388:8283:7f00:a156:aae3:8b73:c335) has joined
*	inhortte (~polaris@212.21.249.185.static.user.ono.com) has joined
*	cpup has quit (Ping timeout: 252 seconds)
*	hackebeilchen1 has quit (Read error: Connection reset by peer)
*	AlexanderWeb (~bragra@v210.system0.mgmtrouter1.dcgd.ams.transip.net) has left
*	inhortte has quit (Remote host closed the connection)
*	danvet has quit (Ping timeout: 255 seconds)
<crucify_me>	funny comments thanks!
*	rien_ has quit (Remote host closed the connection)
*	ebsen (~ebsene@96-2-74-147-dynamic.midco.net) has joined
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sun Oct 15 13:34:50 2017

**** BEGIN LOGGING AT Tue Oct 17 18:19:57 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	kuttifunk1 (~Thunderbi@host-188-174-199-124.customer.m-online.net) has joined
*	bigos has quit (Remote host closed the connection)
*	soniku has quit (Ping timeout: 252 seconds)
*	fishythefish (~fishythef@2620:10d:c090:180::1:af15) has joined
*	zephyr1 (~zephyr1@77.247.178.186) has joined
*	keep_learning (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has joined
*	kuttifunk has quit (Ping timeout: 258 seconds)
*	kuttifunk1 is now known as kuttifunk
*	merlynfry (~merlynfry@host-92-24-47-51.ppp.as43234.net) has joined
*	wedify has quit (Ping timeout: 252 seconds)
*	mizu_no_oto has quit (Quit: Computer has gone to sleep.)
*	iqubic (~iqubic@2601:602:8a00:1bd7:990c:dd93:fdc6:8526) has joined
*	okuu (~pyon@unaffiliated/pyon) has joined
*	stef_204 has quit (Quit: WeeChat 1.9.1)
*	cschneid_ (~cschneid@2603:300b:901:300:9cb8:6014:a10e:cb31) has joined
*	okuu has quit (Remote host closed the connection)
*	okuu (~pyon@unaffiliated/pyon) has joined
*	merlynfry has quit (Quit: merlynfry)
*	replay has quit (Quit: Textual IRC Client: www.textualapp.com)
*	cschneid_ has quit (Ping timeout: 252 seconds)
*	lambdamu (~lambdamu@p57AB3BB1.dip0.t-ipconnect.de) has joined
*	Welkin (~Welkin@107.147.90.29) has joined
*	Guest6523 (~jay@117.209.237.212) has joined
*	darjeeling_ (~darjeelin@D-108-179-175-129.dhcp4.washington.edu) has joined
*	lambdamu_ has quit (Ping timeout: 248 seconds)
*	zephyr1 has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<orion>	Does anyone know on a high level how Haxl is able to group commands together which can run concurrently?
*	cranej (~cranej@42.120.74.203) has joined
*	oisdk has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	Raothorn has quit (Quit: Page closed)
<orion>	I think the key point is that it's a free Applicative as opposed to a free Monad.
*	wedify (~flobberle@S01061cabc06b7d23.lb.shawcable.net) has joined
<orion>	But I don't know much more than that.
*	oisdk (~textual@51-171-255-121-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined
*	oisdk has quit (Client Quit)
*	Destol (~Destol@dsl-173-206-181-227.tor.primus.ca) has joined
*	ninedotnine has quit (Read error: Connection reset by peer)
*	Tesseraction has quit (Ping timeout: 255 seconds)
<geekosaur>	in x >> y, if x fails y should not be run (see the monad laws). in x *> y, x cannot fail (it could bottom, but so can anything else)
<geekosaur>	so you can run x and y concurrently in Applicative, but not in Monad
*	ninedotnine (~dan@modemcable078.123-81-70.mc.videotron.ca) has joined
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	xcmw (~textual@2605:a000:132b:20ac:d520:332c:99a5:630b) has joined
<orion>	Yes, but as I understand it, Haxl is able to build a tree describing the dependencies between commands.
<orion>	So if a later command depends on the results of a previous command, they are run in sequence. If they are uncoupled, they are run in parallel.
<Welkin>	lol haxl
<Welkin>	that was just mentioned in a talk I attended
<orion>	What are your thoughts on it?
*	pavonia has quit (Quit: Bye!)
*	mson (uid110608@gateway/web/irccloud.com/x-acclmxysdzsbnurd) has joined
*	frankpf (~frankpf@unaffiliated/frankpf) has joined
*	dolio has quit (Quit: ZNC 1.6.5 - http://znc.in)
<Welkin>	it was only mentioned in passing to show what haskell can do
<Welkin>	but very cool
<Welkin>	it was about turning a N+1 database query into 2 queries
<MarcelineVQ>	"<orion> So if a later command depends on the results of a previous command, they are run in sequence. If they are uncoupled, they are run in parallel." that sounds like a pretty interesting basis for robotics control
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	keep_learning has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	dolio (~dolio@haskell/developer/dolio) has joined
*	tromp (~tromp@ip-217-103-3-94.ip.prioritytelecom.net) has joined
*	keep_learning (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has joined
*	dedgrant has quit (Read error: Connection reset by peer)
*	mizu_no_oto_work (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	whitephoenix has quit (Quit: Leaving)
<bigs>	anyone have a preferred library for sized vectors?
<bigs>	i.e. vects w/ type indexed lengths
*	tromp has quit (Ping timeout: 252 seconds)
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	serendependy (~christoph@2620:0:e50:1401:d9b9:4ad5:e406:cff3) has joined
*	montagy (~Thunderbi@59.63.249.200) has joined
*	ianandrich (~ianandric@c-73-223-61-224.hsd1.ca.comcast.net) has joined
*	vtcoo has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<bigs>	looks like vector-sized is solid
*	nash_ (18f6518b@gateway/web/freenode/ip.24.246.81.139) has joined
*	Youmu (uid129469@gateway/web/irccloud.com/x-kjdgssdvdaiwwtkx) has joined
*	Jesin has quit (Quit: Leaving)
*	vtcoo (~vtcoo@2606:6000:6307:f00:314d:a7fd:fb60:de33) has joined
<Welkin>	as opposed to liquid or gaseous?
*	Arcaelyx (~Arcaelyx@2601:646:c200:27a1:c914:f1a0:8d8a:6d38) has joined
*	Wizek__ has quit (Ping timeout: 240 seconds)
*	banc has quit (Quit: ZNC - http://znc.in)
*	Arcaelyx_ has quit (Ping timeout: 255 seconds)
<nash_>	my issue is: trying to use a cassava-conduit `source` with a amazonka-s3-streaming `sink` (streamUpload).
*	somepunk (~rohinpate@76-224-169-17.lightspeed.irvnca.sbcglobal.net) has joined
*	takitus has quit (Ping timeout: 252 seconds)
*	louispan (~textual@203.38.203.134) has joined
*	fishythefish has quit (Ping timeout: 252 seconds)
*	Jesin (~Jesin@pool-72-83-138-15.washdc.fios.verizon.net) has joined
*	orion has quit (Quit: "")
*	nash_ has quit (Quit: Page closed)
<bigs>	yes Welkin precisely
*	cschneid_ (~cschneid@2603:300b:901:300:2025:b05f:c520:fb8b) has joined
*	davr0s (~textual@host86-157-68-96.range86-157.btcentralplus.com) has joined
*	shangxiao (~shangxiao@210-84-7-201.dyn.iinet.net.au) has joined
*	MitchW has quit (Ping timeout: 255 seconds)
*	whitephoenix (~whitephoe@2600:100f:b005:29a3:486:3b9f:6b44:1ca4) has joined
*	whitephoenix has quit (Client Quit)
*	banc (~master@217.151.98.168) has joined
*	lagothri1 (~lagothrix@unaffiliated/lagothrix) has joined
*	keep_learning has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
<ski>	> Nothing *> undefined  -- can't fail ?
<lambdabot>	 Nothing
*	serendependy has quit (Ping timeout: 252 seconds)
*	vuto (~vuto@116.118.104.236) has joined
<Welkin>	why would it fail?
<Welkin>	> Nothing >> undefined
<lambdabot>	 Nothing
<Welkin>	it is just the monad instance for Maybe
<Welkin>	ori n your case, Applicative
*	keep_learning (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has joined
<Welkin>	haskell is so lazy
*	toblorone (~toblorone@172.58.91.74) has joined
*	lagothrix has quit (Ping timeout: 252 seconds)
*	vtcoo has quit (Read error: Connection reset by peer)
*	xcmw (~textual@2605:a000:132b:20ac:d520:332c:99a5:630b) has joined
*	MitchW (~MitchW@124-168-235-64.dyn.iinet.net.au) has joined
*	ammazza (~ammazza@130.155.160.155) has joined
*	louispan has quit (Quit: louispan)
*	JeanCarloMachado has quit (Ping timeout: 260 seconds)
*	t7 has quit (Ping timeout: 240 seconds)
<ski>	geekosaur said "in x *> y, x cannot fail (it could bottom, but so can anything else)"
<ski>	perhaps i misinterpreted them
<ski>	pacak : well, it doesn't matter much, since `Maybe' has a low upper bound on number of elements .. i had `foldr' before, but changed to `foldl' in order to preserve argument ordering of `max'
*	orion (~orion@209.6.123.176) has joined
*	orion has quit (Changing host)
*	orion (~orion@unaffiliated/orion) has joined
*	soniku has quit (Remote host closed the connection)
*	Lynxium (~Lynxium@bzq-109-64-120-49.red.bezeqint.net) has joined
*	torgdor (~weechat@cpe-104-32-77-28.socal.res.rr.com) has joined
<Welkin>	> 0 + undefined
<Welkin>	er
<lambdabot>	 *Exception: Prelude.undefined
<Welkin>	> 0 * undefined
<lambdabot>	 *Exception: Prelude.undefined
<Welkin>	> undefined * 0
<lambdabot>	 *Exception: Prelude.undefined
<Welkin>	I would have sworn that was a special case
<Welkin>	I saw the source code o.o
<Welkin>	> 0/0
<lambdabot>	 NaN
<Welkin>	> 1/0
<lambdabot>	 Infinity
*	somepunk has quit (Ping timeout: 255 seconds)
<Welkin>	> (negate 1/0)
<lambdabot>	 -Infinity
<Welkin>	> min (negate 1/0) undefined
<lambdabot>	 *Exception: Prelude.undefined
<Welkin>	oh well
<Welkin>	be more lazy!
*	Manny8888[m] (manny8888m@gateway/shell/matrix.org/x-aklljqbcplmijlrr) has left ("User left")
*	sleffy has quit (Ping timeout: 252 seconds)
*	cschneid_ has quit (Read error: Connection reset by peer)
*	cschneid_ (~cschneid@2603:300b:901:300:2025:b05f:c520:fb8b) has joined
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
*	keep_learning has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
<Axman6>	> 0 * undefined :: Natural
<lambdabot>	 0
*	dolio has quit (Quit: ZNC 1.6.5 - http://znc.in)
*	theDon_ (~td@i5E86393B.versanet.de) has joined
*	ocramz (~user@213.136.48.235) has joined
*	chlong has quit (Ping timeout: 255 seconds)
*	dtornabene has quit (Read error: Connection reset by peer)
*	vishnix (~vishwas@97-126-86-134.tukw.qwest.net) has joined
*	al-damiri has quit (Quit: Connection closed for inactivity)
*	theDon has quit (Ping timeout: 240 seconds)
*	theDon_ is now known as theDon
**** ENDING LOGGING AT Tue Oct 17 19:48:47 2017

**** BEGIN LOGGING AT Wed Oct 18 10:05:42 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:12 2017)
*	Channel #haskell url: http://www.haskell.org/
*	gxt has quit (Ping timeout: 255 seconds)
*	connrs (~connrs@conners.plus.com) has joined
*	araujo has quit (Quit: Leaving)
*	iAmerikan has quit (Ping timeout: 258 seconds)
*	new_haskeller (c76a6735@gateway/web/freenode/ip.199.106.103.53) has joined
<new_haskeller>	hi all, I am using https://github.com/myfreeweb/pcre-heavy for REGEX
*	alveric1 (~LordAlver@i5E863524.versanet.de) has joined
*	bcoppens is now known as bcoppens_
<new_haskeller>	I have a tuple of strings, (String, String)
<new_haskeller>	I want to regex match for true on the second string
*	ranberry (~ranberry@4.35.2.66) has joined
<new_haskeller>	i.e. myFunc ("someliteralstring", y ~= [re|^aeiou|])
<new_haskeller>	I can't seem to get the second part of the tuple regex part to compile
<new_haskeller>	i.e. pattern matching with regex
*	muzzle has quit (Ping timeout: 255 seconds)
*	peterbecich (~peterbeci@47.37.164.78) has joined
*	toppler has quit (Remote host closed the connection)
*	Jesin has quit (Quit: Leaving)
<int-e>	new_haskeller: use a guard?  myFunc ("some...", y) | y =~ [re|...] = ...?
*	machinedgod (~machinedg@198-84-249-5.cpe.teksavvy.com) has joined
*	killtheliterate (killthelit@gateway/shell/firrre/x-sxsaoptqohwdrexf) has joined
*	NewComer has quit (Remote host closed the connection)
*	jbayardo has quit (Read error: Connection reset by peer)
*	jbayardo (~jbayardo@181.171.26.93) has joined
<new_haskeller>	int-e: I'll check it out, thanks!
*	Elhamer (~Elhamer@37.172.80.214) has joined
*	Jesin (~Jesin@wsip-98-187-234-122.dc.dc.cox.net) has joined
*	dedgrant_ (~dedgrant@192.40.237.82) has joined
*	dedgrant (~dedgrant@192.40.237.82) has joined
*	oish has quit (Quit: Lost terminal)
<crucify_me>	hi I'm revisiting something I still don't quite understand. After unifying with (+) , function gg requires a 3rd parameter and it is clear in the type check: gg (+) :: Num a => a -> c -> a -> a   so the operator (+) creates the new parameter, its reflected in a new type, and the programmer has to know that they are adding an argument (say, in a case where the number of arguments is not obvious) 
<crucify_me>	https://ptpb.pw/G27Y
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
<crucify_me>	or is the only way to know what to enter is by looking at the type signature?
<crucify_me>	I could imagine a more complex function where dropping the c argument would be confusing
*	trevorriles (~textual@38.88.188.22) has joined
*	biglama (~Day_dream@ip-188.net-82-216-175.joinville2.rev.numericable.fr) has joined
*	Jesin has quit (Quit: Leaving)
*	XorSwap has quit (Ping timeout: 248 seconds)
*	LeanderK (~textual@2a00:1398:200:200:a075:865c:9381:c47d) has joined
*	slomo has quit (Ping timeout: 240 seconds)
*	Jesin (~Jesin@wsip-98-187-234-122.dc.dc.cox.net) has joined
*	govg has quit (Ping timeout: 248 seconds)
*	peterbecich has quit (Ping timeout: 260 seconds)
*	soniku has quit (Ping timeout: 255 seconds)
*	petermw has quit (Remote host closed the connection)
*	shiyas has quit (Remote host closed the connection)
*	aloiscochard has quit (Quit: Connection closed for inactivity)
*	raibutera (raibutera@gateway/shell/firrre/x-mvzqpluciayvuhrw) has joined
<crucify_me>	I mean, in what situation would you use gg f a c = f a   ?
*	govg (~govg@unaffiliated/govg) has joined
*	LeanderK has quit (Client Quit)
<int-e>	crucify_me: Usually when working with functions in Haskell, looking at the type is highly recommmended. The number of arguments is not clear in the case of polymorphic types. For example id :: a -> a has an instance id :: (a -> b) -> a -> b with two visible arguments, id :: (a -> b -> c) -> a -> b -> c with three, and so on.
int-e int0x27h integral intelux_ Intensity intheclouddan[m] 
<Cale>	> foldr (\x xs s -> s : xs (x : s)) (const []) [1,2,3,4] []
<lambdabot>	 [[],[1],[2,1],[3,2,1]]
<crucify_me>	int-e thanks yeah. could you off-hand see an application?
<Cale>	> foldr (\x xs s -> s : xs (x : s)) (\x -> [x]) [1,2,3,4] []
*	gehmehgeh has quit (Ping timeout: 248 seconds)
<lambdabot>	 [[],[1],[2,1],[3,2,1],[4,3,2,1]]
<Cale>	How many arguments does foldr take? :)
<int-e>	printf ... is perhaps too extreme.
<erisco>	crucify_me, your dilemma is that you are thinking about uncurried functions when this is in fact a curried function
*	theelous3 (~theelous3@unaffiliated/theelous3) has joined
*	LiaoTao has quit (Ping timeout: 248 seconds)
*	zzz__ has quit (Ping timeout: 248 seconds)
<Cale>	We can simulate a stateful foldr just by accumulating a function, which we immediately apply to another argument
<Cale>	Effectively giving foldr an additional argument.
<crucify_me>	er..
<Cale>	(because a function of two arguments is the same thing as a function which produces another function as its result)
<erisco>	talking about giving things arguments or how many arguments or whatever is a nice shortcut when you already understand how the game works
<int-e>	:t foldr (.) id
<lambdabot>	Foldable t => t (b -> b) -> b -> b
<Cale>	Yeah, really every function has exactly one parameter
*	ptek has quit (Quit: Bye.)
<erisco>	it is like if I started talking about  a -> (b, c)  as returning two values
<mnoonan>	yeah, it's probably better to think of it as returning a function, rather than adding arguments. e.g. instead of thinking of id for functions as having type id :: (a -> b) -> a -> b, think of it as id :: (a -> b) -> (a -> b)
<Cale>	and those who appear to accept more arguments are just producing other functions
<erisco>	sure, that's a fine shortcut at times, but as read plainly it is incorrect
<crucify_me>	I understand it intuitively and currying too, its funny, visually f a c = f a   plays tricks on my brain
*	halogenandtoast (~halogenan@132.69.30.125.dy.iij4u.or.jp) has joined
<crucify_me>	I guess for now I'll rely on the type signature .. reading it is getting a bit easier for me. thanks ALL
*	new_haskeller has quit (Quit: Page closed)
*	TweyII has quit (Ping timeout: 248 seconds)
<crucify_me>	gg (+) 4 1   << we have this. once 1 is dropped so to speak, (+4 ) is one function looking for an argument, correct?
*	LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) has joined
<ertes-w>	crucify_me: let f be any function, then (id f) is also a function, right?  because (id f = f)
*	shloub (~shloub@2a01cb00008cdf00754146802ced3062.ipv6.abo.wanadoo.fr) has joined
*	SIGUSR2 has quit (Ping timeout: 260 seconds)
<ertes-w>	crucify_me: so you can give it an argument:  (id f) x
<ertes-w>	but in haskell that's just (id f x)
<mnoonan>	so I'm getting a failure on some test cases when going from ghc 8.0.* -> 8.2.1 and I can't even quite wrap my head around how to debug it..
<mnoonan>	https://github.com/matt-noonan/justified-containers/blob/master/test/Data/Map/JustifiedSpec.hs#L138
*	HMPerson1_ has quit (Ping timeout: 240 seconds)
<mnoonan>	in that test case, `isLiterally` is supposed to check if two values occupy exactly the same location in memory
*	ystael has quit (Ping timeout: 248 seconds)
<ertes-w>	crucify_me: that's why it's best to view all functions as taking exactly one argument
<mnoonan>	m is just a newtype of letters, and k is a newtype of "theKey k"
*	ShalokShalom (~quassel@178-191-118-135.adsl.highway.telekom.at) has joined
*	ShalokShalom_ has quit (Ping timeout: 248 seconds)
*	kafke has quit (Remote host closed the connection)
*	twopoint718 is now known as twopoint718_
*	kafke (~kafke@ip68-227-98-157.ok.ok.cox.net) has joined
*	tpreston has quit (Quit: ZNC - http://znc.in)
<mnoonan>	this worked in 8.0.*, and a bunch of the other tests that use `isLiterally` still pass, but these two consistently fail on 8.2.1
*	path[l] has quit (Quit: path[l])
<cocreature>	mnoonan: fail as in “runtime error” or it just doesn’t compile?
int-e int0x27h integral intelux_ Intensity intheclouddan[m] 
<cocreature>	oh isLiterally seems sketchy, unsafePerformIO, unsafceCoerce and reallyUnsafePtrEquality in a single function :)
int-e int0x27h integral intelux_ Intensity intheclouddan[m] 
<mnoonan>	it's super sketchy! :)
<mnoonan>	but it has worked so far, so.. *shrug*
*	govg has quit (Ping timeout: 255 seconds)
<crucify_me>	right, you just need to infer that id f is looking for one argument. the compiler makes an allowance for any argument that is "dropped" such as in f a c = f a ertes-w 
<Cale>	:t let f a c = f a in f
<lambdabot>	error:
<lambdabot>	    • Occurs check: cannot construct the infinite type: t3 ~ p0 -> t3
<lambdabot>	      Expected type: t2 -> t3
*	govg (~govg@unaffiliated/govg) has joined
*	vuto (~vuto@42.119.27.12) has joined
<Cale>	^^ that equation doesn't type check, since f would need to have an infinite type.
<mnoonan>	cocreature, anyway, it fails as in the test case runs but reports that the two values are not at the same memory location
*	forgottenone has quit (Ping timeout: 255 seconds)
<ertes-w>	crucify_me: take a look at the 'replicate' function
<ertes-w>	> replicate 4 'a'
<lambdabot>	 "aaaa"
<cocreature>	mnoonan: well the test case only fails if the memory locations are different, no?
<ertes-w>	crucify_me: now look at the type
<ertes-w>	:t replicate
<lambdabot>	Int -> a -> [a]
*	Apocalisp has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<ertes-w>	crucify_me: we think of it as a binary function, but that type is really the same as:  replicate :: Int -> (a -> [a])
<ertes-w>	crucify_me: it takes an Int and returns a *function*
<mnoonan>	cocreature: right. but both sides are lookup up the same key in the same map, modulo some newtype wrapping and unwrapping
*	jgt (~jgt@dcw217.neoplus.adsl.tpnet.pl) has joined
*	pgiarrusso_ (~pgiarruss@151.97.67.176) has joined
<ertes-w>	crucify_me: that function takes a value and produces a list of that value
*	kafke has quit (Ping timeout: 240 seconds)
<ertes-w>	crucify_me: so (replicate 4) is the function that takes a value and produces a list containing that value four times
<ertes-w>	> (replicate 4) 'a'
<lambdabot>	 "aaaa"
<ertes-w>	crucify_me: does that make sense?
*	Apocalisp (~textual@c-67-188-16-44.hsd1.ca.comcast.net) has joined
*	ShalokShalom has quit (Remote host closed the connection)
*	vuto has quit (Ping timeout: 240 seconds)
*	robertkennedy (~rkennedy@2600:1:960e:dae5:3904:820d:9961:d770) has joined
<crucify_me>	ertes-w, Cale  thanks hold on please .. really want to make sure I get the infinite type error. I looked at    a ~ [a]    and    a ~ (a -> a)
*	fishythefish has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	pgiarrusso has quit (Ping timeout: 258 seconds)
<crucify_me>	earlier and I want to know the mechanics of that
<cocreature>	mnoonan: sorry not sure what’s going on here. I can only suggest trying to isolate it to a minimal example
*	sgflt has quit (Quit: WeeChat 1.6)
<robertkennedy>	What's the best way to increment a counter many times per second from 400+ threads? Just `modifyTVar'`?
<robertkennedy>	Or would the lazier version be better if I only read it occasionally?
*	tommd (~tommd@75-164-202-86.ptld.qwest.net) has joined
<mnoonan>	cocreature: fair enough. beyond that, is there something past Core I can inspect to try to figure out why an allocation is apparently happening?
*	woodson has quit (Ping timeout: 248 seconds)
*	govg has quit (Ping timeout: 240 seconds)
<mnoonan>	and before assembly ;)
*	gxt (~gxt@2a02:908:e851:4020:85e1:5338:de66:d1e3) has joined
<ertes-w>	robertkennedy: no, strict is almost certain to be better
<cocreature>	mnoonan: there’s stg and c--
<cocreature>	mnoonan: and LLVM IR if you use that code generator
<mnoonan>	ahh, -ddump-stg
<ertes-w>	robertkennedy: if you do it lazily, you will cause allocation and long-term GC
<mnoonan>	guess it is finally time for me to get friendly with stg
<robertkennedy>	I figured as much. I'll make sure that's the bottleneck before spending too much more time on it
<cocreature>	mnoonan: but stg is really close to core so I doubt it will be helpful if core isn’t helpful
*	govg (~govg@unaffiliated/govg) has joined
<crucify_me>	Cale  so what is the compiler trying to do before this is determined to fail >>  :t let f a c = f a in f
*	peterbecich (~peterbeci@47.37.164.78) has joined
*	thblt (~user@55.184.14.109.rev.sfr.net) has joined
<erisco>	let each thread have its own counter, and then on the thread where you need the total merely read and sum the counters of each thread
*	vlatkoB_ (~IRC_clien@unaffiliated/vlatkob) has joined
*	XorSwap (~XorSwap@wpa-3-1948.cc.umanitoba.ca) has joined
<mnoonan>	maybe just comparing the core for 8.0.* vs 8.2.1 will reveal something
<crucify_me>	by having it in a let statement ?
*	replay (~replay@pdpc/supporter/student/replay) has joined
<ertes-w>	crucify_me: f :: a -> b -> c;  f a c = f a
<erisco>	this will tell you a minimum bound on what the actual total sum must be
<ertes-w>	crucify_me: whatever is on the right hand side of "=" is of type 'c'
<ertes-w>	crucify_me: (f a) is of type (b -> c)
*	fishythefish (~fishythef@2620:10d:c090:200::5:a276) has joined
<robertkennedy>	ericso: makes sense. Then each counter could be an IORef instead of TVar, since it's only modified by one thread yeah?
<ertes-w>	crucify_me: normally with monomorphic types this would just be a type mismatch
<ertes-w>	crucify_me: however, 'c' is a fully polymorphic type, so the compiler is thinking:  "hmm, maybe i can choose 'c' such that it works"
*	slamzy has quit (Quit: Going offline, see ya! (www.adiirc.com))
<ertes-w>	so it chooses:  c = b -> c
<ertes-w>	but if c = b -> c, then b -> c = b -> (b -> c)
<ertes-w>	= b -> (b -> (b -> c))
<ertes-w>	= b -> (b -> (b -> (b -> c)))
<erisco>	robertkennedy, I don't know about the concurrency tools in Haskell. What I do know is you have to be conscientious about what is atomic
<ertes-w>	crucify_me: do you see the problem?
<Cale>	and there's an explicit check, called the "occurs check" to see if a type variable occurs on both sides of an equation when the compiler is finding and solving these equations
*	gehmehgeh (~ircuser1@gateway/tor-sasl/gehmehgeh) has joined
<Cale>	in order to prevent this kind of infinite descent
<erisco>	robertkennedy, for example, if a thread incrementing the counter is an atomic action, then you can read the counter from a different thread at any time and you will see some valid version of it
*	vlatkoB has quit (Ping timeout: 248 seconds)
*	twanvl (~twanvl@92.110.121.28) has joined
<erisco>	robertkennedy, however, if it is not atomic, then at some times you will read the counter as it is being updated, i.e. it will be invalid
<erisco>	in Haskell, I am going to guess that incrementing an Int will be atomic but incrementing an Integer may not be, but these are things you'll have to check
*	XorSwap has quit (Ping timeout: 260 seconds)
*	wrengr_away is now known as wrengr
<crucify_me>	It's fascinating. I need to go over this log outside a noisy cafe. thanks so much ertes-w Cale
<ertes-w>	crucify_me: welcome to the infinite rabbit hole that is haskell =)
<robertkennedy>	ericso: is fine to not have exactly correct value, I'll test it out. 
*	trevorriles has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<erisco>	robertkennedy, by atomic I mean there is no possibility of interruption
*	soLucien has quit (Ping timeout: 240 seconds)
*	fishythefish has quit (Client Quit)
<erisco>	well, it could give you a high probability of garbage though
<erisco>	or a low probability … that's a scheduling question
*	cmotoche has quit (Quit: Leaving)
<crucify_me>	I'm on infinitely too much caffeine
*	Durbley_ has quit (Ping timeout: 240 seconds)
<erisco>	for example, say an Integer is stored as a list of digits, and so to increment it we have to increment each digit as appropriate
<ertes-w>	erisco: if you use MVar or STM, then you get atomicity pretty much for free
*	zzz (~zzz@gateway/tor-sasl/zzz) has joined
<erisco>	so  [0,1,1] incremented is [1,0,0] … you'd expect there to be intermediate states, namely [0,1,0] then [0,0,0] then [1,0,0]
<ertes-w>	in the case of STM even if you store each digit in a separate TVar
*	Durbley (~Durbley@c-73-148-179-151.hsd1.fl.comcast.net) has joined
<erisco>	ertes-w, talk to robertkennedy about it
*	kafke (~kafke@wsip-70-182-66-12.ok.ok.cox.net) has joined
<erisco>	so then, if you are reading sometime during the incrementing of the Integer, which may be a low probability based on what the threads are doing overall, then there is a 1/3rd chance you read a valid state
<barrucadu>	erisco: An MVar or IORef contains a single reference to a Haskell value, so you can't see an intermediary state with a half-constructed Integer
<erisco>	and a 2/3rds chance you read an invalid one
<cocreature>	mnoonan: if you figure it out, let me know. I’m now curious what changed in 8.2 that caused these tests to break :)
<erisco>	so, it isn't just not the current total, it is a state that possibly never was the total
<mnoonan>	cocreature: will do!
*	joomy (~joomy@129.133.190.254) has joined
<erisco>	so instead of a minimum bound you now have a probability of complete garbage
*	chindy has quit (Read error: No route to host)
*	Guest66309 is now known as baweaver
<erisco>	okay, it seems people are responding without understanding the premise of what I am talking about
*	jgertm (~jgertm@50-0-2-19.static.sonic.net) has joined
*	chindy (~quassel@2001:bc8:4700:2300::8:105) has joined
*	baweaver is now known as Guest40909
<erisco>	I am talking about what would happen if you looked at the state of a thread absent of any sort of concurrency mechanism
<geekosaur>	grah. I really do need to write up that article at some point
<erisco>	it is just a question of what states does that thread go through, and from there, what is it possible that we read
<erisco>	what ends up atomic here is dependent on the CPU
<Zemyla>	So question. For all arrows, there is a function like this:
<Zemyla>	:t \p a -> p <<< arr (\() -> a)
<lambdabot>	Arrow cat => cat b c -> b -> cat () c
<Zemyla>	And for all ArrowApplys, there is a function like this:
*	fishythefish (~fishythef@2620:10d:c090:200::5:a276) has joined
<Zemyla>	:t \f -> app <<< arr (\a -> (f a, ()))
<lambdabot>	ArrowApply cat => (a -> cat () c) -> cat a c
<Zemyla>	Is this an isomorphism?
*	halogenandtoast has quit (Ping timeout: 240 seconds)
*	pgiarrusso__ (~pgiarruss@dmi-pp2.unict.it) has joined
<erisco>	I am guessing that incrementing an Int in Haskell is not going to have any other memory states than the number before and the number after
*	ystael (~ystael@50-199-243-61-static.hfc.comcastbusiness.net) has joined
<erisco>	so, regardless of when we read the Int, we should see a valid number in the sense it was in fact a state the thread was in
<Zemyla>	Is every ArrowApply p a b isomorphic to (a -> p () b)?
<erisco>	let me correct: a valid number in the sense that it was in fact a logical state the thread was in
*	Guest40909 is now known as baweaver_2
<erisco>	logical being on the level of "increment a number" and otherwise being the individual atomic changes in state to get there
*	aarvar (~foewfoiew@50.34.105.170) has joined
*	pgiarrusso_ has quit (Ping timeout: 260 seconds)
*	chindy has quit (Ping timeout: 258 seconds)
*	Guest45144 has quit ()
<crucify_me>	pardon ertes-w 
<erisco>	so in the case of something like incrementing an Int, I am guessing you can read that with abandon, no special concurrency mechanisms
*	dddddd has quit (Remote host closed the connection)
*	god4saken[m] is now known as e1enar
<erisco>	on the other hand, trying to have 400 threads concurrently write an Int would be a disaster
*	Jesin has quit (Quit: Leaving)
*	potong (~potong@host86-186-65-53.range86-186.btcentralplus.com) has joined
<crucify_me>	you said whatever is on the rhs of f a c = f a    is c. but did you mean right of = f   ?
*	XorSwap (~XorSwap@wpa-3-1948.cc.umanitoba.ca) has joined
<crucify_me>	if you around ertes-w 
<erisco>	the only benefit being that the value is always current
*	locallycompact has quit (Ping timeout: 248 seconds)
*	trevorriles (~textual@38.88.188.22) has joined
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
*	path[l] (~vsi@pool-74-99-90-203.nrflva.fios.verizon.net) has joined
<ertes-w>	crucify_me: f = _
<ertes-w>	_ :: a -> b -> c
<ertes-w>	crucify_me: f a = _
<ertes-w>	a :: a
<ertes-w>	_ :: b -> c
*	Jesin (~Jesin@wsip-98-187-234-122.dc.dc.cox.net) has joined
<ertes-w>	crucify_me: f a c = _
<ertes-w>	a :: a
<ertes-w>	c :: b
<ertes-w>	_ :: c
*	whoisxy has quit (Ping timeout: 240 seconds)
<ertes-w>	crucify_me: does that make sense?
*	blackjid1 (~blackjid@213.136.66.233) has joined
*	Denthir has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	osa1 (~omer@haskell/developer/osa1) has joined
*	XorSwap has quit (Ping timeout: 248 seconds)
<cocreature>	using the same names for value-level variables and type variables is not helping to make this less confusing :)
<ertes-w>	yeah, i agree =)
<ertes-w>	crucify_me: allow me to rename your variables a bit
<ertes-w>	f :: a -> b -> c
<crucify_me>	the wildcard symbol ....
<ertes-w>	f = _  -- if you wrote it this way, then you literally say that f is equal to _, so they are of the same type
<ertes-w>	_ :: a -> b -> c
*	Immune (~Immune@47.145.46.247) has joined
*	iAmerikan has quit (Ping timeout: 264 seconds)
<ertes-w>	f x = _  -- if you write it this way, then you say that f applied to x is equal to _
<ertes-w>	therefore (x :: a) and (_ :: b -> c)
<ertes-w>	crucify_me: does that make sense?
<ertes-w>	(so far)
<crucify_me>	one moment please .. really want to get this
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
*	coot____________ (~coot@188.146.98.250.nat.umts.dynamic.t-mobile.pl) has joined
*	raingloom has quit (Quit: WeeChat 1.9.1)
<ertes-w>	crucify_me: let's use a less abstract example
<ertes-w>	repChar :: Int -> Char -> String
*	zero_byte has quit (Ping timeout: 255 seconds)
*	cdg has quit (Remote host closed the connection)
*	befuddled (~befuddled@106.51.16.107) has joined
<ertes-w>	repChar = _  -- if you write it this way, then you're saying repChar is equal to _, so obviously they also have the same type, i.e. (_ :: Int -> Char -> String)
*	cdg (~cdg@2600:1700:3120:40e0:c97b:b89b:858:314b) has joined
*	unyu (~pyon@unaffiliated/pyon) has joined
*	_d0t (~xxx@138.199.75.52) has joined
*	valentinbuza (~valentinb@unaffiliated/valentinbuza) has joined
<ertes-w>	repChar n = _  -- if you write it this way, then repChar applied to n is equal to _, therefore n has to be of type Int, and _ has to be of type (Char -> String)
<crucify_me>	no I'm studying the notation and I'm getting it. one moment please lets stick with the original example if possible
<ertes-w>	crucify_me: sure
*	ptek (~ptek@89-64-29-208.dynamic.chello.pl) has joined
*	acarrico has quit (Quit: Leaving.)
*	Elhamer has quit (Ping timeout: 248 seconds)
*	sheyll (~sheyll@HSI-KBW-46-237-240-99.hsi.kabel-badenwuerttemberg.de) has joined
*	cdg has quit (Ping timeout: 252 seconds)
*	pimlu (~pimlu@128.172.245.73) has joined
*	Saukk has quit (Remote host closed the connection)
*	ccomb has quit (Quit: Leaving.)
<crucify_me>	so on the rhs f is partially applied and we are left with b -> c  ertes-w 
<ertes-w>	crucify_me: correct
*	ptek has quit (Quit: see ya)
*	nicknight (~ubuntu@unaffiliated/nicknight) has joined
<crucify_me>	ok so you mentioned that the rhs resolves to c
*	humanoyd has quit (Quit: WeeChat 1.9.1)
*	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has joined
<crucify_me>	that's what you meant to say?
<crucify_me>	ertes-w, ^
*	cdg (~cdg@2600:1700:3120:40e0:787d:4f68:f8fe:b9e7) has joined
<ertes-w>	crucify_me: if you write (f x y = _), then according to f's type, _ should be the *result* of type 'c'
*	jgt has quit (Quit: WeeChat 1.4)
*	toby1851 has quit (Ping timeout: 260 seconds)
*	cdg has quit (Ping timeout: 258 seconds)
*	mizu_no_oto has quit (Ping timeout: 260 seconds)
*	revprez_cst (~revprez@pool-108-7-200-87.bstnma.fios.verizon.net) has joined
*	twanvl_ (~twanvl@92.110.121.28) has joined
*	e1enar is now known as elenar
*	dedgrant has quit (Quit: Leaving)
*	Jesin has quit (Quit: Leaving)
<tobim[m]>	Is there a haskell like language that stores all functions in an indexed DB and makes them importable as packages on a global level?
*	LeanderK (~textual@nat-eduroam-02.scc.kit.edu) has joined
*	twanvl has quit (Ping timeout: 248 seconds)
*	osa1 has quit (Ping timeout: 248 seconds)
*	befuddled has quit (Quit: Computer has gone to sleep.)
*	elenar is now known as e1enar
<crucify_me>	ok the result is of type c on the rhs, so f is applied to a on the right hand side, and we are left with b -> c  ertes-w 
<ertes-w>	crucify_me: correct
*	kiboneu is now known as crodad
<ertes-w>	tobim[m]: do shared objects count as indexed DBs?
<geekosaur>	that doesn't seem to go well with 'functions are first class', now you have functions that are more special than others by being in the DB
*	Destol has quit (Quit: leaving)
<crucify_me>	ok we could gently move on from there :)
*	Jesin (~Jesin@wsip-98-187-234-122.dc.dc.cox.net) has joined
*	e1enar has quit (Changing host)
*	e1enar (god4sakenm@unaffiliated/e1enar) has joined
*	e1enar has quit (Changing host)
*	e1enar (god4sakenm@gateway/shell/matrix.org/x-ztfkpekaqiqfazhb) has joined
<ertes-w>	crucify_me: ok, allow me to come back to the repChar special case just to demonstrate something
<geekosaur>	or you do it on a different level, e.g. if you do it at the linker level then you have ghc's -split-objects flag. but linkers have a tendency to overload when you do that
<crucify_me>	ok
<ertes-w>	crucify_me: imagine you wrote:  repChar n c = repChar n  -- now even just intuitively this should strike you as weird, and GHC will think the same, because (repChar n :: Char -> String)
<ertes-w>	crucify_me: but the RHS is of type String
<ertes-w>	so you can't have a (Char -> String) there
*	xuanrui (~xuanrui@ceas-nat.EECS.Tufts.EDU) has joined
*	peterbecich has quit (Ping timeout: 260 seconds)
<ertes-w>	crucify_me: interestingly in this specialised form GHC will actually just tell you that there is a type mismatch
*	path[l] has quit (Quit: path[l])
<ertes-w>	crucify_me: now back to your more general 'f'
<ertes-w>	f :: a -> b -> c
<crucify_me>	ok
<tobim[m]>	well, think more on the lines of as if hackage supported only packages consisting of single functions
<ertes-w>	crucify_me: this is just repChar, but if you look at the type signature, you can read it as:  "hi, i'm f…  if you use me, feel free to pick any types you like for 'a', 'b' and 'c'…  i don't care what they are, i will work regardless"
<tobim[m]>	then the dependency tree could be represented on a very fine grained level
*	halogenandtoast (~halogenan@132.69.30.125.dy.iij4u.or.jp) has joined
*	kuribas (~user@ptr-25vy0i8ige6n66447rm.18120a2.ip6.access.telenet.be) has joined
*	path[l] (~vsi@pool-74-99-90-203.nrflva.fios.verizon.net) has joined
<ertes-w>	crucify_me: particularly 'c' is also fully polymorphic, and that's the result type
<ertes-w>	f x y = f x  -- now you write this…  you write a (b -> c) where a 'c' was expected
*	slamzy (~bwr@93-103-215-22.dynamic.t-2.net) has joined
<ertes-w>	this is *not* a type mismatch, because f is using itself, and as we know it promises to work for arbitrary choices of 'c'
*	e1enar (god4sakenm@gateway/shell/matrix.org/x-ztfkpekaqiqfazhb) has left ("User left")
<Zemyla>	But yeah, I'm really wondering if there's a law-abiding ArrowApply p which isn't isomorphic to Kleisli (ArrowMonad p).
<crucify_me>	so c ~ (b -> c) and we get infinite results
<ertes-w>	exactly
<crucify_me>	trippy
<fishythefish>	an infinite *type* to be clear
<ertes-w>	we get an infinite *type*
<fishythefish>	we discussed before how an infinite type is not the same as saying an infinite set of values
<ertes-w>	crucify_me: now haskell is very conservative about infinity on the type level…  it's simply not allowed
<ertes-w>	otherwise (f x y = f x) might actually type-check
*	halogenandtoast has quit (Ping timeout: 240 seconds)
<crucify_me>	so gg f x y = f x does type check, because the compiler allows for gg to have its own parameter..
<ertes-w>	crucify_me: that one isn't even recursive
<fishythefish>	the type of `gg f x y` need not be the same as the type of `f x y`, so the previous argument doesn't apply
<ertes-w>	gg :: (a -> b) -> a -> c -> b
<fishythefish>	ertes-w: perhaps `const` is a useful talking point here
<ertes-w>	gg f x y = _  -- (f :: a -> b), (x :: a), (y :: c), (_ :: b)
<ertes-w>	gg f x y = f _  -- (f _ :: b), (_ :: a)
<ertes-w>	gg f x y = f x  -- check
*	LeanderK has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	LeanderK (~textual@2a00:1398:200:200:a196:39a2:ca44:74b2) has joined
*	path[l] has quit (Quit: path[l])
*	whoisxy (~whoisxy@83.137.254.176) has joined
<crucify_me>	ertes-w, fishythefish thanks so much I'll get this
*	Apocalisp has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	XorSwap (~XorSwap@wpa-3-1948.cc.umanitoba.ca) has joined
*	peterbecich (~peterbeci@47.37.164.78) has joined
*	joomy has quit (Quit: joomy)
*	chindy (~quassel@2001:bc8:4700:2300::101b) has joined
*	bwr_ (~bwr@external.comtrade.com) has joined
<ertes-w>	crucify_me: it's a symbolic game of fitting puzzle pieces together…  allow me to give you an exercise:
<crucify_me>	please do
*	bwr_ has quit (Read error: Connection reset by peer)
<ertes-w>	f :: (b -> c -> d) -> (a -> b) -> a -> c -> d  -- write a function of this type
*	path[l] (~vsi@pool-74-99-90-203.nrflva.fios.verizon.net) has joined
<ertes-w>	this is an easy one
<robertkennedy>	@lpaste 359344
<lambdabot>	Haskell pastebin: http://lpaste.net/
*	joomy (~joomy@129.133.190.254) has joined
<robertkennedy>	lpaste.net/359344
<robertkennedy>	This was my various counter implementation. Pretty much no change
*	crodad is now known as crowill
*	slamzy has quit (Ping timeout: 248 seconds)
<crucify_me>	ertes-w, I'm a bit overloaded
<merijn>	robertkennedy: If you wanna do accurate measurements you might wanna look intro criterion (a library for micro benchmarks), as a bonus you get fancy HTML visualisation too
<ertes-w>	crucify_me: there is no time limit…  feel free to do it whenever you want…  or do you need help?
<merijn>	robertkennedy: I even have some examples for benchmarking variables like that: https://github.com/merijn/broadcast-chan/blob/master/broadcast-chan/benchmarks/Sync.hs
<merijn>	robertkennedy: Note that there's huge performance differences between these concurrent variables in the threaded and unthreaded runtime
*	hexamod has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<merijn>	robertkennedy: Compare http://files.inconsistent.nl/sync-threaded.txt and http://files.inconsistent.nl/sync.txt
*	xuanrui has quit (Ping timeout: 248 seconds)
*	shutdown_-h_now has quit (Ping timeout: 258 seconds)
*	path[l] has quit (Quit: path[l])
<crucify_me>	considering I don't see you here often, if you give me a solution I will pour over it later today. ertes-w 
<merijn>	crucify_me: lol, ertes-w is here all the time :)
*	robertkennedy has quit (Quit: Bye)
<merijn>	crucify_me: But, I suppose, maybe not in your timezone
*	obijankenobi (~quassel@200116b800f99700c4a2aaf5fd47fe39.dip.versatel-1u1.de) has joined
*	robertkennedy (~rkennedy@63.155.27.53) has joined
<crucify_me>	really? yeah not sure maybe they avoid me merijn  :)
*	hexamod (~textual@a80-101-98-83.adsl.xs4all.nl) has joined
<ertes-w>	crucify_me: yeah, i'm a fairly common sight around here =)
*	LeanderK has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<fishythefish>	crucify_me: start with the easy stuff. name your arguments
*	robkennedy (~rkennedy@70.102.29.251) has joined
*	crowill is now known as kiboneu
*	LeanderK (~textual@2a00:1398:200:200:a196:39a2:ca44:74b2) has joined
<ertes-w>	crucify_me: just try it on your own…  you are not allowed to use recursion, and there is only one possible solution
*	pgiarrusso__ has quit (Quit: Leaving)
<fishythefish>	crucify_me: next, work out what you can do with the values you have -- the types are such that you're pretty restricted.
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<fishythefish>	alternatively, work out where the result type you want can come from
<ertes-w>	crucify_me: by just looking at the type you can already infer the following template:  f g h x y = _
*	robertkennedy has quit (Read error: No route to host)
*	robertkennedy (~rkennedy@63.155.27.53) has joined
<ertes-w>	crucify_me: in fact just write it like that into a source file (together with the type signature!), then GHC will actually help you out =)
<ertes-w>	it tells you the type of _ and the types of things that are in scope
<robertkennedy>	merijn: yeah, not looking for super precision - just an incrementing procedure that won't slow down the process
<crucify_me>	put of my problem is the irc venue. .. excellent I will do that. ertes-w << that's your only moniker?
<crucify_me>	*part
<ertes-w>	crucify_me: i go by 'ertes', too, and sometimes by 'supercynic'
*	mmn80 (uid194575@gateway/web/irccloud.com/x-pcvzzjccknzpshxg) has joined
<ertes-w>	usually you can tell by my nickname which languages i have used that day
<ertes-w>	ertes → haskell
<ertes-w>	supercynic → pretty much anything else
<crucify_me>	nice!
*	XorSwap has quit (Ping timeout: 260 seconds)
*	hexamod has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<crucify_me>	thanks its very encouraging to have people who have a lot of patience ertes-w 
<crucify_me>	and fishythefish 
*	robkennedy has quit (Ping timeout: 248 seconds)
<fishythefish>	no problem :)
*	pgiarrusso_ (~pgiarruss@dmi-pp2.unict.it) has joined
*	replay has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	LeanderK has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	hexamod (~textual@a80-101-98-83.adsl.xs4all.nl) has joined
*	path[l] (~vsi@pool-74-99-90-203.nrflva.fios.verizon.net) has joined
*	pgiarrusso_ has quit (Client Quit)
*	LeanderK (~textual@2a00:1398:200:200:a196:39a2:ca44:74b2) has joined
*	XorSwap (~XorSwap@wpa-3-1948.cc.umanitoba.ca) has joined
*	pgiarrusso (~pgiarruss@dmi-pp2.unict.it) has joined
<ertes-w>	my pleasure =)
*	Wizek_ (~Wizek@catv-89-132-132-110.catv.broadband.hu) has joined
*	ranberry has quit (Ping timeout: 255 seconds)
<ertes-w>	fishythefish: (BTW, i didn't ignore your suggestion, i just didn't know how to make use of it) =)
*	pgiarrusso has quit (Client Quit)
*	hexamod has quit (Client Quit)
<fishythefish>	yeah, sorry, that was unclear
*	pgiarrusso (~pgiarruss@dmi-pp2.unict.it) has joined
<crucify_me>	ertes-w, fishythefish well I'm interested since I know const fairly well
*	osa1 (~omer@haskell/developer/osa1) has joined
<fishythefish>	i meant `const` instead of `gg` as a common example of a function where stuff on the LHS is ignored/doesn't contribute to the result type
<crucify_me>	> const id 3 4 "t" 
<lambdabot>	 error:
<lambdabot>	     • No instance for (Num ([Char] -> ()))
<lambdabot>	         arising from a use of ‘e_134’
<merijn>	robertkennedy: I think we need more low-level benchmarks, so I figured if I could get you to write some more I wouldn't have to ;)
*	hexamod (~textual@a80-101-98-83.adsl.xs4all.nl) has joined
<crucify_me>	oops
<fishythefish>	> const (+) 1 2 3
<lambdabot>	 5
<merijn>	Is there some kind of Typeable abuse or something I can use to check whether a type is an instance of a class?
*	ccomb (~ccomb@46.191.24.93.rev.sfr.net) has joined
*	Elhamer (~Elhamer@37.172.80.214) has joined
<ertes-w>	merijn: don't think so
<merijn>	ertes-w: Well, I know about IfCxt
<merijn>	But I was hoping for something better tested :)
<ertes-w>	merijn: you mean dynamically?
<erisco>	merijn, what is that?
*	Philonous (~Philonous@unaffiliated/philonous) has joined
<ertes-w>	no, that doesn't even make sense =)
<merijn>	erisco: https://github.com/mikeizbicki/ifcxt
*	LeanderK has quit (Ping timeout: 246 seconds)
*	Elhamer has quit (Remote host closed the connection)
<merijn>	IfCxt is freaking magic, btw
*	obijankenobi has quit (Remote host closed the connection)
<merijn>	But not sure whether a "real" library should depend on that :p
<erisco>	merijn, I asked a question that could have been answered by this just yesterday
<ertes-w>	that's crazy
<merijn>	ertes-w: :)
<merijn>	ertes-w: That library is absolute genius and not enough people know about it
*	pgiarrusso_ (~pgiarruss@dmi-pp2.unict.it) has joined
*	Ero (~user@bcddd268.skybroadband.com) has joined
*	dhil has quit (Ping timeout: 240 seconds)
*	path[l] has quit (Quit: path[l])
*	ptek (~ptek@89-64-29-208.dynamic.chello.pl) has joined
*	mcoffin (~mcoffin@unaffiliated/mcoffin) has joined
*	hexamod has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<fishythefish>	merijn: wow, that's incredible
<ertes-w>	merijn: well, it's one of those case of: "if you can't kill it, bury it under a thick layer of TH"
<merijn>	But it also requires you to enumerate instances I think, so it's not quite good for what I want
<ertes-w>	yeah, it uses TH
<ertes-w>	it's not much more than the old overlapping trick
<ertes-w>	like Show used to do for [Char]
<fishythefish>	merijn: sorta, I think it just requires you to enumerate the typeclasses you want
*	path[l] (~vsi@pool-74-99-90-203.nrflva.fios.verizon.net) has joined
*	ptek has quit (Client Quit)
<fishythefish>	mkIfCxtInstances should derive all the instances for that typeclass, if I'm reading this right
<merijn>	My life is probably easier if I just require Eq instances instead of using IfCxt
*	ptek (~ptek@89-64-29-208.dynamic.chello.pl) has joined
<ertes-w>	(i was expecting something that requires -XSuperCrazyMagicInstances and -XIncreadiblyUnsafeSuperDuperCasts or something)
*	XorSwap has quit (Ping timeout: 240 seconds)
<merijn>	Since nearly everything has an Eq instance anyway
<ertes-w>	merijn: what would you do in case of absence?
<geekosaur>	isn't there already a mailing list thread about doing that?
<erisco>	with this, I can complete OOP in Haskell
<tdammers>	ifcxt sounds extremely useful and feels extremely wrong
*	robkennedy (~rkennedy@2600:1:961c:b266:dabf:ca09:f430:53a5) has joined
<tdammers>	erisco: what were you missing?
<erisco>	don't you remember? just what merijn linked to
<merijn>	ertes-w: Basically I have a list of 'a' and if I have an equal instance I want to coalesce duplicates, in the absence of an Eq instance I'd just leave them uncoalesced
*	thblt has quit (Ping timeout: 240 seconds)
*	kafke has quit (Remote host closed the connection)
*	robkennedy has quit (Client Quit)
<ertes-w>	i don't know…  i feel like the cases where one might be inclined to use IfCxt one should really just take an extra argument
<erisco>	ah, great, I forgot my cabal had disappeared… sigh
<ertes-w>	merijn: like in your case…  i'd just take a comparison operator
<tdammers>	erisco: sure, I just can't see how you need that for OOP
*	hexamod (~textual@a80-101-98-83.adsl.xs4all.nl) has joined
*	robkennedy (~rkennedy@70.102.29.251) has joined
<ertes-w>	f (.==) … = …
*	kafke (~kafke@wsip-70-182-66-12.ok.ok.cox.net) has joined
<merijn>	ertes-w: That is...very painful, since this is heterogeneous list
<erisco>	okay, well, you'll see later if I get it working now
<merijn>	ertes-w: So I'd need to take an arbitrary number of different comparison operators
*	robertmkennedy (~rkennedy@2600:1:961c:b266:a9e:d5f0:5e20:d785) has joined
*	sqooq has quit (Ping timeout: 264 seconds)
<ertes-w>	merijn: or a family of them
*	ranberry (~ranberry@4.35.2.66) has joined
<merijn>	ertes-w: Or make it a hard requirement to specify a comparison operator for each
<merijn>	ertes-w: I don't particularly like either of those options
<erisco>	where is the cabal executable supposed to be in Haskell Platform?
<merijn>	ertes-w: Simply requiring Eq seems less annoying
<ertes-w>	merijn: i like the hard-requirement approach =)
*	reactormonk has quit (Ping timeout: 258 seconds)
*	iAmerikan has quit (Ping timeout: 264 seconds)
<tdammers>	erisco: btw., http://programming.tobiasdammers.nl/blog/2017-10-17-object-oriented-haskell
<merijn>	ertes-w: Meh, how often do you want to parameterise over something with no Eq instance?
*	pgiarrusso_ has quit (Quit: Leaving)
*	robertkennedy has quit (Ping timeout: 248 seconds)
*	m0rphism (~m0rphism@HSI-KBW-46-223-101-41.hsi.kabel-badenwuerttemberg.de) has joined
*	chindy has quit (Remote host closed the connection)
*	zzz has quit (Remote host closed the connection)
*	hexamod has quit (Client Quit)
<erisco>	we have different ideas on a correspondence
*	chindy (~quassel@2001:bc8:4700:2300::101b) has joined
<shapr>	tdammers: nice!
<erisco>	I can't install anything because cabal is missing
*	m0rphism4 has quit (Ping timeout: 240 seconds)
<erisco>	where is it supposed to be if I install Haskell Platform 8.2.1 on Windows?
*	hexamod (~textual@a80-101-98-83.adsl.xs4all.nl) has joined
*	robkennedy has quit (Ping timeout: 260 seconds)
*	kafke has quit (Ping timeout: 252 seconds)
*	path[l] has quit (Quit: path[l])
<ertes-w>	merijn: i misread…  i mean i like the "just require Eq" approach
*	Nd-69-M (~nend@109.72.55.120) has joined
<tdammers>	shapr: it's still a bit experimental, I'm not quite sure how I want to do mutability
*	path[l] (~vsi@pool-74-99-90-203.nrflva.fios.verizon.net) has joined
<shapr>	tdammers: oh, is that a pre-release post?
<shapr>	cause I already submitted it to lobste.rs
<ertes-w>	merijn: sure, it's less flexible, but flexibility is overrated…  what you're really trying to do is to write a function with different semantics based on the existence of an instance
<erisco>	maybe I am the only one using Haskell Platform
<ertes-w>	merijn: i learned from my PHP days that you shouldn't do stuff like that =)
<tdammers>	shapr: nah, it's fine; it just doesn't cover mutability yet; I've been experimenting with that, but I'm not yet happy with it
<shapr>	ok, whew
*	ccomb has quit (Quit: Leaving.)
<ertes-w>	merijn: the 'nub' example is fine, because it's actually just a performance improvement…  no semantical difference
*	osa1 has quit (Ping timeout: 248 seconds)
*	nickolay has quit (Ping timeout: 248 seconds)
<tdammers>	close call, huh
*	jbayardo has quit (Quit: jbayardo)
*	nologo (4d35392e@gateway/web/freenode/ip.77.53.57.46) has joined
<ertes-w>	merijn: on the other hand it's really just a different algorithm with the same result…  might as well define separate functions =)
*	Jae2 (~Jae@94.18.184.65) has joined
*	mortum5 (~mortum5@188.227.78.144) has joined
<merijn>	ertes-w: The problem is that I'm processing a HList and I want to take the "Eq" using function for elements that have it and the "non-Eq" version for others
<merijn>	ertes-w: But You can't do that without branching on the presence of an Eq instance
<ertes-w>	merijn: data MaybeCtx c a where WithCtx :: c a => a -> MaybeCtx c a; WithoutCtx :: a -> MaybeCtx c a  -- what about this approach?
*	divVerent (~divVerent@xonotic/core-team/divVerent) has joined
<merijn>	ertes-w: That means I need two different versions of functions producing my HList
*	okuu (~pyon@unaffiliated/pyon) has joined
<ertes-w>	or even just (Maybe (Dict c))
*	halogenandtoast (~halogenan@132.69.30.125.dy.iij4u.or.jp) has joined
*	tinnotl has quit (Ping timeout: 240 seconds)
<Ero>	hey all
*	ptek has quit (Remote host closed the connection)
*	etorreborre (4e3474ca@gateway/web/freenode/ip.78.52.116.202) has joined
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Wed Oct 18 12:31:28 2017

**** BEGIN LOGGING AT Thu Oct 19 11:15:59 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<cement>	I'll see if I can drew (my boss) to show up to a meeting sometime
<shapr>	cool, would be fun
*	felix3 (~felixschl@122-58-219-231.jetstream.xtra.co.nz) has joined
*	zero_byte has quit (Ping timeout: 260 seconds)
<Psybur>	There a simple way to transpose conduits? :D
*	dcoutts has quit (Ping timeout: 252 seconds)
*	mivael__ (~mivael@80.70.77.145) has joined
*	mivael__ is now known as mivael
*	ub has quit (Quit: Leaving)
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<lyxia>	Psybur: I don't think there is. What happens if one conduit awaits while another yields?
<Psybur>	If all are sourced from a file would that be a problem?
*	reactormonk has quit (Ping timeout: 246 seconds)
*	felix4 (~felixschl@122-62-172-133.jetstream.xtra.co.nz) has joined
<monochrom>	If one conduit awaits, then perhaps we want the zipped conduit to await too.
<Psybur>	I suppose if I were to switch it from being sourced from a file to a rest call then yeah there might be that problem. Id probably skip that chunk though :D
<Psybur>	or wait
<Psybur>	timed wait probably
<Psybur>	If there is no builtin I suppose I have to figure out how to do this with conduits :D https://hackage.haskell.org/package/base-4.10.0.0/docs/src/Data.OldList.html#transpose
*	felix3 has quit (Ping timeout: 246 seconds)
*	tsaka__ (~torstein@84-52-234.108.3p.ntebredband.no) has joined
*	carenz_ (~arenz@52-161-16-94.dyn.cable.fcom.ch) has joined
<lyxia>	Psybur: If it's only sources then ZipSource does that
<monochrom>	transpose is quite a bit more ambitious than just zipping two inputs.
*	pikajude has quit (Quit: ZNC 1.6.5 - http://znc.in)
<Psybur>	lyxia, yeah I want to be able to have more than 2 combined
<Psybur>	Theres no zipN D:
<Psybur>	Id rather it be in a list anyway
*	pikajude (~Jude@unaffiliated/otters) has joined
*	geekosaur (allbery@dreamshell.ttuttle.net) has joined
*	crunchbang has quit (Ping timeout: 260 seconds)
*	Costar has quit (Remote host closed the connection)
*	meandi_2 is now known as meandi
<monochrom>	Aww nesting and composing a lot of ZipSources...
<Psybur>	:{
<nshepperd>	looking for transpose :: [Source m a] -> Source m [a]?
<nshepperd>	traverse ZipSource should do that
*	trevorriles (~textual@38.88.188.22) has joined
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
<mnoonan>	oof, System.Random's performance leaves much to be desired
<Psybur>	Hmm, what about sequenceSources?
<Psybur>	Wait nvm
<nshepperd>	oh yeah, that's the same thing
*	kipras`away is now known as kipras
*	cdg (~cdg@157.166.173.4) has joined
*	zzq (~zzq@46.120.114.167) has joined
*	RaquaiM8 has quit (Quit: Page closed)
<jle`>	mnoonan: yes performance wasn't really a priority for system.random
<mmaruseacph2>	mnoonan: PCG.Random
*	sushdm_ (~sushdm@dsl-hkibng22-54f8d8-238.dhcp.inet.fi) has joined
*	crobbins has quit (Remote host closed the connection)
*	crobbins (~crobbins@2602:30a:c08e:19e0:9d90:6296:ce0:7ba1) has joined
<mnoonan>	mmaruseacph2, thanks!
*	ziocroc2 (~ziocroc@151.74.111.202) has joined
*	cdg_ has quit (Ping timeout: 264 seconds)
*	yellowj (~yellowj@dgw201.neoplus.adsl.tpnet.pl) has joined
*	cdg has quit (Ping timeout: 246 seconds)
*	path[l] (~vsi@pool-74-99-90-203.nrflva.fios.verizon.net) has joined
*	path[l] has quit (Client Quit)
*	theelous3 (~theelous3@unaffiliated/theelous3) has joined
*	DTZUZO_ (~DTZUZO@S01061cabc0b131c3.vf.shawcable.net) has joined
*	leat has quit (Ping timeout: 240 seconds)
*	pimlu has quit (Remote host closed the connection)
<Psybur>	Yep, sequenceSources is what I want
<dmj`>	 @package mwc-random
<Psybur>	nshepperd, thanks for making me second guess my second guessing :D
<dmj`>	mnoonan: ^
*	path[l] (~vsi@pool-74-99-90-203.nrflva.fios.verizon.net) has joined
*	DTZUZO has quit (Ping timeout: 255 seconds)
<monochrom>	System.Random did not prioritize anything, really.
*	crobbins has quit (Ping timeout: 246 seconds)
<mmaruseacph2>	dmj`: in my benchmarks pcg was faster than mwc
*	hackebeilchen (~Peter@243-057-210-188.ip-addr.inexio.net) has joined
<monochrom>	Apart from "need something to be present".
<dmj`>	mmaruseacph2: hmm
<pie_>	so, hypothetically speaking, i just realized lazy lists let us avoid writing loops?
*	tinnotl (~tinnotl@unaffiliated/tinnotl) has joined
<monochrom>	Yes.
<monochrom>	A pro doesn't use Haskell list for data structure. But they use it for control structure.
<Psybur>	pie_, care to elaborate? :D
<Tuplanolla>	@let import Control.List
*	nicknight (~ubuntu@unaffiliated/nicknight) has joined
<lambdabot>	 .L.hs:55:1: error:
<lambdabot>	     Could not find module ‘Control.List’
<lambdabot>	     Perhaps you meant Control.Lens (from lens-4.15.4)
<monochrom>	"mapM_ print [1..10]" is my idea of "for i=1 to 10 print i".
*	alveric2 has quit (Quit: WeeChat 1.9.1)
*	augur (~augur@2600:380:8666:4cea:2950:f523:2eff:aa84) has joined
*	robertkennedy has quit (Quit: Bye)
*	darjeeling_ has quit (Ping timeout: 240 seconds)
<monochrom>	Tuplanolla: For maximum irony, Control.Lens and Data.Machine :)
<Tuplanolla>	At least I have `Control.Self`.
<monochrom>	Haha
<pie_>	" well, i found it a pain in the ass writing a loop in scheme in a way i like (well, so far), so since i know the size of my data and its not perf critical right now im just pregenerating everything and using "fancy" stuff like this scanl function, but if you dont have all your data ahead of time, that makes me think a lazy list would make that work in the general case?"
<pie_>	Psybur, ^
*	robkennedy (~rkennedy@70.102.29.251) has joined
<pie_>	monochrom, wait are you serious or being sarcastic? :P
<monochrom>	Which sentence?
<pie_>	<monochrom> A pro doesn't use Haskell list for data structure. But they use it for control structure.
<monochrom>	Serious.
<pie_>	<Tuplanolla> @let import Control.List
<pie_>	<lambdabot>      Could not find module ‘Control.List’
<Tuplanolla>	That one's less serious.
*	vvz has quit (Ping timeout: 240 seconds)
<Psybur>	pie_, I think usually sequences and vectors are used for any non trivial amount of data :D
<monochrom>	And I showed an example right after.
*	robertmkennedy (~rkennedy@2600:1:9612:698:2338:8f05:8483:385c) has joined
*	robertmkennedy has quit (Client Quit)
<pie_>	ah whoops i cant read, that was Tuplanolla :P
*	robertmkennedy (~rkennedy@63.155.27.53) has joined
<monochrom>	OK
<pie_>	ok but what if you dont actually need to use the index for anything
<monochrom>	You're referring to vector?
*	alveric1 (~LordAlver@i59F74D5A.versanet.de) has joined
<Tuplanolla>	:t replicateM
<lambdabot>	Applicative m => Int -> m a -> m [a]
<pie_>	like, just a plain while true loop or something
<Tuplanolla>	:t forever
<lambdabot>	Applicative f => f a -> f b
<Tuplanolla>	Those should do, pie_.
*	jimmyrcom_ has quit (Ping timeout: 240 seconds)
<monochrom>	Oh but the lazy list doesn't have to be [1..10]. It was a boring example.
<pie_>	though im actually using scheme so uh, im probably in the wrong place ;P
*	fishythefish (~fishythef@2620:10d:c090:180::1:3b2d) has joined
<monochrom>	Read John Hughes's "why functional programming matters" for something less trivial you put in that lazy list.
<monochrom>	(and it still acts like a control structure, a loop)
<monochrom>	(or rather, it drives a loop)
*	robkennedy has quit (Ping timeout: 252 seconds)
*	kadoban (~mud@unaffiliated/kadoban) has joined
<pie_>	i mean sure it compiles to a loop and constantly has my brain in "its inefficient...its inefficient...its inefficient..." mode but its a lot nicer to read haha
<monochrom>	And of course, if you're also saying "some loops can't be expressed in terms of lazy lists" you're also right. There are some loops I write my own recursion for.
<monochrom>	It is efficient.
<monochrom>	Using SML's list as a loop would be inefficient.
<monochrom>	But Haskel's list is not SML's list.
<Psybur>	> take 5 $ snd $ span (<5) [1..]
<pie_>	right but im not using haskell :( not that i know my way around scheme that well either
*	sarna has quit (Quit: Connection closed for inactivity)
<lambdabot>	 [5,6,7,8,9]
<monochrom>	Oh, then you should switch to Haskell!
<pie_>	its been a little easier to play with scheme but given the questions im asking at this point maybe i should >_>
<monochrom>	Scheme probably has a huge library of various loop constructs for you to choose from.
*	leat (~leat@188.162.193.28) has joined
<pie_>	monochrom, their preferred method of looping is recursion
<Psybur>	I wonder if theres a tutorial of haskell that starts people off with vectors and conduits. Like a top down approach to make it so people dont end up making really shitty applications in haskell and giving up in frustration heh
<Tuplanolla>	Optimization in Haskell is also more macroscopic than microscopic. You lose inline assembly, but gain rewrite rules etc.
<tdammers>	haskell's list is like function () { return { head: function () { return 1 }, tail: function () { return { head: function () { return 2 }, tail: function () { return ...
<monochrom>	If you want to know how Scheme programmers write loops in practice, you should ask them. Does #scheme or ##scheme exist?
*	robertkennedy (~rkennedy@2600:1:9612:698:e89b:a498:8bd1:5b61) has joined
<Tuplanolla>	At least #chicken does, monochrom.
<pie_>	monochrom, its probably not actually bad im just not used to it
<Tuplanolla>	Ask them. Their compiler is really wacky.
<pie_>	haha
<monochrom>	My guess is that "reduce" and "map" etc gets you a long way.
<pie_>	look for named let loop
<tdammers>	scheme loops are probably written in terms of call/cc
*	robertkennedy has quit (Client Quit)
*	bodisiw has quit (Quit: Leaving)
*	alveric1 has quit (Quit: WeeChat 1.9.1)
*	robertkennedy (~rkennedy@70.102.29.251) has joined
<pie_>	and of course i only now find this heh http://wiki.call-cc.org/eggref/4/loops
*	robertmkennedy has quit (Ping timeout: 246 seconds)
*	alveric1 (~LordAlver@i59F74D5A.versanet.de) has joined
<monochrom>	Yeah, those are useful.
*	robkennedy (~rkennedy@2600:1:9612:698:84d2:23e3:df46:8138) has joined
<pie_>	i uh cant actually find an example offhand
<mpickering>	lyxia: It seems to make this work I have to put all my constructors in the same Expr datatype rather than a more fine grained approach I had before
*	tinnotl has quit (Ping timeout: 246 seconds)
<pie_>	basically what ive seen is you recursively call yourself and have a parameter that keeps track of the iteration
<monochrom>	Yeah.
*	path[l] has quit (Ping timeout: 264 seconds)
*	path[l] (~vsi@199.201.64.4) has joined
<monochrom>	Scheme proves that either you stay imperative or you go all out and accept laziness.
<pie_>	idk what the thing about named lets was though
*	robertkennedy has quit (Ping timeout: 252 seconds)
<monochrom>	Because the "while" loop is only meaningful when you have a mutable variable and you keep polling its new state.
<pie_>	monochrom, im pretty sure i didnt see lazyness emphasized at all?
<lyxia>	mpickering: Oh?
<monochrom>	So if you don't have a mutable variable then you have two choices.
<mpickering>	For example, I had a constructor data Expr b a = ... App (Binder b) (Expr b a) (Expr b a)
<monochrom>	Either you have to write your own recursion, which is tiresome, which is Scheme's way.
<mpickering>	and I can't see how to implement bind for this 
<monochrom>	Or you accept laziness, so you have use a lazy list and use mapM_ or map or foldl or foldr or scanl on it, which is Haskell's way.
<mpickering>	As I have to somehow apply k to the things inside Binder and stuff the resulting Exprs into a Binder shaped hole
<mpickering>	am I thinking about this wrong?
*	jimmyrcom_ (~fold@71-11-240-211.dhcp.dntn.tx.charter.com) has joined
*	castlelore (~castlelor@cpe-76-173-200-54.hawaii.res.rr.com) has joined
*	castlelore has quit (Changing host)
*	castlelore (~castlelor@unaffiliated/castlelore) has joined
*	fishythefish has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<jle`>	mpickering: try thinking about 'join'
*	felix4 has quit (Ping timeout: 264 seconds)
*	whoisxy has quit (Ping timeout: 248 seconds)
<monochrom>	The reason writing your own recursion is tiresome is because after writing the recursion you are still not done.
<monochrom>	You have to write one more line of code for the initial call with the initial parameter.
*	detrumi (~wilco@ip56530f2a.direct-adsl.nl) has left
*	deam (uid170514@gateway/web/irccloud.com/x-eszrystjavllaswh) has joined
<monochrom>	In Haskell I just write "mapM_ print [1..10]" and I'm done.
*	fishythefish (~fishythef@2620:10d:c090:180::1:e990) has joined
<mpickering>	jle`: What exactly are you suggesting?
<monochrom>	In Scheme I have to write like "let f x = if x <= 10 then print x; f (x+1) else return ()" and I am still not done. I have to add "main = f 1"
*	iAmerikan has quit (Ping timeout: 246 seconds)
*	chaosmasttter has quit (Ping timeout: 240 seconds)
<monochrom>	And also something about the "1" and the "10" are now so far away from each other.
*	halogenandtoast has quit (Ping timeout: 260 seconds)
<monochrom>	Eager functional programming is the worst of both worlds.
<jle`>	mpickering: thinking about how you'd write an Expr b (Expr b a) -> Expr b a function
<jle`>	in a way that respects the laws
<c_wraith>	monochrom, you can theoretically fix the extra line to call it portion. (pun intended, but that probably had problems in scheme somehow) 
*	Disconnected ()
**** ENDING LOGGING AT Thu Oct 19 12:27:02 2017

**** BEGIN LOGGING AT Thu Oct 19 12:27:20 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	augur has quit (Ping timeout: 252 seconds)
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Thu Oct 19 12:28:02 2017

**** BEGIN LOGGING AT Thu Oct 19 12:28:20 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<lyxia>	mpickering: The restriction you mentioned seems to come from the Bound typeclass. it could be generalized, but in the meantime it still seems possible to encode the terms you're playing with at a similar level of granularity using Scope.
<monochrom>	Err, it's CSCB36, not CSCB63.
*	connrs (~connrs@conners.plus.com) has joined
<monochrom>	63 is the data structure one I teach.
*	jbgi (~jbgi@178-83-22-209.dynamic.hispeed.ch) has joined
*	unyu (~pyon@unaffiliated/pyon) has joined
*	Costar (~Costar@179.215.124.226) has joined
*	mohsen_ has quit (Quit: Leaving)
*	tommd (~tommd@glacier.galois.com) has joined
*	felix4 has quit (Ping timeout: 264 seconds)
*	whoisxy (~whoisxy@83.137.254.176) has joined
*	crucify_me has quit (Ping timeout: 246 seconds)
*	felix4 (~felixschl@122.58.154.222) has joined
*	slackman1 has quit (Remote host closed the connection)
*	slackman (~slackman@2c.c9.2fa9.ip4.static.sl-reverse.com) has joined
<Psybur>	What does this type signature say about the upstream type, a? slidingWindowC :: (Monad m, IsSequence seq, Element seq ~ a) => Int -> Conduit a m seq
*	henriksod (~Thunderbi@89.160.47.146) has joined
*	mizu_no_oto (~textual@74.200.44.13) has joined
*	connrs has quit (Ping timeout: 252 seconds)
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Thu Oct 19 12:34:09 2017

**** BEGIN LOGGING AT Sat Oct 21 11:26:52 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:12 2017)
*	Channel #haskell url: http://www.haskell.org/
<sm>	jkachmar: I understand your concern, but not every reader wants exercises
<jkachmar>	That's fine, but they are _objectively_ the best way to reinforce education of a novel concept.
<MarcelineVQ>	a reader might not, but a learner should :X
<stevenxl>	I am looking at the author post on reddit, and he says that it covers network programming, so hopefully helps me do websites
<stevenxl>	lol
<sm>	a long book is not objectively always the best way to teach
<jkachmar>	If you're coming from a point of knowledge, a lack of exercises is fine. If you want a cookbook that's great! And that's half of what HTAC purports itself to be.
*	towerio has quit (Ping timeout: 248 seconds)
*	bsmt (~bsmt@host-174-45-104-119.bzm-mt.client.bresnan.net) has joined
*	aarvar (~foewfoiew@50.34.105.170) has joined
*	leat (~leat@188.162.49.44) has joined
<crucify_me>	hi   I guess you can't use eta reduction with (!!) i.e.  third_elem = (!!) 2 .. you would need third_elem list = (!!) list 2 .   why is that?
<stevenxl>	I'm very much looking forward to Intermediate Haskell and Haskell Almanac. Thing is I can't wait around to learn all of this before building stuff. I'm trying to contribute to small libraries and, through that, hopefully have people better than me showing me how to improve.
<EvanR>	third_elem = flip (!!) 2
*	pera has quit (Ping timeout: 240 seconds)
*	davr0s (~textual@host86-157-68-96.range86-157.btcentralplus.com) has joined
<EvanR>	eta conversion works like f x = g y x => f = g y
<MarcelineVQ>	:t (!!)  -- eta reduction reduces the last argument, put loosely, the list is the first argument
<jkachmar>	stevenxl Sure, but I'm assuming at this point you already have some basis of knowledge that allows you to program in the language, right?
<EvanR>	your arguments are in the right order for tht
<lambdabot>	[a] -> Int -> a
<ski>	@where PIH "Programming in Haskell" by Graham Hutton in 2007-01-15,2016-09-01 at <http://www.cs.nott.ac.uk/~pszgmh/pih.html>
<lambdabot>	I know nothing about pih.
<ski>	@where+ PIH "Programming in Haskell" by Graham Hutton in 2007-01-15,2016-09-01 at <http://www.cs.nott.ac.uk/~pszgmh/pih.html>
<lambdabot>	Nice!
*	vlatkoB_ has quit (Remote host closed the connection)
<crucify_me>	they're in the right order? EvanR 
<EvanR>	you cant drop the argument 'list' , its not last
<stevenxl>	jkachmar: Yea. I mean, I still get freaked out by Monad Transformers, and I still don't know how to pass a dbConnection into my Servant handlers, but I believe there are examples that I can follow and, very slowly, tease out what is going on.
*	JeanCarloMachado has quit (Ping timeout: 264 seconds)
*	vishnix (~vishwas@97-113-46-252.tukw.qwest.net) has joined
<fresheyeball>	oh shit
<fresheyeball>	I see what it wont work
<EvanR>	youd have to flip (!!) 
<fresheyeball>	you can't have a typeclass parameterized on a type family
<ski>	@where+ books See `LYAH',`RWH',`YAHT',`HR',`PIH',`wikibook',`PCPH',`HPFFP',`HTAC',`non-haskell-books'
<lambdabot>	Okay.
<EvanR>	crucify_me: actually you could do f = (!! 2), a section
*	firstjedi has quit (Ping timeout: 240 seconds)
<fresheyeball>	class Foo (f :: k -> k) where doesn't work
<crucify_me>	interesting EvanR thanks. hold on I'm waking up
*	lukaramu has quit (Read error: Connection reset by peer)
<jkachmar>	stevenxl The way of Servant lies madness, but I still end up using it so saying as much makes me a hypocrite :P
<fresheyeball>	type family Bar a :: *
<fresheyeball>	instance Foo Bar where -- makes no sense to GHC
<stevenxl>	jkachmar: LOL. They pulled the wool over my eyes then.
<jkachmar>	stevenxl Transformers get easier with extended use though, possibly worth drilling through those chapters again and/or the Scotty exercises.
<sm>	stevenxl: for making websites, the yesod book is good
<crucify_me>	so the argument must be last unless we use that section
<jkachmar>	stevenxl Servant's type errors are absolutely hellacious. When things go wrong I usually end up commenting whole blocks out to tease out which part is actually causing the type error.
<sm>	for making web applications, anyway
<crucify_me>	ski I bought that book btw
<ski>	which of them ?
<crucify_me>	Hutton
<ski>	ok
*	ski haven't read it
<jkachmar>	It's very much trial and error, and I've been using Servant on/off for about a year at this point
*	sedeki has quit (Quit: Textual IRC Client: www.textualapp.com)
<stevenxl>	jkachmar: Yea. I understand them conceptually, and I can write me a few transformers MaybeT, StateT, ReaderT, but they are isolated, tiny examples. The real world is a different beast that you just need to go out and do it.
*	lastjedi (~lastjedi@183.83.207.184) has joined
<crucify_me>	why were you referencing it above? curious ski
<stevenxl>	hellacious? Today I Learned. Nice. 
*	lukaramu (~lukaramu@port-56096.pppoe.wtnet.de) has joined
*	robotroll (~robotroll@unaffiliated/robotroll) has joined
<jkachmar>	stevenxl Yeah, for sure. I mean your Servant dbConnection example is the perfect place to use `ReaderT`, buuuut now you've got to learn about natural transformations and some of the other stuff that Servant needs to make it happy.
<sm>	crucify_me: we were gathering haskell book recommendations
<jkachmar>	Also if you need auth, RIP in Peace
<stevenxl>	jkachmar: I'm trying to build a "production" quality to-do app. Just started it last night, because I want to see how one would write an app with haskell from beginning to end. 
<stevenxl>	https://github.com/stevenxl/todo/tree/06-add-skeleton-test-suite
<stevenxl>	It's really for my own reference, since I have a fabulously scattered brain. Remembering is hard.
<fresheyeball>	is there any way to do a typeclass lookup on an existentalized type that does not have the constrain existentialized as well?
<EvanR>	https://twitter.com/mattoflambda/status/921058216816951296
*	towerio (~towerio@137.139.199.23) has joined
<stevenxl>	At any rate, it's too nice a day to hang around inside. Gonna get myself to teh park.
<stevenxl>	talk to you another time jkachmar .
<MarcelineVQ>	EvanR: I like the transformer one a lot
*	dbmikus (~dbmikus@c-174-59-201-133.hsd1.pa.comcast.net) has joined
*	robotroll has quit (Read error: Connection reset by peer)
*	jkachmar waves
*	agjacome (~agjacome@139.47.25.214) has joined
<MarcelineVQ>	https://pbs.twimg.com/media/C8QejJ1VoAAQgDE.jpg:large
*	Icewing (~Icewing@unaffiliated/icewing) has joined
<jkachmar>	EvanR: trashlord followup here https://twitter.com/jusrin00/status/921059968362541056
*	biu (~biu@modemcable130.71-160-184.mc.videotron.ca) has joined
*	Nd-69-M has quit (Ping timeout: 240 seconds)
*	biu has quit (Client Quit)
*	Jenaf has quit (Quit: ChatZilla 0.9.93 [Firefox 56.0/20170926190823])
*	SpinTensor has quit (Quit: WeeChat 1.9)
*	oisdk has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	firstjedi (~lastjedi@183.83.207.184) has joined
*	sarna (~sarna@31.42.0.239) has joined
<kl_5>	asthma[m]  I think around 1K pages into haskellbook is about critical mass
*	zxcv1729 has quit (Disconnected by services)
*	zxcv1729 (~zxcv1729@unaffiliated/zxcv1729) has joined
*	zxcv1729 has quit (Disconnected by services)
*	lastjedi has quit (Ping timeout: 258 seconds)
*	zxcv1729 (~zxcv1729@unaffiliated/zxcv1729) has joined
*	usr1 has quit (Quit: leaving)
*	zxcv1729 has quit (Disconnected by services)
<crucify_me>	kl_5, what happens then?
*	zxcv1729_ (~zxcv1729@unaffiliated/zxcv1729) has joined
<kl_5>	crucify_me IMO you can be fairly productive working on projects around that point
<crucify_me>	kl_5, thanks, I am new to programming and after page 420 or so I switched to the Hutton book (at 350 pages)
*	zxcv1729 (~zxcv1729@unaffiliated/zxcv1729) has joined
*	tsakatsaka has quit (Quit: Page closed)
<sm>	crucify_me: that or brain explodes :)
<sm>	how do you like the hutton book
*	whitephoenix has quit (Quit: Leaving)
*	whitephoenix (~whitephoe@gateway/vpn/privateinternetaccess/whitephoenix) has joined
*	Quenty_ (uid14882@gateway/web/irccloud.com/x-vqwbtbtgqjeqevhn) has joined
*	onlyjedi (~lastjedi@183.83.207.184) has joined
<crucify_me>	yeah it was so daunting.. the hutton book is well written to be sure, however the exercises are pretty tough since I've never programmed for real
<crucify_me>	sm
<EvanR>	if your brain isnt exploding, you cant have been paying attention :)
*	oisdk (~textual@51-171-255-121-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined
<jkachmar>	asthma[m] kl_5 Imo Monad Transformers is about where I started to get productive, but I was doing "real" coding (i.e. Servant stuff) by 17 or 18 (Applicative and Monad)
*	dragon__ has quit (Ping timeout: 246 seconds)
<jkachmar>	Eh. "real" is a bad way to put that. I was doing practical application outside of the book by that point*
*	firstjedi has quit (Ping timeout: 240 seconds)
*	HMPerson1_ (~HMPerson1@128.210.107.65) has joined
<crucify_me>	like the simplest things like eta reduction question ^ .. EvanR 's explanation "   f x = g y x => f = g y  "  I have to study that now.
*	HMPerson1 has quit (Ping timeout: 240 seconds)
*	eliasr has quit (Quit: Connection closed for inactivity)
*	JeanCarloMachado (~jean@186.222.6.65) has joined
*	loamseed (~loamseed@169-231-109-19.wireless.ucsb.edu) has joined
<sm>	crucify_me: I wonder how you'd get on starting with elm
<MarcelineVQ>	that's eta reduction,  f x = g y x  can become  f = g y     your isse was that !!, your g, is in the form of g x y
*	zariuq (~zar@176-114-240-18.rychlydrat.cz) has joined
<sm>	or, going back and forth. Some people recommend learning by reading two books on a topic (simultaneously)
*	rudol has quit (Ping timeout: 260 seconds)
*	m0rphism has quit (Quit: WeeChat 1.9.1)
*	cpup (~cpup@32.218.118.157) has joined
<MarcelineVQ>	so you need to flip it to change the argument order, or use a section to provide the y ahead of time
*	m0rphism (~m0rphism@HSI-KBW-46-223-101-41.hsi.kabel-badenwuerttemberg.de) has joined
<jkachmar>	sm Ergh. Please no.
<sm>	stay out of this jkachmar :)
<jkachmar>	Learning multiple languages at once is an awful idea.
<crucify_me>	so is eta reduction simply to be elegant MarcelineVQ ? or what advantage that is based on purity, math, what-have-you ?
*	_sras_ has quit (Ping timeout: 260 seconds)
<sm>	actually elm doesn't look that good for a first time programmer, though people often say it's a good step towards haskell
<crucify_me>	somewhere on irc I heard it is poor sm
*	cpup- has quit (Ping timeout: 252 seconds)
<jkachmar>	crucify_me If you're interested in Haskell, please stick with Haskell Programming from First Principles. If you're interested in another language, that's fine too! But I'd recommend focusing your effort on learning thoroughly from good texts, and sticking with a single course of education until you've reached a good stopping point.
*	sword865 has quit (Quit: Connection closed for inactivity)
*	Quenty_ is now known as Quenty
<crucify_me>	with deep humility, whenever I hear about 'from first principles' it sounds like promotion beyond recommendation. also when I'm reading about it. why is that? jkachmar 
<EvanR>	crucify_me: sometimes the extra argument is just extraneous, or its clearer to think of some functions as defined by partial application
<EvanR>	f = map (+1)
*	Immune (~Immune@47.145.46.247) has joined
<MarcelineVQ>	crucify_me: Not sure I've given it a lot of thought, it's probably mostly to be elegant, in that you can write haskell just fine without ever using it.
<EvanR>	as opposed to, f xs = map (+1) xs, it doesnt really gain much
<jkachmar>	Since this is #haskell I'll recommend something expressive and safe like Haskell or PureScript over languages like Go or Elm, but regardless of the choice of language I'd ultimately implore people to stick with it until they've learned something to take away from the endeavor. Hopping around between languages, or even textbooks for languages, is an easy way to spin your wheels and burnout.
<EvanR>	Go o_O
<jkachmar>	crucify_me What do you mean "promotion beyond recommendation". The name's just meant to say that there's no prior knowledge needed to learn from this text.
*	darjeeling_ (~darjeelin@205.175.97.215) has joined
<MarcelineVQ>	there's CAFs and combinators and other ideas that are related to eta reduced functions, but those aren't useful topics to what you're working on
*	srhb has quit (Quit: Quit)
*	heisenbug (~ggreif@p5491A810.dip0.t-ipconnect.de) has joined
*	tommd (~tommd@75-164-202-86.ptld.qwest.net) has joined
<crucify_me>	jkachmar, good point I do feel like I've spun my wheels but the hutton book gels with me, its very clear baby-steps.  jkachmar I didn't mean the title 
*	CoderPuppy (~cpup@32.218.118.171) has joined
<jkachmar>	I just ended up wasting time on things like LYAH when I was starting out, and I'd rather more people not waste their time when we actually have a good educational resource available to us now.
*	oisdk has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	B14641 has quit (Quit: WeeChat 1.9)
<sarna>	hey, can somebody help me with some simple code? it's the second day of advent of code 2015, 24 lines
*	heisenbug has quit (Client Quit)
<sarna>	my math is off but I don't know where
*	cpup has quit (Ping timeout: 264 seconds)
<crucify_me>	jkachmar, thanks kindly. I really don't understand programming much at all, I'm not coming from another language except a little scheme, but you can imagine how an 1800 page book that turns one into a programmer in haskell could seem daunting.
*	osa1 has quit (Ping timeout: 246 seconds)
<jkachmar>	crucify_me Kind of. I mean ostensibly in order to _barely_ be considered an engineer, you need 4 years of university, and really even then you're not actually qualified.
*	kiwi_test (5e022ffe@gateway/web/cgi-irc/kiwiirc.com/ip.94.2.47.254) has joined
<kl_5>	jkachmar yes that was about where I was too
<kl_5>	(applicative & monad)
*	cranej (~cranej@180.164.157.16) has joined
<EvanR>	to be an engineer you only need to read 1800 pages?
<EvanR>	what have i been doing ...
<kl_5>	crucify_me i think that's fair to say it's a bit daunting
*	kiwi_test has quit (Client Quit)
<MarcelineVQ>	You don't need to read them to be an engineer, you just need to have them, you just check the chart when you're not sure
*	Philonous (~Philonous@unaffiliated/philonous) has joined
<kl_5>	crucify_me but look at it this way, 1) it can be done, just step by step 2) as we were saying, once you're at around 900-1000 you can start working on things
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<kl_5>	seems like a lot of pages, but probably doable in a months, or a few months if you're working gradually
<crucify_me>	I thought the hutton book I could do in a few months, then attack *the* book
*	whitephoenix0 (~whitephoe@76.121.130.242) has joined
<kl_5>	is hutton easier than first principles? (haven't read it)
<crucify_me>	a month? kl_5 I must confess, I'm 55 years old
<kl_5>	it's good to see totally new people taking a stab
*	robotroll (~robotroll@unaffiliated/robotroll) has joined
<crucify_me>	at 55, no one does anything in a month
<kl_5>	it depends how much of your time is set aside for it
<crucify_me>	time I have a lot of. and you people are very encouraging thanks !
<kl_5>	whether it's a weekend thing, full-time, etc.
<kl_5>	it doesn't really matter as long as you're making progress
<kl_5>	what were you doing before this, and how did you come across haskell as a first language?
<crucify_me>	I try to spend 2 hours a day. But I get sidetracked a lot with little things, like why is it that way? sometimes I put in 3 hours a day
*	Boarders (56855730@gateway/web/freenode/ip.86.133.87.48) has joined
*	cranej has quit (Ping timeout: 240 seconds)
<kl_5>	that's pretty good
<crucify_me>	I read an article on what the y-combinator was, and I started scheme since SICP was such a famous book
*	kagcc has quit (Ping timeout: 246 seconds)
<crucify_me>	but scheme got into linear algebra and combinatorics and I bailed
<crucify_me>	*SICP did
<kl_5>	still consider myself a beginner in spite of "playing" with it for a while now
*	alex`` (~alex@2a01cb000bb310000e31f98b4cdf4eae.ipv6.abo.wanadoo.fr) has joined
*	whitephoenix has quit (Ping timeout: 248 seconds)
*	samrat_ has quit (Ping timeout: 248 seconds)
*	inhortte (~polaris@31.4.242.103) has joined
<crucify_me>	I'm 55, but I'm unique in that I'm a taoist yogi type and don't age much  har har
*	xcmw (~textual@2605:a000:132b:20ac:34c5:6905:b1b1:2e69) has joined
*	dbmikus has quit (Ping timeout: 258 seconds)
<crucify_me>	my memory is actually improving lately
<kl_5>	are you coming from a math background? it's unusual for a non-programmer to jump in via y-combinator/sicp/haskell
<jkachmar>	crucify_me Personally, I'd still recommend going with the HPfFP. At 2 hours per day you should be able to get through 1 chapter per week roughly.
<jkachmar>	I attended a study group that was keeping to the 1 chapter per week schedule, and I was certainly less studious than 2 hours per day
<kl_5>	same here
<crucify_me>	jkachmar, where in the world did you find a study group?
<kl_5>	wonder if taoists are overrepresented in Haskell
<crucify_me>	:)
<kl_5>	are you in a city? tend to find them there
*	lastjedi (~lastjedi@183.83.207.184) has joined
<jkachmar>	crucify_me A friend started one in NYC, some of the people who finished up last year are looking to restart it.
<kl_5>	this is an approximation of a study group, although it'd probably work better with a schedule
*	eazzyy_life (~eazzyy_li@188.188.138.146) has joined
*	robotroll has quit (Read error: Connection reset by peer)
*	oisdk (~textual@51-171-255-121-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined
<crucify_me>	I live in Berkeley CA and work at UCB. I haven't been able to find *anyone* to help me in person. people are intensely busy and, er, rarefied 
<kl_5>	hehe, probably a decent concentration of haskellers there
*	Nd-69-M (~nend@109.72.55.120) has joined
*	onlyjedi has quit (Ping timeout: 240 seconds)
<kl_5>	but they're probably doing startups or grad school
<kl_5>	or google
<crucify_me>	never met anyone who know haskell, by admission anyway
<crucify_me>	the irc is great, sometimes I get it right away, but as a venue it doesn't replace in person. I find it hard to keep up between getting help here and putting it into ghci etc
<kl_5>	you're not going to run into them on the street
<kl_5>	there's a pretty active twitter community
*	eazzyy_life has quit (Quit: eazzyy_life)
<crucify_me>	kl_5, really I need to join twitter then.
*	olof (~olof@nat-130-245-192-26.resnet.stonybrook.edu) has joined
*	firstjedi (~lastjedi@183.83.207.184) has joined
*	conal (~conal@209.58.139.26) has joined
<kl_5>	crucify_me don't *have* to but it's one more venue, it's pretty easy to find the hub of haskell people there
*	mentos1386 (~mentos138@2001:1470:faca:510:c34c:f69:bdd3:9404) has joined
*	jkachmar has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	sdothum has quit (Quit: ZNC 1.6.5 - http://znc.in)
<fresheyeball>	darn this problem
<fresheyeball>	is there no way to conditionally use a typeclass at runtime?
<fresheyeball>	as in something like
<fresheyeball>	case magic (Proxy :: Proxy (Show a) of
*	codesoup (~codesoup@CPE00fc8de45853-CM00fc8de45850.cpe.net.cable.rogers.com) has joined
*	conal has quit (Client Quit)
<fresheyeball>	  Just Dict -> show x
<fresheyeball>	  Nothing -> "no show instance"
*	lastjedi has quit (Ping timeout: 248 seconds)
<fresheyeball>	?
*	sdothum (~znc@108.63.132.219) has joined
*	TipsyMe has quit (Quit: TipsyMe)
<geekosaur>	not at all easily. I think dmwit has a hack to reify dictionaries for inspection, but in general the typesystem tries to prevent this because it makes the typesystem inconsistent
*	pera (~pera@unaffiliated/pera) has joined
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
<fresheyeball>	geekosaur: Exinst got me real close
*	mentos1386 has quit (Client Quit)
*	djapo (~archie@unaffiliated/djapo) has joined
<fresheyeball>	dmwit: you around?
<fresheyeball>	I need Dict reification magic
<geekosaur>	basically, if you can see the machinery then you can interfere with it, and now you can do things like use multiple Ord instances to build a Map --- in effect hiding multiple maps inside of it or otherwise deranging it
<fresheyeball>	geekosaur: I don't see how I would do that, or why it's a risk
*	mentos1386 (~mentos138@2001:1470:faca:510:8aa2:c795:16c:553c) has joined
*	conal (~conal@209.58.139.26) has joined
<fresheyeball>	Maps have a concrete key
<geekosaur>	there's one example that is already unavoidable: try storing NaN in a Map Double whatever
<geekosaur>	if you can swap Ord instances when calling Map.insert to one that compares reverse, you get one Map that secretly has two inside it
*	towerio has quit (Ping timeout: 258 seconds)
*	rblaze (~blaze@209.6.152.108) has joined
<fresheyeball>	I don't think so
<fresheyeball>	because you would have the previous instance in scope
<fresheyeball>	it would be overlapping
*	hsk3 has quit (Quit: Textual IRC Client: www.textualapp.com)
<geekosaur>	but you can only access the second if you do the lookup with the reversed Ord instance by reifying the dictionary passed to Map.lookup and replacing its Ord instance functions with the reversed ones
<fresheyeball>	and so you would need a newtype
<crucify_me>	kl_5, et al   really appreciate your time 
<fresheyeball>	which would be a different type
<geekosaur>	you really need to look at what dmwit did. this *avoids* that
<geekosaur>	it breaks the typesystem
<fresheyeball>	Anyway
*	eazzyy_life (~eazzyy_li@188.188.138.146) has joined
<geekosaur>	which is why the typesystem tries to prevent it, and dmwit had to use hackery to get at the machinery
*	rblaze has quit (Remote host closed the connection)
<fresheyeball>	I have singleton of type `x :: Sing mt`
<fresheyeball>	err
<kl_5>	kl_5 no problem good luck with the learning
<fresheyeball>	`x :: Sing (mt :: ModuleType)`
<fresheyeball>	and a type family
<EvanR>	do we have an extension to construct and pass dictionaries explicitly
<geekosaur>	not as such but you can combine existing extensions to make the dictionary visible, or create your own and then 'sink' it into an expression
<fresheyeball>	`type family Mod2Tmp (mt :: ModuleType) :: (t :: TemplateType)`
<fresheyeball>	There is an instance of typeclass Foo for all members of TemplateType
<fresheyeball>	so I should be able to use that singleton
<fresheyeball>	to bring Foo into scope
<fresheyeball>	for (Mod2Tmp mt :: TemplateType)
*	oisdk has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<fresheyeball>	I believe the type system wont let me
*	toblorone has quit (Remote host closed the connection)
<fresheyeball>	because I have not proven that there is an instance of Foo for (Mod2Tmp mt)
*	HMPerson1__ (~HMPerson1@128.211.64.90) has joined
*	CelticFrost has quit (Quit: Leaving)
*	aarvar (~foewfoiew@50.34.105.170) has left
*	toblorone (~toblorone@172.58.91.142) has joined
*	sarna has quit (Quit: Leaving)
<fresheyeball>	it could be the case (though it's not) that some of `Mod2Tmp mt` do not have an isntance of Foo
*	CelticFrost (~Celticfro@63-225-247-161.hlrn.qwest.net) has joined
<geekosaur>	typeclasses are open
<fresheyeball>	still I can't figure out how to get out of this situation
<geekosaur>	you can't prove you have all instances because someone could add one later
<fresheyeball>	Right, I know
<fresheyeball>	I just need to prove that there is an instance for `Mod2Tmp mt`
*	oisdk (~textual@51-171-255-121-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined
*	thirteenpeople_ (~thirteenp@unaffiliated/thirteenpeople) has joined
<fresheyeball>	geekosaur: actually this type class is closed, since `TemplateType` is finite ADT, and `Foo :: (t :TT emplateType) -> Constraint`
*	HMPerson1_ has quit (Ping timeout: 248 seconds)
*	towerio (~towerio@137.139.199.23) has joined
<fresheyeball>	rrr
<fresheyeball>	`Foo :: (t :: TemplateType) -> Constraint`
<crucify_me>	why is the last else statement required here? http://lpaste.net/359429
<fresheyeball>	crucify_me: because what if x == False?
*	TipsyMe (~TipsyMe@50-50-238-125.waus.wi.frontiernet.net) has joined
<fresheyeball>	we would not progress to the inner if clause
<iqubic>	wht's the best resource to recommend to a Haskell noob who wants to learn haskell?
*	dan_f has quit (Quit: dan_f)
*	toblorone has quit (Ping timeout: 255 seconds)
<iqubic>	@learnhaskell
<lambdabot>	Unknown command, try @list
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<iqubic>	@where learnhaskell
<lambdabot>	https://github.com/bitemyapp/learnhaskell
*	eazzyy_life (~eazzyy_li@188.188.138.146) has left ("eazzyy_life")
<crucify_me>	so that is for the first if statement fresheyeball ? 
<fresheyeball>	crucify_me: right
<crucify_me>	that bookends the first one?
*	alfredo has quit (Quit: Textual IRC Client: www.textualapp.com)
<crucify_me>	ok thanks
<fresheyeball>	all if statements must have a `then` and an `else`
<fresheyeball>	crucify_me: otherwise, the function is not total
*	iqubic has quit (Remote host closed the connection)
*	tempeh (~ryan@69.202.138.82) has joined
<fresheyeball>	crucify_me: also, just fyi
<fresheyeball>	technically Haskell does not have "statements"
<fresheyeball>	so it's an `if` expression
*	contiver (~contiver@181.29.33.67) has joined
<crucify_me>	excellent thanks I did read that 
<fresheyeball>	now that said
<fresheyeball>	your code can be much more elegant
<crucify_me>	yeah its a book example to use if/then
<fresheyeball>	oic
<crucify_me>	it goes on from there
<fresheyeball>	ok cool
<crucify_me>	may I inquire about your nick fresheyeball ? it's funny
<fresheyeball>	oh sure'
<fresheyeball>	I've had it since 5th grade, when I had to find an email address in yahoo for school
<fresheyeball>	I didn't want mine to have lots of ugly numbers and such after it
<fresheyeball>	in those days everyone was on yahoo
<fresheyeball>	and all the names where taken
*	louispan (~textual@14-203-219-236.static.tpgi.com.au) has joined
<fresheyeball>	I spent hours trying to find one that was not taken
<crucify_me>	except fresheyeball
<fresheyeball>	yup, that was the one I found
<fresheyeball>	then with life online, I've needed to pick a name many times
<fresheyeball>	and I don't want to remember different ones
<fresheyeball>	lucky for me, no one has ever picked fresheyeball except me
<crucify_me>	nice I have chastise_me and n_blownapart. it says a lot about a person since its all we have to go on here!
<fresheyeball>	I standardized accross all accounts :)
<fresheyeball>	and now I am stuck
<fresheyeball>	can't escape it for a better one
<fresheyeball>	would be a ton of work to back out
<crucify_me>	may you always have 20/20 or better
<fresheyeball>	haha
*	loamseed has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	kl_5 has quit (Quit: Page closed)
*	Immune has quit (Read error: Connection reset by peer)
*	Associat0r (~Associat0@31-151-60-131.dynamic.upc.nl) has joined
*	Associat0r has quit (Changing host)
*	Associat0r (~Associat0@unaffiliated/associat0r) has joined
*	pera has quit (Ping timeout: 258 seconds)
*	Immune (~Immune@47.145.46.247) has joined
*	davr0s (~textual@host86-157-68-96.range86-157.btcentralplus.com) has joined
*	justanotheruser has quit (Ping timeout: 260 seconds)
<Cale>	Well, the parts of a do-block are called "statements" in the Report. But there's no special "if" statement.
*	mmhat has quit (Quit: WeeChat 1.9.1)
*	fr33domlover has quit (Quit: fr33domlover)
*	oisdk has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	fr33domlover1 (~fr33domlo@fsf/member/fr33domlover) has joined
*	fr33domlover1 is now known as fr33domlover
*	oisdk (~textual@51-171-255-121-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined
*	cpup (~cpup@32.218.118.207) has joined
*	ccomb (~ccomb@46.191.24.93.rev.sfr.net) has joined
*	oisdk has quit (Client Quit)
*	CoderPuppy has quit (Ping timeout: 240 seconds)
*	valentinbuza (~valentinb@unaffiliated/valentinbuza) has joined
*	mivael has quit (Ping timeout: 240 seconds)
*	heisenbug (~ggreif@p5491A810.dip0.t-ipconnect.de) has joined
*	nicknight (~ubuntu@unaffiliated/nicknight) has left ("WeeChat 0.4.2")
*	sQVe has quit (Quit: Bye!)
*	toblorone (~toblorone@172.58.91.142) has joined
*	towerio has quit (Ping timeout: 246 seconds)
*	srhb (~ident@194.61.211.130.bc.googleusercontent.com) has joined
*	toblorone has quit (Ping timeout: 248 seconds)
<crucify_me>	its always something: I named a function (&&') but get an error on the second parenthesis; I've been using ' all along.. (&&>) works fine what's the beef?
<crucify_me>	(&&') :: Bool -> Bool -> Bool
*	Deadhandd is now known as deadhand
*	deadhand is now known as Deadhand
<crucify_me>	is that conflicting with some haskell def?
*	azahi (~azahi@unaffiliated/azahi) has joined
<Cale>	' is considered a non-symbol character for the purposes of identifiers
<Cale>	So that you can name things like foo'
*	towerio (~towerio@137.139.199.23) has joined
<Cale>	(as such, it can't belong to infix names)
<hpc>	conanO'Brian
*	fr33domlover has quit (Ping timeout: 240 seconds)
<crucify_me>	strange Cale.. oh the infix nature is the problem, ok
<hpc>	it's also like digits in that you can't start an identifier with it
<crucify_me>	thanks
<crucify_me>	I like (&&>) anyway
*	fr33domlover1 (~fr33domlo@fsf/member/fr33domlover) has joined
*	fr33domlover1 is now known as fr33domlover
*	CoderPuppy (~cpup@32.218.118.225) has joined
<mniip>	@let times1'024 = (* 1024)
<lambdabot>	 Defined.
*	JeanCarloMachado has quit (Ping timeout: 240 seconds)
*	cpup has quit (Ping timeout: 255 seconds)
*	erikd (~erikd@hendrix.mega-nerd.net) has joined
*	doodlehaus (~doodlehau@71-89-72-8.dhcp.bycy.mi.charter.com) has joined
*	thirteenpeople_ has quit (Ping timeout: 246 seconds)
*	tempeh has quit (Quit: WeeChat 1.9)
*	conal has quit (Quit: Computer has gone to sleep.)
*	oisdk (~textual@51-171-255-121-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined
*	Icewing has quit (Remote host closed the connection)
*	jb55 has quit (Ping timeout: 260 seconds)
*	conal (~conal@209.58.139.26) has joined
*	doodlehaus has quit (Ping timeout: 248 seconds)
*	doodlehaus (~doodlehau@71-89-72-8.dhcp.bycy.mi.charter.com) has joined
*	oisdk has quit (Ping timeout: 240 seconds)
*	dustmote (~dustmote@2601:645:4101:2270:dd35:91a8:658:6874) has joined
<crucify_me>	mniip thanks how is that valid then ? (went to store)
<mniip>	like hpc said, ' is most similar to a digit
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	thirteenpeople_ (~thirteenp@unaffiliated/thirteenpeople) has joined
*	tommd has quit (Ping timeout: 252 seconds)
<crucify_me>	ok I missed that thanks
*	coot____________ has quit (Quit: coot____________)
*	Destol has quit (Quit: leaving)
*	inhortte has quit (Ping timeout: 258 seconds)
*	thirteenpeople_ has quit (Ping timeout: 248 seconds)
*	dustmote has quit (Quit: bye)
*	doodlehaus has quit (Remote host closed the connection)
*	inhortte (~polaris@31.4.242.220) has joined
*	hackebeilchen (~Peter@243-057-210-188.ip-addr.inexio.net) has joined
*	lastjedi (~lastjedi@183.83.215.230) has joined
*	bdTaylor has quit (Ping timeout: 240 seconds)
*	thirteenpeople_ (~thirteenp@unaffiliated/thirteenpeople) has joined
*	firstjedi has quit (Ping timeout: 240 seconds)
*	govg has quit (Ping timeout: 240 seconds)
*	cyborg-one (~cyborg-on@185.23.104.191) has joined
*	localhorse_ has quit (Read error: Connection reset by peer)
*	localhorse_ (~me@2a02:810c:c7c0:5d98:6866:b9c4:fd8f:5923) has joined
*	govg (~govg@unaffiliated/govg) has joined
*	fendor (~fendor@178.115.131.34.wireless.dyn.drei.com) has joined
*	govg has quit (Ping timeout: 240 seconds)
*	firstjedi (~lastjedi@183.83.207.184) has joined
*	staafl (~staafl@95-42-142-240.ip.btc-net.bg) has joined
*	staafl has quit (Read error: Connection reset by peer)
*	mentos1386 has quit (Remote host closed the connection)
*	motersen (~user@x55b1585f.dyn.telefonica.de) has joined
*	mentos1386 (~mentos138@2001:1470:faca:510:c34c:f69:bdd3:9404) has joined
*	SchwarzeLocke1 has quit ()
*	bcoppens_ is now known as bcoppens
*	lastjedi has quit (Ping timeout: 240 seconds)
*	towerio has quit (Ping timeout: 240 seconds)
*	Sonderblade (~fack@h-52-183.A157.priv.bahnhof.se) has joined
*	tommd (~tommd@75-164-202-86.ptld.qwest.net) has joined
*	louispan has quit (Quit: louispan)
*	toblorone (~toblorone@172.58.91.142) has joined
*	ccomb has quit (Ping timeout: 248 seconds)
<tobiasBora>	Hello,
<tobiasBora>	I think to rememember that there is an OS that work in a functionnal way
<tobiasBora>	and that is based on a tool that you can install on any linux
*	jb55 (~jb55@184.68.162.218) has joined
<tobiasBora>	and that this tool lets you install locally any file for a given user
<tobiasBora>	do you know the name of this program ?
*	alpounet (~alpounet@h5-152-210-244.host.redstation.co.uk) has joined
*	louispan (~textual@14-203-219-236.static.tpgi.com.au) has joined
<EvanR>	nix ?
*	ons has quit (Quit: ZNC 1.6.3+deb1 - http://znc.in)
<Rembane>	Lisp machine OS?
<lassulus>	tobiasBora: nixos.org
*	Destol (~Destol@dsl-173-206-181-227.tor.primus.ca) has joined
<tobiasBora>	great, thank you !
*	DTZUZO (~DTZUZO@S0106bcd16584b0aa.vs.shawcable.net) has joined
*	tommd has quit (Ping timeout: 248 seconds)
<lassulus>	there is also #nixos on freenode and https://nixos.wiki
*	saurabhn_ has quit (Remote host closed the connection)
*	chaosmasttter has quit (Quit: WeeChat 1.9.1)
*	toblorone has quit (Ping timeout: 248 seconds)
*	ons (~olof@helios.knark.io) has joined
*	towerio (~towerio@137.139.199.23) has joined
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	takuan has quit (Remote host closed the connection)
*	tommd (~tommd@75-164-202-86.ptld.qwest.net) has joined
*	sleffy has quit (Ping timeout: 252 seconds)
*	{emptyset} (theaurisc@c-73-222-75-3.hsd1.ca.comcast.net) has joined
*	bsrm (~ss@188.226.169.62) has joined
*	inhortte has quit (Ping timeout: 248 seconds)
*	Quenty has quit (Quit: Connection closed for inactivity)
<monochrom>	Lisp OS would not be a functional OS. It would just be an "everything is a list" OS. The functionalness of Lisp was an afterthought.
*	nickolay_ has quit (Ping timeout: 240 seconds)
<TommyC>	Emacs is the only Lisp OS that I need.
*	TommyC runs
*	louispan has quit (Quit: louispan)
*	olof has quit (Ping timeout: 248 seconds)
*	soniku has quit (Ping timeout: 246 seconds)
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	gacepa has quit (Quit: Connection closed for inactivity)
*	JeanCarloMachado (~jean@186.222.6.65) has joined
<geekosaur>	as opposed to the unix 'everything is a string' OS?
*	mentos1386 has quit (Quit: mentos1386)
<EvanR>	a bytestring
*	mentos1386 (~mentos138@2001:1470:faca:510:c34c:f69:bdd3:9404) has joined
<geekosaur>	true
*	louispan (~textual@14-203-219-236.static.tpgi.com.au) has joined
*	agjacome_ (~agjacome@139.47.13.241) has joined
<EvanR>	everything is an object, a function, a set, a morphism
*	agjacome has quit (Ping timeout: 246 seconds)
*	inhortte (~polaris@31.4.242.172) has joined
<ski>	@quote everything.is.actually
<lambdabot>	quicksilver says: It's also the same thing as the Yoneda lemma.  That's the thing about maths. Everything is actually the same.
*	cpup (~cpup@32.218.119.1) has joined
<mniip>	1508620495 [00:14:55] <monochrom> Lisp OS would not be a functional OS. It would just be an "everything is a list" OS. The functionalness of Lisp was an afterthought.
<mniip>	me and a friend are coming up with a LISP CPU
<mniip>	funnily,
<mniip>	everything is cons
<mniip>	the heap, the stack, the machine code
*	CoderPuppy has quit (Ping timeout: 240 seconds)
<geekosaur>	so, you;re reinventingt he cpu lisp was originally developed on?
*	Boarders has quit (Quit: Page closed)
*	Psybur (~broheim@pool-108-44-203-65.clppva.fios.verizon.net) has joined
<EvanR>	you dont need cons... just use lambdas!
<monochrom>	It is an obvious thing that a lot of people can reinvent.
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
<monochrom>	"car" and "cdr" were assembly-level names.
<mniip>	geekosaur, hmm, linky?
*	conal has quit (Quit: Computer has gone to sleep.)
<geekosaur>	http://www.iwriteiam.nl/HaCAR_CDR.html for one
<monochrom>	Namely, the "a" there stood for "address", and the "r" there stood for "register".
*	aarvar (~foewfoiew@4.14.242.135) has joined
<geekosaur>	basically CAR was one half of an index register, CDR the other half, representing an address and an offset (decrement)
<EvanR>	do people pronounce CDR in some wacky way
*	conal (~conal@209.58.139.26) has joined
<monochrom>	Oh people have ingenious ways to pronounce CDR, SQL, SCSI, and Tcl/Tk. I personally want to hear them pronounce PCMCIA one day.
<mniip>	geekosaur, no on that cpu's instruction set
*	ski . o O ( "cudder" )
<monochrom>	Perhaps like "pokemoncia"?
<geekosaur>	ski, but then you have to ask how they pronounce cadr and/or cddr :p
<EvanR>	the pulse code modulation central intelligence agency
*	ski . o O ( <https://en.wikipedia.org/wiki/PCLSRing> )
<ski>	geekosaur : simply stutter more for the latter one
<geekosaur>	mniip, I have a vague memory that the CPU in question was IBM 604, but I don;t trust that recollection much
<geekosaur>	some IBM minicomputer architecture for the initial implementation though
*	dustmote (~dustmote@2601:645:4101:2270:dd35:91a8:658:6874) has joined
*	thirteenpeople_ has quit (Ping timeout: 240 seconds)
*	CoderPuppy (~cpup@32.218.119.6) has joined
<mniip>	geekosaur, that looks like a von-neumann machine to me
<mniip>	well, I mean,
<mniip>	we have a more LISP-y ISA
<mniip>	our instructions are CONS, CAR, CDR, SETCAR, SETCDR, STACK, CALL, RET,
<mniip>	and just a tiny bit of arithmetic
*	romanix has quit (Quit: Leaving)
<EvanR>	lisp machines
<monochrom>	Oh! "IS" means "instruction set" not "industry standard" :)
<monochrom>	(Remember the predecessor of PCI? :) )
*	doomrobo (~doomrobo@0587344362.wireless.umich.net) has joined
*	doomrobo has quit (Changing host)
*	doomrobo (~doomrobo@unaffiliated/doomrobo) has joined
<mniip>	monochrom, Iosiph Stalin
*	cpup has quit (Ping timeout: 260 seconds)
<monochrom>	:S
<geekosaur>	mniip, that's fine, it's just the microcode level for the macrocode >.>
<EvanR>	was there a soviet lisp ?
<geekosaur>	or, if you prefer, RISC underneath CISC
<monochrom>	This Halloween, are you going to dress up as Stalin to scare people? >:)
<mniip>	geekosaur, yeah see we have nothing under the CONS/CAR/CDR
<mniip>	they're the fundamental instructions
<mniip>	there's no "array of words" memory
<mniip>	only the heap
<monochrom>	"It's silicon lasagna all the way down"
<mniip>	hardware allocated and refcounted
<EvanR>	ref counting o_O
*	guillaum2 (~guillaume@78.194.3.88) has joined
<mniip>	yes!
<EvanR>	so you lose loops of memory until a reboot
*	dustmote has quit (Quit: bye)
<mniip>	I'm currently thinking of how to make the GC incremental
<mniip>	why yes
<mniip>	you should be careful!
<guillaum2>	Hi there. I recall having read something about the fact that a thunk can be evaluated many times in a concurrency context (for example, two threads who want to evaluate the thunk at the same time). I'm unable to find a reference to this behavior, do you have a better memory than me?
*	aarvar has quit (Ping timeout: 248 seconds)
<EvanR>	is memory mutable
<mniip>	yes
<mniip>	SETCAR/SETCDR
*	biglama has quit (Remote host closed the connection)
*	Deide has quit (Quit: Seeee yaaaa)
<freeman42x>	is there any `skipWhile` function? I can only find `takeWhile`. `skipWhile` would skip all the elements while a condition is true and then return everything after the condition becomes false
<mniip>	EvanR, I've had some example assembly somewhere
<monochrom>	Perhaps dropWhile.
<monochrom>	But really, the doc of dropWhile is right next to the doc of takeWhile.
<freeman42x>	 > Perhaps dropWhile.
<freeman42x>	yup, cheers
*	geekosaur is now imagining nconc as a machine primitive...
*	towerio has quit (Ping timeout: 248 seconds)
<mniip>	nconc?
*	saurabhnanda (~saurabhna@42.106.31.129) has joined
*	systemfault has quit (Quit: Bye!)
<geekosaur>	maclisp function that setcdr-s the tail of a list to its head, producing a cycle
<mniip>	ah
<mniip>	hmm, is piratepad.net down for anyone else...
*	doomrobo has quit (Quit: Leaving)
*	wollw has quit (Ping timeout: 246 seconds)
<EvanR>	an infinite list which has been fully evaluated...
<EvanR>	head explode
*	towerio (~towerio@137.139.199.23) has joined
*	toblorone (~toblorone@172.58.91.142) has joined
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
*	fendor has quit (Read error: Connection reset by peer)
*	hiratara has quit (Ping timeout: 255 seconds)
*	inhortte has quit (Quit: Leaving.)
*	firstjedi has quit (Ping timeout: 248 seconds)
*	mnoonan_ (~mnoonan@cpe-69-201-46-148.twcny.res.rr.com) has joined
*	aarvar (~foewfoiew@4.14.242.135) has joined
*	hiratara (~hiratara@240f:7:4708:1:51b8:ad81:ec3e:a212) has joined
*	Associat0r_ (~Associat0@31-151-60-131.dynamic.upc.nl) has joined
*	srhb has quit (Quit: Quit)
*	Associat0r has quit (Ping timeout: 240 seconds)
*	JappleAck has quit (Quit: Leaving)
*	rick-sanchez has quit (Read error: Connection reset by peer)
*	raichoo has quit (Ping timeout: 240 seconds)
*	mnoonan_ has quit (Quit: mnoonan_)
*	iAmerikan has quit (Quit: WeeChat 1.5)
*	tommd has quit (Ping timeout: 258 seconds)
*	alex`` has quit (Quit: WeeChat 1.9.1)
<Gurkenglas>	http://downforeveryoneorjustme.com/piratepad.net (yes)
*	poligen (~poligen@114-33-207-217.HINET-IP.hinet.net) has joined
*	incog has quit (Ping timeout: 248 seconds)
*	wollw (~rshere@108-208-193-216.lightspeed.sntcca.sbcglobal.net) has joined
*	xekt0r (~hector@190-203-248-12.dyn.dsl.cantv.net) has joined
*	tobloron_ (~toblorone@172.58.91.142) has joined
*	bigos (~jacek@cpc103102-ward12-2-0-cust346.10-2.cable.virginm.net) has joined
*	poligen has quit (Remote host closed the connection)
*	henriksod (~Thunderbi@89.160.47.146) has joined
*	toblorone has quit (Ping timeout: 258 seconds)
*	motersen has quit (Quit: rcirc on GNU Emacs 25.3.1)
*	wollw has quit (Ping timeout: 248 seconds)
*	dustmote (~dustmote@c-67-188-38-146.hsd1.ca.comcast.net) has joined
*	srhb (~ident@194.61.211.130.bc.googleusercontent.com) has joined
*	mentos1386 has quit (Quit: mentos1386)
*	DTZUZO has quit (Ping timeout: 258 seconds)
*	sleffy has quit (Ping timeout: 240 seconds)
*	marr (~ccc@87-205-254-96.adsl.inetia.pl) has joined
*	tommd (~tommd@75-164-202-86.ptld.qwest.net) has joined
*	tobloron_ has quit (Ping timeout: 248 seconds)
*	TipsyMe has quit (Quit: TipsyMe)
*	hiratara has quit (Quit: ZNC - http://znc.in)
*	louispan has quit (Quit: louispan)
*	jb55 has quit (Ping timeout: 248 seconds)
*	hiratara (~hiratara@240f:7:4708:1:d4f4:6418:c14f:9fab) has joined
*	simukis has quit (Ping timeout: 248 seconds)
*	tommd has quit (Ping timeout: 248 seconds)
*	towerio has quit (Ping timeout: 260 seconds)
*	dustmote has quit (Remote host closed the connection)
*	lkg (4945fe91@gateway/web/freenode/ip.73.69.254.145) has joined
*	thirteenpeople_ (~thirteenp@unaffiliated/thirteenpeople) has joined
<lkg>	any checking using Proxy is going to be a runtime check - is this correct?
*	louispan (~textual@14-203-219-236.static.tpgi.com.au) has joined
<geekosaur>	bzuh? Proxy is a carrier for a type with "no" runtime value (actually, as a value it is equivalent to ())
*	ptek is now known as ptek_not_here
*	ptek_not_here is now known as ptek
<geekosaur>	as such it is a compile time / typechecker thing, with the runtime minimized in a way that should optimize out
*	ptek is now known as ptek_not_here
*	ptek_not_here is now known as ptek
<geekosaur>	Typeable typeclass is an example of something that is runtime, since it (potentially) has to be resolved by use of a runtime typeclass dictionary
*	ptek is now known as ptek_not_here
*	ptek_not_here is now known as ptek
*	maheshpec (~mahesh@ip68-231-99-16.ph.ph.cox.net) has joined
*	towerio (~towerio@137.139.199.23) has joined
*	ptek is now known as ptek_not_here
*	ptek_not_here is now known as ptek
*	vim15years (~androirc@ip1f11fc92.dynamic.kabel-deutschland.de) has joined
*	ptek is now known as ptek_not_here
*	ptek_not_here is now known as ptek
*	toblorone (~toblorone@172.58.91.142) has joined
*	ptek is now known as ptek_not_here
*	ptek_not_here is now known as ptek
*	ptek is now known as ptek_not_here
*	ptek_not_here is now known as ptek
*	ptek is now known as ptek_not_here
*	ptek_not_here is now known as ptek
*	ptek is now known as ptek_not_here
*	ptek_not_here is now known as ptek
*	ptek is now known as ptek_not_here
*	ptek_not_here is now known as ptek
*	twanvl_ has quit (Ping timeout: 255 seconds)
*	youtmon has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
*	garphy is now known as garphy`aw
*	ptek is now known as ptek_not_here
*	ptek_not_here is now known as ptek
*	zzo38 (~zzo38@24-207-56-48.eastlink.ca) has joined
<zzo38>	Is there a X resource manager implementation in Haskell? I have implemented X resource manager in JavaScript. One idea for implementing it in Haskell might be that the database has type (XRM x y), which has resources of type ([(Binding,x)],y) where the first half of the pair is the key and the second part is the value. (So, you can't have duplicate keys.) (The type (XRM String String) will be the usual way, although this doesn't allow for XrmUnique
*	ptek is now known as ptek_not_here
*	ptek_not_here is now known as ptek
*	ptek is now known as ptek_not_here
*	ChanServ gives channel operator status to mauke
*	mauke has kicked ptek_not_here from #haskell (no nick spam, please)
<geekosaur>	zzo38, limited bindings via xhb or X11
*	youtmon (~yout@c-98-242-250-233.hsd1.fl.comcast.net) has joined
<geekosaur>	I've wanted to do something with that for xmonad for a while but it's a fair ways down the priority list 
*	mauke removes channel operator status from mauke
<zzo38>	geekosaur: I mean implemented purely in Haskell; it is not necessary to use the ones from Xlib. (My implementation in JavaScript is implemented purely in JavaScript.)
<geekosaur>	unless it's part of xhb, no
*	youtmon has quit (Client Quit)
<zzo38>	What is xhb? Is that the Haskell implementation of a X client library?
<geekosaur>	'X Haskel bindings' generated the same way xcb is generated from the X11 protocol specification
<geekosaur>	as distinct from Xlib which hides the protocol layer
*	lukaramu has quit (Quit: Leaving)
<geekosaur>	but xrm is not actually part of the server protocol so I would not actually expect xhb to have much to do with it
<zzo38>	(And the X resource manager doesn't actually depend on X. Even the Xrm functions in Xlib don't require a Display* argument, because it doesn't need X to work.)
*	jb55 (~jb55@70-36-49-138.dyn.novuscom.net) has joined
<zzo38>	Yes, as I said; it is not necessary for an implementation of X resource manager to have anything to do with X.
<geekosaur>	right, essentially the only interaction there is defaulting stuff from X root window resources
<zzo38>	Yes, and in that case you could perhaps use xhb functions to retrieve it as a string so that it can be passed, I suppose.
*	`Guest00000 has quit (Ping timeout: 248 seconds)
<geekosaur>	(specifically the WM_CLASS and RESOURCE_MANAGER properties)
*	`Guest00000 (~user@37.113.156.38) has joined
<geekosaur>	but the only currently extant implementations are a minimal one in X11 (which is an Xlib wrapper) and XRM (which is a more complete wrapper for just Xrm, but still assumes that XrmInitialize defaults stuff via Xlib lookups of those two root window properties I mentioned)
*	sepp2k has quit (Read error: Connection reset by peer)
<zzo38>	Yes, and that seems easy enough to do. Both are prenumbered atoms, so it should be easy enough to write a wrapper code which retrieves that data, so that you can them pass it in to the XRM implementation.
<geekosaur>	and to be honest, most people don;t care any more; neither Gtk/Gnome nor Qt/KDE use Xrm
*	toblorone has quit (Remote host closed the connection)
*	azahi has quit (Quit: ded)
<zzo38>	Yes, although I don't like either Gtk/Gnome or Qt/KDE, and prefer Xaw (or even direct) myself.
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sat Oct 21 15:57:31 2017

**** BEGIN LOGGING AT Sun Oct 22 13:14:46 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<hpc>	ivegotasthma: it plonks a value into a list of just that value
<hpc>	by consing it with the empty list
<Lokathor>	the (:) operator is being combined with the [] value
<Lokathor>	it's like +2, but :[] instead
<hpc>	it's an operator section
<Lokathor>	whatever ends up on the left side will be in a 1 element list as the result
<ivegotasthma>	:t (read . (:[]))
<lambdabot>	Read c => Char -> c
*	MikasiCoyote[m] (mikasicoyo@gateway/shell/matrix.org/x-scysqhshgyvqycwk) has joined
*	newman[m] (newmanmatr@gateway/shell/matrix.org/x-rrzrnmwkjclqdybu) has joined
*	idnar[m] (mithrandim@gateway/shell/matrix.org/x-hzodeqibsxbvenoo) has joined
*	piluex[m] (piluexmatr@gateway/shell/matrix.org/x-rgzdrelxuxkxkanm) has joined
*	Mike[m]1 (keralkmatr@gateway/shell/matrix.org/x-snbitgejsjfiuebi) has joined
*	SuperW[m] (superweema@gateway/shell/matrix.org/x-hztinglzouxcwuse) has joined
*	arslanatajanov[m (arslanataj@gateway/shell/matrix.org/x-elmsxyedwmezkika) has joined
*	tangled_z[m] (tangledzma@gateway/shell/matrix.org/x-lituxieqyvcknmfx) has joined
*	s0ra[m] (s0ramatrix@gateway/shell/matrix.org/x-bbgjycqovkbcgqhv) has joined
*	thejonny[m] (thejonnyma@gateway/shell/matrix.org/x-bocfvvaqueqonuuz) has joined
*	chaetopterus[m] (chaetopter@gateway/shell/matrix.org/x-jydstzuopljiumjr) has joined
*	Alexander_Hansen (alexanderh@gateway/shell/matrix.org/x-fvmcfsgqazfzpows) has joined
*	redviking[m] (redvikingm@gateway/shell/matrix.org/x-zhaypkfqmhxoyaez) has joined
*	aniketd[m] (aniketdmat@gateway/shell/matrix.org/x-zxdgzdzmwfqdtcyf) has joined
*	schplaf[m] (schplafmat@gateway/shell/matrix.org/x-yotsmnvyywhavukk) has joined
*	trevorriles[m] (trevorrile@gateway/shell/matrix.org/x-cgxekwqieilxkmfe) has joined
*	sudoreboot[m] (sudoreboot@gateway/shell/matrix.org/x-qbjzmmcervygtsiv) has joined
*	slartibartfast[m (slartibart@gateway/shell/matrix.org/x-jikddpbtotdcmieo) has joined
*	ElyKar[m] (elykartedo@gateway/shell/matrix.org/x-btexnpkaninhwqoc) has joined
*	TFX[m] (tobiasfurx@gateway/shell/matrix.org/x-qeguuwilsrqgdxpt) has joined
*	M-whoops (whoopsmatr@gateway/shell/matrix.org/x-wngmrrxvnuodadzw) has joined
*	LangeOortjes[m] (langeoortj@gateway/shell/matrix.org/x-bdhcbgzvflkwfota) has joined
*	trikl[m] (triklmatri@gateway/shell/matrix.org/x-fnfpsfdfawquuprg) has joined
*	riadvargas[m] (riadvargas@gateway/shell/matrix.org/x-twfpwcjyvwublpoj) has joined
*	octalsrc[m] (octalsrcma@gateway/shell/matrix.org/x-druuvxdpdnohhkpl) has joined
*	geetam (geetammatr@gateway/shell/matrix.org/x-qniidmjkssualtit) has joined
*	dtcristo (dtcristoma@gateway/shell/matrix.org/x-rupmbwfzuyokvedf) has joined
*	Mcpurplemuffin[m (mcpurplemu@gateway/shell/matrix.org/x-duoiafbbvxlbszfh) has joined
*	strixy[m] (strixymatr@gateway/shell/matrix.org/x-wiiiknkkxsirstgs) has joined
*	thekyriarchy (thekyriarc@fsf/emeritus/kxra) has joined
*	M-Illandan (illandanma@gateway/shell/matrix.org/x-npcwyzkcbqjcejoz) has joined
*	moonrunes[m] (moonrunesm@gateway/shell/matrix.org/x-hggyqixlhcnjfqkq) has joined
*	Obscurity[m] (obscuritym@gateway/shell/matrix.org/x-gaiomvzqrixcnhoc) has joined
*	Rifa[m] (rifabiomat@gateway/shell/matrix.org/x-mshqrsicqngidxge) has joined
*	puffnfresh (puffnfresh@gateway/shell/matrix.org/x-grjsdtaljwgudliy) has joined
*	Masaomi[m] (masaomimat@gateway/shell/matrix.org/x-rfbaknjxkmlwskou) has joined
*	etcinit[m] (etcinitmat@gateway/shell/matrix.org/x-yifncdbkhmmavwym) has joined
*	stites[m] (stitesmatr@gateway/shell/matrix.org/x-nmtsesagcwqlwwnz) has joined
*	m3tti[m] (m3ttimatri@gateway/shell/matrix.org/x-hvyomvwutgyuxupu) has joined
*	zalipuha[m] (zalipuhama@gateway/shell/matrix.org/x-eiesrakpvbgmiral) has joined
<Lokathor>	> 8 : []
*	khac[m] (khacmatrix@gateway/shell/matrix.org/x-hjrinlkpcqhnarwe) has joined
*	asenski[m] (asenskimat@gateway/shell/matrix.org/x-scwoghbnjgxlpobx) has joined
*	M-ms (msmatrixor@gateway/shell/matrix.org/x-hfhidnvcezeekjwt) has joined
*	wubbalubbadubdu4 (wubbalub1@gateway/shell/matrix.org/x-pwvbfhloiihfoumx) has joined
*	M-schmittlauch (schmittlau@gateway/shell/matrix.org/x-jzfwfldhphpzqjjb) has joined
*	ddbbuu[m] (ddbbuumatr@gateway/shell/matrix.org/x-gvgvhmumpvrrphus) has joined
*	phil_frontal[m] (philfronta@gateway/shell/matrix.org/x-ymvzcsckkulfmstw) has joined
*	plll[m] (plllmatrix@gateway/shell/matrix.org/x-xhetsjsgwoiaywtf) has joined
*	nullset[m] (nullsetmat@gateway/shell/matrix.org/x-zrgsqtffrmwncnat) has joined
*	ketanhwr (ketanhwrma@gateway/shell/matrix.org/x-vlurzqapetkxbhql) has joined
<ivegotasthma>	the hell
*	Novitsh[m] (novitshmat@gateway/shell/matrix.org/x-bwhkgrktxtdglxlz) has joined
*	memoryruins[m] (memoryruin@gateway/shell/matrix.org/x-proikyllnjdfwufp) has joined
*	futpib[m] (futpibmatr@gateway/shell/matrix.org/x-cckdheibhvwbvvul) has joined
*	ItevNabdifNi[m] (jdevelopma@gateway/shell/matrix.org/x-dedxoylhzktzupbw) has joined
*	sebisebi[m] (sebisebima@gateway/shell/matrix.org/x-ulbdpkewfczdauqd) has joined
*	JackM[m] (jamickmatr@gateway/shell/matrix.org/x-ysgfhcuwylpptjhv) has joined
*	subz[m] (subzmatrix@gateway/shell/matrix.org/x-axhtmfonyiijddmj) has joined
*	M16_29[m] (m1629matri@gateway/shell/matrix.org/x-equfpcofnypptugd) has joined
*	nh2[m] (nh2matrixo@gateway/shell/matrix.org/x-szeadtwowrlcoeqy) has joined
*	toumi124[m] (toumi124ma@gateway/shell/matrix.org/x-qddtisfozvxzwjxe) has joined
*	naviknair7[m] (naviknair7@gateway/shell/matrix.org/x-dmnnzyzbhmdlkcog) has joined
*	mith[m] (mithmatrix@gateway/shell/matrix.org/x-urkunwogkbibnfbz) has joined
*	zukonake[m] (zukonakema@gateway/shell/matrix.org/x-mjftobrmngbisjfd) has joined
*	romanzolotarev[m (romanzolot@gateway/shell/matrix.org/x-krdxlfaxbrnaraze) has joined
*	Adau[m] (adaumatrix@gateway/shell/matrix.org/x-dnarouddcenwptzr) has joined
*	mad[m] (madmatrixo@gateway/shell/matrix.org/x-jorxvfkwpufsxsdy) has joined
*	masaeedu[m] (masaeeduma@gateway/shell/matrix.org/x-tzozlhtthizazghc) has joined
*	kilian[m]1 (kiliankoem@gateway/shell/matrix.org/x-opxwolgtmmpgsdvy) has joined
*	closures999[m] (closures99@gateway/shell/matrix.org/x-gggmuwttzzepdekb) has joined
<lambdabot>	 [8]
*	spotter[m] (spottermat@gateway/shell/matrix.org/x-fbmrkikuqlurudun) has joined
*	yashi[m] (yashimatri@gateway/shell/matrix.org/x-tjtifylifbguugnn) has joined
*	ttk2[m] (ttk2matrix@gateway/shell/matrix.org/x-pzixmmdnkwogltsx) has joined
*	fib11235[m] (fib11235ma@gateway/shell/matrix.org/x-xqptmfnazkegrkgi) has joined
*	huda[m] (hudamatrix@gateway/shell/matrix.org/x-nmieswugkfcszkxi) has joined
*	xeel[m] (xeelmatrix@gateway/shell/matrix.org/x-gkrtsdnkrjbloxyc) has joined
*	softashell (softashell@gateway/shell/matrix.org/x-kwkfismajarpbfqm) has joined
*	psan[m] (psanmatrix@gateway/shell/matrix.org/x-nyydjewvtndlqalz) has joined
*	Dako300[m] (dako300mat@gateway/shell/matrix.org/x-huwoaqrcxrgillxb) has joined
*	levzhazeschi[m] (levzhazesc@gateway/shell/matrix.org/x-jxpgrbdjsghxcuuh) has joined
*	emme[m] (mmongamatr@gateway/shell/matrix.org/x-cedsxqkegzzofavs) has joined
*	NickSeagull[m] (nickseagul@gateway/shell/matrix.org/x-ijjtpfoittwluhmg) has joined
*	el_tejon[m] (u128023mat@gateway/shell/matrix.org/x-qdlsrxxexrebepry) has joined
*	rakete (raketematr@gateway/shell/matrix.org/x-hraszatfxoonencd) has joined
*	innaytool[m] (innaytoolm@gateway/shell/matrix.org/x-kcueihqzqukgrkie) has joined
*	LucasFrancesco[m (lucasfranc@gateway/shell/matrix.org/x-uawdtooimybjssny) has joined
*	kimchi[m] (kimchimatr@gateway/shell/matrix.org/x-mgnupfvfzhnrtwxe) has joined
*	TristanBKildaire (deavmidisr@gateway/shell/matrix.org/x-yuhpysosgecceoym) has joined
*	daoo[m] (daoomatrix@gateway/shell/matrix.org/x-gcuromiekkqxffkq) has joined
*	cow_2001[h] (cow2001m1@gateway/shell/matrix.org/x-fmnofwfyshtvbari) has joined
*	synopz[m] (synopzmatr@gateway/shell/matrix.org/x-vvxxjpvlhccsdebj) has joined
*	ngross[m] (ngrossmatr@gateway/shell/matrix.org/x-jjhqdwudzrzznxjr) has joined
*	thisLight[m] (thislightm@gateway/shell/matrix.org/x-qzwferneaaxuyuyh) has joined
*	M-gst (gstmatrixo@gateway/shell/matrix.org/x-sehwdxbgjssjazbs) has joined
*	puminya[m] (puminyamat@gateway/shell/matrix.org/x-peraqhmtdlydudzq) has joined
*	testtt55[m] (testtt55ma@gateway/shell/matrix.org/x-hhxyoojjhfxdojka) has joined
*	mrhunky[m] (m294334mat@gateway/shell/matrix.org/x-bxgslrbvwyykikna) has joined
*	lonokhov[m] (lonokhovma@gateway/shell/matrix.org/x-fucnhftshkpwnmwc) has joined
*	AX3L[m] (ax3lmatrix@gateway/shell/matrix.org/x-gfdrelwpbzaewnxc) has joined
*	chuzz[m] (svarottima@gateway/shell/matrix.org/x-ljdnjxkowgmennjb) has joined
*	talesmantovani[m (talesmanto@gateway/shell/matrix.org/x-ropqinxaafgycitt) has joined
*	Squidnyan[m] (squidnyanm@gateway/shell/matrix.org/x-hdbxvgvxbrojjknn) has joined
*	Maikel_Experius[ (maikelexpe@gateway/shell/matrix.org/x-eqbckhhduervlyep) has joined
*	dkellner[m] (dkellnerma@gateway/shell/matrix.org/x-wssreprmpsofrkaa) has joined
*	guest69[m] (guest69mat@gateway/shell/matrix.org/x-vmiwedxzmqbldpcj) has joined
*	Makinit[m] (makinitdis@gateway/shell/matrix.org/x-vljeppsddzgznlpq) has joined
*	lkh[m] (lkhmatrixo@gateway/shell/matrix.org/x-ngqsfmxefxfswojr) has joined
*	Monad[m] (monadmatri@gateway/shell/matrix.org/x-bjwkoqeycturhsuc) has joined
*	ninegua[m] (nineguamat@gateway/shell/matrix.org/x-hkzzvtctbgmfhtdj) has joined
*	Deleh[m] (delehmatri@gateway/shell/matrix.org/x-vvakrzesnfbavrrr) has joined
*	zhangjiji[m] (zhangjijim@gateway/shell/matrix.org/x-vpjiimdelcqvmdxy) has joined
*	joncfoo[m] (joncfoomat@gateway/shell/matrix.org/x-bqrnxyrtfkpqkvht) has joined
*	pingfreud[m] (pingfreudm@gateway/shell/matrix.org/x-umwzyufdrlvnbhhh) has joined
*	ltq520[m] (ltq520matr@gateway/shell/matrix.org/x-itvwiebyrtdtmtmu) has joined
*	mtncoder[m] (mtncoderma@gateway/shell/matrix.org/x-vffbnwyinidhehoe) has joined
*	scanleft[m] (scanleftma@gateway/shell/matrix.org/x-yjqtpoqqfhbrrogu) has joined
*	M-herah (herahmatri@gateway/shell/matrix.org/x-ybuwnoyxyuandgva) has joined
*	dpacbach[m] (dpacbachma@gateway/shell/matrix.org/x-fyieybydnpwxmdql) has joined
*	Barnabas[m] (barnabasma@gateway/shell/matrix.org/x-odobaldzkeipzvfu) has joined
*	hiq[m] (hiqmatrixo@gateway/shell/matrix.org/x-vtrjlotunfhrwlmk) has joined
*	ycy[m] (ycymatrixo@gateway/shell/matrix.org/x-iynbwnucirdnobfd) has joined
*	SansFr[m] (sansfrmatr@gateway/shell/matrix.org/x-afdtxbnoeyklrfve) has joined
*	fbreitwieser[m] (fbreitwies@gateway/shell/matrix.org/x-oigfwzycgzvxqbsx) has joined
*	psYchotic[m] (psychoticm@gateway/shell/matrix.org/x-bcdcfdhssdphjhsz) has joined
*	jacobleach[m] (jacobleach@gateway/shell/matrix.org/x-pyfmzdqfeldumxtq) has joined
*	M-rgh (rghfilterf@gateway/shell/matrix.org/x-obxsedqpnffwnhbs) has joined
*	laaksoan[m] (laaksoanma@gateway/shell/matrix.org/x-peihbhneiftcebvy) has joined
*	PifyZ[m] (pifyzmatri@gateway/shell/matrix.org/x-pbkqsczxzzdrowgb) has joined
*	mrhania[m] (mrhaniamat@gateway/shell/matrix.org/x-hesrhfkqkwgkbpky) has joined
*	FederalRick[m] (federalric@gateway/shell/matrix.org/x-urncveiuqswfsvjr) has joined
*	abbiya (abbiyamatr@gateway/shell/matrix.org/x-vgrhegodvgrjlgfy) has joined
*	intheclouddan[m] (inthecloud@gateway/shell/matrix.org/x-jwobtitkppomxyxb) has joined
*	hdurer[m] (hdurermatr@gateway/shell/matrix.org/x-tevzrikkbrcyfunu) has joined
*	ThousandLions[m] (lionsmatri@gateway/shell/matrix.org/x-pmfjrfzyfvlpulax) has joined
*	CryptoCalsius[m] (cryptocals@gateway/shell/matrix.org/x-bxsgazavfpcqywpn) has joined
*	beemo[m] (beemomatri@gateway/shell/matrix.org/x-hmzaujaoadcogksz) has joined
*	phittacus (bklmatrixo@gateway/shell/matrix.org/x-lslnkotoxvfctolo) has joined
*	roninkaizen[m] (roninkaize@gateway/shell/matrix.org/x-tbovaoshfuxdsprp) has joined
*	rydia5[m] (rydia5matr@gateway/shell/matrix.org/x-wwzwzpbgcgcrfwhg) has joined
*	Akito[m] (akitomatri@gateway/shell/matrix.org/x-ljqojkphdoeklwpn) has joined
*	Flecheck[m] (flecheckma@gateway/shell/matrix.org/x-abssfsrerwyhugkl) has joined
*	gylpm[m] (gylpmmatri@gateway/shell/matrix.org/x-jkvbyxnzmkwbvnmh) has joined
*	okkk (aminbmatri@gateway/shell/matrix.org/x-fjngbvcsbdepqaef) has joined
*	chominist[m] (choministm@gateway/shell/matrix.org/x-yncjrefvjgsayfwr) has joined
*	lucnx[m] (lucnxmatri@gateway/shell/matrix.org/x-wolouvtoflsgutxw) has joined
*	Frytka[m] (frytkamatr@gateway/shell/matrix.org/x-fjoetifecxwdbvhx) has joined
*	wisn[m] (wisnmatrix@gateway/shell/matrix.org/x-qtqaklphjwlclyra) has joined
*	ByteEater[m] (byteeaterm@gateway/shell/matrix.org/x-mkyboryryyfdrwil) has joined
*	Ubiquitous[m] (ericstew1@gateway/shell/matrix.org/x-abnkmetvbeaodrof) has joined
*	Naughtmare[m] (naughtmare@gateway/shell/matrix.org/x-mgsohylrlqceaihg) has joined
*	elpfen[m] (elpfenmatr@gateway/shell/matrix.org/x-uhzbbsgupgbjmlwm) has joined
*	moka[m] (mokamatrix@gateway/shell/matrix.org/x-hdvycxbclwjuctzo) has joined
*	superobserver[m] (ueberzusch@gateway/shell/matrix.org/x-sfoblgwbrznxjfwv) has joined
*	rcat[m] (rcatmatrix@gateway/shell/matrix.org/x-hgglivwrnfxmbjht) has joined
*	Fulgjon[m] (fulgjonmat@gateway/shell/matrix.org/x-dnaxqaskxfojyjcy) has joined
*	bramvdbogaerde[m (bramvdboga@gateway/shell/matrix.org/x-syomnelhwasrqjwn) has joined
*	peel[m] (peelmatrix@gateway/shell/matrix.org/x-wjfsnvqrqkfqcycj) has joined
*	mlainz[m] (mlainzmatr@gateway/shell/matrix.org/x-vxitecplgqjgztlt) has joined
*	dlandau[m] (dlandaumat@gateway/shell/matrix.org/x-sxnvupoxssmksqpf) has joined
*	tommy0010[m] (tommy0010m@gateway/shell/matrix.org/x-kcgbwguwfczwyjkf) has joined
*	Michi[m] (michimatri@gateway/shell/matrix.org/x-gatmcohmjownfcbu) has joined
*	schum[m] (schummatri@gateway/shell/matrix.org/x-dlutbqcdtpwdrlsq) has joined
*	JHBrannam[m] (m295238mat@gateway/shell/matrix.org/x-nokpjtqhtgvduwwo) has joined
*	WolfLightning[m] (wolflighti@gateway/shell/matrix.org/x-wqglpfsjjxuxvafj) has joined
*	charlag[m] (charlagmat@gateway/shell/matrix.org/x-ukwqdfafnrcisymx) has joined
*	M-kitsune (kitsunemat@gateway/shell/matrix.org/x-yvedtasobowdjmgc) has joined
*	hugogomes[m] (hugogomesm@gateway/shell/matrix.org/x-frpbnvxdgamztwwl) has joined
*	rizo[m] (rizomatrix@gateway/shell/matrix.org/x-hgpggcyyfqcifsjf) has joined
*	pyrtheibarit[m] (pyrtheibar@gateway/shell/matrix.org/x-hyixcvgzvaqokobr) has joined
*	JohnnyReb[m] (johnnyrebm@gateway/shell/matrix.org/x-uiecfavththkcpel) has joined
*	adampaigge[m] (adampaigge@gateway/shell/matrix.org/x-krmicthvvdkccmzr) has joined
*	TimWolla[m] (timwollama@gateway/shell/matrix.org/x-uqmewdxqtdsjlptg) has joined
*	jsonhigh[m] (jsonhighma@gateway/shell/matrix.org/x-slmceclylgdhcawj) has joined
*	unclechu (unclechuma@gateway/shell/matrix.org/x-sagsmxkbwdmntcjo) has joined
*	magnap (magnapma2@gateway/shell/matrix.org/x-rbiolawnfxneuzbo) has joined
*	fonadius[m] (fonadiusma@gateway/shell/matrix.org/x-arxfherrungaqhwi) has joined
*	Matthew[m] (matthewmat@gateway/shell/matrix.org/x-zxgczjzvzthmvviq) has joined
*	XertroV[m] (xertrovmat@gateway/shell/matrix.org/x-timzlxzyfdfifdth) has joined
*	cuddly[m] (cuddlymatr@gateway/shell/matrix.org/x-wgaxbvqerayvlzdf) has joined
*	Overload[m] (overloadma@gateway/shell/matrix.org/x-fnvpjofqasktqjal) has joined
*	crapman[m] (crapmanmat@gateway/shell/matrix.org/x-atmhatrzxzjncfgd) has joined
*	devpav[m] (devpavmatr@gateway/shell/matrix.org/x-zifmhfknkqxptqwq) has joined
*	avatias0[m] (avatias0ma@gateway/shell/matrix.org/x-jrlxliprmrjbgoay) has joined
*	antiless[m] (antilessma@gateway/shell/matrix.org/x-ytufagukyrbsjzkr) has joined
*	WinterFox[m] (winterfoxm@gateway/shell/matrix.org/x-vmmmzbnichfzfmom) has joined
*	thekyriarchy__ (thekyria1@gateway/shell/matrix.org/x-vvkvbdzhwhhtqkfr) has joined
*	ya-alex[m] (ya-alexmat@gateway/shell/matrix.org/x-jawljrvhiyzsylli) has joined
*	MarkusK[m] (markuskmat@gateway/shell/matrix.org/x-kexzxwitndbvroep) has joined
*	louispan (~textual@14-203-219-236.static.tpgi.com.au) has joined
*	Cadey[m] (cadeycetac@gateway/shell/matrix.org/x-ilueorwhurshionh) has joined
*	Courage[m] (stemarshma@gateway/shell/matrix.org/x-jgzxlzxwvqtxkbla) has joined
*	tobim[m] (tobimmatri@gateway/shell/matrix.org/x-aypxtsqwaebhygsx) has joined
*	pedroteo[m] (pedroteoma@gateway/shell/matrix.org/x-pjhofsiuvjrmzxdl) has joined
*	saci[m] (sacimatrix@gateway/shell/matrix.org/x-krjviykjqgpwxsjm) has joined
*	jvalleroy[m] (jvalleroym@gateway/shell/matrix.org/x-tjvtifendiiavrar) has joined
*	Luguber[m] (lugubermat@gateway/shell/matrix.org/x-xaoumfsuziiagmfk) has joined
*	felipeac[m] (felipeacma@gateway/shell/matrix.org/x-gmfxdfkechvmokwz) has joined
*	ajtowns[m] (ajtownsmat@gateway/shell/matrix.org/x-jomgkwuqfwixoawf) has joined
*	wizzup[m] (wizzupmatr@gateway/shell/matrix.org/x-noiewjfpkjlnnxis) has joined
*	riaqn (riaqnmatri@gateway/shell/matrix.org/x-ffdapkywhseaarsv) has joined
*	Sasasw (sasasumatr@gateway/shell/matrix.org/x-cnhmfrydwiubdlnq) has joined
*	vrnithinkumar[m] (vrnithinku@gateway/shell/matrix.org/x-rihycpsxallajonj) has joined
*	Nerka[m] (nerkatchnc@gateway/shell/matrix.org/x-yzwhsuobsqvqbgzt) has joined
*	meinashi[m] (meinashima@gateway/shell/matrix.org/x-qjqidgjwygocppxg) has joined
*	goolord[m] (goolordmat@gateway/shell/matrix.org/x-xxacfmaeupijgfsg) has joined
*	seizo[m] (seizomatri@gateway/shell/matrix.org/x-lbtharxhvlcziwis) has joined
*	Shaunthesheep[m] (jamamimatr@gateway/shell/matrix.org/x-rpimcjrbrekgwmob) has joined
*	icen[m] (icenmatrix@gateway/shell/matrix.org/x-siqobsspjnriztgt) has joined
*	nimbus[m] (nimbusmatr@gateway/shell/matrix.org/x-ttvzhyfbnplvufcf) has joined
*	polux[m] (poluxmatri@gateway/shell/matrix.org/x-zawoeyndbabfvtnc) has joined
*	ramirezD[m] (ramirezdma@gateway/shell/matrix.org/x-aehcwbaynlawcnhs) has joined
*	pacmansyu[m] (pacmansyum@gateway/shell/matrix.org/x-meextemoysrbrujp) has joined
*	testingriotnmatr (testingr1@gateway/shell/matrix.org/x-lzjhalgpwgnywust) has joined
*	DavesTestingAcco (davetestma@gateway/shell/matrix.org/x-awhzsvxvzebdaqbg) has joined
*	dirb (dirbmatrix@gateway/shell/matrix.org/x-cghhzywaeacjsjge) has joined
*	j0ni[m] (j0nimatrix@gateway/shell/matrix.org/x-nxgwadcslfjlajac) has joined
*	djquant[m] (djquantmat@gateway/shell/matrix.org/x-eyupuegddskdazwx) has joined
*	sudom0nk[m] (sudom0nkma@gateway/shell/matrix.org/x-dzohqqtdcewpuinl) has joined
*	Niboor[m] (niboormatr@gateway/shell/matrix.org/x-rrzroxovjlzravsl) has joined
*	oozz[m] (oozzmatrix@gateway/shell/matrix.org/x-kuarshvhwgcsnear) has joined
*	adziahel[m] (adziahelma@gateway/shell/matrix.org/x-enpgyxwwflxbgpwb) has joined
*	razvanc-r[m] (razvanc-rm@gateway/shell/matrix.org/x-rdxabcdhibddnbqo) has joined
*	mrdaak[m] (mrdaakmatr@gateway/shell/matrix.org/x-eczotfdviiyabacs) has joined
*	stevendai[m] (stevendaim@gateway/shell/matrix.org/x-nxmbfelyzwbrrxgd) has joined
*	km42[m] (km42matrix@gateway/shell/matrix.org/x-eilbmxmxdqhdjzqt) has joined
*	howsiwei[m] (howsiweima@gateway/shell/matrix.org/x-rvejezsdhvvubvnt) has joined
*	caro401 (caro401mat@gateway/shell/matrix.org/x-miybssxryylffooo) has joined
*	peddie[m] (peddiematr@gateway/shell/matrix.org/x-wwanyskiswpbdigg) has joined
*	nine-h[m] (nine-hmatr@gateway/shell/matrix.org/x-wgaaerzazqidmlvf) has joined
*	Scapin[m] (scapinmatr@gateway/shell/matrix.org/x-cdxgfqjmnhjoewjt) has joined
*	gutigen[m] (gutigenmat@gateway/shell/matrix.org/x-lwxwwxriwgwtnvjr) has joined
*	mrgraffe[m] (mrgraffema@gateway/shell/matrix.org/x-onkckaavlzmmwhzo) has joined
*	Reyu[m] (reyumatrix@gateway/shell/matrix.org/x-xonyzhlrkppldhyo) has joined
*	dbramucci[m] (dbramuccim@gateway/shell/matrix.org/x-jpjgmcqlimgxhpoh) has joined
*	shsnthstnhs[m] (shsnthstnh@gateway/shell/matrix.org/x-wesvnfozvekanlol) has joined
*	asm[m]1 (asmmatrixo@gateway/shell/matrix.org/x-aeyervwkheuizhjh) has joined
*	boash[m] (boashmatri@gateway/shell/matrix.org/x-whwkmmxwyduhuirs) has joined
*	sgoody[m] (sgoodymatr@gateway/shell/matrix.org/x-yixfyjsnsdcwznrl) has joined
*	c0ff33[m] (c0ff33matr@gateway/shell/matrix.org/x-wmgfwtxfqlgdwxcu) has joined
*	BartGroeneveld[m (bartg95mat@gateway/shell/matrix.org/x-uvvewlfrlxkwgvnk) has joined
*	toa[m] (toamatrixo@gateway/shell/matrix.org/x-imsuenecspnknlwa) has joined
*	kebertx[m] (kebertxwaf@gateway/shell/matrix.org/x-lttkqwkrvumcsbiz) has joined
*	Zarthalan[m] (zarthalanm@gateway/shell/matrix.org/x-ulxgzvdyyxhvhyne) has joined
*	ArrayWindrunner[ (arraywindr@gateway/shell/matrix.org/x-ehbtmsshwfjlqywk) has joined
*	himmAllRight[m] (himmallrig@gateway/shell/matrix.org/x-owjnpmwhorsmevqt) has joined
*	sphalerite (sphalerite@gateway/shell/matrix.org/x-dbhlzudhukvvhtaa) has joined
*	fgaz[m] (fgazmatrix@gateway/shell/matrix.org/x-jzemnqhbfdvfnutx) has joined
*	porcow[m] (porcowmatr@gateway/shell/matrix.org/x-jqqpmdicwxalpknc) has joined
*	am2on (am2onataun@gateway/shell/matrix.org/x-ufczpliupwieacog) has joined
*	Guest340521[m] (m340521mat@gateway/shell/matrix.org/x-fcwasnmzwjvrcstm) has joined
*	guest121[m] (guest121ma@gateway/shell/matrix.org/x-gplznxqircnmfxln) has joined
*	M\u202e[m] (eqmatrixor@gateway/shell/matrix.org/x-jfjpsprmfgwuttxc) has joined
*	lixiang4u[m] (lixiang4um@gateway/shell/matrix.org/x-enooplzcyxpniukw) has joined
*	M-HirmeS (maxggxamma@gateway/shell/matrix.org/x-alnkojqmslmthvyd) has joined
*	mark_c (markcmatri@gateway/shell/matrix.org/x-bfhfyrjfuniuzkqp) has joined
*	shekel[m] (shekelmatr@gateway/shell/matrix.org/x-ikbwhrgbvvncvare) has joined
*	SijmenSchoon[m] (sijmenscho@gateway/shell/matrix.org/x-wzyvpdbunprmcphu) has joined
*	KevinMGranger (kevinmgran@rit/foss/alum/kevinmgranger) has joined
*	M0xfiras[m] (m0xfirasma@gateway/shell/matrix.org/x-cukmntnkqaolafqh) has joined
*	Jasonjunsu[m] (jasonjunsu@gateway/shell/matrix.org/x-hifwdsjtuxfwfxen) has joined
*	ElliotKiyomizu[m (elliotkiyo@gateway/shell/matrix.org/x-imhcbubzfwrjrkxt) has joined
*	eyenx (eyenxmatri@gateway/shell/matrix.org/x-fadwgfyruoyotfzk) has joined
*	grahf[m] (grahfmatri@gateway/shell/matrix.org/x-fizkdkdxjkuqjyfu) has joined
*	prot[m] (protmatrix@gateway/shell/matrix.org/x-llrohsooqhxhtvbc) has joined
*	bustillo[m] (bustilloma@gateway/shell/matrix.org/x-gzdytvwvcfjsjfnk) has joined
*	asthma[m] (mihaylovhr@gateway/shell/matrix.org/x-brlsuovhmoflmyvj) has joined
*	magog[m] (magogmatri@gateway/shell/matrix.org/x-ccvhspwuandfjyll) has joined
*	stellis[m] (stellismat@gateway/shell/matrix.org/x-cfxfracanwtwwyrk) has joined
*	Mistv[m] (mistvmatri@gateway/shell/matrix.org/x-jnkedhafudkdbwqt) has joined
*	Andry976[m] (andry976ma@gateway/shell/matrix.org/x-veflfqsnzjqhcuue) has joined
*	KENNYNR1[m] (kennynr1ma@gateway/shell/matrix.org/x-lwlvqbjhijobgren) has joined
*	mk[m] (mkmatrixor@gateway/shell/matrix.org/x-rxflncuzqakfyhqb) has joined
*	ptek[m] (ptekmatrix@gateway/shell/matrix.org/x-knlkgbgcagazytro) has joined
*	akshay7777[m] (akshay7777@gateway/shell/matrix.org/x-twgiydhrduydbqgn) has joined
*	zmre[m] (zmrematrix@gateway/shell/matrix.org/x-ozaocjhhdhlhytuc) has joined
*	joakimf95[m] (joakimf95m@gateway/shell/matrix.org/x-errjyrouuzzyxqts) has joined
*	Litom[m] (litommatri@gateway/shell/matrix.org/x-vrczdmhgtuprnjva) has joined
<ivegotasthma>	flood from matrix?
*	yaspoon[m] (yaspoonmat@gateway/shell/matrix.org/x-yimekthmbjmzdfna) has joined
*	seto[m] (setomatrix@gateway/shell/matrix.org/x-knrnwcmycfsnvmxt) has joined
*	Guest1573[m] (m1573disro@gateway/shell/matrix.org/x-voewnbzwockevyuh) has joined
*	jnonpony[m] (jnonponyma@gateway/shell/matrix.org/x-zrzcdiixcyqsjouk) has joined
*	packetbiompm[m] (packetbiom@gateway/shell/matrix.org/x-onukpjktodhjreem) has joined
*	h_ndrik[m] (hndrikmatr@gateway/shell/matrix.org/x-foffsgxbnaczitiy) has joined
*	fxk[m] (fxkmatrixo@gateway/shell/matrix.org/x-ygqibxxcjldmqqmp) has joined
*	Verandetten[m] (verandienm@gateway/shell/matrix.org/x-uililmgzqtentauh) has joined
*	Bimmie[m] (bimmiematr@gateway/shell/matrix.org/x-vabjzcnvlhjuwgtb) has joined
*	etXzat[m] (etxzatmatr@gateway/shell/matrix.org/x-uyjpegqsjutrpdpk) has joined
*	scrypso[m] (scrypsomat@gateway/shell/matrix.org/x-prrfacyqhhbamfpg) has joined
*	hesiodos[m] (hesiodosma@gateway/shell/matrix.org/x-qaqbozbeuhsnjmvy) has joined
*	Guest312594[m] (m312594mat@gateway/shell/matrix.org/x-rwqsemmzowlnwonv) has joined
*	sssi1ver[m] (sssi1verma@gateway/shell/matrix.org/x-wzddhwxqsqhiuyua) has joined
*	rimon[m] (rimonmatri@gateway/shell/matrix.org/x-rqfobiwtubimzyby) has joined
*	rprospero[m] (rprosperom@gateway/shell/matrix.org/x-zgbgeazxsihohboa) has joined
*	Vipernet1220[m] (vipernet12@gateway/shell/matrix.org/x-xodbqcajnhxwlmwe) has joined
*	Guest291964[m] (m291964mat@gateway/shell/matrix.org/x-kmxoalnqjbefptcm) has joined
*	Rubas[m] (rubasmatri@gateway/shell/matrix.org/x-ifqykqjxahvlvtpf) has joined
*	jcarr (~quassel@24.97.198.20) has joined
<hpc>	that happens a lot
<ivegotasthma>	thanks for the help guys
*	ivegotasthma has quit (Quit: WeeChat 1.9.1)
*	peterbecich (~peterbeci@47.37.164.78) has joined
*	cur8or (~cur8or@105.18.business-adsl.cybersmart.co.za) has joined
*	machinedgod has quit (Ping timeout: 260 seconds)
*	ystael (~ystael@209.6.50.55) has joined
*	DTZUZU has quit (Quit: WeeChat 1.9)
<ph88>	hoopl looks nice
*	takuan has quit (Ping timeout: 252 seconds)
*	jcarr has quit (Read error: Connection reset by peer)
*	cpup (~cpup@32.218.116.37) has joined
*	leat has quit (Ping timeout: 240 seconds)
*	jcarr (~quassel@24.97.198.20) has joined
*	simendsjo has quit (Remote host closed the connection)
*	test2342432 (b9bfd9d0@gateway/web/freenode/ip.185.191.217.208) has joined
*	safe (~safe@unaffiliated/safe) has joined
*	ystael has quit (Ping timeout: 240 seconds)
*	CoderPuppy has quit (Ping timeout: 264 seconds)
*	jcarr has quit (Read error: Connection reset by peer)
*	yas (4f10a6ad@gateway/web/freenode/ip.79.16.166.173) has joined
*	conal (~conal@173.208.100.117) has joined
<yas>	hi guys I should write a thing to render graphs is there any library recommended? 
*	jcarr (~quassel@24.97.198.20) has joined
*	jcarr has quit (Read error: Connection reset by peer)
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sun Oct 22 13:28:16 2017

**** BEGIN LOGGING AT Sat Oct 28 12:23:17 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<Garmy>	Thanks so far
*	JeanCarloMachado (~jean@200.18.122.31) has joined
<jle`>	hm
*	Itkovian (~Itkovian@ptr-8a7748iyrbqun3xficl.18120a2.ip6.access.telenet.be) has joined
<jle`>	no it's more like WriterT a []
*	toblorone has quit (Remote host closed the connection)
*	toblorone (~toblorone@104-193-156-29.static-ip.telepacific.net) has joined
*	bilal80 has quit (Quit: bilal80)
*	angular_mike___ has quit ()
<jle`>	actually nvm :) it doesn't fit quite perfectly into either pattern
*	wroathe has quit (Ping timeout: 258 seconds)
*	gehmehgeh (~ircuser1@gateway/tor-sasl/gehmehgeh) has joined
*	angular_mike___ (sid45533@gateway/web/irccloud.com/x-zkzbwxypzrqnryfo) has joined
*	cschneid_ has quit (Ping timeout: 258 seconds)
*	etorrebo_ (~etorrebor@x5ce68a46.dyn.telefonica.de) has joined
*	toblorone has quit (Ping timeout: 258 seconds)
*	zariuq (~zar@176-114-240-18.rychlydrat.cz) has joined
*	torgdor (~weechat@cpe-104-32-77-28.socal.res.rr.com) has joined
*	localhorse_ (~me@ip5f58a45f.dynamic.kabel-deutschland.de) has joined
*	ph88 (~ph88@87.214.234.33) has joined
*	SkyPatrol has quit (Ping timeout: 260 seconds)
*	augur has quit (Remote host closed the connection)
*	etorreborre has quit (Ping timeout: 255 seconds)
*	localhorse has quit (Ping timeout: 255 seconds)
*	xaviergmail (~xavier@226-127.dr.cgocable.ca) has joined
*	coot___________ has quit (Quit: coot___________)
*	mda1 (~SkyPatrol@178-164-155-43.pool.digikabel.hu) has joined
*	JeanCarloMachado has quit (Remote host closed the connection)
*	efeuska (~user@2a02:a210:20c0:6c80:d46b:2f9d:a71e:92b6) has joined
<Garmy>	Something like this already looks a little better, heh http://lpaste.net/5422909519921414144
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
*	mnoonan_ (~mnoonan@cpe-69-201-46-148.twcny.res.rr.com) has joined
*	raichoo (~raichoo@dslb-084-062-125-052.084.062.pools.vodafone-ip.de) has joined
*	buttbutter (~robert@p4FD1B2FD.dip0.t-ipconnect.de) has joined
*	JeanCarloMachado (~jean@200.18.122.31) has joined
*	joeytwiddle is now known as joeytwiddle^snr
*	schell has quit (Quit: schell)
*	a6a3uh has quit (Quit: Bye)
*	dolio has quit (Quit: ZNC 1.6.5 - http://znc.in)
*	aarvar (~foewfoiew@50.34.105.170) has joined
*	mentos1386 (~mentos138@user138.c3.loz.kabelnet.net) has joined
*	chaosmasttter (~chaosmast@p54B463EE.dip0.t-ipconnect.de) has joined
<buttbutter>	What's the most elegant way to take something like  monadic values m a1, m a2, m a3  (all of the same type) and combine them into m (a1 ++ a2 ++ a3)? I guess that was sort of notation bastardization, but do you get what I mean :D?
<buttbutter>	I know you can do it (super ugly) with liftM2... (so liftM2 (++) (m a1) (m a2))...but that sucks! :D
<buttbutter>	(You'd need a second call to liftM2 after that first one to add the m a3 value in)
*	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined
*	jxv has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<Rembane>	buttbutter: What about `ap`?
*	xkapastel (uid17782@gateway/web/irccloud.com/x-qhfgrrxismzifayt) has joined
<Rembane>	buttbutter: Or mapM?
<Rembane>	:t mapM
<lambdabot>	(Monad m, Traversable t) => (a -> m b) -> t a -> m (t b)
*	cschneid_ (~cschneid@2603:300b:901:300:180:1143:c367:cdbd) has joined
<Rembane>	...if you have something traversable.
<buttbutter>	Oh, right. Of course. :) 
<buttbutter>	My haskell is so rusty >:D
<buttbutter>	Thanks./
*	dolio (~dolio@haskell/developer/dolio) has joined
*	mohsen_ (~Mohsen@2.182.166.134) has joined
*	Psybur (~broheim@pool-108-44-203-65.clppva.fios.verizon.net) has joined
*	augur has quit (Remote host closed the connection)
*	Samuel__ has quit (Quit: Ex-Chat)
<Welkin>	buttbutter: maybe you are confused with rust
*	balor_ (~aidan@27.123.171.118) has joined
<Lokathor>	Anyone care to sanity check my module? Only about 50 lines https://github.com/Lokathor/gl-simple/blob/master/src/Graphics/GL/Simple/Types.hs#L31
*	ph88 has quit (Ping timeout: 258 seconds)
<Lokathor>	i just wanted to have an abstraction against the mutable and immutable versions of storable vectors, and I'm pretty sure i did it right
*	JeanCarloMachado has quit (Remote host closed the connection)
*	wroathe has quit (Ping timeout: 240 seconds)
*	louispan has quit (Quit: louispan)
*	path[l] (~vsi@c-73-189-43-89.hsd1.ca.comcast.net) has joined
<buttbutter>	Welkin: I wish, but I don't even know rust :( 
<buttbutter>	but 8/10 pun
<Lokathor>	buttbutter, do you know java/C style code? rust is pretty easy to get into if you're a Haskell user
*	cschneid_ has quit (Ping timeout: 246 seconds)
*	pfurla (~textual@ool-182ed51a.dyn.optonline.net) has joined
*	schell (~schell@c-71-198-28-58.hsd1.ca.comcast.net) has joined
*	Philonous (~Philonous@unaffiliated/philonous) has joined
*	dolio has quit (Quit: ZNC 1.6.5 - http://znc.in)
*	dolio (~dolio@haskell/developer/dolio) has joined
<buttbutter>	Lokathor: I'm very well aquainted with C.
<buttbutter>	acquainted*
<Rembane>	buttbutter: No worries.
<Lokathor>	then you could pick up rust fairly quickly if you were so inclined
<buttbutter>	But at the moment I'm not so interested in learning it. Maybe later :) 
*	dddddd (~dddddd@unaffiliated/dddddd) has joined
*	jbalint has quit (Quit: Bye!)
<Lokathor>	it's like haskell but faster and with worse type errors!
<Lokathor>	and worse compile times too
<Welkin>	it's not like haskell at all
<Welkin>	o.o
<Welkin>	rust is not  functional language
<Welkin>	it has a cool type system though
<Lokathor>	Hmm, it's like how I use haskell then ;P
<hodapp>	I am rather impressed with the amount of practical design that was put into Rust.
*	jbalint (~jbalint@24-177-124-81.dhcp.mdsn.wi.charter.com) has joined
*	jbalint has quit (Changing host)
*	jbalint (~jbalint@unaffiliated/jbalint) has joined
*	danza (~francesco@212.63.98.66) has joined
*	alex`` has quit (Ping timeout: 264 seconds)
<Welkin>	yes, I will very likely use rust next time I need a language with manual memory management like C
*	tibike_m[m] (tibikemmat@gateway/shell/matrix.org/x-kajbjltwgtwfdnji) has joined
*	nshepperd has quit (Quit: WeeChat 1.9.1)
*	cloudhead has quit (Ping timeout: 240 seconds)
*	lobata has quit (Ping timeout: 240 seconds)
*	Itkovian has quit (Ping timeout: 255 seconds)
*	alhariel (~Z0L1DK3K@177.131.168.99) has joined
*	sleffy has quit (Ping timeout: 240 seconds)
*	Itkovian (~Itkovian@ptr-8a7748h9qs5hmo0tz80.18120a2.ip6.access.telenet.be) has joined
*	HoloIRCUser (~holoirc@122.177.24.176) has joined
<HoloIRCUser>	hello
<dmj`>	HoloIRCUser: hello
<HoloIRCUser>	what is haskell?
*	ph88 (~ph88@87.214.234.33) has joined
<HoloIRCUser>	not trolling, serious
<htse>	it's a programming language
<dmj`>	HoloIRCUser: https://www.haskell.org/
*	balor_ has quit (Read error: Connection reset by peer)
<Welkin>	dmj`: you linked to the correct website
<HoloIRCUser>	what is good about haskell compared to other programming languages?
<Welkin>	HoloIRCUser: read the page to find out
*	louispan (~textual@14-203-219-236.static.tpgi.com.au) has joined
*	mentos1386 has quit (Ping timeout: 240 seconds)
*	coot___________ (~coot@188.146.6.88.nat.umts.dynamic.t-mobile.pl) has joined
*	mentos1386 (~mentos138@user138.c3.loz.kabelnet.net) has joined
<Lokathor>	We make ivory towers out of better ivory than all the other ivory towers are made of
<dmj`>	HoloIRCUser: purity, immutability, concurrency, laziness (depending on which haskell person you ask), advanced type system (compared to mainstream languages)
*	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined
*	cdg has quit (Remote host closed the connection)
<Welkin>	I recently saw someone link to haskell-lang.org instead of the official haskell website and it made me remember that whole debacle
*	KongWubba (~yaaic@a89-182-187-80.net-htp.de) has joined
*	cdg (~cdg@2600:1700:3120:40e0:edf7:8a9f:90c8:7683) has joined
<dmj`>	Welkin: similar color scheme :)
<hodapp>	Lokathor: was that a pun because Ivory and Tower are both Haskell libraries from Galois? >_>
*	locallycompact (~lc@cpc79927-stkp12-2-0-cust703.10-2.cable.virginm.net) has joined
<Lokathor>	the concept of an "ivory tower" is a very old one
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
<Lokathor>	i've never heard of that company
<HoloIRCUser>	i will try it
<hodapp>	HoloIRCUser: what is your existing programming experience like?
<Welkin>	Lokathor: have you heard of the person?
<hodapp>	Lokathor: you're in Haskell and haven't heard of Galois?!?!
<HoloIRCUser>	i am more of a sysadmin
<Welkin>	I wouldn't expect anyone to know the company
<Welkin>	but ther mathematician, yes
<Welkin>	the*
<htse>	I know Gauloises
<hodapp>	and I wouldn't expect anyone to know Haskell but here we are :P
*	HoloIRCUser has quit (Read error: No route to host)
*	HoloIRCUser (~holoirc@122.177.24.176) has joined
<Lokathor>	Welkin, nope. google says they were some math person from long enough ago that their picture is in pencil
<HoloIRCUser>	lil bit of java
*	sphinxo (~sphinxo@82-132-232-237.dab.02.net) has joined
<hodapp>	HoloIRCUser: any scripting?
*	nicknight (~ubuntu@unaffiliated/nicknight) has joined
*	osa1 (~omer@haskell/developer/osa1) has joined
<Welkin>	Lokathor: Galois created Galois Theory. He died at age 24 in a pistol duel
<HoloIRCUser>	i can use shell scripts
<Lokathor>	HoloIRCUser, Haskell is pretty different from java. in fact it's about as far from java as you can go
<HoloIRCUser>	is that scripting?
*	Itkovian has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<Lokathor>	hodapp, why would i have heard of G man?
<hodapp>	HoloIRCUser: Java is statically-typed (as Haskell is) but Haskell's type system is much more advanced
*	wroathe has quit (Ping timeout: 248 seconds)
<hodapp>	so it may be quite a transition
<Welkin>	all languages are statically typed
<Welkin>	:P
<Welkin>	the terminology is bad
<Welkin>	all around
<hodapp>	Welkin: not in any useful sense
<Welkin>	scripting language?
<hpc>	"all types are static" maybe?
<Welkin>	everything is a scripting language these days
<Welkin>	"dynamically-typed" languages either have no type system, or they have a type system with exactly one type
<hpc>	that also addresses the silliness of things like "type error" exceptions in dynamic languages
<Lokathor>	Welkin, we know that but this is a beginner so we gotta take baby steps as we explain
<hodapp>	Welkin: that's not really a definition that's of any practical usefulness
*	soniku has quit (Ping timeout: 240 seconds)
*	cdg has quit (Ping timeout: 246 seconds)
<Welkin>	I generally just say they have no type system
*	JeanCarloMachado (~jean@200.18.122.31) has joined
<Welkin>	in javascript, did you know that NaN is a number? and 1 + true = 2
<Welkin>	anything is possible
<HoloIRCUser>	woah
*	towerio has quit (Remote host closed the connection)
*	mentos1386_ (~mentos138@user138.c3.loz.kabelnet.net) has joined
*	mentos1386 has quit (Quit: mentos1386)
<Welkin>	the same is true in python (and perhaps ruby)
*	mentos1386_ is now known as mentos1386
<fakenullie>	but what does TypeError mean if it only has one type?
*	danza has quit (Ping timeout: 255 seconds)
*	Guest38635 has quit (Ping timeout: 248 seconds)
<Welkin>	the "types" are tags applied at runtime to the values
*	towerio (~towerio@137.139.199.8) has joined
<Welkin>	and they can change
<fakenullie>	you're right, python only has objects
*	lkolstad has quit (Ping timeout: 240 seconds)
<fakenullie>	and javascript has polymorphic objects
*	hiptobecubic has quit (Ping timeout: 264 seconds)
<Welkin>	polymorphic?
<Welkin>	javascript has hash tables
<Welkin>	arrays are just hash tables
<Welkin>	like in lua
<Welkin>	indexed only by strings
<fakenullie>	numbers are not hash tables
<Welkin>	oh I see
<Welkin>	yes
*	JeanCarloMachado has quit (Remote host closed the connection)
<hpc>	everything is polymorphic if you can't statically determine what type it is
*	Hexagenic has quit (Quit: Leaving)
<HoloIRCUser>	what is a good use for haskell?
<hpc>	writing programs :P
<Lokathor>	HoloIRCUser, server stuff that doesn't need to interact with the user through a GUI
<HoloIRCUser>	on the web, local code, scripting?
<Lokathor>	so, data processing, network servers, database programs, things like that
<ertes>	is there a performance advantage to using strict MutVar# fields instead of strict IORef fields?
<contiver>	if the latest version of a package in hackage is 1.0, and the previous one is, say, 0.5, is it possible to upload a 0.5.1 (say, to fix something), and will hackage keep them in the correct order? (0.5, 0.5.1, 1.0)
*	koz_ has quit (Ping timeout: 248 seconds)
<hpc>	contiver: yes
<fakenullie>	hmm, even property assignment does not work on numbers in javascript
<contiver>	hpc, thanks
*	JeanCarloMachado (~jean@200.18.122.31) has joined
<ertes>	for example i notice that IORef actually uses a *boxed* MutVar#, and that looks like it would be an extra indirection that i could eliminate by using MutVar# directly
*	eman0n has quit (Quit: Leaving)
*	koz_ (~koz@121.99.240.58) has joined
*	mithsv has quit (Remote host closed the connection)
*	Immune (~Immune@47.145.46.247) has joined
*	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined
*	youtmon has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
<Lokathor>	ertes, you probably have to profile
*	mithsv (~simon@64pc90.sshunet.nl) has joined
<Lokathor>	see how much it inlines
*	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined
*	towerio has quit (Remote host closed the connection)
*	towerio (~towerio@137.139.199.8) has joined
*	schell has quit (Quit: schell)
*	schell (~schell@c-71-198-28-58.hsd1.ca.comcast.net) has joined
*	mohsen_1 (~Mohsen@2.182.166.134) has joined
*	mohsen_ has quit (Read error: Connection reset by peer)
*	mohsen_1 has quit (Max SendQ exceeded)
*	jbgi (~jbgi@178-83-22-209.dynamic.hispeed.ch) has joined
*	mohsen_1 (~Mohsen@2.182.166.134) has joined
*	mithsv has quit (Ping timeout: 240 seconds)
*	{emptyset} (~aconant1@c-73-222-75-3.hsd1.ca.comcast.net) has joined
*	mohsen_1 has quit (Max SendQ exceeded)
*	wroathe has quit (Ping timeout: 240 seconds)
*	mentos1386 has quit (Quit: mentos1386)
*	mohsen_1 (~Mohsen@2.182.166.134) has joined
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
<Welkin>	Lokathor: that is not true
<Welkin>	haskell can be used to write anything
<Welkin>	it is great for writing GUIs as well
<Welkin>	the best GUI these days is the browser
<Cale>	I spend quite a bit of my time at work working on web frontends in Haskell, using reflex-dom. :)
*	cvon (640f7dc7@gateway/web/freenode/ip.100.15.125.199) has joined
<Cale>	Well, web and mobile
*	inhortte has quit (Ping timeout: 248 seconds)
<cvon>	Im having trouble with a monoid conversion function. I'm getting this error: No instance for (Monoid Bool) arising from a use of ‘mempty’. Has anyone gotten this before?
<Cale>	It makes a fair amount of sense to use the DOM as a GUI for desktop and mobile apps as well, especially if you control the DOM directly with native code rather than Javascript.
<mnoonan_>	cvon: I think you have to pick your monoid instance via Any or All
<Cale>	Yeah, Bool doesn't have a monoid instance, but Any and All do.
*	schell has quit (Quit: schell)
*	lobata (~mint@rrcs-74-87-236-243.west.biz.rr.com) has joined
<HoloIRCUser>	what is DOM?
*	augur has quit (Ping timeout: 252 seconds)
*	pera has quit (Ping timeout: 252 seconds)
<Welkin>	Document Object Model
<codeshot>	Bool has several good choices for monoid instances so not one of them has been hard coded as *the* choice
<Welkin>	it is the api used in the browser
<cvon>	Thanks , yea i noticed. But when I try to add Any before my True in my mempty definition of the monoid instance definition, I get the error: Couldn't match expected type ‘Bool’ with actual type ‘Any’
<mnoonan_>	cvon: your result will now be an Any, too.
<mnoonan_>	you might want to look into the ‘newtype’ package
<codeshot>	cvon, you probably should use newtype even if Any and All work because newtype will document the meaning of the way Bools are rolled up
<codeshot>	you have some function that wants a Bool instead of a Monoid
<cvon>	yea
<Cale>	Our mobile apps actually run 3-4 times faster compiled to native code running on phones than they do running in the browser on a desktop machine when compiled to Javascript.
<codeshot>	either change it to accept a Monoid or convert the Any to Bool
<codeshot>	and then pass it in
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
*	sphinxo has quit (Ping timeout: 248 seconds)
<mnoonan_>	> Any `op` mempty
<lambdabot>	 False
<mnoonan_>	> All `op` mempty
<lambdabot>	 True
<mud>	Cale: I need to try that part. Is the mobile stuff easy enough for random people to do? It's not internal-only for you all, right?
<codeshot>	> getAny $ Any True
<dmj`>	Cale: when it runs on the phone, it’s run in a WebView right?
<lambdabot>	 True
<Cale>	dmj`: correct
<Cale>	mud: We recently released support for iPhone and Android in reflex-platform
<mud>	Awesome
<fakenullie>	is it like react-native?
<fakenullie>	or just web
<dmj`>	Cale: ah, so is the JS just loaded into the WebView? Or does the WebView fetch the js from a server
*	HMPerson1 (~HMPerson1@128.211.64.90) has joined
<Cale>	fakenullie: I don't know how react-native works well enough to answer that question. It compiles your Haskell to native ARM code that controls a web view widget.
<Cale>	There's no JS (or at least, there doesn't have to be any)
<codeshot>	cvon, I find it works out nicely to use getAny at the last sensible moment then functions working on Monoids just compose together naturally
*	louispan has quit (Quit: louispan)
<fakenullie>	> getAny True
<lambdabot>	 error:
<lambdabot>	     • Couldn't match expected type ‘Any’ with actual type ‘Bool’
<lambdabot>	     • In the first argument of ‘getAny’, namely ‘True’
<fakenullie>	> getAny mempty
<monochrom>	It's getAny (Any True)
<lambdabot>	 False
<Cale>	That's why the app version of our projects on actually runs faster on phones than the web version runs on a desktop machine -- it's native ARM code that's controlling everything rather than Javascript.
<fakenullie>	getAny (True <> False)
<fakenullie>	> getAny (True <> False)
<lambdabot>	 error:
<lambdabot>	     • Couldn't match expected type ‘Any’ with actual type ‘Bool’
<lambdabot>	     • In the first argument of ‘getAny’, namely ‘(True <> False)’
*	raingloom (~raingloom@catv-178-48-182-34.catv.broadband.hu) has joined
*	emilypi has quit (Ping timeout: 258 seconds)
*	raichoo has quit (Quit: leaving)
*	Jesin has quit (Quit: Leaving)
<fakenullie>	somehow I thought there's some "magic" that converts Bool to corresponding monoid when you use getAny
<monochrom>	Naw, wrong direciton. getAny :: Any -> Bool, not Bool -> Any.
<codeshot>	> getAny $ mconcat (Any <$> [True, False])
<lambdabot>	 True
<fakenullie>	that one
<fakenullie>	ah, no
<monochrom>	Instead, Any :: Bool -> Any is the one converting Bool to the Any monoid.
<codeshot>	but be warned:
<codeshot>	getAny $ mconcat (Any <$> [])
<codeshot>	> getAny $ mconcat (Any <$> [])
<lambdabot>	 False
<monochrom>	> Any (5>0) <> Any (5<0)
<lambdabot>	 Any {getAny = True}
*	towerio has quit (Remote host closed the connection)
<codeshot>	which might not be what you want. If this case is not defined then use a semigroup
<fakenullie>	I think what you wanted to show is All
<codeshot>	> getAny $ sconcat $ fromList (Any <$> [])
<lambdabot>	 error:
<lambdabot>	     • Variable not in scope: sconcat :: t0 -> Any
<lambdabot>	     • Perhaps you meant one of these:
<fakenullie>	> getAll $ mconcat (All <$> [])
<lambdabot>	 True
<fakenullie>	this one confuses people
*	osa1 has quit (Ping timeout: 248 seconds)
<monochrom>	Sure. But people are wrong.
<fakenullie>	I know
*	louispan (~textual@14-203-219-236.static.tpgi.com.au) has joined
<monochrom>	There are still a lot of people who expect product [] = 0
*	iqubic (~iqubic@2601:602:9901:2c9f:4c3b:6b75:2fa9:14a3) has joined
<codeshot>	oh semigroup isn't available in lambdabot
<fakenullie>	does semigroup bottoms in this case/
<monochrom>	I would attempt to refer them to my http://www.vex.net/~trebla/homework/empty.html but if afterwards they're still stubborn I'm done with them.
<fakenullie>	?
*	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined
<codeshot>	no, NonEmpty bottoms
<codeshot>	no, NonEmpty.fromList bottoms
<codeshot>	because you can't define a nonempty list from an empty list :)
<monochrom>	Or do you mean semigroup's mconcat?
<codeshot>	sconcat is for semigroup
*	towerio (~towerio@137.139.199.8) has joined
<fakenullie>	that page is over my math level
<codeshot>	It's actually really easy stuff but all the descriptions are written in academese
<fakenullie>	yeah
*	youtmon (~yout@c-98-242-250-233.hsd1.fl.comcast.net) has joined
<codeshot>	which is designed to make other people feel like idiots to maintain teaching positions :D
<fakenullie>	heh
<monochrom>	No, I don't think it's worse than say MCSE jargonism.
<Welkin>	in particular, papers by Simon Peyton Jones are incredibly easy to read
<Welkin>	he really excels at teaching
<Welkin>	it's easy to write something incomprehensible, but difficult to write something that everyone can understand
<codeshot>	yeah, I got a lot of insight just by reading one of Mr. Peyton-Jones's papers
<monochrom>	where mathematicians say "algebraic structure" all the time, a Windows admin say "deploy" all the time.
<Welkin>	monochrom: that is true as well, for specific domains
*	wroathe has quit (Ping timeout: 248 seconds)
*	mohsen_1 has quit (Read error: Connection reset by peer)
<monochrom>	or maybe "the registry" is a better example.
<codeshot>	It's a shame we don't have pointed functors or you would be able to have getAny $ sconcat $ fromList (pure <$> [...])
<cvon>	http://lpaste.net/2468998083665461248 - Is my code, when I test my conversion function toMyConfig   mempty == mempty, I get the error: No instance for (Monoid Bool) arising from a use of ‘mempty’ Since bool is not a monoid. When i try the getany function to convert it I still get the same error
<codeshot>	then you can define the append strategy at the point of use and nowhere else
<monochrom>	Ah sconcat insists on a non-empty list already. It won't see the bottom caused by [].
*	mohsen_ (~Mohsen@2.182.166.134) has joined
<codeshot>	And actually why don't we have type-specific functors ? Is that nonsensical or something ?
<monochrom>	Err Haskell is a non-strict language, sconcat will totally see that bottom, just that it isn't responsible to do anything.
<codeshot>	monochrom, Sensible types for the win!
<codeshot>	monochrom, you don't know sconcat will see the bottom. You got bottom so the Hask category no longer says what happens next
<fakenullie>	what's wrong with "deploy"?
*	louispan has quit (Quit: louispan)
<codeshot>	bottom -> end of Hask
<monochrom>	It just means "install" but it's now so dressed-up military operation.
<codeshot>	Funnily enough I said to my manager a couple of months ago something like "We should test or something before we deploy it" and he was like "What does deploy mean?" as if I was a intellectualist twat
<codeshot>	:D
*	augur has quit (Remote host closed the connection)
<Welkin>	"deploy", "API", "PR", "CI server"
<Welkin>	I use those all the time
*	slack1256 (~slack1256@181-163-237-12.baf.movistar.cl) has joined
*	ph88 has quit (Ping timeout: 240 seconds)
<fakenullie>	because it's a military operation
<codeshot>	deploy is more than install
<Welkin>	can you ploy?
<codeshot>	deploy includes preparation of people and processes, training materials, etc
*	Psybur has quit (Ping timeout: 240 seconds)
<codeshot>	install is just the change to one or two computers
<codeshot>	Which explains why my Boss thought "deploy" was something I made up to sound smarter than him
<codeshot>	Because he would never imagine doing those things :D
<fakenullie>	you have to ploy when your deploy fails
<Welkin>	codeshot: is your boss the guy from the dilbert cartoons?
<fakenullie>	heh
*	lobata has quit (Read error: Connection reset by peer)
<codeshot>	worse
<codeshot>	he's hands-on
*	fr33domlover has quit (Ping timeout: 264 seconds)
<Welkin>	is he an engineer?
*	qapla_org has quit ()
*	jbgi has quit (Ping timeout: 252 seconds)
<codeshot>	We can't figure it out, his past is software engineering and test but his stories and knowledge seem to indicate his career has been spent elsewhere
*	goodboy has quit (Ping timeout: 248 seconds)
<hpc>	i think that happens more than a lot of people think
<monochrom>	There can only be one sci-fi explanation. His body has been taken over by an alien.
<hpc>	i had a CS professor who was in the army band for 20 years before quitting to teach
<codeshot>	hpc: lol
<Welkin>	when you get deep into an organization, you realize that all companies are dysfunctional kindergartens
<codeshot>	Welkin: more lol
<Welkin>	it's a wonder how anything ever gets done
<hpc>	Welkin: or a sweatshop for grownups
<Welkin>	or how the company continues to exist
<cvon>	or a monarchy # apple
<monochrom>	I know how. As developed countries we actually have surplus food.
<hpc>	harsh
<Welkin>	and how incompetent most of them are
*	tomphp (~tomphp@194.75.227.106) has joined
<codeshot>	lol
<Welkin>	it makes for easy money if you stick around though
<exio4>	monochrom: even with surplus you can be very inefficient when it comes to handling resources :)
*	vexed[vexed] (~vexedvexe@185.38.150.115) has joined
<codeshot>	exio4, he means there's no pressure to eliminate them
*	Chream (~Chream@156-23-11.connect.netcom.no) has joined
*	pera (~pera@unaffiliated/pera) has joined
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
*	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined
*	cdg (~cdg@2600:1700:3120:40e0:edf7:8a9f:90c8:7683) has joined
*	Chream has quit (Remote host closed the connection)
*	mnoonan_ has quit (Quit: mnoonan_)
*	Chream (~user@156-23-11.connect.netcom.no) has joined
*	fr33domlover (~fr33domlo@fsf/member/fr33domlover) has joined
*	HoloIRCUser has quit (Read error: Connection reset by peer)
*	HoloIRCUser (~holoirc@122.177.24.176) has joined
<cvon>	http://lpaste.net/2468998083665461248 - Is there an error with my mappend definition in Config? Because my toMyConfig function basically converts a type to another type with the same fields. I still get the error: No instance for (Monoid Bool) arising from a use of ‘mempty’ when testing: toMyConfig   mempty == mempty  
*	ilyaigpetrov has quit (Quit: Connection closed for inactivity)
*	martinium (~martinium@unaffiliated/martinium) has joined
<cvon>	sry i mean my mempty definition not my mappend
*	Psybur (~broheim@pool-108-44-203-65.clppva.fios.verizon.net) has joined
*	tgecho has quit (Quit: Connection closed for inactivity)
*	wroathe has quit (Ping timeout: 240 seconds)
*	KongWubba has quit (Quit: Yaaic - Yet another Android IRC client - http://www.yaaic.org)
*	ninedotnine has quit (Read error: Connection reset by peer)
*	cdg has quit (Ping timeout: 252 seconds)
*	ph88 (~ph88@87.214.234.33) has joined
*	ninedotnine (~dan@modemcable078.123-81-70.mc.videotron.ca) has joined
<slack1256>	Any cool uses of free applicative functors apart from validation forms?
*	etorrebo_ has quit (Remote host closed the connection)
<monochrom>	I can't spot an error. What is the verbatim unabridged error message?
<ertes>	slack1256: not many, because they are really just glorified free monoids
<codeshot>	you create a GConfig using a Bool and GConfig defines mempty to initialise that Bool with mempty - where there isn't one
<monochrom>	Oh! That one.
<cvon>	So when I run: toMyConfig   mempty == mempty, I get this error:  • No instance for (Monoid Bool) arising from a use of ‘mempty’     • In the second argument of ‘(==)’, namely ‘mempty’       In the expression: toMyConfig mempty == mempty       In an equation for ‘it’: it = toMyConfig mempty == mempty
<cvon>	oh
<codeshot>	Maybe the parameter of Config should be All instead of Bool
<slack1256>	ertes: that runAp_ function with the monoid contraint should have told me 
<codeshot>	And you can define it as cAggregateOpt and define cOpt = getAall . cAggregateOpt
<codeshot>	I think
*	Xion__ (~xion@host109-148-117-160.range109-148.btcentralplus.com) has joined
*	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined
*	jxv (~jxv@107-143-150-225.lightspeed.irvnca.sbcglobal.net) has joined
*	{emptyset} has quit (Ping timeout: 260 seconds)
*	JeanCarloMachado has quit (Remote host closed the connection)
*	jb551 (~jb55@70-36-49-138.dyn.novuscom.net) has joined
<jle`>	cvon: i looks like there is no instance of Monoid for MyConfig
*	HoloIRCUser1 (~holoirc@122.177.24.176) has joined
*	Chream has quit (Remote host closed the connection)
<cvon>	@codeshot Thanks! I'll try that
<lambdabot>	Unknown command, try @list
*	JeanCarloMachado (~jean@200.18.122.31) has joined
*	Chream (~user@156-23-11.connect.netcom.no) has joined
<cvon>	MyConfig is just a type alias
<jle`>	cvon: that's what i mean
<jle`>	there is no Monoid instance for GConfig Bool [String] Int
<jle`>	none is provided or written
<jle`>	so you can't use mempty for it :)
*	HoloIRCUser has quit (Ping timeout: 240 seconds)
<codeshot>	Are you sure you want a Monoid for this?
<cvon>	its not that I want, I'm required to do so for an assignment
<codeshot>	I would have too, but I can't see a non-clunky way to do it
<pie_>	hi guys, does haskell have anything for named arguments?
<jle`>	pie_: not natively, but you can simulate it using records
<codeshot>	Should it be "Last" instead of "All" - so the last appended config value chooses the cOpt value ?
<pie_>	jle`, is that comfortable?
<codeshot>	lots of choices here
<Welkin>	pie_: define a datatype
<jle`>	cvon: does your assignment require you to use mempty for MyConfig?
<pie_>	i mean i feel like im going to miss that from python
<cvon>	The only things i can change are under the define in my code, nope
<Welkin>	pie_: trust me, you won't miss anything from python
<jle`>	cvon: i mean, your code is fine
<fakenullie>	heh
<pie_>	ok >_< xp
<jle`>	it's just `toMyConfig mempty == mempty` doesn't make sense
<codeshot>	below line 15 ?
<jle`>	since MyConfig has no Monoid instance
<codeshot>	Then you can't forward the mempty to your Bool
<jle`>	GConfig Bool [String] Int doesn't have a Monoid instance
<jle`>	it's meaningless
<codeshot>	You have to be explicit in MyConfig's mempty and mappend implementations how to append the boolean field
<pie_>	also i wanted to pick up haskell a while ago but anytihng i want to work on really works with binaries and i cant really find any libraries that will let me deal with bit streams and the like
<pie_>	everything i found is only for byte level / byte aligned stuff
<jle`>	cvon: oh, do need to *define* MyConfig?
<cvon>	line 37, 41, 44, 18-19 is only what i can change. 
<cvon>	yea
<jle`>	so that its monoid instance is the same as Config?
<jle`>	ah okay
<cvon>	yea
<codeshot>	Oh my
<fakenullie>	pie_: current computers work on byte level stuff
<codeshot>	I misread your code originally
<codeshot>	I may have mislead you
<jle`>	so check out the instance for GConfig
<pie_>	fakenullie, ok but that doesnt really solve my problem
<cvon>	ah no problem lol, i appreciate any help rly. 
<prohobo>	wololoooo
<jle`>	and the instance for Config
<jle`>	compare the two
<codeshot>	I got mixed up with Config and GConfig etc
<jle`>	for the first field, you mappend using &&
<fakenullie>	pie_: https://hackage.haskell.org/package/bitarray-0.0.1.1/docs/Data-BitArray.html ?
<jle`>	the second field you mappend using ++
<jle`>	the third field you mappend using +
<jle`>	so you just have to pick types that have the appropriate Monoid instances to give you that behavior
<pie_>	fakenullie, hm that might work thanks
<jle`>	so you can use GConfig All [String] (Sum Int)
<codeshot>	line 30 and line 37 conflict
<jle`>	type MyConfig = GConfig All [String] (Sum Int)
<fakenullie>	pie_: https://hackage.haskell.org/package/bitstring-0.0.0/docs/Data-BitString.html
<cvon>	Sum Int? - u mean that only allows sum operations
<codeshot>	37 says the gcOpt is Bool and line 30 says the gcOpt is a Monoid instance
<jle`>	cvon: (Sum Int) is a newtype wrapper over Int where mappend = (+)
<codeshot>	This is the crux of the problem
<jle`>	cvon: instance Monoid (Sum Int) where mempty = Sum 0; mappend (Sum x) (Sum y) = Sum (x + y)
<jle`>	so that gives you the mempty/mappend that you want
*	pie_ hopes he wont have to switch to rust :D
*	henriksod1 (~Thunderbi@89.160.47.146) has joined
*	slack1256 has quit (Remote host closed the connection)
<cvon>	oh i see. im assuming there also a one for mult int. thanks
*	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined
<jle`>	mhm
<jle`>	no problem
<jle`>	but then you have to be a bit more sophisticated with toMyConfig and fromMyConfig
<fakenullie>	cvon: Product?
<pie_>	fakenullie, ah i didnt think to search hackage just for "bit" i kept loking fo rvariations on binary
<jle`>	but yeah, 'All' is a Bool whose Monoid instance is mappend = (&&)
<pie_>	now i found some thinkgs that look more promising
*	henriksod has quit (Ping timeout: 260 seconds)
*	henriksod1 is now known as henriksod
<jle`>	and 'Sum Int' is an Int whose Monoid instance is mappend = (+)
<codeshot>	cvon, if you make MyConfig = GConfig Any ... and make toMyConfig and fromMyConfig use All and getAll does it solve your problem?
<jle`>	> All True <> All False
<lambdabot>	 All {getAll = False}
<fakenullie>	pie_: you have to learn Haskell first
<jle`>	> All True <> All True
<lambdabot>	 All {getAll = True}
*	Welkin has quit (Quit: leaving)
<jle`>	> Sum 2 <> Sum 8
*	lobata (~mint@rrcs-74-87-236-243.west.biz.rr.com) has joined
<lambdabot>	 Sum {getSum = 10}
<pie_>	fakenullie, well...yeah XD
<codeshot>	ah jle` is on this I see, good man
<codeshot>	or woman
<codeshot>	or boy or girl
<fakenullie>	pie_: it's not like learning another imperative language
<pie_>	fakenullie, i actually had a round at scheme first
<pie_>	because round 0 of an attempt at haskell faile dmiserably due to being mindf***ed by recursion :)
<cvon>	Codeshot let me try that
<codeshot>	jle` already saw further than me
<fakenullie>	pie_: scheme won't help much
*	tomphp has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<pie_>	fakenullie, ah... :P well at least i can handle recursion now
*	marr (~ccc@87-205-254-96.adsl.inetia.pl) has joined
<pie_>	at least on some level
<jle`>	"luckily" in practice, recursion isn't an everyday thing in haskell
*	tomphp (~tomphp@194.75.227.106) has joined
*	wroathe has quit (Ping timeout: 240 seconds)
*	jb551 has quit (Quit: WeeChat 1.9)
*	jb55 (~jb55@70-36-49-138.dyn.novuscom.net) has joined
*	henriksod has quit (Quit: henriksod)
<iqubic>	jle`: What do you mean? I thought recursion was all over the place in haskell.
<codeshot>	I'm suprised there's no predefined "None" ie it's false until true is seen then it stays true
<jle`>	well, i mean explicitly writing recursion
<jle`>	codeshot: do you mean Any ?
<iqubic>	jle`: Yeah, I do that all the time.
<jle`>	iqubic: yeah, it's not a common thing in actual haskell
<fakenullie>	you have to learn very much to stop using recursion explicitly
*	Tops2 (~Tobias@dyndsl-095-033-079-036.ewe-ip-backbone.de) has joined
<jle`>	explicit recursion is the GOTO of functional programming
<iqubic>	It is?
<fakenullie>	I agree
<iqubic>	But how do you do loops and such?
<jle`>	higher-order functions
<hpc>	iqubic: it is - it's what you start with and then you build abstractions on top of it
<jle`>	:t forever
<lambdabot>	Applicative f => f a -> f b
<jle`>	:t foldr
<lambdabot>	Foldable t => (a -> b -> b) -> b -> t a -> b
<jle`>	etc.
<codeshot>	For an option I'd expect either "None", First, or Last rather than All
<hpc>	same way loops in imperative languages are made out of... actual GOTOs
<hpc>	label
<hpc>	code
<codeshot>	an option flag is usually set to the value found when it first appears, last appears or if it appears at all
<hpc>	if condition, goto label
<jle`>	instead of explicit recursion, you'd use higher-order functions and combinators
<iqubic>	jle`: I see/
<codeshot>	not only switched off if it appears
<jle`>	codeshot: First/Last make sense for actual values
*	cyborg-one (~cyborg-on@130-0-53-175.broadband.tenet.odessa.ua) has joined
<jle`>	that's why they do exist in base, but they're parameterized by types
<jle`>	you have 'First a', which gives the first 'a' found
<jle`>	and 'Last a', which gives the last 'a' found
*	xaviergmail has quit (Quit: WeeChat 1.9.1)
<codeshot>	jle` yeah, I was imagining options like -f[no-]blah too
<iqubic>	What if I want to keep taking input from the user until the string given matches a predicate foo, and then return that?
<jle`>	iqubic: you'd probably first look for a higher order function
<pie_>	oh...
<iqubic>	I usually use explict recursion for that.
<jle`>	and if you don't find a suitable one, you might use explicit recursion
<codeshot>	for "switch-on" only I expect a "None" type
<pie_>	<iqubic> But how do you do loops and such?
<pie_>	<jle`> higher-order functions
<pie_>	yeah i was usually trying to do that but it didnt always work out :P
<iqubic>	jle`: What would you do in that case?
*	mohsen_ has quit (Quit: Leaving)
*	aminb has quit (Quit: aminb out.)
<fakenullie>	iqubic: head . filter pred
<monochrom>	I am not as extreme in advocating to avoid handwritten recursion, but it is always valuable to recognize that you're reinventing map or foldr for example.
*	JeanCarloMachado has quit (Remote host closed the connection)
<iqubic>	fakenullie: But where do you take the user's input?
<jle`>	iqubic: there are some higher order functions in http://hackage.haskell.org/package/monad-loops-0.4.3/docs/Control-Monad-Loops.html, for instance
<jle`>	in this case it might be simpler to just use explicit recursion, but
<jle`>	the cases where explicit recursino is simplest or the easiest to read are rarer than the cases where you'd use higher order functions
*	louispan (~textual@14-203-219-236.static.tpgi.com.au) has joined
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
<iqubic>	What I do is: "getInput = do input <- getLine; if isValid input then return input else getInput;
<jle`>	yes, that's not particularly bad, but do you see how it is essentially GOTO?
<cvon>	@ Codeshot @jle` thank you! it worked
*	JeanCarloMachado (~jean@200.18.122.31) has joined
<iqubic>	jle`: Yeah, I do.
<jle`>	cvon: no problem!
*	louispan has quit (Client Quit)
<cvon>	whats the equivalent of @ in irc?
<jle`>	in simple cases not too bad, but in even slightly complex cases it leads to hard to read/hard to debug/unmaintainable code
<hpc>	cvon: this
<cvon>	hpc: this ?
<hpc>	yep
<hpc>	you can even tab-complete
<iqubic>	In most irc clients you can.
<cvon>	oh lol, im new to irc
<cvon>	ive used slack though ..
<jle`>	welcome to irc :)
<iqubic>	jle`: Is there a higher order function to replace what I just wrote?
<codeshot>	cvon, have you understood what's going on?
<jle`>	iqubic: what you wrote is basically 'untilJust' from monad-loops
<iqubic>	Wait really?
<iqubic>	jle`: The page you linked is not valid/
<jle`>	untilJust (mfilter isValid . Just <$> getLine)
<jle`>	@hackage monad-loops
<lambdabot>	http://hackage.haskell.org/package/monad-loops
<codeshot>	cvon, just using the nick name in your line is enough for many clients, using at the front is especially good
<codeshot>	mine does this when I tab complete
<codeshot>	cvon, then I can type after the comma
*	mizu_no_oto_work has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<pie_>	cvon, you just say the persons nick
*	pmikkelsen (~user@D4709BFC.rev.sefiber.dk) has joined
<cvon>	nickname?
<pie_>	pie_ is my nick
*	Psybur has quit (Ping timeout: 240 seconds)
<pie_>	thats what the username is called
<jle`>	nick is irc's term for username/handle/etc.
<codeshot>	no, your nick and username can be different
<fakenullie>	you juts say whatever is in front of messages to which you reply
*	codeshot is now known as help
<jle`>	oh, nvm, you're right.  it's been a while since i did this v.v
*	help is now known as codeshow
*	codeshow is now known as codeshot
*	HoloIRCUser1 has quit (Ping timeout: 255 seconds)
<pie_>	codeshot, i never actually bothered to figure out the difference >_>
<iqubic>	There is a difference?
*	HoloIRCUser (~holoirc@122.177.24.176) has joined
<iqubic>	:t mfilter
<lambdabot>	MonadPlus m => (a -> Bool) -> m a -> m a
*	carlomagno (~cararell@inet-hqmc01-o.oracle.com) has joined
<iqubic>	What does that do??
<monochrom>	Read the doc.
*	aminb (~amin@nix.aminb.org) has joined
*	aminb has quit (Changing host)
*	aminb (~amin@gnu/aminb) has joined
*	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined
*	jxv has quit (Quit: Textual IRC Client: www.textualapp.com)
<iqubic>	I see how that works.
*	takuan has quit (Ping timeout: 240 seconds)
*	hiratara has quit (Ping timeout: 258 seconds)
*	urodna has quit (Quit: urodna)
*	xkapastel has quit (Quit: Connection closed for inactivity)
<iqubic>	I like "untilJust (mfilter isValid . Just <$> getLine)
<iqubic>	:t Just <$> getLine
<lambdabot>	IO (Maybe String)
<iqubic>	Wait, what?!?!
*	cschneid_ (~cschneid@2603:300b:901:300:180:1143:c367:cdbd) has joined
<iqubic>	Why is that the type?
<iqubic>	:t <$>
<lambdabot>	error: parse error on input ‘<$>’
<iqubic>	:t (<$>)
<lambdabot>	Functor f => (a -> b) -> f a -> f b
<iqubic>	:t getLine
<lambdabot>	IO String
<iqubic>	:t Just
<lambdabot>	a -> Maybe a
*	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has joined
*	wroathe has quit (Ping timeout: 240 seconds)
<fakenullie>	it's fmap
<Clint>	now you understand
<iqubic>	I get it.
*	aminb has quit (Quit: aminb out.)
*	simka has quit (Quit: WeeChat 1.9.1)
*	hiratara (~hiratara@240f:7:4708:1:b0f2:b314:9fec:fffb) has joined
*	aminb (~amin@nix.aminb.org) has joined
*	aminb has quit (Changing host)
*	aminb (~amin@gnu/aminb) has joined
*	tomphp has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	ystael (~ystael@209.6.50.55) has joined
<iqubic>	> (+5) <$> (Just 10)
<lambdabot>	 Just 15
*	cschneid_ has quit (Ping timeout: 246 seconds)
<Eduard_Munteanu>	> (*2) <$> (+1) $ 3
<lambdabot>	 8
<fakenullie>	> (*2) <$> (+1) <*> 3
<lambdabot>	 error:
<lambdabot>	     • No instance for (Typeable a0)
<lambdabot>	         arising from a use of ‘show_M364512682179909534827680’
*	thc202 has quit (Ping timeout: 264 seconds)
<Eduard_Munteanu>	it's (.)
*	urodna (~urodna@unaffiliated/urodna) has joined
<codeshot>	You can't multiply (+1) by 2
<fakenullie>	> (*) <$> Just 2 <*> Just 3
*	stevenxl (uid133530@gateway/web/irccloud.com/x-ybsmeiqyypzgxrhj) has joined
<lambdabot>	 Just 6
*	ystael has quit (Ping timeout: 246 seconds)
<fakenullie>	> (*) <$> 2 <*> 3
<lambdabot>	 error:
<lambdabot>	     • Ambiguous type variable ‘f0’ arising from a use of ‘show_M480411106328...
<lambdabot>	       prevents the constraint ‘(Show (f0 Integer))’ from being solved.
*	chaosmasttter has quit (Ping timeout: 240 seconds)
<monochrom>	This shows that $ can't buy you <*>
<htse>	how does haskell define wether to use the IO action or String return type of printf? I put printf in my main entry point and it never prints, I always need to put a putStrLn
<Eduard_Munteanu>	htse, printf would better be called sprintf, it only gives you a string.
<iqubic>	:t printf
<lambdabot>	PrintfType r => String -> r
<iqubic>	Or not really.
<Eduard_Munteanu>	> printf "%d" 3 :: String
<lambdabot>	 "3"
<Eduard_Munteanu>	> printf "%d" 3 :: IO ()
<lambdabot>	 <IO ()>
*	locallycompact has quit (Ping timeout: 248 seconds)
<Eduard_Munteanu>	Hm, there's an instance for that?
*	danvet has quit (Ping timeout: 264 seconds)
<htse>	so I need to specify what it needs to become?
<iqubic>	> printf "%d" 3 :: Int
<lambdabot>	 error:
<lambdabot>	     • No instance for (PrintfType Int) arising from a use of ‘printf’
<lambdabot>	     • In the expression: printf "%d" 3 :: Int
<monochrom>	Show actual code? main = printf "%s\n" "abc" works for me.
*	terminalcommand has quit (Remote host closed the connection)
*	coot___________ has quit (Quit: coot___________)
<fakenullie>	> printf "%d%d" 3
<lambdabot>	 error:
<lambdabot>	     • Ambiguous type variable ‘a0’ arising from a use of ‘show_M734721288290...
<lambdabot>	       prevents the constraint ‘(Show a0)’ from being solved.
*	noam has quit (Read error: Connection reset by peer)
<htse>	main = (printf "you have: %0ig %0is %0ic" gold silver copper) where         
<htse>	              (gold,silver,copper) = (toWowMoney 30101)
<htse>	the gold silver coper are just Int
<htse>	I' just playing around with lots of stuff
<fakenullie>	but IO String does not print
*	noam (~noam@77.138.133.172) has joined
<Eduard_Munteanu>	> printf "%d" 3 :: IO String
<iqubic>	No, it's an IO action that gets a string
<lambdabot>	 error:
<lambdabot>	     • Couldn't match type ‘[Char]’ with ‘()’
<lambdabot>	         arising from a use of ‘printf’
<monochrom>	I don't have code for toWowMoney to reproduce your error.
<fakenullie>	> printf "%d" 3 :: IO ()
<lambdabot>	 <IO ()>
*	simukis has quit (Ping timeout: 258 seconds)
<Eduard_Munteanu>	htse, you need a newline at the end
<monochrom>	Either give the code or post the verbatim unabridged error message.
<Eduard_Munteanu>	I suspect without a newline it just puts it into the output buffer without flushing.
<monochrom>	Ah but the RTS will flush before quitting.
<htse>	that actually does it yes
<htse>	that's very weird behaviour :/
*	cdg (~cdg@2600:1700:3120:40e0:edf7:8a9f:90c8:7683) has joined
*	towerio has quit (Remote host closed the connection)
<Eduard_Munteanu>	Standard output is normally line-buffered.
<mud>	htse: It's called buffering, it's ... fairly common. It's a good strategy for performance usually.
*	towerio (~towerio@137.139.199.8) has joined
<monochrom>	OK so I have main = printf "%s" "abc"
<Eduard_Munteanu>	@src putStr
<lambdabot>	putStr s = hPutStr stdout s
*	towerio has quit (Remote host closed the connection)
<mud>	htse: You can configure it not to do that (hSetBuffering) if you want.
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined
<monochrom>	I get abctrebla@figaro$ in which the "trebla@figaro$" part is my unix prompt.
*	towerio (~towerio@137.139.199.8) has joined
<monochrom>	Meaning it does print my "abc" successfully but maybe you didn't spot it.
*	towerio has quit (Remote host closed the connection)
*	towerio (~towerio@137.139.199.8) has joined
<htse>	if I put a newline in my formatstring then it basically prints only up to the newline
*	towerio has quit (Remote host closed the connection)
*	towerio (~towerio@137.139.199.8) has joined
<monochrom>	Perhaps your unix prompt is set up to eat it?
<htse>	so it flushes and then fills the buffer again?
*	goodboy (~goodboy@170.52.69.227) has joined
*	towerio has quit (Remote host closed the connection)
<htse>	what stdout?
<monochrom>	No. Terminal escape codes that request "clear the line"
*	cdg has quit (Ping timeout: 246 seconds)
*	soniku has quit (Remote host closed the connection)
*	towerio (~towerio@137.139.199.8) has joined
*	towerio has quit (Remote host closed the connection)
*	Sgeo has quit (Read error: Connection reset by peer)
<monochrom>	I just don't believe the fairy tale that "under line buffering if you don't have \n you'll have data loss".
<mud>	Naw, that doesn't sound right, not even close to what I've experienced.
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
<monochrom>	And I have already showed an experiment to support my belief.
*	wroathe has quit (Ping timeout: 264 seconds)
<htse>	if that where the case then I couldn't let it print 2 lines under any circonstance
<htse>	since it'd use \n every time right?
*	capnpotato1 (~tor@host81-149-19-83.in-addr.btopenworld.com) has joined
*	Arcaelyx has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	Garmy has quit (Quit: Bye!)
<Eduard_Munteanu>	I'm not sure what you mean, you can use \n twice or more in a format string.
*	Sgeo (~Sgeo@ool-18b98627.dyn.optonline.net) has joined
<Eduard_Munteanu>	Or printf multiple times.
<pie_>	is there something up with ivorylang.org
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
<Fairy>	monochrom: I'm not a tale!
<monochrom>	Oh I just mean tales about you. :)
<Fairy>	But those are supposed to be secret!
*	iqubic has quit (Remote host closed the connection)
<htse>	if I put main = (printf "money: %0ig %0is %0ic\nTry again tomorrow!" 1 1 1) then it doesn't print "Try again tomorrow!"
*	netheranthem has quit (Read error: Connection reset by peer)
*	tremon has quit (Quit: getting boxed in)
<htse>	it only prints until the first \n
<Eduard_Munteanu>	htse, sure, you need a newline for each line. :)
<monochrom>	This one is an "ambiguous type variable" error.
*	cic has quit (Ping timeout: 240 seconds)
*	Vorpal has quit (Ping timeout: 240 seconds)
<htse>	if I don't put a newline it prints nothing
*	lukaramu has quit (Quit: Leaving)
<htse>	with say putStrLn it works fine so a String is properly returned, it just seems weird behaviour to me
<Eduard_Munteanu>	Hmmm... are you doing it in ghci?
<htse>	no
*	cic (~cic@c83-252-134-30.bredband.comhem.se) has joined
<htse>	in ghci it works fine
<htse>	this is compiled with ghc
*	goodboy has quit (Quit: WeeChat 1.9.1)
<monochrom>	What does your echo $PS1 say?
<monochrom>	Because so far I cannot reproduce any of your observation.
*	Arcaelyx (~Arcaelyx@206.190.145.84.adsl.inet-telecom.org) has joined
<htse>	%F{113}%n@%m%f %F{208}λ%f %F{cyan}%~%f ${ruby_info[version]} ${node_info[version]} ${python_info[virtualenv]}
<htse>	%(!. %B%F{red}#%f%b.)${editor_info[keymap]} 
<monochrom>	In the case of the latest one, it's a type error.
<htse>	I use a zsh shell here
*	Vorpal (~Vorpal@unaffiliated/vorpal) has joined
<monochrom>	OK I don't know zsh. But supposedly you could walk me through it.
<monochrom>	What does %F(113) mean?
*	pacak has quit (Ping timeout: 252 seconds)
<monochrom>	I almost thought it's in base 8, until I saw "208" later.
*	epsilonhalbe (~epsilonha@84-113-106-42.cable.dynamic.surfer.at) has joined
*	mkoenig_ (~mkoenig@93.115.89.214) has joined
<monochrom>	Or maybe it is zsh itself that clears the line?
<htse>	it's a foreground colour
*	jgertm has quit (Ping timeout: 240 seconds)
*	mkoenig has quit (Ping timeout: 252 seconds)
<monochrom>	So try another shell?
<Clint>	monochrom: it does depending on the settings of PROMPT_CR and PROMPT_SP
<htse>	everything prints fine when using for example putStrLn
*	darlan (~darlan@191.191.127.66) has joined
*	darlan has quit (Client Quit)
*	Arcaelyx has quit (Ping timeout: 248 seconds)
<Clint>	htse: try doing ./yourprogram;print
<htse>	in bash it works as I expect it would
<monochrom>	OK so zsh problem.
<htse>	so why does putStrLn work then?
<monochrom>	Why not?
*	jgertm (~jgertm@c-73-170-252-167.hsd1.ca.comcast.net) has joined
<htse>	shouldn't it output the exact same thing both times?
<monochrom>	"Clear this line" does not mean "also clear two previous lines".
<Eduard_Munteanu>	htse, try the equivalent of   echo -n 'foo'   in zsh
<prohobo>	what do you guys use haskell for?
<monochrom>	/topic zsh is wrong
<Clint>	also if you haven't changed your zsh defaults you are using zsh from ancient times
<prohobo>	is it useful in web dev?
<monochrom>	I use Haskell to write Haskell tutorials :)
<Eduard_Munteanu>	It could be that zsh simply clears the current line before printing the prompt.
<Clint>	yes, that's what it used to do by default
<Eduard_Munteanu>	prohobo, I've done a bit of web dev in Haskell, yes.
<prohobo>	i guess you wrote a haskell script for some data processing server-side?
<Eduard_Munteanu>	@src putStrLn
<lambdabot>	putStrLn s = do putStr s; putChar '\n'
<htse>	Clint ;print corrects the behaviour
<Eduard_Munteanu>	htse, ^
<Clint>	htse: so you are using zsh 3.0.5 or something
<prohobo>	i just dont understand where functional programming can be useful
<htse>	I'll check
<prohobo>	its confusing
<Eduard_Munteanu>	@src print
<lambdabot>	print x = putStrLn (show x)
<monochrom>	My perspective, functional programming is clear to me (imperative programming is the confused one) so I find it useful for everything.
<Eduard_Munteanu>	prohobo, I'd say it's generally useful, not a particular niche or anything
*	takle (~takle@host31-48-81-170.range31-48.btcentralplus.com) has joined
<prohobo>	hm interesting
*	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined
<Eduard_Munteanu>	PHP and Haskell are overlapping tools built on different ideas, not complementary tools.
*	hiratara has quit (Quit: ZNC - http://znc.in)
<prohobo>	so you would feel comfortable to, for example, write a REST API with Haskell?
<htse>	I use zsh 5.4.2 
<Eduard_Munteanu>	I do.
<Clint>	htse: so you have changed the defaults
*	HoloIRCUser3 (~holoirc@122.177.24.176) has joined
*	Welkin (~Welkin@107.147.90.29) has joined
<htse>	hmm I installed prezto to use one of those themes, I guess that did it
<prohobo>	cool
<prohobo>	im gonna learn haskell
*	hiratara (~hiratara@240f:7:4708:1:40b2:419f:ab92:c0b) has joined
<Welkin>	but you are a pro hobo!
<Welkin>	why not stick with that?
<Welkin>	what does a hobo need haskell for?
<monochrom>	Perhaps it's just a nick.
<monochrom>	I'm not a chrom either.
<prohobo>	dude ill have you know that i own a fully fitted cardboard box work station
*	dminuoso (~dminuoso@unaffiliated/dminuoso) has joined
<prohobo>	i program at mcdonalds
<dminuoso>	Hi. Is there a reason why Functor does not require some variant of `pure/return` ?
<dminuoso>	I mean categorically a Functor not only maps morphisms, but also objects.
<htse>	I think I better switch back to bash
<Eduard_Munteanu>	dminuoso, the objects map is the functor type function itself
*	HoloIRCUser has quit (Ping timeout: 248 seconds)
<Welkin>	prohobo: that is a surprisingly common occurrence,
*	JuanDaugherty has quit (Remote host closed the connection)
<Eduard_Munteanu>	It belongs to types, not values.
<monochrom>	The "maps objects" part is already covered by the type, e.g., the Maybe functor maps object Int to object Maybe Int.
*	wroathe has quit (Ping timeout: 248 seconds)
*	pacak (~pacak@175.156.151.24) has joined
<dminuoso>	monochrom: Is that type constructor enough?
<monochrom>	I don't understand the question. But everything I've said is true.
<dminuoso>	Or is it just assumed that the type must have meaningful data constructors?
<dminuoso>	Mmm
<Welkin>	is there an easy way to flip the pixels loaded in by juicypixels? I need to load the data in reverse order
*	capnpotato1 has quit (Quit: Leaving.)
*	MawKKe[m] (mawkkematr@gateway/shell/matrix.org/x-rpcibchdclatmdlx) has joined
<Eduard_Munteanu>	dminuoso, no
<monochrom>	We consider IO to be a functor without meaningful data constructors.
<Welkin>	just reversing the "rows"
<monochrom>	And perhaps ((->) Double) is a better example of a functor without data constructors.
<Welkin>	IO has a data constructor, but it is hidden
<monochrom>	A functor won't talk about data constructors.
<Eduard_Munteanu>	As long as you can write a lawful fmap, it's a functor.
<Welkin>	a fmunctor
<Welkin>	sometimes haskell shounds like dr seuess
*	tac-tics (~tactics@ip72-208-219-183.ph.ph.cox.net) has joined
<Eduard_Munteanu>	Well, they couldn't have call it fap. :)
<monochrom>	In the case of the Haskell Functor class, objects are types and nothing talks about values and data constructors.
*	HoloIRCUser (~holoirc@122.177.24.176) has joined
<fakenullie>	what's (-> Double)?
<Eduard_Munteanu>	fakenullie, Double ->
<Eduard_Munteanu>	Er.
<monochrom>	Well, you can rewrite "Double -> Bool" as "((->) Double) Bool". That.
<Eduard_Munteanu>	fakenullie, I need some context
<monochrom>	> let { f :: ((->) Double) Bool; f x = x > 1 } in f (-3)
<lambdabot>	 False
<dminuoso>	monochrom: Ah okay that -> example was helpful
<fakenullie>	> fmap id (\x -> 3.9)
<lambdabot>	 error:
<lambdabot>	     • No instance for (Typeable p0)
<lambdabot>	         arising from a use of ‘show_M609887589293880596328855’
<fakenullie>	nevermind
<Eduard_Munteanu>	:t let f :: (->) Double Bool; f = undefined in f
<dminuoso>	o_O
<lambdabot>	Double -> Bool
*	eschnett (~eschnett@ktnron0916w-lp130-1-65-94-201-103.dsl.bell.ca) has joined
*	buttbutter has quit (Remote host closed the connection)
<fakenullie>	but what does ((->) Double) functor do?
<monochrom>	I don't think id would fit the required type in your example.
<Eduard_Munteanu>	It's pretty much the same thing as Reader Double, if you know Reader.
*	HoloIRCUser3 has quit (Ping timeout: 248 seconds)
<monochrom>	Its fmap behaves like (.)
<fakenullie>	isn't it fmap of any function?
<monochrom>	To see this, use the type (a -> b) -> (Double -> a) -> (Double -> b)
*	JuanDaugherty (~juan@98.4.124.117) has joined
<Welkin>	for a functor (->) c, fmap is the same as any other functor
<Welkin>	:t fmap
<lambdabot>	Functor f => (a -> b) -> f a -> f b
<Welkin>	here, the `f` is `(->) c`
<Eduard_Munteanu>	> (+ 1) . (* log 10) $ 100
<monochrom>	Oh, id always fit the required type.
<lambdabot>	 231.25850929940458
<Welkin>	so it becomes (.)
<Welkin>	:t (.)
<lambdabot>	(b -> c) -> (a -> b) -> a -> c
<fakenullie>	:t fmap (undefined :: x -> Double)
<lambdabot>	Functor f => f x -> f Double
*	mizu_no_oto_work (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
<Welkin>	well, with the variables swapped around
<Welkin>	you can work it out on paper to make it more clear
<fakenullie>	:t fmap id (undefined :: x -> Double)
<lambdabot>	x -> Double
<Eduard_Munteanu>	(->) is just a profunctor, really. :P
*	Arcaelyx (~Arcaelyx@206.190.145.84.adsl.inet-telecom.org) has joined
*	theelous3 has quit (Ping timeout: 248 seconds)
*	gawen has quit (Ping timeout: 252 seconds)
*	barcabuona has quit (Quit: WeeChat 1.9.1)
*	safe (~safe@unaffiliated/safe) has joined
*	sleffy has quit (Ping timeout: 240 seconds)
<Welkin>	let's take a poll: How many of you pronounce common typeclass members phonetically? For example: mempty. Is this "em-empty", or "mem-ty"?
<Welkin>	what about mappend? "mah-pend" or "em-append"?
<monochrom>	I pronounce em empty and em append.
<Welkin>	I recently heard someone saying "mem-ty"
<Welkin>	and thought it was strange
<Eduard_Munteanu>	mem-ty, mah-pend
<Welkin>	do they also say "muh-pend"?
<htse>	did you just assume their spelling? :P
<Welkin>	Eduard_Munteanu: do you also pronounce "fmap" as "fuh-map"?
<monochrom>	I also used to pronounce "es queue ell" for years.
*	lethjakman (~lethjakma@c-73-3-227-241.hsd1.co.comcast.net) has joined
*	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined
<Eduard_Munteanu>	Welkin, pretty much. But I'm not a native English speaker, so I might throw off the stats.
*	path[l] has quit (Quit: path[l])
<tac-tics>	I pronounce empty as "identity"
<Welkin>	tac-tics: says the dyslexic breath mint
<tac-tics>	indeed
*	M-gst (gstmatrixo@gateway/shell/matrix.org/x-sehwdxbgjssjazbs) has left ("User left")
*	{emptyset} (~aconant1@c-73-222-75-3.hsd1.ca.comcast.net) has joined
*	lethjakman has quit (Ping timeout: 240 seconds)
*	augur has quit (Remote host closed the connection)
*	wroathe has quit (Ping timeout: 260 seconds)
<Welkin>	what is the best way to reverse the "rows" in a storable vector just given the length of a row, and the number of rows
*	ashirase has quit (Ping timeout: 248 seconds)
<Welkin>	for a one-dimensional vector
<Welkin>	I could do it in-place with a very imperative algorithm, but that seems bad
<Welkin>	I don't really like any of the options I see in https://hackage.haskell.org/package/vector-0.12.0.1/docs/Data-Vector-Storable.html#t:Vector
*	HoloIRCUser3 (~holoirc@122.177.24.176) has joined
*	ashirase (~ashirase@modemcable064.17-177-173.mc.videotron.ca) has joined
<Welkin>	I could use `slice` or split in some way
<monochrom>	I would consider both the in-place algorithm and "generate"
*	Sampuka has quit (Ping timeout: 248 seconds)
<monochrom>	If I don't care about speed, it's "generate". If I care about speed, I code up both then choose the faster one.
<Welkin>	if I had a function :: Vector a -> Int -> [Vector a]
*	MawKKe[m] (mawkkematr@gateway/shell/matrix.org/x-rpcibchdclatmdlx) has left ("User left")
<Welkin>	to split the rows
<monochrom>	The formula to give to "generate" is of course a bit contrived, but I'll survive.
<Welkin>	then I could reverse and concat
*	HoloIRCUser has quit (Ping timeout: 260 seconds)
*	etorreborre (~etorrebor@x4e346f43.dyn.telefonica.de) has joined
<monochrom>	Yeah I think it would be nice. Either than, or ...-> Vector (Vector a)
<jle`>	Welkin: i say mempty and mappend like they are spelled
<jle`>	mappend like "mah-pend"
*	pmikkelsen (~user@D4709BFC.rev.sefiber.dk) has left ("ERC (IRC client for Emacs 25.3.1)")
<fakenullie>	sometimes I pronounce in my head like "monoidal empty"
<fakenullie>	but it should be "monoid empty"
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sat Oct 28 16:01:18 2017

**** BEGIN LOGGING AT Wed Nov  1 12:25:35 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	foojin (~foojin@128-68-59-129.broadband.corbina.ru) has joined
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	tomphp (~tomphp@cpc73822-dals21-2-0-cust404.20-2.cable.virginm.net) has joined
*	JuanMiguel has quit (Quit: This computer has gone to sleep)
*	Philonous has quit (Remote host closed the connection)
*	eschnett has quit (Ping timeout: 260 seconds)
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
*	TweyII has quit (Ping timeout: 240 seconds)
*	Elhamer has quit (Ping timeout: 258 seconds)
<crucify_me>	hi is there a way to not use these six special chars and put the 2nd argument of mod at 52 ? http://lpaste.net/359727  thanks
*	aloiscochard has quit (Quit: Connection closed for inactivity)
*	maverickwoo[m] (maverickwo@gateway/shell/matrix.org/x-ixkxejmkmdewvxob) has joined
<crucify_me>	I just want the upper and lower case letters of the alphabet
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Wed Nov  1 12:31:08 2017

**** BEGIN LOGGING AT Wed Nov  1 12:31:28 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	neoncontrails (~neoncontr@wsip-174-79-243-9.sd.sd.cox.net) has joined
*	valentinbuza (~valentinb@unaffiliated/valentinbuza) has joined
*	soniku has quit (Ping timeout: 248 seconds)
*	tomphp (~tomphp@cpc73822-dals21-2-0-cust404.20-2.cable.virginm.net) has joined
*	toblorone (~toblorone@162.246.216.202) has joined
*	toto008 has quit (Quit: Page closed)
>nickserv<	identify ****
-NickServ-	You are now identified for n_blownapart.
*	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined
<n_blownapart>	sorry disconnected :  reposting :    hi is there a way to not use these six special chars and put the 2nd argument of mod at 52 ? http://lpaste.net/359727  
<johnw>	greymalkin: I've wanted annotation-based warning suppression for some time
<johnw>	sadly, I don't think it's supported yet: https://stackoverflow.com/questions/41768887/how-can-i-disable-haskell-warning-in-small-block
*	steeze (~steeze@63.76.231.82) has joined
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Wed Nov  1 12:35:28 2017

**** BEGIN LOGGING AT Wed Nov  1 12:36:49 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Wed Nov  1 12:37:28 2017

**** BEGIN LOGGING AT Wed Nov  1 12:39:43 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	peterbecich (~peterbeci@47.37.164.78) has joined
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
*	mohsen_ has quit (Quit: Leaving)
*	crucify_me has quit (Read error: Connection reset by peer)
**** ENDING LOGGING AT Wed Nov  1 12:40:26 2017

**** BEGIN LOGGING AT Thu Nov  2 18:55:58 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	twandy has quit (Client Quit)
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	xakirax (uid258233@gateway/web/irccloud.com/x-odtakjafojrxguao) has joined
<crucify_me>	hi the wildcard on line 4, why is the x in the list x:xs replaced by the wildcard sometimes? Is that if there is just one element in the list?   http://lpaste.net/359759  
<mud>	crucify_me: _ works like any other binding, except it doesn't bind a name.  So that has the exact same meaning as  (x:xs) assuming you never use the name x.
<mud>	It's purely for documentation in that sense, it shows that you don't plan to use that value.
<crucify_me>	you don't plan to use it?
<raynold>	ahh it's a wonderful day
*	twandy1 has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	chessai has quit (Remote host closed the connection)
<cement>	in the case of drop, you never actually use the first element of the list
<mud>	crucify_me: Note that you can rewrite line 4 as  drop n (x:xs) = drop (n-1) xs -- and then note that the value 'x' isn't actually used anywhere on the right-hand-side. So why are we giving it a name? instead we should use _, as they've done.
<mud>	_ does the same thing as x, it just doesn't give you a name that you can use.
<crucify_me>	mud, cement thanks pondering that
*	louispan has quit (Quit: louispan)
*	twandy has quit (Client Quit)
<crucify_me>	cement when you say you neever actually use the first element, what you mean is that barring the case of drop 0 which is covered in the first base case, the first element of any list is dropped and not seen in the recursive part of the function?
*	sanett (~sanett@202.119.45.71) has joined
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:c52a:81e8:a3a8:15c1) has joined
*	cement has quit (Ping timeout: 255 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<dumptruckman>	I have a algebraic type of math expression tokens
<dumptruckman>	is it possible to make some of those tokens "extend" something
<crucify_me>	mud is the above post I made correct?
<dumptruckman>	like, the operator tokens
*	doodlehaus (~doodlehau@71-89-72-8.dhcp.bycy.mi.charter.com) has joined
<dumptruckman>	I'm asking for the purpose of pattern matching
*	jb55 has quit (Ping timeout: 246 seconds)
*	zRecursive (~czsq888@183.39.243.125) has joined
<mud>	crucify_me: It's vague. Making it specific would make it look a lot like the code of the function you pasted.
*	sucks (~sucks@2804:7f1:2080:7582:f59c:7eb7:c4ed:b196) has joined
*	wei2912 (~wei2912@unaffiliated/wei2912) has joined
<crucify_me>	mud very sorry I missed you point just now
*	digilord has quit (Ping timeout: 240 seconds)
<mud>	Yes, it's correct.
<dumptruckman>	https://ghostbin.com/paste/p9ofp
<crucify_me>	put another way, you would never see x:xs on the rhs being recursed on, like say drop (n - 1) (x:xs)
<crucify_me>	mud ^
<mud>	I don't understand the question/comment
*	doodlehaus has quit (Ping timeout: 260 seconds)
<geekosaur>	you can't extend an existing type on the fly, no
<iqubic>	Not even with reflection/generics/typeable?
*	llinguini has quit (Quit: Connection closed for inactivity)
*	nullifidian has quit (Read error: Connection reset by peer)
*	acowley is now known as acowley_away
*	nullifidian_ (~nullifidi@unaffiliated/nullifidian) has joined
*	Rodya_ has quit (Remote host closed the connection)
*	gtomas (~gtomas@2a00:23c4:bc0f:9b00:4090:bd52:f3ab:b35) has joined
*	gtomas has quit (Client Quit)
*	gtomas (~gtomas@2a00:23c4:bc0f:9b00:4090:bd52:f3ab:b35) has joined
*	cmotoche1 has quit (Quit: Leaving)
*	noob_haskeller (42184cba@gateway/web/freenode/ip.66.24.76.186) has joined
*	antsanto (~antsanto@171.76.52.7) has joined
<noob_haskeller>	Hi guys. I'm trying to write a program in Haskell to print all sublists of a  list of numbers where each sublist has odd number of elements. Here's the code
<noob_haskeller>	sublists [] = [[]] sublists (x:xs) = filter (odd . length) [x:sublist | sublist <- sublists xs] ++ sublists xs
*	clinton has quit (Ping timeout: 240 seconds)
<noob_haskeller>	eg: sublists [1,2,3,4,5,6]  OUTPUT - [[1,3,5],[2,3,4],[2,3,5],[1],[2,3,6],[3],[5],[2],[4],[6],[1,2,3],[1,2,4],[1,2,5],[1,2,6],[1,3,4],[1,3,6],[1,4,5],[1,4,6],[1,5,6],[2,4,5],[2,4,6],[2,5,6],[3,4,5],[3,4,6],[3,5,6],[4,5,6],[]]
<noob_haskeller>	Can someone point out my mistake?
*	lobata (~mint@172.58.20.109) has joined
<Welkin>	> tails [1..6]
*	Gurkenglas_ has quit (Ping timeout: 255 seconds)
<lambdabot>	 [[1,2,3,4,5,6],[2,3,4,5,6],[3,4,5,6],[4,5,6],[5,6],[6],[]]
<crucify_me>	mud so the head of (x:xs) is dropped first without a recursion, then the first element of the tail is dropped based on the count (n - 1). so the recursion begins on the first element of the tail.
<crucify_me>	its not dropped per se
<crucify_me>	its just that on the rhs its not there, only the tail is being recursed on.
*	hololeap (~hololeap@unaffiliated/hololeap) has joined
<noob_haskeller>	Okay. Can you please modify my code. I'm new to functional programming the trying to understand. 
*	tinnotl (~tinnotl@unaffiliated/tinnotl) has joined
*	pfurla (~textual@ool-182ed51a.dyn.optonline.net) has joined
*	gtomas has quit (Quit: gtomas)
*	gtomas (~gtomas@2a00:23c4:bc0f:9b00:4090:bd52:f3ab:b35) has joined
*	philderbeast has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	ivans has quit (Ping timeout: 260 seconds)
*	Welkin has quit (Ping timeout: 240 seconds)
*	nomicflux has quit (Quit: nomicflux)
<hololeap>	noob_haskeller: i just connected, can you post your code again?
*	Noldorin has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<crucify_me>	ie the first element (the head) is not dropped as per the recursive function drop on the rhs, it just goes away, is that correct?   drop n (_:xs) = drop (n - 1) xs    
*	lambdamu (~lambdamu@p57AB39C0.dip0.t-ipconnect.de) has joined
<crucify_me>	and the first recursion, drop (n - 1), operates on the first element of the tail
*	noob_haskeller has quit (Ping timeout: 260 seconds)
*	begriffs has quit (Quit: Leaving...)
*	gtomas has quit (Client Quit)
*	gtomas (~gtomas@2a00:23c4:bc0f:9b00:4090:bd52:f3ab:b35) has joined
*	olligobber (~olligobbe@unaffiliated/olligobber) has joined
*	joncfoo (~jonathan@c-73-181-19-142.hsd1.co.comcast.net) has joined
*	lambdamu_ has quit (Ping timeout: 240 seconds)
*	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined
*	Arcaelyx (~Arcaelyx@206.190.145.84.adsl.inet-telecom.org) has joined
*	noddy (~self@209.6.40.250) has joined
*	Arcaelyx_ has quit (Ping timeout: 255 seconds)
*	gtomas has quit (Quit: gtomas)
*	pavonia has quit (Quit: Bye!)
*	gtomas (~gtomas@2a00:23c4:bc0f:9b00:4090:bd52:f3ab:b35) has joined
*	lambdaman (~lambdaman@216.81.48.202) has joined
*	joncfoo has quit (Ping timeout: 248 seconds)
*	xakirax is now known as nickoralias
*	xall (~xall@ppp-223-24-73-94.revip6.asianet.co.th) has joined
<dumptruckman>	this algorithm is not correct is it? https://i.imgur.com/3xIQur4.png
*	kuttifunk1 (~Thunderbi@188.174.192.40) has joined
*	Youmu (uid129469@gateway/web/irccloud.com/x-fbioxoknhltjzfad) has joined
*	lambdaman has quit (Ping timeout: 240 seconds)
*	kuttifunk has quit (Ping timeout: 248 seconds)
*	kuttifunk1 is now known as kuttifunk
*	hexfive has quit (Quit: WeeChat 1.9.1)
*	jb55 (~jb55@70-36-49-138.dyn.novuscom.net) has joined
*	mnoonan_ (~mnoonan@cpe-69-201-46-148.twcny.res.rr.com) has joined
*	srdqty1 (~srdqty@pool-74-108-110-87.nycmny.fios.verizon.net) has joined
*	louispan (~textual@203.38.203.134) has joined
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	toblorone (~toblorone@172.58.41.250) has joined
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Thu Nov  2 19:41:48 2017

**** BEGIN LOGGING AT Sat Nov  4 16:50:49 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<mbwgh>	barrucadu: You can still write it by hand, it's just LoggerT . lift. But then the weirdness just continues
<johnw_>	mbwgh: when logging in STM, the repeated logs actually give you insight as to when retries are happening (and where)
*	merijn has quit (Ping timeout: 240 seconds)
*	neoncontrails has quit ()
*	BartAdv has quit (Quit: Connection closed for inactivity)
*	neoncontrails (~neoncontr@wsip-174-79-243-9.sd.sd.cox.net) has joined
<crucify_me>	hi does the stack begin with even, and get passed back and forth between the 2 functions? I always think the expansion and reduction occurs in a place.
<crucify_me>	https://ptpb.pw/2XsG
<mbwgh>	johnw_: How would that work? If I'm inside an atomically block, I would have to break referential transparancy for that to happen, for instance via unsafePerformIO (or may via unsafeSTMToIO or whatever it's called). Is this what you had in mind?
*	aravindhs has quit (Quit: aravindhs)
<lyxia>	crucify_me: yes
<lyxia>	crucify_me: actually you can use either function depending on whether you want to get the even elements or the odd ones
*	Wizek_ (~Wizek@catv-89-132-132-110.catv.broadband.hu) has joined
<verlet64>	Half feel like I'm speed running Mario 64
<verlet64>	"this is the run"
<hpc>	and then it gets through your .Internal module
<johnw_>	mbwgh: yes, exactly
<hpc>	"the run is blessed"
<monochrom>	I look forward to Mario 128.
<johnw_>	mbwgh: executing IO in STM is fine, as long as you realize it may run any number of times
*	Wizek_ has quit (Max SendQ exceeded)
*	Myrl-saki has quit (Ping timeout: 248 seconds)
*	wroathe_ (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined
<verlet64>	monochrom: They're skipping straight to 256 for backwards compat reasons
*	wroathe has quit (Ping timeout: 258 seconds)
<monochrom>	Ah that's even better.
*	cobreadmonster (uid150434@haskell/developer/breadmonster) has joined
*	simka has quit (Ping timeout: 240 seconds)
*	Wizek__ has quit (Ping timeout: 240 seconds)
*	Guest15844 has quit ()
<crucify_me>	lyxia, thanks one moment
<mbwgh>	johnw_: Might be useful for debugging purposes, yes.
*	durandal1 (~durandal1@c-73-158-80-164.hsd1.ca.comcast.net) has joined
<EvanR>	to one-up firefox version numbers ms will be switching to increasing powers of 2 each week
<hpc>	chrome is switching to up-arrow notation
<hpc>	each release adds an arrow
<johnw_>	mbwgh: I used it to do exactly that kind of logging before, and it worked out
<EvanR>	another iteration of ackerman
<crucify_me>	lyxia I see that they are passed, but the cons is written in the even function, so it essentially stays there as its passed?
*	arcticmetal1 (~arcticmet@185.38.150.115) has joined
*	Noldorin has quit (Ping timeout: 248 seconds)
<iqubic>	hpc: How would that work?
<verlet64>	Opera, meanwhile, have decided to change to exactly the same system as Chrome
*	louispan has quit (Quit: louispan)
<monochrom>	No one likes Roman version numbers, eh? You just add an "I" for each next version.
<mbwgh>	johnw_: I need to log atomically only because I update some statistics inside of it, and it would be an error if I decremented some number of results and the corresponding value was not commited as well. Especially since I recover from restart
<iqubic>	monochrom: Except when you don't. 
<monochrom>	And for some reason that sounds isomorphic to adding an arrow for each next version... :)
*	beanbagula has quit (Ping timeout: 246 seconds)
<mbwgh>	They should add my add-ons not being broken by the next version.
<ertes>	i wonder when our browsers will run out of natural numbers
<verlet64>	Firefox?
<EvanR>	the core data of the version number is ultimately a number that increments, and they are try to outcompete on the choice of view
*	louispan (~textual@14-203-219-236.static.tpgi.com.au) has joined
*	louispan has quit (Client Quit)
<EvanR>	monotonic view
<monochrom>	Haha run out of natural numbers. That's very hard to do!
<verlet64>	With that attitude it is
<verlet64>	New style semver
<geekosaur>	run out of memory for them. you always wondered why it was so big?
<EvanR>	ertes: floor (1/0) right? javascript
<verlet64>	Everything is major
<mbwgh>	oh god, here it comes. firefox-S(S(S(S(S(S(S(...
<verlet64>	Because we make a big impact with every deploy
<ertes>	i don't know…  i can totally see issue number \omega_{15} asking whether inaccessible cardinals are consistent enough to use as version numbers
*	geekosaur might be a bit grumpy after having his browser suddenly freeze his system while eating half his swap space yesterday...
<monochrom>	Oh yeah no wonder they sell PCs with 12GB RAM when I only find use for just 6GB or less.
<iqubic>	mbwgh: Are you claiming we should use peano numbers to label versions?
<EvanR>	curiously Math.floor(1/0) is not 179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216 
<lyxia>	crucify_me: I'm not sure what you mean. The list of elements with even indices of a list (x : xs) starts with x (of index 0), and continues with the list of odd-indexed elements of xs (taking the tail shifts the indices by 1). That's exactly what that code says.
<hpc>	monochrom: the funny thing is some browsers will preemptively load stuff to fill available ram
<mbwgh>	iqubic: Yeah, the 'Z' was implied.
*	mson (uid110608@gateway/web/irccloud.com/x-mtkdndggbqhgxtxm) has joined
<ertes>	my firefox uses more RAM than my first hard disk
*	djapo has quit (Quit: leaving)
<ertes>	812 MB
<EvanR>	i think i had 10 MB
*	quobo has quit (Quit: Connection closed for inactivity)
*	thc202 has quit (Ping timeout: 264 seconds)
<monochrom>	And Firefox already uses less memory than Chrome.
<mbwgh>	By the way, is it true that GHCJS needs at least 8GB? I wanted to try out reflex, but decided against it because I'm a poor plebeian with only 4GB.
<monochrom>	I go with Chrome because it's more concurrent than Firefox. But it also eats more memory.
*	peterbecich (~peterbeci@47.37.164.78) has joined
<ertes>	mbwgh: GHC already uses a lot of RAM, and GHCJS takes it to a whole new level…  i wouldn't be surprised, if you need at least 8 GiB for larger code bases
*	nakal_ (~nakal@port-92-201-115-249.dynamic.qsc.de) has joined
*	nakal has quit (Disconnected by services)
<hpc>	monochrom: i find that in practice, noscript is better than any sort of optimizations the browser could perform
<monochrom>	"whole new level" :S
<iqubic>	Ram == Swap, right?
<mbwgh>	ertes: I actually read that it needs 16, and 8 was the recommended minimum D:
<hpc>	because it's not an optimization problem on something that doesn't change over time, developers consume the resources available
<monochrom>	Oh so that's why PCs are sold with 16GB RAM so you can run GHCJS.
<monochrom>	Totally not because of Windows, eh? :)
<mbwgh>	I guess GHC = GHCJS + NoScript
<monochrom>	haha very logical conclusion :)
<ertes>	mbwgh: well, what you can do is to use native GHC during development – that's kinda the standard mode of development with reflex-dom – then compile on your server
<johnw_>	mbwgh: you could log your data with a generated id, and then log a "commit" message at the end of the trans with that id.  Later, when you process the log, only count the entries that have commits.
<monochrom>	@rememeber mbwgh I guess GHC = GHCJS + NoScript
<lambdabot>	Good to know.
<iqubic>	Windows eats a ton of ram, right?
<ertes>	iqubic: swap is disk space as an extension of RAM
*	djapo (~archie@unaffiliated/djapo) has joined
*	Jeanne-Kamikaze (~Jeanne-Ka@2601:647:4300:f30f:98eb:c07c:1383:3d4d) has joined
*	twanvl has quit (Ping timeout: 260 seconds)
<monochrom>	www.ramtrucks.com
<iqubic>	Is swap good to have?
*	okuu has quit (Quit: 1-2-3 Time to fall in the dark.)
*	balor (~aidan@27.123.155.247) has joined
<monochrom>	Yes, it's why 5 years ago they added swap to base.
<ertes>	iqubic: usually yes…  modern kernels use it both to get unused memory out of RAM to make more space for caching, and when you run out of RAM
<monochrom>	Except it took another year after to settle on whether they wanted it strict or non-strict.
<iqubic>	swap (a, b) = (b, a)???
<ertes>	what did they settle on?
<mbwgh>	ertes: I don't have a server though (well I do have access to some HPC clusters...). I feel there is some optimization potential here though
<monochrom>	I forgot, but you could find it in base source code :)
*	johnw_ has quit (Quit: Textual IRC Client: www.textualapp.com)
*	aarvar (~foewfoiew@50.34.105.170) has joined
<monochrom>	My bet is "why not offer both versions?"
<mbwgh>	barrucadu: Still there?
<monochrom>	@quote monochrom pointless.debate
<lambdabot>	monochrom says: All pointless debates can be settled by going polymorphic.
<ertes>	> case swap undefined of (_, _) -> ()
<lambdabot>	 *Exception: Prelude.undefined
<barrucadu>	mbwgh: Yeah, still working on it
<ertes>	@let daTrueSwap ~(x, y) = (y, x)
<lambdabot>	 Defined.
<ertes>	> case daTrueSwap undefined of (_, _) -> ()
*	cdg (~cdg@2600:1700:3120:40e0:d9a2:2f6a:e310:e71f) has joined
<lambdabot>	 ()
<ertes>	that's how it's done!
<iqubic>	What does "~" do?
<mbwgh>	barrucadu: Oh boy. I thought this was just me being stupid :)
*	Arcaelyx has quit (Ping timeout: 264 seconds)
*	Thra11 has quit (Quit: IRC for Sailfish 0.9)
<monochrom>	No, that's the wrong question.
<hpc>	iqubic: irrefutable match
<monochrom>	The right question is What doesn't "~" do?
<iqubic>	monochrom: Can you answer that question then?
<ertes>	> let f (_, _) = (); g ~(_, _) = () in f undefined
<lambdabot>	 *Exception: Prelude.undefined
<ertes>	> let f (_, _) = (); g ~(_, _) = () in g undefined
<lambdabot>	 ()
<monochrom>	It doesn't cause evaluation.
<ertes>	iqubic: ^
<hpc>	it also doesn't really do any matching either
**** BEGIN LOGGING AT Sat Nov  4 17:29:28 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<ertes>	@let import qualified Control.Monad.State.Strict as Strict
<lambdabot>	 Defined.
<ertes>	@let import qualified Control.Monad.State.Lazy as Lazy
<lambdabot>	 Defined.
<wilx>	Let's say there are a lot of same string literals in a long Haskell source file.
<ertes>	> Strict.evalState (fix $ \again -> do x <- get; put (x + 1); fmap (x :) go) 0
<lambdabot>	 error:
<lambdabot>	     • Variable not in scope: go :: Strict.StateT a Identity [a]
<lambdabot>	     • Perhaps you meant one of these:
<monochrom>	You mean my http://lpaste.net/41790/ :)
<ertes>	oh, come on
<wilx>	Would it make sense to replace "abcd" with abcd = "abcd" and use abcd everywhere instead?
<ertes>	sorry
<ertes>	> Strict.evalState (fix $ \again -> do x <- get; put (x + 1); fmap (x :) again) 0
<lambdabot>	 mueval-core: Time limit exceeded
<ertes>	> Lazy.evalState (fix $ \again -> do x <- get; put (x + 1); fmap (x :) again) 0
<wilx>	Is this anyhow more efficient? Either for compilation or for run time?
<lambdabot>	 [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,2...
*	ons has quit (Quit: ZNC 1.6.3+deb1 - http://znc.in)
<ertes>	mbwgh: ^
<mbwgh>	So you finally fixed it :)
<ertes>	the difference between lazy State and strict State is not on whether it forces the state itself, but whether it uses strict pattern-matching on the tuple
*	amut (~amut@cpc104196-ipsw4-2-0-cust1768.7-4.cable.virginm.net) has joined
<mud>	Oh is that the difference. I don't think I was ever clear on that.
*	amut has quit (Client Quit)
*	verlet64_ has quit (Ping timeout: 248 seconds)
<ertes>	wilx: you should benchmark, but even if GHC actually duplicates the strings, it shouldn't make too much of a difference, except that you get worse cache behaviour
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
<crucify_me>	lyxia thanks sorry disconnect here. what I was asking is if, since the cons is featured in the even function, if it stays there, or, as the stack expands, does it get passed to odds, so to speak, or does it "stay in place"
<mbwgh>	wilx: Besides that, programmer performance should increase would you happen to change abcd to "abcde".
<crucify_me>	since the cons is lazy and the new list is built later.
*	simukis has quit (Ping timeout: 240 seconds)
<mbwgh>	ertes: Still, do you use fix/mfix on a regular basis? While I learned a lot when reading up on it (Especially the similarity between Fix and Free), I actually found it easier to make wrong code typecheck if you factor out recursion, especially with `recursion-schemes`.
*	durandal1 (~durandal1@2601:647:4900:1f83:a903:ccad:fcfc:1cdb) has joined
<codeshot>	mbwgh, how did you get that to happen?
<codeshot>	foo = fix foo_step where foo_step recurse = ... seems so similar to me
*	justanotheruser is now known as xustanotheruser
<ertes>	mbwgh: yes, i use both fairly regularly, although the former i mostly use to embed anonymous recursion into monadic actions
<ertes>	main = …; fix $ \again -> … again …; …
*	olligobber (~olligobbe@unaffiliated/olligobber) has joined
<iqubic>	:t fix
<lambdabot>	(a -> a) -> a
<ertes>	mbwgh: the latter comes up a lot in FRP, so i'm also a regular user of mfix
<iqubic>	:t Free 
<lambdabot>	error: Data constructor not in scope: Free
<iqubic>	:k free 
<lambdabot>	error:
<lambdabot>	    Not in scope: type variable ‘free’
<lambdabot>	    Perhaps you meant type constructor or class ‘Tree’ (imported from Data.Tree)
<iqubic>	:k Free 
<lambdabot>	error:
<lambdabot>	    Not in scope: type constructor or class ‘Free’
<lambdabot>	    Perhaps you meant ‘Tree’ (imported from Data.Tree)
<ertes>	mbwgh: although i use it via RecursiveDo, because using mfix (or loop from Control.Arrow) directly is a pain =)
*	sgronblo (~samu@62-78-245-254.bb.dnainternet.fi) has joined
*	durandal1 has quit (Ping timeout: 255 seconds)
<iqubic>	mbwgh: The kind of Free is (* -> *) -> *
*	joebetz (~Joseph_Be@c-73-176-149-193.hsd1.il.comcast.net) has joined
<ertes>	the kind of Free is (* -> *) -> * -> *
<mbwgh>	codeshot: I can't really come up with a prototypical example, and it was probably just me not being used to it.
<ertes>	mbwgh: are you comfortable with foldr and unfoldr?
*	nullifidian (~nullifidi@unaffiliated/nullifidian) has joined
*	sgronblo has quit (Ping timeout: 248 seconds)
<mbwgh>	ertes: I know they're not the same, but it's Fix + pure basically. And while it might be nice to get started with frp, the ghcjs thing kind of was a show stopper for me, and I couldn't figure out an easy entry point of making gtk work with reactive-banana without having to rely on some unmaintained packages exposing weird combinators...
*	kadobann has quit (Ping timeout: 246 seconds)
<ertes>	mbwgh: i use FRP mainly on bare metal
<mbwgh>	ertes: foldr for sure, but I haven't really found any need for unfoldr.
<ertes>	mbwgh: do you see how foldr is the combinator for list catamorphisms?
<mbwgh>	Yeah, it's basically the church encoding, right?
<ertes>	even though it is, that's not the reason foldr is list catamorphisms
<ertes>	mbwgh: do you know how [] is encoded in terms of Fix?
<mbwgh>	ertes: You mean the Nil case for some ListF ?
*	ssn__ (~ssn__@LFbn-1-1512-51.w90-65.abo.wanadoo.fr) has joined
<mbwgh>	Otherwise no, sorry.
<ertes>	yes, that
*	alveric2 (~LordAlver@i59F74A4C.versanet.de) has joined
<ertes>	[a] ≃ Fix (ListF a)
<ertes>	where:  data ListF a x = Nil | Cons a x
<ertes>	the catamorphism constructor for that looks like this:
*	Wizek has quit (Quit: Connection closed for inactivity)
*	nshepperd has quit (Quit: WeeChat 1.9.1)
<ertes>	cata :: (ListF a x -> x) -> Fix (ListF a) -> x
<ertes>	clear so far?
<mbwgh>	ok
*	MoarSpaceFi (~Forgot_my@65.126.126.193) has joined
<ertes>	now cata is actually just foldr
<ertes>	its type is isomorphic to foldr's type…  do you see how?
*	alveric1 has quit (Ping timeout: 260 seconds)
*	marr has quit (Ping timeout: 240 seconds)
**** BEGIN LOGGING AT Sun Nov  5 12:11:50 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	pikarudolph is now known as pikajude
*	Gothmog__ is now known as Gothmog_
*	pikajude has quit (Quit: ZNC 1.6.5 - http://znc.in)
*	Big_G has quit (Quit: Leaving)
*	bollu (~bollu@139.59.46.74) has joined
*	pikajude (~Jude@unaffiliated/otters) has joined
*	altooid has quit (Ping timeout: 240 seconds)
*	leat (~leat@188.162.200.8) has joined
*	davl has quit (Ping timeout: 260 seconds)
*	Squarism_ has quit (Ping timeout: 240 seconds)
*	prooftechnique has quit (Ping timeout: 240 seconds)
*	nathyong has quit (Ping timeout: 260 seconds)
*	cetchmoh has quit (Ping timeout: 260 seconds)
*	Bane^ has quit (Ping timeout: 260 seconds)
<Guest11184>	\join #brasil
*	durandal1 has quit (Remote host closed the connection)
*	meinhof (~textual@139.179.211.81) has joined
*	ranberry (~ranberry@c-98-251-91-134.hsd1.ga.comcast.net) has joined
*	meinhof has quit (Client Quit)
*	nathyong (~nathyong@128.199.98.36) has joined
*	toblorone (~toblorone@172.58.40.12) has joined
*	cetchmoh (~ike@m18.uni-weimar.de) has joined
*	Guest11184 (b1b6e76c@gateway/web/freenode/ip.177.182.231.108) has left
*	toblorone has quit (Read error: Connection reset by peer)
*	durandal1 (~durandal1@2601:647:4900:1f83:b968:f5de:de18:7449) has joined
*	toblorone (~toblorone@172.58.40.12) has joined
*	Squarism (~someone@paronglans.tk) has joined
*	Bane^ (~Bane@fsf/member/bane) has joined
*	aravindhs has quit (Quit: aravindhs)
*	vlatkoB has quit (Read error: Connection reset by peer)
*	ranberry has quit (Ping timeout: 240 seconds)
*	prooftechnique (~prooftech@185.14.184.86) has joined
*	coot___________ (~coot@188.146.107.78.nat.umts.dynamic.t-mobile.pl) has joined
*	hunterlapp (~user@72-160-114-252.dyn.centurytel.net) has joined
*	joomy has quit (Quit: joomy)
*	Destol has quit (Read error: Connection reset by peer)
*	fragamus has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	tomphp (~tomphp@213.205.252.21) has joined
*	dxtr (6cd4eb9b@unaffiliated/dxtr) has joined
*	saurabhnanda has quit (Remote host closed the connection)
*	Destol (~Destol@67-213-103-77.eastlink.ca) has joined
*	stewy33 (80dc9f38@gateway/web/freenode/ip.128.220.159.56) has joined
*	perrier-jouet (~perrier-j@modemcable234.57-162-184.mc.videotron.ca) has joined
*	stewy33 has quit (Client Quit)
*	altooid (~altooid@174.138.80.185) has joined
*	tobloron_ (~toblorone@172.58.40.12) has joined
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	nickolay_ has quit (Ping timeout: 240 seconds)
*	aplainzetakind (~dk@78-131-29-87.pool.digikabel.hu) has joined
*	Zialus has quit (Ping timeout: 240 seconds)
*	toblorone has quit (Ping timeout: 248 seconds)
*	tomphp_ (~tomphp@213.205.252.21) has joined
*	tomphp has quit (Read error: Connection reset by peer)
*	hunterlapp has quit (Remote host closed the connection)
*	auto_complete_ has quit (Ping timeout: 240 seconds)
*	emilypi has quit (Ping timeout: 248 seconds)
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	davl (~davl@davlin.lha.sgsnet.se) has joined
*	asdhf (c396e065@gateway/web/freenode/ip.195.150.224.101) has joined
*	marr (~ccc@77-253-92-99.adsl.inetia.pl) has joined
*	SenasOzys_ has quit (Ping timeout: 240 seconds)
*	SenasOzys has quit (Ping timeout: 248 seconds)
*	asdhf has quit (Client Quit)
*	Spockz has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	durandal1 has quit (Remote host closed the connection)
*	JeanCarloMachado has quit (Ping timeout: 248 seconds)
*	durandal1 (~durandal1@2601:647:4900:1f83:b968:f5de:de18:7449) has joined
*	visof (~visof@unaffiliated/visof) has joined
*	sleffy has quit (Ping timeout: 240 seconds)
*	fr33domlover_ (~fr33domlo@fsf/member/fr33domlover) has joined
*	cschneid_ (~cschneid@2603:300b:901:300:a40d:c696:af4:91d1) has joined
*	mithsv has quit (Quit: mithsv)
*	mithsv (~simon@83pc90.sshunet.nl) has joined
*	jao (~jao@pdpc/supporter/professional/jao) has joined
*	fr33domlover_ is now known as fr33domlover
*	rick-sanchez (~Ricardo@2a02:a31e:2022:5a00:a9c6:ae37:89a1:fdb6) has joined
*	noteventime has quit (Ping timeout: 240 seconds)
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
*	cschneid_ has quit (Ping timeout: 252 seconds)
<rick-sanchez>	Hello, is there some operator that does this [] _ [1,2] = [1,2] and [3] _ [1,2] = [3]???, for a moment I thought that <|> would do the trick, but no, it just concat
<jle`>	can you be more specific about what you want it to do?
<Tuplanolla>	Choose the first nonempty list?
*	Immune (~Immune@47.145.46.247) has joined
*	alx741 has quit (Quit: alx741)
<rick-sanchez>	yes
*	djapo (~archie@unaffiliated/djapo) has joined
<rick-sanchez>	like: if null xs then ys else xs 
*	alx741 (~alx741@190.152.172.38) has joined
<jared-w>	Seems pretty simple to write your own operator that does that although I've got no clue what you'd want to use it for ¯\_(ツ)_/¯
<jle`>	yes i don't really know of a common operator that does it
*	jkup has quit (Read error: Connection reset by peer)
<jle`>	but you can take advantage of Maybe's Alternative instance with uncons, i suppose
*	jkup (~jkup@gateway/tor-sasl/jkup) has joined
<jle`>	> uncons [] <|> uncons [1,2]
<lambdabot>	 error:
<lambdabot>	     Ambiguous occurrence ‘uncons’
<lambdabot>	     It could refer to either ‘Data.List.uncons’,
*	codesoup has quit (Ping timeout: 252 seconds)
<jle`>	@let import Data.List as L
<lambdabot>	 Defined.
<jle`>	> L.uncons [] <|> L.uncons [1,2]
<lambdabot>	 error:
<lambdabot>	     Ambiguous occurrence ‘<|>’
<lambdabot>	     It could refer to either ‘Control.Applicative.<|>’,
<jle`>	what, why
<jared-w>	lol
<cocreature>	> toList (nonEmpty [] <|> nonEmpty [1,2])
<Tuplanolla>	Someone imported Parsec earlier, jle`.
<lambdabot>	 error:
<lambdabot>	     Ambiguous occurrence ‘toList’
<lambdabot>	     It could refer to either ‘Lambdabot.Plugin.Haskell.Eval.Trusted.toList’,
<jle`>	ah i see
<jared-w>	> L.uncons [] Control.Applicative.<|> L.uncons [1,2]
<cocreature>	> Data.Foldable.toList (nonEmpty [] <|> nonEmpty [1,2])
<jle`>	> uncons [] <|> uncons [1,2]
<lambdabot>	 error:
<lambdabot>	     Not in scope: ‘L.uncons’
<lambdabot>	     Perhaps you meant one of these:
<lambdabot>	 error:
<lambdabot>	     • Variable not in scope: nonEmpty :: [a0] -> [a]
<lambdabot>	     • Perhaps you meant data constructor ‘NonEmpty’ (imported from Lambdabot...
<lambdabot>	 Just (1,[2])
<jle`>	> uncons [3] <|> uncons [1,2]
<lambdabot>	 Just (3,[])
<cocreature>	> Data.Foldable.toList (Data.List.NonEmpty.nonEmpty [] <|> Data.List.NonEmpty.nonEmpty [1,2])
<lambdabot>	 error:
<lambdabot>	     Not in scope: ‘Data.List.NonEmpty.nonEmpty’
<lambdabot>	     No module named ‘Data.List.NonEmpty’ is imported.error:
<MarcelineVQ>	okaynow
<cocreature>	@let import Data.List.NonEmpty
<lambdabot>	 Defined.
<cocreature>	> Data.Foldable.toList (Data.List.NonEmpty.nonEmpty [] <|> Data.List.NonEmpty.nonEmpty [1,2])
<lambdabot>	 [1 :| [2]]
<Tuplanolla>	I wish lambdabot got their imports sorted out.
<Tuplanolla>	They're a perpetual annoyance.
<MarcelineVQ>	start every sesh with
<MarcelineVQ>	@undefine
<lambdabot>	Undefined.
*	xcmw (~textual@2605:a000:132b:20ac:a54b:1953:4cc0:b324) has joined
*	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined
*	theorbtwo has quit (Remote host closed the connection)
*	mohsen_ has quit (Read error: Connection reset by peer)
<rick-sanchez>	I think I will have to keep the if null ... or headMay on the lists, actually I wanted to do something like `head $ xs <|> ys` where both are lists, but ys is never empty
*	AWizzArd has quit (Ping timeout: 240 seconds)
*	codesoup (~codesoup@CPE00fc8de45853-CM00fc8de45850.cpe.net.cable.rogers.com) has joined
*	alx741 has quit (Quit: alx741)
*	cschneid_ (~cschneid@2603:300b:901:300:c043:4ebd:9397:6ed5) has joined
*	wroathe has quit (Ping timeout: 240 seconds)
*	zariuq has quit (Ping timeout: 248 seconds)
*	thallada has quit (Ping timeout: 240 seconds)
*	JuanMiguel has quit (Quit: Saliendo)
<jared-w>	Wouldn't it be easier to just use a safeHead z xs? (where z is the default value)
*	alx741 (~alx741@190.152.172.38) has joined
<rick-sanchez>	it works for one of my cases, however I had something like: head $ xs <|> ys <|> zs, I rewrote to: headMay xs <|> ...
<jle`>	if ys is never empty, why would you have <|> zs ?
*	cschneid_ has quit (Ping timeout: 258 seconds)
*	thallada (~thallada@fsf/member/thallada) has joined
<rick-sanchez>	ys in this case can be empty, it was not empty in the example of 2 lists, but in the example of 3 it is, the last one in both cases is not empty
<jle`>	in that case it's a bit weird to throw it in the mix with the others
*	supaplex1 has quit ()
<rick-sanchez>	sorry
<jle`>	don't think about zs as a list...think about whatever the first item in z's is
<jle`>	since you aren't really talking about it as a list anymore in this case
<jle`>	in that case you can just use listToMaybe and then asum, perhaps :)
*	alx741 has quit (Client Quit)
<jle`>	> asum (map listToMaybe [[],[],[1,2,3]])
<lambdabot>	 Just 1
<jle`>	> asum (map listToMaybe [[5],[],[1,2,3]])
<lambdabot>	 Just 5
<rick-sanchez>	I can show you the whole example, maybe there is better ideas
<jle`>	or listToMaybe xs <|> listToMaybe ys <|> listToMaybe zs
<jle`>	etc.
*	alx741 (~alx741@190.152.172.38) has joined
<rick-sanchez>	listToMaybe is the same as headMay of classyprelude? 
*	peterbecich has quit (Ping timeout: 260 seconds)
*	tommd (~tommd@71-34-67-230.ptld.qwest.net) has joined
*	Xion_ has quit (Quit: Lost terminal)
*	thallada has quit (Quit: WeeChat 1.9.1)
<Cale>	"<Welkin> the only time I have seen Cale get upset is when someone was asking a question about their record type with 130+ fields" -- hahahaha, I wasn't even really that upset ;)
*	darjeeling_ (~darjeelin@D-173-250-146-27.dhcp4.washington.edu) has joined
*	mithsv has quit (Quit: mithsv)
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	mithsv (~simon@83pc90.sshunet.nl) has joined
<Cale>	(but I think the solution to a lot of problems with records that large is just to break up the type into smaller ones)
*	mithsv has quit (Client Quit)
*	true-asset (~true-asse@185.38.150.118) has joined
<jle`>	rick-sanchez: not sure what headMay from classyprelude is, but check out the type
*	mithsv (~simon@83pc90.sshunet.nl) has joined
<jle`>	:t listToMaybe
<lambdabot>	[a] -> Maybe a
<jared-w>	They're equivalent, jle`
<rick-sanchez>	great
*	yellowj (~yellowj@2a02:8388:1902:f700:5387:5ae:c03:b3fe) has joined
<MarcelineVQ>	records like that I've seen have tended to be mirrors of the api in use, ban api's with 130 fields in a request
<jle`>	> foldMap (Alt . listToMaybe) [[],[5],[1,2,3],[]]
<lambdabot>	 Alt {getAlt = Just 5}
<jared-w>	Or they're mirrors of the business logic you're using. If your business logic requires 130... anything... It's probably poorly thought out :p
<MarcelineVQ>	not that I've seen 130 though, that's quite a lot :X
*	AWizzArd (~the@splendidlord.com) has joined
*	michowski (d55d61c8@gateway/web/freenode/ip.213.93.97.200) has joined
<rick-sanchez>	I think I will use the asum solution, thank you for your help :) 
<michowski>	Hello everyone. I can't believe you can't rewrite this code using monad operators. But I still fail to do so:
<michowski>	https://gist.github.com/michowski/37fbaf6965b355455b91d06e2bf05497
<michowski>	Any idea?
<michowski>	This code duplication for error handling looks so ugly...
*	auto_complete_ has quit (Ping timeout: 258 seconds)
<jared-w>	That's a pretty classic case of the either monad, iirc
<michowski>	Indeed, when I have such a stuff, it's always straightforward bind: >>=
<michowski>	In this case tho, lambda with \encode -> can not go into case ... of
<michowski>	And my mind is blown..
*	emilypi has quit (Ping timeout: 258 seconds)
*	m1n has quit (Quit: WeeChat 1.9.1)
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
<jle`>	michowski: i've added a couple of suggestions in the gist
<jle`>	you can use >>=, but you have to "process" the either somehow
*	theorbtwo (~theorb@cpc81866-swin19-2-0-cust48.3-1.cable.virginm.net) has joined
*	ftzm (~user@modemcable230.242-178-173.mc.videotron.ca) has joined
*	yellowj has quit (Ping timeout: 252 seconds)
*	boxscape (c3a7ddd3@gateway/web/freenode/ip.195.167.221.211) has joined
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sun Nov  5 13:12:49 2017

**** BEGIN LOGGING AT Mon Nov  6 11:18:19 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	lambdaman (~lambdaman@96.53.63.54) has joined
*	tinnotl (~tinnotl@unaffiliated/tinnotl) has joined
*	auto_complete_ has quit (Ping timeout: 268 seconds)
*	Cthalupa has quit (Ping timeout: 255 seconds)
*	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined
*	peterbecich (~peterbeci@47.37.164.78) has joined
*	XorSwap has quit (Ping timeout: 260 seconds)
*	Vorpal has quit (Ping timeout: 248 seconds)
*	azahi has quit (Quit: ded)
*	Cthalupa (~cthulhu@47.186.19.197) has joined
*	pfurla (~textual@38.86.167.91) has joined
*	wonko7 has quit (Quit: See You Space Cowboy..)
*	mholmes has quit (Ping timeout: 248 seconds)
*	xaviergmail has quit (Ping timeout: 248 seconds)
*	TweyII has quit (Ping timeout: 240 seconds)
*	StriderZ has quit (Ping timeout: 260 seconds)
*	leothrix has quit (Read error: Connection reset by peer)
*	noobie_ has quit (Ping timeout: 240 seconds)
*	replay has quit (Ping timeout: 250 seconds)
*	replay_ (~replay@pdpc/supporter/student/replay) has joined
*	Vorpal (~Vorpal@c83-254-186-251.bredband.comhem.se) has joined
*	Vorpal has quit (Changing host)
*	Vorpal (~Vorpal@unaffiliated/vorpal) has joined
*	leothrix (~leothrix@elastic/staff/leothrix) has joined
*	StriderZ (~rahsheen@c-67-191-254-173.hsd1.ga.comcast.net) has joined
*	portnov has quit (Remote host closed the connection)
*	_main_ (~main@104.59.218.233) has joined
<osa1>	anyone know if Haskell 2010 gives typing judgements for Haskell expressions? I can't find it
*	xplat_ is now known as xplat
*	thblt (~user@55.184.14.109.rev.sfr.net) has joined
*	__main__ has quit (Ping timeout: 268 seconds)
*	_main_ is now known as __main__
*	etched (~etched@182.69.216.209) has joined
*	nickolay_ has quit (Ping timeout: 260 seconds)
<monochrom>	No, it just says "for each strongly-connected component, HM"
*	meandi_2 has quit (Read error: Connection reset by peer)
<monochrom>	But look for Mark Jones's "Typing Haskell in Haskell".
*	xaviergmail (~xavier@226-127.dr.cgocable.ca) has joined
*	meandi (~meandi_4@dyndsl-091-248-130-134.ewe-ip-backbone.de) has joined
*	inhortte1 (~polaris@212.21.249.185.static.user.ono.com) has joined
*	fr33domlover (~fr33domlo@fsf/member/fr33domlover) has joined
*	inhortte has quit (Read error: Connection reset by peer)
*	Saukk has quit (Remote host closed the connection)
<osa1>	monochrom: thanks. do you know where does it say "for each strongly-connected component ..."?
*	chaosmasttter (~chaosmast@p4FF1C0C8.dip0.t-ipconnect.de) has joined
*	Elminster has quit (Ping timeout: 240 seconds)
<monochrom>	4.5
*	niklasl2 has quit (Read error: Connection reset by peer)
*	niklasl (~niklasl@c83-249-82-116.bredband.comhem.se) has joined
<monochrom>	Oh I guess it doesn't use those words, but "minimal set of mutually dependent bindings" equals strongly connected component.
<osa1>	do you know any papers with expression typing judgements/ code like Typing Haskell in Haskell that also includes GADTs?
*	wonko7 (~wonko7@2a01:e34:ec14:5250:e40f:3235:2a83:7c3d) has joined
*	TipPerson (~TipPerson@78-23-12-123.access.telenet.be) has joined
<EvanR>	how do i take a .lhs file and make it readable
*	serendependy has quit (Ping timeout: 250 seconds)
<EvanR>	pardon the irony
*	cfricke (~cfricke@unaffiliated/cfricke) has joined
<monochrom>	Maybe something listed in https://wiki.haskell.org/Simonpj/Talk:OutsideIn helps
<lyxia>	EvanR: pandoc
<monochrom>	What is "readable"?
*	bodisiw (~bodiskw@128.163.237.38) has joined
<fr33domlover>	If you want to remove the comments, iirc there's a command? Or just grep ^>
*	mizu_no_oto_work (~textual@2601:196:4a01:e520:24cc:1e71:874b:2a4c) has joined
<EvanR>	http://www.cs.bham.ac.uk/~mhe/papers/fun2011.lhs
<EvanR>	pandoc ok
*	bjobjo_ is now known as bjobjo
<EvanR>	readable = colors and formatting, like the software foundations book
*	peterbecich has quit (Ping timeout: 260 seconds)
*	valentinbuza has quit (Ping timeout: 250 seconds)
<monochrom>	\documentstyle eh? That's pretty old.
*	auto_complete_ (~pouriafew@72.142.16.190) has joined
<lyxia>	NPlusKPatterns too
<EvanR>	well pandoc did give me HTML where the code was monospace font
<EvanR>	otherwise looks like the original file verbatim
*	tinnotl has quit (Ping timeout: 250 seconds)
*	oisdk (~textual@51-171-255-121-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined
<EvanR>	better than nothing
*	oisdk has quit (Client Quit)
*	TipsyMe (~TipsyMe@50-50-250-1.waus.wi.frontiernet.net) has joined
*	mholmes (~markholme@vpn.touchcommerce.com) has joined
*	epsilonhalbe (~epsilonha@84-113-106-42.cable.dynamic.surfer.at) has joined
*	neoncontrails has quit (Remote host closed the connection)
*	ertes (~ertes@haskell/developer/ertes) has joined
*	lambdaman has quit (Remote host closed the connection)
*	lambdaman (~lambdaman@96.53.63.54) has joined
*	L0g4nAd4ms (~L0g4nAd4m@ipb219914e.dynamic.kabel-deutschland.de) has joined
*	LKoen (~LKoen@vbo91-1-82-238-218-67.fbx.proxad.net) has joined
*	etched has quit (Quit: etched)
*	Destol (~Destol@67-213-103-77.eastlink.ca) has joined
*	king_idiot (~ahaslett@124.157.115.222) has joined
<L0g4nAd4ms>	How do i get the "middle character" of a string ? My "algorithm" would be to 1. check if length str > 0 as matchguard and then i would return the string !! ceiling length str / 2
<L0g4nAd4ms>	but this does not work, it gives me syntax errors :P
*	bts- (~bts@199.253.244.9) has joined
<liste>	> let str = "abcde" in str !! (length str `div` 2)
*	hiroaki (~hiroaki@ip4d1423ee.dynamic.kabel-deutschland.de) has joined
<lambdabot>	 'c'
*	LocalAliasote (~OliMe@82.158.29.108.dyn.user.ono.com) has joined
*	mmn80 (uid194575@gateway/web/irccloud.com/x-eigzgdxmsijeznke) has joined
<liste>	:t (ceiling, (/))
<lambdabot>	(Fractional a2, Integral b, RealFrac a1) => (a1 -> b, a2 -> a2 -> a2)
<liste>	see Fractional and RealFrac there ↑
<liste>	:t div
<lambdabot>	Integral a => a -> a -> a
<liste>	that one's integer division
<L0g4nAd4ms>	yeah but i do the / division cuz i want to ceil that thing
*	epsilonhalbe (~epsilonha@84-113-106-42.cable.dynamic.surfer.at) has left
*	lambdaman has quit (Ping timeout: 260 seconds)
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Mon Nov  6 12:00:57 2017

**** BEGIN LOGGING AT Tue Nov  7 19:32:17 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:12 2017)
*	Channel #haskell url: http://www.haskell.org/
*	sagax (~sagax_nb@213.138.71.146) has joined
*	mnoonan_ (~mnoonan@cpe-69-201-46-148.twcny.res.rr.com) has joined
*	auto_complete_ has quit (Ping timeout: 240 seconds)
*	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined
<crucify_me>	hi in a guard structure if you have   | m <= 0, n <= 0 = 0   , the comma too close to the 0 causes a hang (infinite loop?) why is that?   
*	dddddd has quit (Remote host closed the connection)
<crucify_me>	so a space fixes it, but in list comprehensions I don't think that's essential
*	bts- (~bts@199.253.244.9) has joined
<crucify_me>	scratch that. very strange now it works without an added space
<mniip>	what
<mniip>	that makes no sense
*	cschneid_ (~cschneid@2603:300b:901:300:7953:38d6:a8db:bd57) has joined
<geekosaur>	sounds wrong to me too
*	alexbiehl has quit (Ping timeout: 260 seconds)
*	alexbiehl (alexbiehl@server2.shellfire.net) has joined
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	wroathe has quit (Ping timeout: 248 seconds)
*	electrostat has quit (Quit: uwotm8)
*	hphuoc25 (~hphuoc25@118.200.76.54) has joined
<crucify_me>	https://ptpb.pw/hm_6    I was having problems with the comma following the zero, now it works . strange thanks for checking in
*	jay__ has quit (Ping timeout: 260 seconds)
*	electrostat (~dag@unaffiliated/electrostat) has joined
*	jay (~jay@117.202.246.88) has joined
*	xcmw (~textual@2605:a000:132b:20ac:4186:8f3d:e5e0:9732) has joined
*	bts- has quit (Ping timeout: 268 seconds)
*	jay is now known as Guest48207
*	cschneid_ has quit (Ping timeout: 250 seconds)
*	xcmw has quit (Client Quit)
*	xcmw (~textual@2605:a000:132b:20ac:4186:8f3d:e5e0:9732) has joined
*	alexbiehl has quit (Ping timeout: 240 seconds)
*	alexbiehl (alexbiehl@server2.shellfire.net) has joined
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Tue Nov  7 19:42:26 2017

**** BEGIN LOGGING AT Wed Nov  8 11:03:08 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	bts- (~bts@199.253.244.9) has joined
<erisco>	this is so that builds are less likely to break after definitions are added
<erisco>	also, it is nice to see where definitions have been imported from
*	emilypi (~emilypi@50.232.249.210) has joined
<cocreature>	saurabhnanda: why are you benchmarking the creation of the query and the rowparser? it seems like what you want to benchmark is actually executing the query (including the time it takes to generate it)
*	fragamus has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<saurabhnanda>	cocreature: that's next. tom has a hunch that even query generation is slow.
*	AndreasK has quit (Quit: Going offline, see ya! (www.adiirc.com))
*	ranberry has quit (Ping timeout: 240 seconds)
<cocreature>	also if you use a trivial NFData instance for RowParser you can just as well use "fst" to throw it away
<saurabhnanda>	cocreature: need to isolate the slowness to finely-grained steps.
<cocreature>	and if you’re benchmarking listen to nshepper1 and don’t use show to implement NFData
<saurabhnanda>	nshepper1: cocreature: how can I implement NFData for PGS.RunQuery (opaque wrapper on top of sttring-y data type)?
*	shangxiao has quit (Ping timeout: 260 seconds)
*	Archrover has quit (Ping timeout: 268 seconds)
*	cyborg-one (~cyborg-on@79-140-5-234.broadband.tenet.odessa.ua) has joined
<cocreature>	it’s not opaque, the constructor is exposed in Database.PostgreSQL.Simple.Types
*	a6a3uh has quit (Quit: Bye)
*	JappleAck (~unclechu@64.120.50.125) has joined
*	pera has quit (Quit: leaving)
<Mins>	erisco: I don't how to just import the two.
*	pera (~pera@unaffiliated/pera) has joined
<saurabhnanda>	cocreature: ah thanks
*	mrd (~md@104.168.62.244) has joined
*	mrd has quit (Changing host)
*	mrd (~md@debian/developer/mrd) has joined
*	ycheng has quit (Ping timeout: 240 seconds)
<erisco>	Mins, see my second import example
*	Archrover (Archrover@dog.waw.pl.eu.panicbnc.net) has joined
*	HMPerson1 has quit (Ping timeout: 250 seconds)
<Mins>	Ah, got it
<Mins>	 import RatOps (addR, subR) works...
*	ycheng (~ycheng@210.209.57.161) has joined
*	befuddle_ has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<saurabhnanda>	cocreature: nshepper1 -- this better? https://github.com/tomjaguarpaw/haskell-opaleye/pull/347/files#diff-3a34ca03768d1566e4827c2be674da8eR58
*	cdg has quit (Remote host closed the connection)
<saurabhnanda>	does criterion run a few "warmup" rounds before recording final numbers?
<saurabhnanda>	how many iterations does it run?
*	gxt has quit (Ping timeout: 260 seconds)
*	bts- has quit (Ping timeout: 268 seconds)
*	zzq (~zzq@46.120.114.167) has joined
*	wroathe has quit (Ping timeout: 260 seconds)
*	mithsv has quit (Quit: mithsv)
*	Volt_ has quit (Quit: sleep(s);)
*	mithsv (~simon@83pc90.sshunet.nl) has joined
*	ranberry (~ranberry@4.35.2.66) has joined
*	saurabhnanda has quit (Remote host closed the connection)
*	Volt_ (~Volt_@c-68-51-145-60.hsd1.mi.comcast.net) has joined
*	tpreston has quit (Quit: ZNC - http://znc.in)
<Mins>	What does it mean to import "qualified"? 
*	takle has quit (Remote host closed the connection)
*	bts- (~bts@199.253.244.9) has joined
<Mins>	Does it mean, if there's a function with the same name, it will not be imported?
*	inhortte (~polaris@142.red-79-152-44.dynamicip.rima-tde.net) has joined
*	inhortte1 has quit (Ping timeout: 240 seconds)
<electrocat>	Mins: if you do `import qualified Data.List`, you have to write `Data.List.sort` to use it's functions
<electrocat>	and types
<Mins>	Ah, thanks!
<electrocat>	or you can do `import qualified Data.List as L` and then you can do `L.sort`
*	_sras_ has quit (Ping timeout: 260 seconds)
*	valentinbuza (~valentinb@unaffiliated/valentinbuza) has joined
*	Archrover has quit (Ping timeout: 240 seconds)
*	bts- has quit (Ping timeout: 260 seconds)
*	Senecea has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<erisco>	import Data.Map (Map); import qualified Data.Map.Strict as Map
<erisco>	that is a common pattern for several modules that you should know
<Mins>	Okay, thank you!
*	ilyaigpetrov has quit (Quit: Connection closed for inactivity)
*	humanoyd has quit (Quit: WeeChat 1.9.1)
<erisco>	this imports the type  Map  and imports all definitions from Data.Map.Strict under the namespace also called  Map
*	eschnett (~eschnett@229-158.SPEEDe.golden.net) has joined
*	Archrover (Archrover@dog.waw.pl.eu.panicbnc.net) has joined
*	kculpis has quit (Remote host closed the connection)
<codeshot>	does lambdabot have super hoogle powers?
*	zariuq has quit (Ping timeout: 264 seconds)
*	kculpis (~kculpic@unaffiliated/kculpic) has joined
<erisco>	define "super"
<codeshot>	I can't
<mud>	It has @hoogle, but it's more just basic hoogle powers.
<codeshot>	It's just a feeling
<codeshot>	@hoogle (Monad m) => m a -> t m a
<lambdabot>	Control.Monad join :: (Monad m) => m (m a) -> m a
<lambdabot>	Streaming join :: Monad m => m (m a) -> m a
<lambdabot>	Haxl.Prelude join :: Monad m => m (m a) -> m a
<codeshot>	indeed
<codeshot>	@hoogle (Monad m, MonadTrans t) => m a -> t m a
<lambdabot>	Control.Monad.Trans.Class lift :: (MonadTrans t, Monad m) => m a -> t m a
<lambdabot>	Yesod.Core lift :: (MonadTrans t, Monad m) => m a -> t m a
<lambdabot>	Control.Monad.Morph lift :: (MonadTrans t, Monad m) => m a -> t m a
<codeshot>	better
*	laz has quit (Ping timeout: 250 seconds)
*	codeshot opens IM with lambdabot
*	valentinbuza has quit (Ping timeout: 248 seconds)
*	pertl has quit (Quit: pertl)
*	jgertm has quit (Ping timeout: 240 seconds)
*	hamishmack has quit (Quit: hamishmack)
*	haskellnoob (1b22feca@gateway/web/freenode/ip.27.34.254.202) has joined
*	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has joined
*	hamishmack has quit (Client Quit)
*	whoisxy (~whoisxy@87.244.83.12) has joined
*	Hsab__ (~G3ck0@191.190.201.227) has joined
*	Unhammer has quit (Remote host closed the connection)
<dminuoso>	ertes-w: Okay, after just deriving those slightly different laws from what Im used to, (the left associativity was obvious before you even mentioned it by the way), it turned out to be rather simple
<dminuoso>	traverseX f (V3 a b c) = (($ b) . ($ c) . V3) <$> (f a)
*	portnov has quit (Remote host closed the connection)
<dminuoso>	For some reason Im getting a redundant pattern match warning however
<dminuoso>	It type checks and works.
*	bts- (~bts@199.253.244.9) has joined
<dminuoso>	It's utterly amazing how all the applicative has disappeared.
*	Unhammer (~Unhammer@gateway/tor-sasl/unhammer) has joined
*	treebgx (185d7be0@gateway/web/freenode/ip.24.93.123.224) has joined
*	raatiniemi has quit (Read error: Connection reset by peer)
<dminuoso>	erisco: Turns out the main thing I just didn't see, was `fmap f (fmap g cx) = fmap (f . g) cx` because I was used to seeing this as `(fmap f) . (fmap g) = fmap (g . f)`, and it was not visually obvious to be useful.
<dminuoso>	Ops, wrong recipient sorry.
<treebgx>	When I attempt to run "stack build --coverage" I get the message "No tix files found in /home/name/codelocation/.stack-work/install/x86_64-linux-nopie/lts-8.21/8.0.2/hpc/, so not generating a unified coverage report."
*	slomo_ has quit (Read error: Connection reset by peer)
<treebgx>	Any thoughts on what's going wrong?  Google didn't turn up anything
*	raatiniemi (~raatiniem@h-142-187.A159.priv.bahnhof.se) has joined
*	govg has quit (Ping timeout: 246 seconds)
*	slomo_ (~slomo@178-232-61.dynamic.cyta.gr) has joined
*	slomo_ has quit (Changing host)
*	slomo_ (~slomo@unaffiliated/slomo) has joined
<haskellnoob>	removeNonUppercase :: [Char] -> [Char]   removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]  
<haskellnoob>	this is not working in tghci 
<haskellnoob>	but working from editor why ?
<geekosaur>	because the editor changes it to what ghci wants to see, which is all of it on one line with semicolons between
<haskellnoob>	removeNonUppercase :: [Char] -> [Char]   I am also not understanding why declaring like this is a good style?
<lavalike>	haskellnoob: you only need to input the definition in ghci, not the type
<geekosaur>	and pssibly 'let' in front if your ghci is old enough
<betawaffle>	is there a GHC extension that lets me put a type constraint that follows my type alias around?
<haskellnoob>	let also not working
<lavalike>	haskellnoob: if you input just the second line it will work
*	tpreston (~thomaspre@78.40.148.184) has joined
<geekosaur>	and it's good style because the combination of laziness and polymorphism means you often get type errors where the typechecker sees the conflict instead of where you actually made a mistake
<haskellnoob>	as soosn as I enter first line it throw error
*	Jesin has quit (Ping timeout: 240 seconds)
<haskellnoob>	so should I add ;
<lavalike>	haskellnoob: the first line you can't type into ghci
<haskellnoob>	after first line
<geekosaur>	but if you state your types up front then it's more likely to spot it at the right time
<haskellnoob>	and that first line making me scary
<lavalike>	haskellnoob: you're asking it to evaluate the expression "removeNonUppercase :: [Char] -> [Char]" which is not going to work, because that identifier is not defined
<haskellnoob>	should I declare like that  it will be very hard isn't it
<geekosaur>	    let removeNonUppercase :: [Char] -> [Char]; removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']] 
<geekosaur>	...what?
<lavalike>	haskellnoob: on the other hand, if you type just "removeNonUppercase st = [ ... ]" then it will add that binding and you can use it at the prompt thereafter
<erisco>	why can I not find Natural
*	acowley_away is now known as acowley
<erisco>	GHC.Natural? oO
<haskellnoob>	lavalike:  geekosaur  that first line os good style learnyouhaskell book says
<haskellnoob>	but I am scared why should I declare everytime
<lavalike>	haskellnoob: there is a difference between what you can type in an haskell source and what you can type in the interpreter
<geekosaur>	I answered that
<haskellnoob>	geekosaur:  where ?
*	Gurkenglas has quit (Remote host closed the connection)
<geekosaur>	[08 19:44:12] <geekosaur> and it's good style because the combination of laziness and polymorphism means you often get type errors where the typechecker sees the conflict instead of where you actually made a mistake
*	Jesin (~Jesin@wsip-98-187-234-122.dc.dc.cox.net) has joined
<geekosaur>	[08 19:44:28] <geekosaur> but if you state your types up front then it's more likely to spot it at the right time
<Mins>	I need to work with "real numbers" in haskell. Do they mean "double" or are there real "real numbers" in haskell? 
<geekosaur>	and I do not see what's so "scary" about it
*	mithsv has quit (Quit: mithsv)
*	Gurkenglas (~Gurkengla@dslb-094-223-138-157.094.223.pools.vodafone-ip.de) has joined
*	mithsv (~simon@83pc90.sshunet.nl) has joined
<lavalike>	Mins: usually Double does the trick (:
<Mins>	Thanks! 
<haskellnoob>	geekosaur:  how I will know which is what type in large programs
*	valentinbuza (~valentinb@unaffiliated/valentinbuza) has joined
<geekosaur>	Mins, there are no true "real numbers" inany language, only approximations of one kind or another. Double is *probably* what you want, but others are available in packages
<Mins>	My task is to search for a maximal real number in a list. Idk, what they mean.
<geekosaur>	haskellnoob, you build your large programs from smaller components which you can easily figure the type of, and then knowing the types of the components you can determine the types of the larger pieces you build out of those components
<betawaffle>	Mins: where does a task like that come from?
*	forgottenone has quit (Quit: Konversation terminated!)
<Mins>	My teacher
<betawaffle>	ahh
*	takle (~takle@host86-166-245-178.range86-166.btcentralplus.com) has joined
<Mins>	-> Homework
<lavalike>	that's a good source of tasks
<mauke>	is the text of the assignment online?
<haskellnoob>	now I understand why haskell is hard
<betawaffle>	that sounds pretty trivial
<MagneticDuck>	haskellnoob: Because it's typed?
*	CoderPuppy (~cpup@32.218.113.165) has joined
<haskellnoob>	MagneticDuck:  I need to declare type of function which I havn't seen in language like python or similar
<mauke>	knowing the types is the easy part :-)
*	raingloom has quit (Quit: WeeChat 1.9.1)
<mauke>	in python you still need to understand what a function does, how many arguments it takes, what is what, etc
<haskellnoob>	mauke:  what else is tough part then ?
<mauke>	but the compiler can't help you with types
<mud>	haskellnoob: Python things still have to have types in a sense, it just does less to help you figure out when you do it incorrectly (until it crashes while it's running)
<MagneticDuck>	mauke: Wrong! You just declare a function, forget its preconditions, and ship buggy code.
<mauke>	bonus (orthogonal) problem: in python, "unbound variable" is a runtime error
*	jb55 has quit (Ping timeout: 248 seconds)
<mauke>	i.e. python can't even detect typos in variable names
*	cpup has quit (Ping timeout: 240 seconds)
*	emilypi has quit (Ping timeout: 240 seconds)
*	jgertm (~jgertm@c-73-170-252-167.hsd1.ca.comcast.net) has joined
*	Snircle (~textual@2600:8801:c404:7900:c3a:9175:de64:db7a) has joined
*	MP2E (~MP2E@wsip-70-165-15-226.lv.lv.cox.net) has joined
*	jeltsch (~wolfgang@85.253.254.16.cable.starman.ee) has joined
*	osa1 has quit (Ping timeout: 246 seconds)
<geekosaur>	haskellnoob, you can work out the types up front with tools to help you do it (like ghci), or you can wait until you get a runtime type error and then try to diagnose it without any help. I don't see how the first is harder than the second.
<geekosaur>	or is this one of those cases of "never time to do it right, always time to do it over"?
<haskellnoob>	geekosaur: I dont know may be I just started thats why I feel hard
<haskellnoob>	I will try more and see
<mauke>	the other thing is, adding type declarations to a large code base that doesn't have them is not a thing I've ever needed to do
<mauke>	it's simply not a thing that happens in practice
<mauke>	(also, you can do it piece by piece and the compiler will tell you if you get it wrong)
*	Archrover has quit (Ping timeout: 248 seconds)
<[exa]>	haskellnoob: there's this thing called a type hole, you can use it to see what type is expected where and what type is assigned to what
*	takle has quit (Remote host closed the connection)
<[exa]>	haskellnoob: just put _ instead of whatever you don't know and the compiler/interpreter will tell you what it would expect
<haskellnoob>	[exa]:  is it a library ? I will use it later once I finish learnyouhaskell book
*	treebgx has quit (Quit: Page closed)
<[exa]>	no, iirc it's built to ghc/ghci
<[exa]>	> 1 + _
<lambdabot>	 error:
<lambdabot>	     • Found hole: _ :: a
<lambdabot>	       Where: ‘a’ is a rigid type variable bound by
*	peterbecich has quit (Ping timeout: 260 seconds)
<mud>	It doesn't do amazingly well in lambdabot, because the messages are fairly long.
*	sword865 has quit (Quit: Connection closed for inactivity)
<[exa]>	oh seems I've triggered defaulting
<mud>	But it's pretty cool in practice.
<[exa]>	yep
*	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined
<[exa]>	haskellnoob: run ghci and put stuff with _'s into it, like `map _ [1,2,3]` or `_ 3 4 5` etc
*	Saukk has quit (Remote host closed the connection)
*	Archrover (Archrover@dog.waw.pl.eu.panicbnc.net) has joined
<haskellnoob>	ok [exa]  
*	Yuras has quit (Ping timeout: 240 seconds)
*	bts- has quit (Ping timeout: 264 seconds)
<erisco>	has anyone seen an implementation of quotient types like this? http://lpaste.net/359897
*	boojinks (~ben@host-92-0-63-107.as43234.net) has joined
*	lorproas (185d7be0@gateway/web/freenode/ip.24.93.123.224) has joined
*	Hsab__ has quit (Quit: Konversation terminated!)
*	florin (~florin@188.26.141.6) has joined
<erisco>	I thought there was something on Hackage like this but now I don't see it
*	florin is now known as Guest94699
<lorproas>	In GHCi, I'm setting -fbreak-on-exception and trying to Ctrl+C out of an infinite loop, and GHCi hangs.
<dminuoso>	Is there some way of golfing `($ b) . ($ c) . f` into something even more concise?
*	nickolay has quit (Ping timeout: 248 seconds)
<lorproas>	It doesn't hang if -fbreak-on-exception isn't set.
<lorproas>	Any thoughts?
<erisco>	:t \b c f -> ($ b) . ($ c) . f
<lambdabot>	a1 -> a2 -> (a3 -> a2 -> a1 -> c) -> a3 -> c
*	robotroll has quit (Read error: Connection reset by peer)
<erisco>	is that the right argument order, dminuoso?
*	Gurkenglas has quit (Ping timeout: 240 seconds)
*	Enigmagic has quit (Read error: Connection reset by peer)
<dminuoso>	Ohhhh. Its not in fact :o
*	Enigmagic (~enigmo@unaffiliated/enigmagic) has joined
<Guest94699>	hi, Can somebody explain to me what type of functions is this: "(->) t a". What I understand is it's a function that has the first argument "t a", but what about it's result ?
<dminuoso>	erisco: How did you spot that?
*	Youmu has quit (Quit: Connection closed for inactivity)
*	Hsab__ (~G3ck0@191.190.201.227) has joined
*	hiroaki (~hiroaki@ip4d1423ee.dynamic.kabel-deutschland.de) has joined
*	bts- (~bts@199.253.244.9) has joined
<erisco>	probably by accident, since I don't know what it is that I spotted
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Wed Nov  8 12:08:42 2017

**** BEGIN LOGGING AT Fri Nov 10 12:13:57 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	pwnz0r has quit ()
<iqubic>	Fix has kind (* -> *) -> * I think
<mniip>	yes
<iqubic>	How do you construct something of type Fix?
<mniip>	like usual
*	cdg_ (~cdg@157.166.173.4) has joined
<mniip>	Fix Maybe ~ Nat
<iqubic>	But it's a recursive type. 
<mniip>	Fix ((,) e) ~ Stream e
<mniip>	Fix (Compose ((,) e) Maybe) ~ [e]
<iqubic>	I see.
<Tuplanolla>	:t Fix Nothing :: Fix Maybe
<lambdabot>	Fix Maybe
<dropout>	Why parameters of (<$>) are not flipped? It would be possible to chain functions (x <$> f1 <$> f2) like it is possible with monads? Why it was chosen like that? What I'm missing?
<iqubic>	What does Compose do?
*	codygman (2fb87079@gateway/web/freenode/ip.47.184.112.121) has joined
<mniip>	Tuplanolla, I don't think that type restruction was necessar
<lyxia>	dropout: that way it looks like function application
<mniip>	iqubic, why don't you look that up
<lyxia>	dropout: there's   (<&>) = flip (<$>)   in some places
<monochrom>	I think iqubic is looking it up.
<iqubic>	I am
*	zv (~zv@unaffiliated/zv) has joined
<mniip>	dropout, there's a series of functions like & and <&> in lens
<monochrom>	I think iqubic uses their left hand to ask in IRC and their right hand to ask Google.
<dropout>	Thanks.
<codeshot>	Psybur, https://pastebin.com/HbA4fVjy
<iqubic>	I see.
<monochrom>	So I think you can safely ignore all their questions. They're just thinking aloud.
<monochrom>	Don't answer to answer. Just don't answer.
<iqubic>	monochrom: That's more or less correct.
*	cdg has quit (Ping timeout: 248 seconds)
<sternmull>	The documentation for Data.ByteString.hGetNonBlocking says "Note: on Windows and with Haskell implementation other than GHC, this function does not work correctly; it behaves identically to hGet.". Does that mean it blocks on windows even with GHC? Or does GHC support nonblocking behavior on all platforms?
<Psybur>	Hows this for idiomatic? :D https://pastebin.com/uuRpJBM5
<Psybur>	codeshot, ill take a peek now :D
<monochrom>	To chain functions I'm fmapping, I would just use (g . f) <$> x 
*	JeanCarloMachado (~jean@186.215.119.122) has joined
*	k has quit (Quit: Leaving)
*	Enigmagic has quit (Read error: Connection reset by peer)
<dropout>	monochrom: That just seems less readable for me.
*	Youmu has quit (Quit: Connection closed for inactivity)
<Psybur>	codeshot, so youre skipping the Maybe check and doing it all in one go? Cool
*	Enigmagic (~enigmo@unaffiliated/enigmagic) has joined
<Psybur>	codeshot, whats with the "!" in gets ?
<monochrom>	Is it because "g (f x)" is readable and "(g . f) x" is not readable?
*	desperek has quit (Ping timeout: 240 seconds)
*	emilypi has quit (Ping timeout: 268 seconds)
<codeshot>	operator form of lookup
*	Deide (~Deide@94.5.85.133) has joined
<dminuoso>	dropout: I found that a lot of "this seems unreadable to me" comes from not being used to haskell, and b not seeing the patterns as intended.
<codeshot>	but I didn't notice you have import Data.Map as M
<Psybur>	Interesting
*	kg (~krok@unaffiliated/krok) has joined
<dminuoso>	dropout: Had the same revelation about <$> the other day, where I asked why it existed together with fmap.
*	duncan^ has quit (Quit: WeeChat 1.9.1)
<dminuoso>	Well. Asked myself anyway.
<codeshot>	I almost always use (foo <$>) instead of (fmap foo)
<Psybur>	codeshot, so you are retrieving the result from the state? So you have to traverse the tree after calculating?
<codeshot>	yes, instead of before
<dminuoso>	codeshot: That however feels less intuitive. To me <$> expresses application, fmap expresses lifting.
*	codygman has quit (Ping timeout: 260 seconds)
<codeshot>	liftA expresses lifting
<codeshot>	fmap = (<$>)
<iqubic>	liftA confuses me.
<iqubic>	:t liftA
<lambdabot>	Applicative f => (a -> b) -> f a -> f b
<dminuoso>	iqubic: It comes from historic times.
<iqubic>	:t ap
<lambdabot>	Monad m => m (a -> b) -> m a -> m b
<iqubic>	:t <*>
<lambdabot>	error: parse error on input ‘<*>’
<dminuoso>	codeshot: Well, to me `fmap` has been burned into mind to mean `lifting` :)
<codeshot>	take a function that applies a pure function to a pure value, and return one that applies an applicative function to an applicative value
*	desperek (~draco@unaffiliated/desperek) has joined
<m4lvin>	:t (<*>)
<lambdabot>	Applicative f => f (a -> b) -> f a -> f b
<dminuoso>	codeshot: Also liftA may not be available if your functor is not an applicative.
<iqubic>	:t (<*>)
<lambdabot>	Applicative f => f (a -> b) -> f a -> f b
<dminuoso>	so, fmap is the only thing you have to generally express lifting in a clean way
<dropout>	Is there any reason why <&> is not part of Prelude?
<monochrom>	To me, fmap expresses prefix, <$> expresses infix. That's all. Superficial cosmetic difference.
*	codeshot begins forging a brand in the shape of (<$>)
<codeshot>	hold still there dminuoso
<monochrom>	And liftA and liftM are just there for the sake of completeness.
<codeshot>	dropout, my guess is that it would be nice to reserve it until someone deduces a meaning that parallels <|>
<dminuoso>	monochrom: I guess the real question is, why is fmap not called lift?
*	nickolay has quit (Ping timeout: 268 seconds)
<dminuoso>	or liftF 
<mnoonan_>	or “map” :|
<dminuoso>	:|
<dminuoso>	mnoonan_: why map?
<codeshot>	dminuoso, because it doesn't lift, it's only builds a kleisli morphism from a pure function rather than lifting the pure function
*	kg is now known as k
<monochrom>	Like you have to purchase both Park Place and Boardwalk in order to build house on Boardwalk, and you have to build almost the same number of houses on Park Place too, so you let Park Place exist for the sake of completeness but it doesn't mean you really care.
<mnoonan_>	because map :: (a -> b) -> [a] -> [b] took the good name with a restrictive type
<mnoonan_>	actually, I guess “fap” is the best name (for “functor application”, obviously). dunno why it wouldn’t catch on.
<monochrom>	I think "lift" is not always the right analogy.
<monochrom>	Sometimes actually "demote" is the right analogy.
<iqubic>	:t lift
<lambdabot>	(Monad m, MonadTrans t) => m a -> t m a
<iqubic>	Lift is different than what I think it should do.
<iqubic>	Why do you need MonadTrans there?
*	hackebeilchen1 (~Peter@192-143-067-156.ip-addr.inexio.net) has joined
<iqubic>	Why not just have (Monad M, Monad T) => m a -> t m a
<dminuoso>	monochrom: What notion of "lift" do you have to say it doesnt fit?
*	hackebeilchen has quit (Ping timeout: 240 seconds)
*	safe (~safe@unaffiliated/safe) has joined
<codeshot>	oh, wait, I just imagined the type of fmap all wrong and I now know it intuitively
<codeshot>	how dumb of me
<codeshot>	it does lift
<codeshot>	it exactly lifts
<monochrom>	map f [1,2,3] = [f 1, f 2, f 3] does not look like lifting f. It looks like embedding or sprinkling or hiding f's in a pudding.
<iqubic>	map isn't a form of lift is it?
<dminuoso>	iqubic: map is.
<iqubic>	it is?
*	DTZUZO (~DTZUZO@modemcable061.78-160-184.mc.videotron.ca) has joined
<dminuoso>	monochrom: Well, let's drop the list for a second. map f, what does map do?
<dminuoso>	it changes f into a different but related function
<hexagoxel>	dropout: there are also functors for which fmap is sufficiently expensive that you will prefer (fmap (g . f)) or (<&> (f .> g)) over two fmaps.
<iqubic>	It applies f to all elements of a list.
<monochrom>	Is [X] "higher" than X? Is IO X "higher" than X?
<codeshot>	why do we have fmap, liftM, liftA ? instead of just fmap ?
<dminuoso>	iqubic: map is just fmap but limited to lists, nothing else.
*	durandal1 (~durandal1@2601:647:4900:1f83:986:4c7c:115e:7bbc) has joined
<monochrom>	And for that matter does return/pure "lift" too? return/pure :: a -> [a]/IO a
<iqubic>	but fmap is not a lifting function right?
<dminuoso>	codeshot: historical reasons. back then Applicative and Monad were not in the inheritance they are now.
<codeshot>	that explains the excess liftA
<dminuoso>	codeshot: at some point it was made so that Monad is an Applicative is a Functor.
<codeshot>	but not the excess liftM
<monochrom>	codeshot: See what I said about Park Place :)
<geekosaur>	liftM was to recover fmap from Monad since, having no Applicative constraint, it also had no Functor
<codeshot>	Monad didn't derive from Functor either?
<dminuoso>	codeshot: correct
<codeshot>	ok
*	emilypi (~emilypi@50.232.249.210) has joined
*	ertes (~ertes@haskell/developer/ertes) has joined
<dminuoso>	codeshot: All books I read discourage the usage of liftA and liftM, and just point towards fmap and <$>
*	eschnett has quit (Quit: eschnett)
<codeshot>	that's why Monads have been so difficult to learn, not being an extension of more basic tools ...
<codeshot>	I guess
*	HMPerson1 (~HMPerson1@128.211.64.90) has joined
*	durandal_ has quit (Ping timeout: 240 seconds)
<monochrom>	OTOH some teachers could not come up with a story that goes from functor to monad. (They already had an independent monad story.) (They spoke up in haskell-cafe, that's how I know.)
<fakenullie>	:t on
<lambdabot>	(b -> b -> c) -> (a -> b) -> a -> a -> c
<monochrom>	Actually more precisely they could go functor->applicative but couldn't do applicative->monad.
<codeshot>	iqubic, lift is a method of MonadTrans used to access a Monad that has been built upon by a monad transformer
*	benpr (~benpr@128.135.98.144) has joined
<dminuoso>	codeshot: I found Monads hard to grok in the beginning because they are a highly generalized concept. But by just using them with some simple directed assignments I discovered what they were about after a short while.
<monochrom>	Teaching is hard. Let's just download Haskell to your brain.
<codeshot>	pure makes a kleisli morphism relative to a pure category, and lift makes an parallel morphism relative to a monad category
<iqubic>	codeshot: I get what lift does.
<iqubic>	 
<dminuoso>	monochrom: Curious, what do you mean by "couldn't do applicative->monad" ?
<monochrom>	They don't know how to explain that monad builds upon applicative.
<monochrom>	And they probably don't know why themselves, too.
<codeshot>	I'm only just scratching the surface of Monads. I'm starting to see the division into 2 spaces, one of answers + no answer, and one for the nature of the process of answering
<iqubic>	I just don't understand why you need the MonadTrans constraint for lift.
*	kwf has quit ()
<codeshot>	because it only shares elements of its name with liftA and liftM
<codeshot>	it's lifts in a different dimension
*	chaosmasttter has quit (Quit: WeeChat 1.9.1)
<codeshot>	fmap, liftA and liftM lift a value across an incoming functor
*	wagle (~wagle@irc.wagle.io) has joined
*	toblorone (~toblorone@162.246.216.202) has joined
<codeshot>	lift lifts the context of a monadic action across an interleaved monad embellishment/decoration
<dminuoso>	codeshot: fmap does not lift values.
<dminuoso>	codeshot: fmap lifts functions.
<codeshot>	yes, sorry
<codeshot>	pure lifts a value across an incoming functor
*	azahi has quit (Ping timeout: 248 seconds)
*	conal has quit (Quit: Computer has gone to sleep.)
*	conal (~conal@104.255.240.10) has joined
*	toby1851 (~toby@88-110-104-87.dynamic.dsl.as9105.com) has joined
<codeshot>	lift seems like it's actually the opposite of lifting in that other dimension because its the context in which you're writing that's lifted rather than what you've just written
<codeshot>	so what you've just written actually gets depressed
<ongy>	:t when
<lambdabot>	Applicative f => Bool -> f () -> f ()
<dminuoso>	codeshot: I suppose in a way "transport" or "beam" is a little more fitting since it lacks the notion of "up" and "down"
<ongy>	is there a conceptional reason this is on () and not mempty? Or is it just "because it was done like this"
<codeshot>	yeah, but the directionality is still important
<dminuoso>	codeshot: the directionality is a circl
<dminuoso>	circle
<ongy>	er, Monoid, return mempty on False
<dminuoso>	Since we are mostly just talking about Endofunctors when we say Functor.
<codeshot>	Not sure about that. That requires the two end categories to be isomorphic with each other
*	seveg (~seveg@188-167-252-92.dynamic.chello.sk) has joined
<codeshot>	unless you've got some fixedpoint functor
<codeshot>	(categorically speaking)
*	dropout has quit (Quit: dropout)
*	codygman (2fb87079@gateway/web/freenode/ip.47.184.112.121) has joined
*	ranberry has quit (Ping timeout: 248 seconds)
**** ENDING LOGGING AT Fri Nov 10 12:53:58 2017

**** BEGIN LOGGING AT Mon Nov 13 11:36:28 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	garphy`aw is now known as garphy
*	SenasOzys_ (~SenasOzys@user208.77-105-199.netatonce.net) has joined
*	merijn (~merijn@wlan-meetingrooms-141.sc17.org) has joined
*	jgertm (~jgertm@c-73-170-252-167.hsd1.ca.comcast.net) has joined
*	ph88 (~ph88@87.214.234.33) has joined
*	TipsyMe (~TipsyMe@50-50-249-67.waus.wi.frontiernet.net) has joined
*	mlehmk has quit ()
<ph88>	what does this mean "we can now express logic directly in the robot’s programming" in http://newartisans.com/2012/08/meta-programming-with-the-free-monad/ ?
<crucify_me>	hi is it typical (good form) to start with a pattern match and go into guard cases like this? thanks https://ptpb.pw/Tbyn
<c_wraith>	crucify_me, that pattern is common, yes. I'll skip pointing out details of how silly that example is.
<ski>	i'd say it's nicer to replace the guards by two defining equations there. replacing `x' with `False'
*	merijn has quit (Ping timeout: 248 seconds)
<ski>	(possibly replacing `x' with `True' (or `_') in the other one)
*	jgertm has quit (Ping timeout: 240 seconds)
*	fizbin has quit (Quit: Leaving.)
*	jmelesky (~jmelesky@162.213.77.59) has joined
*	fizbin (~Adium@pool-96-235-147-253.cmdnnj.east.verizon.net) has joined
*	merijn (~merijn@wlan-meetingrooms-141.sc17.org) has joined
<ski>	if you have guards that aren't better represented using pattern-matching, then sure, that looks sensible
*	lambdaman has quit (Remote host closed the connection)
*	lambdaman (~lambdaman@96.53.63.54) has joined
<crucify_me>	c_wraith, please critique, I was trying to do it differently than other solutions online that I peeked at.
<crucify_me>	thanks ski
*	lambdaman has quit (Remote host closed the connection)
*	mentos1386 (~mentos138@88.200.103.93) has joined
<c_wraith>	well, (== False) is the same as not
<crucify_me>	cool thanks
<c_wraith>	and really, it's way easier to just use (&&)
*	MP2E (~MP2E@wsip-70-165-15-226.lv.lv.cox.net) has joined
<crucify_me>	please paste it c_wraith if you have time
<crucify_me>	I like the not
*	lambdaman (~lambdaman@96.53.63.54) has joined
*	np356 (~karim@ip5f5bf74b.dynamic.kabel-deutschland.de) has joined
*	toby1851 has quit (Ping timeout: 260 seconds)
<c_wraith>	I mean, the second equation can just be "... = x && andd xs" in a single clause.
*	OhBeOne (~r@2001:610:510:115:216:3eff:fec4:8516) has joined
<c_wraith>	and the whole thing reduces to (foldr (&&) True) if you want.
*	theelous3 has quit (Ping timeout: 240 seconds)
*	zzq (~zzq@46.120.114.167) has joined
<crucify_me>	foldr yes I could do a one-liner thanks c_wraith 
*	hexamod (~textual@a80-101-98-83.adsl.xs4all.nl) has joined
<c_wraith>	anyway, I thought the original question deserved an answer independent of those things.
<c_wraith>	since it was a good question, and getting distracted by the example might be unhelpful
<crucify_me>	well, yeah my solution was valid and using not is a lot prettier
*	moei (~moei@softbank221078042071.bbtec.net) has joined
*	ski raises eyebrow
<crucify_me>	why ski
<ski>	how are you using `not' here, such that it would be a lot prettier ?
<c_wraith>	replacing x == False with not x
*	ski waits for crucify_me to confirm
*	DeATh`RoW has quit (Ping timeout: 258 seconds)
<crucify_me>	yeah its nicer
<crucify_me>	but I don't like && , guess I need to start using it.
<ski>	why not swap the order of the guards, then, negating the condition ?
<ski>	(imho, `(&&)' is even nicer here, if you're going away from the explicit matching on booleans version)
<crucify_me>	well yeah, (foldr (&&) True) is very nice as per c_wrai*th
<EvanR>	all ?
*	vlatkoB has quit (Remote host closed the connection)
<ski>	`all id' looks a bit silly, considering this is an implementation of `and'
<EvanR>	oh
<ski>	(it might be different in a strict language)
<EvanR>	and
<ski>	(but even without `foldr', with explicit recursion, i think `(&&)' is nicer than using a guard)
*	foojin (~foojin@128-68-59-129.broadband.corbina.ru) has joined
<crucify_me>	never used all - its early in the textbook
<crucify_me>	ski please paste since I can't write it
<ski>	@src all
<lambdabot>	all p = and . map p
<ski>	crucify_me : paste what ?
*	JappleAck has quit (Ping timeout: 240 seconds)
<crucify_me>	your version of (&&) if its unlike c_wrai*th
<ski>	oh. it isn't
*	caryoscelus has quit (Ping timeout: 248 seconds)
*	waveprop (~user@unaffiliated/latemus) has joined
*	caryoscelus (~caryoscel@176.192.200.89) has joined
*	vaartis (~user@93.85.33.88) has joined
<ski>	just pointing out a preference over using boolean operation, over explicit conditionals (guards, or `if'-`then'-`else', or `case'-`of' for that matter)
<ski>	s/over using/of using/
*	Jacoby6000_ (~Jacoby600@host-64-47-96-210.masergy.com) has joined
<crucify_me>	cool thanks. I'm just looking for say 3 solutions so I can compare. what do you call it when you go for absolute minimum chars in a solution for brevity, ad nauseum ?
<ski>	a use of a bare boolean literal in a branch can usually be reformulated in a nicer way
*	chaosmasttter has quit (Ping timeout: 248 seconds)
<vaartis>	Hey, i have a question about strange optimizations (?) and Async. Basically the thing is, my function returns the type State <state_record> IO (), and the final statement in the do block is the main thing 
*	merijn has quit (Ping timeout: 240 seconds)
<ski>	crucify_me : sillyness ?
*	amadhavan1 has quit (Remote host closed the connection)
<vaartis>	So when i just return my main action, nothing happens, it doesn't run
*	toby1851 (~toby@88-110-104-87.dynamic.dsl.as9105.com) has joined
<crucify_me>	please paste example of bare boolean branch to reformulation ski. I can't quite follow your thought
<vaartis>	BUT if i add `return ()` to the end of the do, it works fine
<vaartis>	Any idea why this is happening?
*	Jacoby6000 has quit (Ping timeout: 248 seconds)
<ski>	crucify_me : `if foo then True else bar' is equal to `foo || bar', `if foo then bar else False' is equal to `foo && bar'. `if not foo then bar else baz' is equal to `if foo then baz else bar'
<vaartis>	https://paste.kotobank.ch/paste/YF56GE
*	amadhavan1 (~amadhavan@65.204.229.97) has joined
<vaartis>	(the code)
*	beryl-stone (~me@c-67-188-175-68.hsd1.ca.comcast.net) has joined
<crucify_me>	thanks, yeah well if then else is barbarian even to this beginner
<beryl-stone>	is earley the standard library for parsing cfgs? 
*	merijn (~merijn@wlan-exhibit-5775.sc17.org) has joined
*	Denommus has quit (Quit: going home)
*	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined
*	zzq has quit (Ping timeout: 268 seconds)
<vaartis>	Also, building with "stack build --fast" does not help. I am really confused about this
<crucify_me>	@src
<lambdabot>	src <id>. Display the implementation of a standard function
*	amadhavan1 has quit (Ping timeout: 260 seconds)
<crucify_me>	@src all
<lambdabot>	all p = and . map p
<crucify_me>	sorry ski I don't get this ^
*	fr33domlover (~fr33domlo@fsf/member/fr33domlover) has joined
*	sausage_ (~yourhost@public-115-29.nat.utoronto.ca) has joined
*	durandal_ (~durandal1@2601:647:4900:1f83:1d52:5e94:8a47:8213) has joined
<dminuoso>	Is there some way of knowing whether a given code path does unsafePerformIO?
*	ziocroc3 (~ziocroc@151.74.121.204) has joined
<geekosaur>	dminuoso, no
<ski>	crucify_me : it's equivalent to `all p xs = and (map p xs)'. understanding that requires first understanding `map'
<dminuoso>	geekosaur, not even a sneaky language extension?
<geekosaur>	not even
*	osa1 has quit (Ping timeout: 258 seconds)
<[exa]>	dminuoso: grep?
*	ski . o O ( `Safe' )
*	fizbin has quit (Quit: Leaving.)
<geekosaur>	well, there is that I guess, but that operates on module level not individual code paths
<mud>	hlint :)
<mud>	But ya, that
*	hphuoc25 (~hphuoc25@118.200.76.54) has joined
*	Jacoby6000_ is now known as Jacoby6000
*	rblaze has quit (Quit: Leaving.)
<crucify_me>	ski thanks yeah fiddling with that...
<dminuoso>	[exa], fair enough. I guess Ill `rg` the modules. :)
<dminuoso>	Thank you.
*	durandal1 has quit (Ping timeout: 240 seconds)
*	rblaze (~Adium@2620:10d:c091:200::3:30cd) has joined
*	ziocroc2 has quit (Ping timeout: 260 seconds)
<ski>	> all (> 5) [7,15,9]
<lambdabot>	 True
<ski>	> all (> 5) [7,15,3,9]
<lambdabot>	 False
*	OhBeOne has quit (Ping timeout: 252 seconds)
*	merijn has quit (Ping timeout: 240 seconds)
<[exa]>	dminuoso: I'm not sure about how common unsafePerformIO is, but running through dowloaded cabal packages can't hurt :]
<ski>	@check all (> 5)
<lambdabot>	 *** Failed! Falsifiable (after 3 tests and 2 shrinks):
<lambdabot>	 [-1]
<cement>	how similar are cassava and aeson in terms of usage?
<cement>	nvm, looks like they're nearly the same thing
*	mson has quit (Quit: Connection closed for inactivity)
<vaartis>	> (the code)
<vaartis>	also, it seems that replacing mapTasks_ with mapTasks also solves the problem
*	emmanuel_erc (~user@d-128-143-74-2.dhcp.virginia.edu) has joined
<lambdabot>	 error: Variable not in scope: the :: t0 -> terror:
<lambdabot>	     • Variable not in scope: code
<lambdabot>	     • Perhaps you meant one of these:
*	hphuoc25 has quit (Ping timeout: 248 seconds)
*	chaosmasttter (~chaosmast@p54B474C6.dip0.t-ipconnect.de) has joined
*	inhortte has quit (Ping timeout: 248 seconds)
*	JeanCarloMachado has quit (Ping timeout: 252 seconds)
*	np356 has quit (Ping timeout: 248 seconds)
*	zaquest (~notzaques@5.128.210.30) has joined
*	kroogs (~kroogs@71-212-82-251.tukw.qwest.net) has joined
*	osa1 (~omer@212.252.142.167) has joined
*	osa1 has quit (Changing host)
*	osa1 (~omer@haskell/developer/osa1) has joined
*	fizbin (~Adium@pool-96-235-147-253.cmdnnj.east.verizon.net) has joined
*	azahi has quit (Ping timeout: 240 seconds)
*	mentos1386 has quit (Ping timeout: 240 seconds)
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
*	kroogs has quit (Ping timeout: 240 seconds)
*	davr0s (~textual@host86-157-70-100.range86-157.btcentralplus.com) has joined
*	beryl-stone has quit (Quit: leaving)
*	davr0s has quit (Client Quit)
*	amadhavan1 (~amadhavan@65.204.229.97) has joined
*	Enigmagic has quit (Read error: Connection reset by peer)
*	fizbin has quit (Client Quit)
<crucify_me>	so ski ...
*	np356 (~karim@ip5f5bf74b.dynamic.kabel-deutschland.de) has joined
*	Enigmagic (~enigmo@unaffiliated/enigmagic) has joined
*	kroogs (~kroogs@71-212-82-251.tukw.qwest.net) has joined
*	iAmerika1 (~dwshrewt@unaffiliated/iamerikan) has joined
<crucify_me>	https://ptpb.pw/zvUP  obviously I am confused this won't work for test the list
<crucify_me>	testing*
*	JuanMiguel (~juanmi@252.red-176-84-7.dynamicip.rima-tde.net) has joined
*	iAmerikan has quit (Ping timeout: 240 seconds)
*	osa1 has quit (Ping timeout: 248 seconds)
*	eschnett has quit (Quit: eschnett)
<erisco>	@check all (\x -> x /= 12345)
<lambdabot>	 +++ OK, passed 100 tests.
*	garphy is now known as garphy`aw
*	sleffy (~sleffy@2620:101:80fb:232:6589:1e8b:7512:e96e) has joined
*	coot____________ (~coot@188.146.164.202.nat.umts.dynamic.t-mobile.pl) has joined
<Tuplanolla>	@check \ xs -> reverse xs == xs
<lambdabot>	 +++ OK, passed 100 tests.
*	kroogs has quit (Ping timeout: 248 seconds)
<maerwald>	the only quickcheck test that is actually elegant
*	chrisdotcode (~quassel@unaffiliated/chrisdotcode) has joined
<crucify_me>	https://ptpb.pw/zvUP  anyone tell me how this works using all ?
*	polman (~ananev@2.95.140.48) has joined
*	WorldControl (~juan@98.4.124.117) has joined
<monochrom>	You are on to a false start when you wrote "annd p" instead of "annd xs".
*	cdg (~cdg@157.166.173.4) has joined
*	cdg has quit (Remote host closed the connection)
<crucify_me>	monochrom, thanks hold on please
<monochrom>	Oh w00t 8.2.2 RC3
*	cdg (~cdg@157.166.173.4) has joined
<monochrom>	Oh I guess that's old news.
*	kroogs (~kroogs@71-212-82-251.tukw.qwest.net) has joined
*	azahi (~azahi@unaffiliated/azahi) has joined
*	schoppenhauer (~schoppenh@unaffiliated/schoppenhauer) has joined
*	drewbert has quit (Remote host closed the connection)
<monochrom>	No this is not old news. This is very strange. The email announcements of RC2 and of RC3 have both the same timestamp "Tue, 31 Oct 2017 14:15:24 -0400" this is a mystery!
*	drewbert (~drewbert@96.74.3.185) has joined
*	augur (~augur@192.195.83.130) has joined
<crucify_me>	@src all
<lambdabot>	all p = and . map p
*	cdg_ has quit (Ping timeout: 248 seconds)
<monochrom>	bgamari: Achievement unlocked: Your RC3 announcement email has the exact same timestamp as your RC2 email announcement!
*	polman has quit (Ping timeout: 260 seconds)
*	vaartis has quit (Ping timeout: 240 seconds)
*	durandal1 (~durandal1@2601:647:4900:1f83:4c64:d2fc:8d88:ef7f) has joined
*	leat (~leat@188.162.200.67) has joined
*	cdg has quit (Ping timeout: 248 seconds)
*	xertrov (dce90bee@gateway/web/freenode/ip.220.233.11.238) has joined
*	Achylles has quit (Ping timeout: 248 seconds)
*	albertus1 (~seb@x4e3590a8.dyn.telefonica.de) has joined
*	Draggor (~Draggor@fursquared.com) has left ("WeeChat 1.9")
<xertrov>	hey - Came here to ask a quick question - I have a vague memory of an online spreadsheet that used haskell syntax for formula in cells, and it might be written in GHCJS or Haste (can't remember) - can anyone point me in the right direction? Googling around FP and spreadsheets isn't bringing anything up
*	augur has quit (Remote host closed the connection)
*	durandal_ has quit (Ping timeout: 240 seconds)
*	TipsyMe has quit (Read error: Connection reset by peer)
*	augur (~augur@192.195.83.130) has joined
*	fizbin (~Adium@pool-96-235-147-253.cmdnnj.east.verizon.net) has joined
*	toby1851 has quit (Quit: Ex-Chat)
*	toby1851 (~toby@88-110-104-87.dynamic.dsl.as9105.com) has joined
*	fizbin has quit (Client Quit)
*	dhil has quit (Ping timeout: 260 seconds)
*	neoncontrails has quit ()
<shapr>	xertrov: alphasheets
<bgamari>	monochrom, heh, yes, I noticed
*	kroogs has quit (Ping timeout: 248 seconds)
<bgamari>	monochrom, I noted the peculiarity on the Reddit thread
*	neoncontrails (~neoncontr@2602:306:31a7:a1a0:b072:8bf:c490:edbc) has joined
<bgamari>	I wasn't sure whether to spam people's inboxes with yet another message to fix the issue
*	tac-tics (~tac-tics@ip70-177-185-26.ph.ph.cox.net) has joined
<bgamari>	message-mode apparently doesn't elide the Date: field before sending a message
*	inhortte (~polaris@212.21.249.185.static.user.ono.com) has joined
<crucify_me>	monochrom is the body just all xs or is that some sort of curry ?
<MarcelineVQ>	crucify_me:   all p = and . map p     can be read as    all p xs = and (map p xs)
*	ranberry has quit (Ping timeout: 240 seconds)
*	garphy`aw is now known as garphy
*	afarmer has quit (Ping timeout: 248 seconds)
<crucify_me>	thanks MarcelineVQ what is p there?
*	amadhavan1 has quit ()
*	fizbin (~Adium@pool-96-235-147-253.cmdnnj.east.verizon.net) has joined
*	hackebeilchen has quit (Ping timeout: 240 seconds)
<MarcelineVQ>	the first argument to all
<MarcelineVQ>	:t all
<lambdabot>	Foldable t => (a -> Bool) -> t a -> Bool
*	rblaze has quit (Quit: Leaving.)
<MarcelineVQ>	so it's a function of  (a -> Bool)
<crucify_me>	thanks working...
*	OhBeOne (~r@84.03.01a8.ip4.static.sl-reverse.com) has joined
*	Shamar (~giacomote@unaffiliated/giacomotesio) has joined
<xertrov>	@shapr - Thanks! I had "powersheets" in my head.. close but no cigar
<lambdabot>	Come on, let's all slap - Thanks! I had "powersheets" in my head.. close but no cigar
*	rblaze (~Adium@2620:10d:c091:200::3:30cd) has joined
<MarcelineVQ>	hoho, shapr you're a slapper :>
*	OhBeOne has quit (Changing host)
*	OhBeOne (~r@unaffiliated/ohbeone) has joined
*	hackebeilchen (~Peter@010-141-067-156.ip-addr.inexio.net) has joined
<monochrom>	@shapr monochrom
*	lambdabot beats up monochrom
<monochrom>	:)
<crucify_me>	but the function is annd :: [Bool] -> Bool so how do I write that to test if all members of a list are True ?
<monochrom>	There is a reason I say "the iron fist of shapr" :)
*	ebsen (~ebsene@2600:1014:b10f:499e:60c2:a4e2:f345:7592) has joined
<MarcelineVQ>	crucify_me: in that case you already have Bool so you'd need a function which trivially returns its argument
*	jgertm (~jgertm@c-73-170-252-167.hsd1.ca.comcast.net) has joined
<MarcelineVQ>	in haskell this is called  id :: a -> a   and it looks just like you might guess,  id x = x
<crucify_me>	MarcelineVQ, I wrote this and had it critiqued, this other stuff with all Im confused about
<crucify_me>	https://ptpb.pw/Tbyn
*	j3parker1 has quit ()
*	xertrov has quit (Quit: Page closed)
*	mizu_no_oto (~textual@74.200.44.13) has joined
*	emilypi has quit (Ping timeout: 240 seconds)
*	a3Dman has quit (Ping timeout: 240 seconds)
*	localhorse_ (~me@ip5f58a45f.dynamic.kabel-deutschland.de) has joined
*	ranberry (~ranberry@4.35.2.66) has joined
<monochrom>	You may like to think of "all p [a,b,c]" as "p a && p b && p c".
<MarcelineVQ>	I've got to eat lunch, try to come up with a specific question people can help you along with though
*	doyougnu (~user@c-71-237-204-135.hsd1.or.comcast.net) has joined
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	localhorse has quit (Ping timeout: 248 seconds)
<crucify_me>	thanks I'm always confused. 
*	localhorse__ (~me@ip5f58a45f.dynamic.kabel-deutschland.de) has joined
*	Zao_ (~Zao_@185.103.96.147) has joined
*	Limeth_ has quit (Ping timeout: 240 seconds)
*	afarmer (~afarmer@199.201.64.139) has joined
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Mon Nov 13 13:06:13 2017

**** BEGIN LOGGING AT Thu Nov 16 11:32:52 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	merijn (~merijn@65-113-226-68.dia.static.qwest.net) has joined
*	Copperis (~Tadas@unaffiliated/varis) has joined
*	Thalheim has quit (Ping timeout: 260 seconds)
*	Guest70565 has quit (Ping timeout: 240 seconds)
*	namosca has quit (Remote host closed the connection)
*	cdg has quit (Ping timeout: 240 seconds)
*	Nd-69-M (~nend@109.72.55.120) has joined
*	ziocroc3 (~ziocroc@151.74.121.204) has joined
*	mizu_no_oto_work (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	hphuoc25 (~hphuoc25@118.200.76.54) has joined
**** ENDING LOGGING AT Thu Nov 16 11:40:54 2017

**** BEGIN LOGGING AT Fri Nov 17 11:37:39 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	auto_complete_ (~pouriafew@72.142.16.190) has joined
*	`^_^v has quit (Ping timeout: 260 seconds)
*	unK_ has quit (Ping timeout: 240 seconds)
*	saurabhnanda has quit (Remote host closed the connection)
*	vlatkoB has quit (Remote host closed the connection)
*	path[l] has quit (Ping timeout: 248 seconds)
*	gtomas (~gtomas@cpc69185-oxfd26-2-0-cust291.4-3.cable.virginm.net) has joined
*	auto_complete_ has quit (Ping timeout: 248 seconds)
*	christopher__ has quit (Ping timeout: 252 seconds)
*	Gurkenglas (~Gurkengla@dslb-094-223-141-229.094.223.pools.vodafone-ip.de) has joined
<orion>	ezyang: Hi. Are you around?
*	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined
*	garphy`aw is now known as garphy
*	xkapastel (uid17782@gateway/web/irccloud.com/x-evybhlluexfgahfc) has joined
*	hphuoc25_ (~hphuoc25@132.147.71.104) has joined
*	ShalokShalom (~quassel@80-108-196-21.cable.dynamic.surfer.at) has joined
*	Psychiatrist has quit (Quit: Leaving)
*	gtomas has quit (Quit: gtomas)
*	agerick has quit (Quit: agerick)
*	agerick (~agerick@c-71-233-96-10.hsd1.ct.comcast.net) has joined
*	hphuoc25 has quit (Ping timeout: 260 seconds)
*	agerick has quit (Client Quit)
*	dedgrant_ (~dedgrant@192.40.237.82) has joined
<crucify_me>	hi I'm trying to learn how this extended euclidean algorithm works in haskell. I can do the reverse substitutions on paper. but first, do I need the semicolon in the where clause? https://ptpb.pw/2bWv 
<danielsmw>	no, you definitely don't want that semicolon
<danielsmw>	you may want to consider aligning the (q,r) with the (s,t) vertically, as well
*	gxt has quit (Ping timeout: 240 seconds)
<crucify_me>	danielsmw, weird, it works with the semicolon. it won't compile without it, do I have another error where it strangely works ? danielsmw 
*	agerick (~agerick@c-71-233-96-10.hsd1.ct.comcast.net) has joined
<danielsmw>	what's the error?
*	eliasr has quit (Quit: Connection closed for inactivity)
*	Lowl3v3l has quit (Ping timeout: 268 seconds)
<crucify_me>	sorry one sec
*	raxis has quit (Ping timeout: 248 seconds)
*	dedgrant has quit (Ping timeout: 255 seconds)
<crucify_me>	parse error on input '=' (line 9 which is last line)
*	chaosmasttter (~chaosmast@p54B474C6.dip0.t-ipconnect.de) has joined
<danielsmw>	yeah, so like I said, try aligning the (s with the (q vertically
*	drewbert has quit (Remote host closed the connection)
<crucify_me>	perhaps you need a 'let' in a 'do' block
<crucify_me>	ok
<danielsmw>	it may be that the semicolon lets you do weird stuff like that, but typically semicolons aren't the style people use
*	drewbert (~drewbert@96.74.3.185) has joined
<danielsmw>	i'm honestly not sure. but without semicolons, haskell does depend on alignment of certain code blocks
<crucify_me>	I tried that first instinctively when I cut and paste the code from github
*	auto_complete_ (~pouriafew@72.142.16.190) has joined
<crucify_me>	one sec
<crucify_me>	weird danielsmw that worked thanks. one moment if you have time....
*	ninedotnine has quit (Read error: Connection reset by peer)
*	Sampuka (~Sampuka@85.184.150.68) has joined
<danielsmw>	crucify_me: glad it worked
*	ninedotnine (~dan@modemcable078.123-81-70.mc.videotron.ca) has joined
<danielsmw>	crucify_me: i'll be around for a bit
<crucify_me>	yes, really don't like seeing the semicolon. I'm a beginner but that looks horrible :)
*	hackebeilchen (~Peter@067-136-067-156.ip-addr.inexio.net) has joined
<danielsmw>	crucify_me: i honestly didn't even know semicolons could be used in where blocks! i've only seen them in do { expr1; expr2; } blocks before.
*	shapr removes channel operator status from shapr
*	hackebeilchen1 has quit (Ping timeout: 240 seconds)
*	acarrico (~acarrico@pppoe-68-142-35-239.gmavt.net) has joined
*	FreeBirdLjj has quit (Remote host closed the connection)
*	raxis (~luis@c-24-4-123-148.hsd1.ca.comcast.net) has joined
<geekosaur>	they can be used anywhere that layout is active, including where blocks
<danielsmw>	TIL. does the layout parser just kind of reset after the semicolon?
*	gehmehgeh has quit (Quit: Leaving)
*	hackebeilchen1 (~Peter@067-136-067-156.ip-addr.inexio.net) has joined
<crucify_me>	so the trace is showing the meat and bones of the euclid algorithm. which variables there are for the x,y variables in, say, gcd (a,b) = ax + by, which are the x,y variables there? I don't really understand the code yet. mathematically, I can do the substitutions, said earlier
<crucify_me>	danielsmw, 
*	gehmehgeh (~ircuser1@gateway/tor-sasl/gehmehgeh) has joined
*	hackebeilchen has quit (Ping timeout: 240 seconds)
*	Itkovian has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	auto_complete_ has quit (Ping timeout: 260 seconds)
<crucify_me>	but need to see what haskell is doing
*	skypatrol_ (~skypatrol@188-143-14-65.pool.digikabel.hu) has joined
*	fr33domlover has quit (Quit: fr33domlover)
*	acarrico has quit (Ping timeout: 248 seconds)
*	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined
<danielsmw>	crucify_me: if you want to see very clearly what haskell is doing, you might want to just start doing IO. like putStrLn'ing out the state of the variables at each step
*	pfurla has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
*	pwnz0r has quit ()
*	Gurkenglas has quit (Remote host closed the connection)
*	biglama has quit (Remote host closed the connection)
<danielsmw>	do you know how to do basic I/O?
*	Gurkenglas (~Gurkengla@dslb-094-223-141-229.094.223.pools.vodafone-ip.de) has joined
*	skypatrol has quit (Ping timeout: 248 seconds)
<crucify_me>	er..
<fizbin>	danielsmw: I really think for a beginner that trace is actually more useful output
<crucify_me>	I mean I've used printLn et al
*	Henson has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
<danielsmw>	fizbin: possibly, but i worry that relying on it in a simple example where it works might lead to confusion later when it fires at all the wrong times
<fizbin>	Specifically, getting this pure calculation threaded through IO seems like more than is needed.
<danielsmw>	but that's fair
<crucify_me>	just in examples. IO is actually confusing to me, like main = $  that sort of thing
*	floatleft (~androirc@46.19.86.151) has left ("Quit")
<danielsmw>	crucify_me: exactly what extra info are you trying to "see" in the calculation, anyway?
*	agerick has quit (Remote host closed the connection)
*	drewbert has quit (Remote host closed the connection)
<danielsmw>	fizbin: you're definitely right, though. i should have thought through what that would involve before suggesting it.
*	drewbert_ (~drewbert@96.74.3.185) has joined
*	Itkovian has quit (Client Quit)
<crucify_me>	danielsmw, fizbin  thanks for considering the difference. one sec please
*	Guest70565 (~michaelzi@84.254.115.196) has joined
<fizbin>	crucify_me: I have an idea. Just a moment.
*	gawen (~gawen@movzbl.root.sx) has joined
<crucify_me>	excellent
*	qzorg (~qzo@c-67-177-224-24.hsd1.co.comcast.net) has joined
<fizbin>	crucify_me: How about this? http://lpaste.net/360107
<fizbin>	I have tweaked your code just a tiny bit.
<crucify_me>	see, I just got a handle on what the math is doing. I don't really know why the extended version is used, though I heard its crucial to basic number theory. I'm self-teaching numTheory without a CLUE
*	joncfoo (~joncfoo@108.61.204.79) has joined
<crucify_me>	one moment pls
*	qzorg has quit (Remote host closed the connection)
*	qzorg (~qzo@c-67-177-224-24.hsd1.co.comcast.net) has joined
*	qzo has quit (Ping timeout: 260 seconds)
*	Guest70565 has quit (Ping timeout: 250 seconds)
*	fr33domlover (~fr33domlo@fsf/member/fr33domlover) has joined
*	qzorg has quit (Client Quit)
<crucify_me>	sorry I can't follow that. I don't really see how the initial (my) version works. sorry
*	qzo (~qzo@c-67-177-224-24.hsd1.co.comcast.net) has joined
<crucify_me>	but let me run it
*	path[l] (~vsi@199.201.64.138) has joined
*	saurabhnanda (~saurabhna@42.107.86.158) has joined
<fizbin>	So, all I'm doing in my version is I'm saying "when you make the recursive call, instead of calling the real extendEu function, call this extendEu' function that wraps your extendEu function by printing out the arguments and (importantly) the answer that the function comes up with"
<crucify_me>	ok in 'seq' trace (argument) is just for the output, right?
*	zachk (~zachk@unaffiliated/zachk) has joined
*	gtomas (~gtomas@cpc69185-oxfd26-2-0-cust291.4-3.cable.virginm.net) has joined
<fizbin>	Yeah, I was afraid that might be a bit obscure. The `seq` makes sure that the value of "y" is fully worked out before it tries to construct and print the trace message.
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
*	cdg has quit (Remote host closed the connection)
*	cdg (~cdg@157.166.167.132) has joined
<crucify_me>	sorry fizbin I'm in over my head. I need to focus on how the initial program works, given that it is written well in haskell.
*	joncfoo has quit (Quit: ZNC 1.6.5 - http://znc.in)
<fizbin>	Otherwise, in recursive function like this, you might get Haskell printing out the first bit of the trace message, then stopping to work out the value of y, then continuing. But "stopping to work out y" would print out another trace message (go recursion) so you'd end up with an unreadable mess.
*	joncfoo (~joncfoo@2001:19f0:6401:113:5400:ff:fe59:7e57) has joined
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
<carbolymer>	I am adding -g -rtsopts to the ghc-options inside .cabal file, but when I am running my application through gdb I am getting this message: (no debugging symbols found) - what am I doing wrong? I'd like to add debug symbols to the statically linked binary
*	joncfoo has quit (Client Quit)
*	anks (~user@78-10-220-54.static.ip.netia.com.pl) has joined
*	hackebeilchen (~Peter@067-136-067-156.ip-addr.inexio.net) has joined
<anks>	hey, what is the most efficient way to convert Vector Word8 -> ByteString you know?
<crucify_me>	ok, thanks. well consider gcd (421,111)  fizbin. the gcd is actually one so these are relatively prime. you start with the last non-zero remainder, and work backwards (reverse substitution). this is how it is taught anyway. I wonder if we could illustrate that process...
<crucify_me>	fizbin, ^
<danielsmw>	crucify_me: when you say that you want to figure out "how the initial program works", do you mean you want to understand the steps that haskell programattically carries out in the evaluation of your code, or are you just asking how this algorithm works abstractly?
*	BioSpider_ (~HeadAdmin@chello085216191124.chello.sk) has joined
*	BioSpider_ has quit (Excess Flood)
<crucify_me>	I think at first, maybe the abstract solution being traced somehow would be helpful danielsmw 
*	hackebeilchen1 has quit (Ping timeout: 260 seconds)
*	BioSpider_ (~HeadAdmin@chello085216191124.chello.sk) has joined
<crucify_me>	I naively thought I could see the whole shebang
*	BioSpider_ has quit (Excess Flood)
*	auto_complete_ (~pouriafew@72.142.16.190) has joined
<fizbin>	anks: Is there some reason B.pack . V.toList is not efficient enough?
*	BioSpider has quit (Ping timeout: 240 seconds)
*	Gurkenglas has quit (Ping timeout: 250 seconds)
<fizbin>	crucify_me: Hrm. Let me see if I can write a version of your initial code with lots of tracing.
<zachk>	there are some haskell step evaluators somewhere online
<anks>	i'll go with this one as its super simple, and if thats not enough ive found something with unsafe pointers
<anks>	thanks fizbin 
<fizbin>	crucify_me: Because I think part of the issue with seeing it with your original code is that you don't trace the return result of the function.
*	gawen has quit (Remote host closed the connection)
*	`^_^v (~nycs@gw.hq.meetup.com) has joined
*	alpert (~alpert@78.173.47.80) has joined
*	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined
<crucify_me>	fizbin the return result?
<crucify_me>	with (a,b) it only gives what a standard euclid algorithm would return
<crucify_me>	with that trace
*	`^_^v has quit (Client Quit)
*	alpert has quit (Ping timeout: 248 seconds)
<infinisil>	:pl f g a h b = g a >>= h b
<crucify_me>	by the way this is a sample I'm following the uses Bezouts formula http://lpaste.net/360110
<crucify_me>	that*
<fizbin>	crucify_me: Check out http://lpaste.net/360107 again (updated it)
<crucify_me>	thanks!
*	emilypi (~emilypi@50-201-95-250-static.hfc.comcastbusiness.net) has joined
<infinisil>	@pl f g a h b = g a >>= h b
<lambdabot>	f = (((.) . (>>=)) .)
<infinisil>	Sweet
<crucify_me>	holy smokes
*	MP2E (~MP2E@wsip-70-165-15-226.lv.lv.cox.net) has joined
<c_wraith>	please don't use that in real code. :P
*	infinisil is totally gonna use that
*	youtmon (~yout@c-98-242-250-233.hsd1.fl.comcast.net) has joined
<infinisil>	@pl f a b = g a >>= h b
<lambdabot>	f = (. h) . (>>=) . g
<crucify_me>	fizbin danielsmw thanks SO much. upexpected afk. pax
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Fri Nov 17 12:38:27 2017

**** BEGIN LOGGING AT Sat Nov 18 11:29:18 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	Itkovian has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<crucify_me>	hi aside from the type definition, where exactly does this program do the merge. ie when x and y are consed in the guards, how does it form a single list ? https://ptpb.pw/Yhfk
*	gfixler (~gfixler@cpe-108-185-238-241.socal.res.rr.com) has joined
*	slack1256 has quit (Remote host closed the connection)
*	henrytill (~henrytill@45.63.9.122) has joined
*	royal_screwup21 has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	garphy`aw is now known as garphy
*	chaosmasttter (~chaosmast@p54B46D11.dip0.t-ipconnect.de) has joined
<crucify_me>	since x : xs    and y : ys   ,    it still looks like 2 lists would be returned
<crucify_me>	except for the type signature
*	dhil has quit (Ping timeout: 248 seconds)
*	kyn (~textual@cpc69389-oxfd28-2-0-cust357.4-3.cable.virginm.net) has joined
*	SilentCog has quit (Ping timeout: 240 seconds)
*	JeanCarloMachado has quit (Read error: No route to host)
*	gfixler has quit (Client Quit)
*	gfixler (~gfixler@cpe-108-185-238-241.socal.res.rr.com) has joined
<crucify_me>	did I answer my own question, that the signature dictates that ?
<cocreature>	crucify_me: (x:xs) and (y:ys) are the inputs to the function not the output, the output is "x : merge xs (y : ys)" in the first case and a slight variation of that in the second case
<alsoStevenXL>	Hello.
<alsoStevenXL>	Has anyone used the citext postgres type with persistent?
<crucify_me>	cocreature, thanks,  so where the conses occur  ...
*	bigHaskellNoob (c0b00155@gateway/web/freenode/ip.192.176.1.85) has joined
*	neoncontrails has quit (Remote host closed the connection)
<bigHaskellNoob>	Hello
*	slomo (~slomo@176.92.30.156) has joined
*	slomo has quit (Changing host)
*	slomo (~slomo@unaffiliated/slomo) has joined
*	neoncontrails (~neoncontr@2600:1702:850:9ed0:1911:9643:60c:4225) has joined
<crucify_me>	I visualize x and y choosing their lists, but I look at them as separate. do you see what I mean cocreature ?
<cocreature>	crucify_me: tbh I don’t :(
<monochrom>	Yeah that's too much anthropomorphizing to imagine.
<cocreature>	crucify_me: how can an element choose a list? what is that supposed to mean?
<crucify_me>	I just mean x and y go to their respective lists
*	JeanCarloMachado (~jean@177-58-253-92.3g.claro.net.br) has joined
<alsoStevenXL>	wow - that was painless. Enable the citext extension on the db, and then use sqltype=citext
<cocreature>	there is only a single output list, that’s the whole point of merging them
<alsoStevenXL>	;-)
<cocreature>	so I’m really not sure what “going to their respective lists” is supposed tom ean
<Tuplanolla>	I wonder if you could build a programming language that resembles those puzzles where perfect logicians try to get out of a sticky situation.
*	ski looks at bigHaskellNoob
<crucify_me>	yes, the single output list is defined only in the signature right?
<ski>	the signature doesn't define anything
*	astronavt (~astronavt@2604:2000:1343:4291:a43c:3f7c:2556:4d19) has joined
<cocreature>	you can remove the signature and the code will still work
<ski>	it specifies what "type constraints" a definition would have to satisfy
<jhu>	ski, alp, cocreature: Thanks a lot. Searched all your suggestions, will be taking a closer look. Most have great reviews in amazon, not surprisingly the number of reviewers is often epsilon-like. After a quick glance my top candidates are Lawvere (basic version) and Awodey. Might start with one of them and see how I feel after that. I have become very interested in Haskell lately, working through a number of 
<jhu>	books concurrently. Expanding my vision with (category) theory while I am at it. Thanks a lot!
<codeshot>	crucify_me, a list is a head item and a remainder, each remainder is a list
*	timbod7 (~textual@1.198.220.203.dial.dynamic.acc01-alma-roc.comindico.com.au) has joined
<Tuplanolla>	Then you could canonicalize the idea that program fragments think and make choices.
*	neoncontrails has quit (Ping timeout: 258 seconds)
<codeshot>	so its head_1:(head_2:(head_3:(head_4:[])))
<monochrom>	Tuplanolla: I think some puzzles are expressible in Prolog or any logic programming language.
<alp>	jhu, best of luck to your brain for digesting all these things simultaneously :)
*	curious_corn (~curious_c@31-151-30-175.dynamic.upc.nl) has joined
<codeshot>	the guards decider whether head_1 of the output will come from the first or second list
<Jikstra[m]>	Is there any benefit of the `head_1:(head_2:(head_3:(head_4:[])))` over `head_1:head_2:head_3:[]` syntax? Any use case? 
<codeshot>	then the function repeats on two lists, one of which is shorter now, to determine what will be the remainder of the output
*	bigHaskellNoob has quit (Ping timeout: 260 seconds)
<monochrom>	Still, it is the Prolog executor, not the predicates or values, that chooses.
<glguy>	Jikstra[m]: They're the same
*	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined
<codeshot>	Jikstra[m], yeah, a:b:c:[] looks like it could be conceptually a monoid
<ski>	jhu : i think Bartosz Milewski has videos on Haskell <https://www.youtube.com/watch?v=N6sOMGYsvFA> and Category Theory <https://www.youtube.com/playlist?list=PLbgaMIhjbmEnaH_LTkxLI7FMa2HsnawM_>
<glguy>	codeshot: Which part?
*	curious_corn has quit (Client Quit)
<ski>	jhu : might want to give them a try
*	gugah has quit (Quit: Leaving)
<codeshot>	Jikstra[m], and I think that's why crucify_me is having trouble
<jhu>	alp: Haven't had this much fun since I don't know when. Worked through my SICP years ago, but Haskell and its abstractions are quite something else.
<ski>	jhu : there's also <https://www.youtube.com/user/TheCatsters>
<glguy>	codeshot: No, crucify_me just doesn't understand Haskell syntax
<codeshot>	Jikstra[m], but by adding the parentheses it is required that there is an item followed by a remainder
<crucify_me>	ok yes codeshot so the recursive merger in the guards, that relies on the base cases. one will empty and the other is returned. 
*	zachk (~zachk@unaffiliated/zachk) has joined
<gfixler>	crucify_me: I joined the party late - is the code you're discussing in a paste somewhere?
<monochrom>	"monoid" does not refer to a single list like a:b:c:[]. It refers to the collection of all lists, and also the append operation and the empty list.
<ski>	jhu : and edwardk's blag could have interesting blags about CT
<crucify_me>	gfixler, sorry yeah https://ptpb.pw/Yhfk
<ski>	(in the context of Haskell, i mean)
<gfixler>	crucify_me: thanks
<monochrom>	Likewise no one really says "4 is a ring".
<glguy>	They might say that zero is
*	raingloom (~raingloom@C2267141.catv.pool.telekom.hu) has joined
<Jikstra[m]>	thanks codeshot :)
<monochrom>	haha
<monochrom>	Sometimes you get the feeling that you're watching a Haskell-fiction movie.
<crucify_me>	codeshot, that's correct, right? that the base cases will return a single list.
<codeshot>	crucify_me, what are "the base cases"?
<monochrom>	In which the characters speak like "I'm going to insert the 42 monoid into the quantum field SSL tunnel"
<ski>	jhu : i found Bartosz' explanation of limits and colimits (like terminal, initial, product, coproduct, equalizer, coequalizer, pullback, pushout, &c.) as "filtering" "search results" for the best, a nice way to think of it
<crucify_me>	merger xs [] = xs   and  merger [] ys = ys
<codeshot>	monochrom, no a monoid is a thing which exists outside of Haskell's pretend monoids
<monochrom>	That still doesn't make a:b:c:[] a monoid.
<monochrom>	Or 42 a ring.
<codeshot>	monochrom, I was too imprecise and louche with my words, sorry
<jhu>	ski: I took a look at Bartosz's material some weeks ago, but somehow didn't find it that appealing. I will add it to the list and take another look after digesting a book. Also, other online sources noted, thanks again. Need to run. Over and out, see you later.
*	jhu has quit (Quit: leaving)
<ski>	crucify_me : `merger', given two list arguments, will always return a single list, not just in the base cases
<crucify_me>	ski thanks one moment pls
<monochrom>	Oh this can go down like one of those "how many triangles are there in this picture?" puzzles.
<codeshot>	crucify_me, do you have a text that explains how haskell recursive functions work and how you can translate guards into a 'case' expression ?
*	JeanCarloMachado has quit (Ping timeout: 240 seconds)
*	conal has quit (Quit: Computer has gone to sleep.)
<crucify_me>	yes thanks I can see the two cases here codeshot 
*	zzq (~zzq@46.120.114.167) has joined
<codeshot>	CryptoCalsius[m], those two cases are used once one of the two input lists has already had all its elements merged
<codeshot>	oops
<codeshot>	crucify_me, those two cases are used once one of the two input lists has already had all its elements merged
*	conal (~conal@209.58.139.46) has joined
<crucify_me>	but the way I see this is that the base cases will return either list xs or list ys. right thanks codeshot so in other words 
<dxtr>	Okay building ghc 7.10 with stack on openbsd is no easy feat
<crucify_me>	one list becomes empty and the other one is returned, right?
<codeshot>	yes, but of course because this is recursive that xs or ys could be only a remainder part of one of the original two lists
<crucify_me>	ok, I understand codeshot ski . thanks, sometimes when I consider the base cases I can see what is happening
<codeshot>	during the fancy case with the guarded subcases, as recursion happens the xs or ys will be shortened
<codeshot>	sometimes one and sometimes the other
<codeshot>	ok
<crucify_me>	shortened until one is empty right?
<codeshot>	yep
<codeshot>	and then one of the base cases matches
<codeshot>	and wallop, you're done
<crucify_me>	yeah, ok, I need to read the base cases more carefully first
*	machinedgod (~machinedg@198-84-249-5.cpe.teksavvy.com) has joined
*	MP2E (~MP2E@2600:8801:e09:d320:b01b:fc55:7a18:3be2) has joined
<crucify_me>	thanks kindly ALL
*	azahi (~azahi@unaffiliated/azahi) has joined
*	chaosmasttter has quit (Ping timeout: 248 seconds)
*	fr33domlover has quit (Ping timeout: 240 seconds)
*	kyn has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	neoncontrails (~neoncontr@2600:1702:850:9ed0:38cc:f4d9:5fd2:968c) has joined
*	emilypi has quit (Ping timeout: 248 seconds)
*	chaosmasttter (~chaosmast@p54B46D11.dip0.t-ipconnect.de) has joined
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
<ski>	crucify_me : here's an example of `merger' in action
*	ebsen (~ebsene@96-2-74-147-dynamic.midco.net) has joined
<ski>	     merger (0:3:4:7:[]) (1:2:6:7:8:9:[])    -- `0 < 1' is `True'
*	machinedgod has quit (Quit: leaving)
<ski>	  =  0:merger (3:4:7:[]) (1:2:6:7:8:9:[])    -- `3 < 1' is `False'
<ski>	  =  0:1:merger (3:4:7:[]) (2:6:7:8:9:[])    -- `3 < 2' is `False'
<ski>	  =  0:1:2:merger (3:4:7:[]) (6:7:8:9:[])    -- `3 < 6' is `True'
<ski>	  =  0:1:2:3:merger (4:7:[]) (6:7:8:9:[])    -- `4 < 6' is `True'
*	zzq has quit (Ping timeout: 255 seconds)
<ski>	  =  0:1:2:3:4:merger (7:[]) (6:7:8:9:[])    -- `7 < 6' is `False'
<crucify_me>	word
<crucify_me>	thanks very helpful
<ski>	  =  0:1:2:3:4:6:merger (7:[]) (7:8:9:[])    -- `7 < 7' is `False', note that we "move over" the `7' in the second list, here
*	nikolast[m] (nikolastma@gateway/shell/matrix.org/x-vmjhsalfdiqrtxem) has joined
<ski>	  =  0:1:2:3:4:6:7:merger (7:[]) (8:9:[])    -- `7 < 8' is `True', and now we move over the other `7'
<ski>	  =  0:1:2:3:4:6:7:7:merger [] (8:9:[])    -- now one list is empty, so we reach a base case, replacing the recursive call with the remainder of the other list
*	zzq (~zzq@37.26.146.160) has joined
<ski>	  =  0:1:2:3:4:6:7:7:8:9:[]    -- and we're done !
*	fr33domlover (~fr33domlo@fsf/member/fr33domlover) has joined
<codeshot>	wallop!
<crucify_me>	bingo
<ski>	so, as we "walk" the lists, by making recursive calls on smaller lists, we (eventually) reach closer to the end of them
<drdo>	Is there something I can use to easily show a clickable and updatable labelled tree?
*	garphy is now known as garphy`aw
<ski>	so when you see `merger [] ys = ys', since `merger' is recursive, calling itself on smaller lists (i.e. on tails of the original lists), you should read this base case as "when we have reached the end of the first list : ..." (the end being the empty list)
<codeshot>	I can't help thinking we'd be better off if we had to use fix for recursion
<crucify_me>	yeah, what I was doing was looking at the recursive calls as having, and keeping , two separate lists. but recursion sends all the elements to one list ultimately, and it is returned
<ski>	yes
<codeshot>	so we can inject a status printing wrapper into any sample code
<crucify_me>	hooray
*	Velpoman has quit (Quit: leaving)
<ski>	the "two separate lists" are kept in the two arguments
*	tabemann (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net) has joined
<ski>	and "decremented" as the recursion proceeds
*	ma82 has quit (Quit: Leaving.)
<ski>	while the recursive calls "spit out" elements "to the left", taken from one or the other of the argument lists
*	db8093246 (~db8093246@46-162-124-202.cust.bredband2.com) has joined
*	Velpoman (~Velpoman@138.197.210.152) has joined
<crucify_me>	yep, I knew that back in scheme days while learning recursion. there is a lot of information in the base cases, and I seem to forget that
<ski>	since Haskell is non-strict, this means that the recursion doesn't have to progress to the end, just for the caller to be able to check the first elements of the result
*	Youmu has quit (Quit: Connection closed for inactivity)
*	DTZUZO has quit (Ping timeout: 248 seconds)
<ski>	this is an incremental recursion
*	thblt has quit (Ping timeout: 268 seconds)
*	zzq has quit (Read error: Connection reset by peer)
<crucify_me>	check the first elements of the result?
*	nikolast[m] (nikolastma@gateway/shell/matrix.org/x-vmjhsalfdiqrtxem) has left ("User left")
<ski>	a "bulky" recursion would be one that doesn't deliver any information to its caller, until it has proceeded entirely through its recursion. an example of that is `reverse'
<ski>	yea, if you evaluate something like
*	knupfer (~Thunderbi@p200300EB4BD40A006909CE3A541EDBDD.dip0.t-ipconnect.de) has joined
<ski>	     take (merger (0:3:4:7:[]) (1:2:6:7:8:9:[]))
<ski>	  =  take (0:merger (3:4:7:[]) (1:2:6:7:8:9:[]))
<ski>	  =  0:take (merger (3:4:7:[]) (1:2:6:7:8:9:[]))
<ski>	  =  0:take (1:merger (3:4:7:[]) (2:6:7:8:9:[]))
<ski>	  =  0:1:take (merger (3:4:7:[]) (2:6:7:8:9:[]))
<ski>	  =  0:1:[]
<ski>	oops, i forgot to put a count argument to `take' :)
<crucify_me>	yeah I thought it took one arg by default
<crucify_me>	as you had it
<ski>	well, i meant to say `take 2', and then decrement that to `take 1' and finally to `take 0' after having "spit out" both `0' and `1'
<ski>	at that point, `take' doesn't care about remaining elements of the result of the `merger' call
<crucify_me>	yes , that's an interesting way to write it, which is prolly precisely how the machine does it
<ski>	and since the `merger' call is incremental, it doesn't have to actually merge the remainder of the two lists
<crucify_me>	yeah its already sorted
*	cdg (~cdg@162-226-219-152.lightspeed.tukrga.sbcglobal.net) has joined
*	Elhamer_ has quit (Ping timeout: 248 seconds)
*	tomphp (~tomphp@host81-154-228-252.range81-154.btcentralplus.com) has joined
<ski>	however, if you do `take 2 (reverse (2:3:5:7:11:13:17:19:23:29:31:37:41:43:47:[]))', then `reverse' will actually go through the whole list before emitting the first element of the result, for `take' to pick up and return
<ski>	so, in this case, the whole of the `reverse' call will have to be done
*	zzq (~zzq@46.120.114.167) has joined
<crucify_me>	right, it is sadly inefficient
<ski>	but there's no way around that here. the only way to get the last two elements in a single-linked list is to traverse to the end
<crucify_me>	yeah its the nature of the function tis all
*	astronavt has quit (Quit: Leaving...)
<crucify_me>	ski just to make sure of something...
<crucify_me>	never mind I can add 2 to your example with take..merger  thanks!
<ski>	as i said, yea
<crucify_me>	I like the notation with 0:take what-have-you
*	afarmer has quit (Ping timeout: 240 seconds)
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	emilypi has quit (Ping timeout: 240 seconds)
*	fr33domlover1 (~fr33domlo@fsf/member/fr33domlover) has joined
*	fr33domlover has quit (Read error: Connection reset by peer)
*	Jesin has quit (Quit: Leaving)
*	coot___________ (~coot@188.146.98.43.nat.umts.dynamic.t-mobile.pl) has joined
*	fr33domlover1 is now known as fr33domlover
*	mud has quit (Remote host closed the connection)
*	Snircle_ (~textual@2600:8801:c404:7900:9da1:3dc:9cbe:e257) has joined
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	mud (~mud@unaffiliated/kadoban) has joined
*	MP2E has quit (Ping timeout: 250 seconds)
*	Snircle has quit (Ping timeout: 240 seconds)
*	auto_complete_ has quit (Ping timeout: 260 seconds)
*	tomphp has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	waylon531 has quit (Ping timeout: 268 seconds)
*	nickolay has quit (Ping timeout: 255 seconds)
*	Vorpal (~Vorpal@c83-254-186-251.bredband.comhem.se) has joined
*	Maxdamantus has quit (Ping timeout: 240 seconds)
*	Vorpal is now known as Guest50565
*	Maxdamantus (~Maxdamant@unaffiliated/maxdamantus) has joined
*	coot___________ has quit (Read error: Connection reset by peer)
*	coot___________ (~coot@188.146.98.43.nat.umts.dynamic.t-mobile.pl) has joined
*	Guest50565 has quit (Changing host)
*	Guest50565 (~Vorpal@unaffiliated/vorpal) has joined
*	Jeanne-Kamikaze has quit (Quit: Leaving)
*	higgs has quit (Remote host closed the connection)
*	Cheguacamole (6f4595ab@gateway/web/cgi-irc/kiwiirc.com/ip.111.69.149.171) has joined
*	Guest50565 is now known as Vorpal
*	ebsen has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sat Nov 18 12:37:34 2017

**** BEGIN LOGGING AT Sat Nov 18 12:47:07 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:12 2017)
*	Channel #haskell url: http://www.haskell.org/
*	alpert (~alpert@78.173.47.80) has joined
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
*	ebsen (~ebsene@96-2-74-147-dynamic.midco.net) has joined
*	Yuras has quit (Ping timeout: 268 seconds)
*	justanotheruser has quit (Client Quit)
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
*	alpert has quit (Ping timeout: 268 seconds)
*	Foritus has quit (Ping timeout: 260 seconds)
*	kyn has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	deepfire (~user@176.193.113.32) has joined
*	plevexier (~patrice@user-24-214-137-19.knology.net) has joined
*	Guest70565 (~michaelzi@84.254.115.196) has joined
*	plevexier has quit (Client Quit)
*	slomo has quit (Ping timeout: 240 seconds)
*	jao (~jao@pdpc/supporter/professional/jao) has joined
*	neoncontrails has quit (Remote host closed the connection)
*	eSVG (~svg@2601:c6:8302:8b50:c972:54af:f335:f47b) has joined
*	MP2E (~MP2E@ip68-224-146-82.lv.lv.cox.net) has joined
*	jjj1 has quit ()
*	fendor has quit (Quit: Leaving)
*	carlomagno (~cararell@inet-hqmc01-o.oracle.com) has joined
Python interface unloaded
**** ENDING LOGGING AT Sat Nov 18 13:02:52 2017

**** BEGIN LOGGING AT Sat Nov 18 13:03:12 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	Guest70565 has quit (Ping timeout: 250 seconds)
*	emilypi has quit (Ping timeout: 255 seconds)
*	plevexier (~patrice@user-24-214-137-19.knology.net) has joined
*	ebsen has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	der_landgraf (~der_landg@cpe-76-173-200-54.hawaii.res.rr.com) has joined
*	azahi has quit (Ping timeout: 248 seconds)
*	markus1199 has quit (Ping timeout: 268 seconds)
*	ralu has quit (Ping timeout: 268 seconds)
**** ENDING LOGGING AT Sat Nov 18 13:04:52 2017

**** BEGIN LOGGING AT Sat Nov 18 13:04:52 2017

*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	Suntop1 (~Suntop@91.236.116.83) has joined
*	cschneid_ (~cschneid@2603:300b:901:300:507c:ada5:5295:2671) has joined
*	robotroll (~robotroll@unaffiliated/robotroll) has joined
*	Jacoby6000 (~Jacoby600@rrcs-50-84-215-165.sw.biz.rr.com) has joined
*	Foritus (~buggery@cpc91390-watf11-2-0-cust41.15-2.cable.virginm.net) has joined
*	gtomas (~gtomas@cpc69185-oxfd26-2-0-cust291.4-3.cable.virginm.net) has joined
*	vpgrn (~vpgrn@c-73-97-192-164.hsd1.wa.comcast.net) has joined
*	kculpis (~kculpic@unaffiliated/kculpic) has joined
Python interface unloaded
**** ENDING LOGGING AT Sat Nov 18 13:06:38 2017

**** BEGIN LOGGING AT Sun Nov 19 16:08:39 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	wonko7 (~wonko7@2a01:e34:ec14:5250:a0db:4d79:4c61:a4a1) has joined
*	dpower (~dpower@46.109.24.163) has joined
*	alveric (~LordAlver@i59F74002.versanet.de) has joined
<crucify_me>	hi the [_] syntax is wrong on line 3. why can't I use that wildcard inside the list? http://lpaste.net/360160
<crucify_me>	is it not general enought?
<Tuplanolla>	@let counterexample 0 [_]  = []
<lambdabot>	 Defined.
*	doodlehaus (~doodlehau@71-89-72-8.dhcp.bycy.mi.charter.com) has joined
<EvanR>	> (\[_] -> 'b') ['a']
<lambdabot>	 'b'
<Tuplanolla>	> counterexample 0 "x"
<lambdabot>	 []
<merijn>	crucify_me: What makes you say you can't use it?
<Axman6>	crucify_me: [_] says match a list with exactly one element, which you ignore
<merijn>	It's almost certainly not correct
<geekosaur>	[x] for any 'x' including '_' means a list with exactly one item
<merijn>	But you can use it :)
<geekosaur>	if you want to match any list there, let the type determine that it is list and use _ by itself
<geekosaur>	that is, _ not [_]
<crucify_me>	hold on thanks
<Axman6>	have a think about what [_,_] would match, and you'll see why it's wrong
*	alveric4 has quit (Ping timeout: 240 seconds)
*	connrs has quit (Ping timeout: 255 seconds)
*	cschneid_ (~cschneid@97-122-77-37.hlrn.qwest.net) has joined
*	doodlehaus has quit (Remote host closed the connection)
*	harfangk (~quassel@211.48.51.34) has joined
*	ndcroos (5bb5b22c@gateway/web/freenode/ip.91.181.178.44) has joined
<geekosaur>	if you're thinking of this in terms of shell globbing, _ is always ? never *
*	cschneid_ has quit (Ping timeout: 248 seconds)
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
<geekosaur>	but the thing it matches may be a directory/container
*	plutoniix (~q@175.176.222.7) has joined
<geekosaur>	(uh, except that last switches gears, derp)
*	connrs (~connrs@conners.plus.com) has joined
*	plutoniix has quit (Max SendQ exceeded)
<geekosaur>	anyway it matches one thing. but that one thing may be a collection (e.g. an entore list). used inside of a list, it matches one list item (which may itself be a list if the original is a list of lists)
*	plutoniix (~q@175.176.222.7) has joined
*	bmgxc9 (~bmgxc9@cpe-70-118-227-3.kc.res.rr.com) has joined
*	Cheguacamole (6f4595ab@gateway/web/cgi-irc/kiwiirc.com/ip.111.69.149.171) has joined
*	Psybur (~broheim@pool-108-44-203-65.clppva.fios.verizon.net) has joined
<crucify_me>	geekosaur, thanks I'm going to try a list of lists
*	JamesGrayling has quit (Quit: JamesGrayling)
*	darjeeling_ has quit (Ping timeout: 248 seconds)
*	hololeap (~hololeap@unaffiliated/hololeap) has joined
*	auto_complete_ has quit (Ping timeout: 240 seconds)
*	Unhammer has quit (Ping timeout: 248 seconds)
*	connrs has quit (Ping timeout: 248 seconds)
<crucify_me>	so, it does work on any sort of list, including a list of lists. but its not equivalent?
*	sigmundv__ (~sigmundv@92.251.199.146.threembb.ie) has joined
<geekosaur>	[_] is a one-item list containing some other list, as opposed to being any list
<geekosaur>	_, in a context that wants a list, matches any single list
*	jedws (~jedws@2001:8003:2474:8900:c06d:a899:35c2:fe25) has joined
<geekosaur>	regardless of its content
*	ddellacosta has quit (Remote host closed the connection)
<EvanR>	the pattern syntax is supposed to mirror what that matched expression looks like
<EvanR>	to make it easier
<EvanR>	[_] matches ['x'], [[_]] matches [['x']]
*	Psybur has quit (Ping timeout: 248 seconds)
*	merijn has quit (Ping timeout: 258 seconds)
*	stevenxl (uid133530@gateway/web/irccloud.com/x-hjwgvkfdvlvjxzbg) has joined
<crucify_me>	but why would take' 0 return an empty list, if the arg is [1,2,3] ? sorry ..
<crucify_me>	why would we want that?
<EvanR>	what else would it return
<monochrom>	Because the user said 0?
<Axman6>	"take no elements from the front of this list"
*	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined
*	lambda-11235 has quit (Ping timeout: 240 seconds)
<crucify_me>	ok the initial list remains the same, the returned list is new/ separate and is empty.
<EvanR>	you were thinking of drop?
<crucify_me>	sorry makes sense, I was thinking of one list that is unaltered
*	lambda-11235 (~lambda-11@campus-112-208.ucdavis.edu) has joined
<EvanR>	> drop 0 [1,2,3]
<lambdabot>	 [1,2,3]
*	Tesseraction_m has quit (Ping timeout: 264 seconds)
*	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined
<crucify_me>	right, its just a new list with no elements, so the initial list is unaltered but we don't see it
<crucify_me>	correct essentially ^ ?
<EvanR>	altered as in mutated ?
<EvanR>	you can't mutate values in haskell
<crucify_me>	I have the wrong impression the initial list is hanging out somewhere, but its not.
<EvanR>	even if it is, you cant modify it
*	cschneid_ (~cschneid@97-122-77-37.hlrn.qwest.net) has joined
<EvanR>	you're supposed to feel like that would be as absurd as modifying the value of 3
<crucify_me>	ok, thanks, right, it cannot change, there's nothing that would modify it in this program.
*	bmgxc9 has quit (Quit: Leaving)
<EvanR>	3 and [1,2,3] are immutable
*	bmgxc9 (~bmgxc9@cpe-70-118-227-3.kc.res.rr.com) has joined
<crucify_me>	the returned list is separate, its just a copy of whatever take' n is
<EvanR>	that is still not sounding right, its not necessarily a copy, in some operational sense that does not matter
*	Unhammer (~Unhammer@gateway/tor-sasl/unhammer) has joined
<EvanR>	like, sin(pi) is zero, but zero is not a copy of anything in particular
*	andyhuzhill (~Thunderbi@14.23.45.178) has joined
<crucify_me>	excellent comparison thanks
*	cschneid_ has quit (Ping timeout: 268 seconds)
*	Xion__ has quit (Ping timeout: 268 seconds)
*	astronavt (~astronavt@2604:2000:1343:4291:4c6:a64e:8385:895f) has joined
*	antsanto (~antsanto@171.78.153.37) has joined
*	astronavt has quit (Ping timeout: 255 seconds)
*	astronavt (~astronavt@2604:2000:1343:4291:4c6:a64e:8385:895f) has joined
*	astronavt has quit (Client Quit)
*	cdg (~cdg@c-69-94-206-50.hs.gigamonster.net) has joined
*	markus1199 has quit (Ping timeout: 248 seconds)
*	markus1189 (~markus118@p4FDC0C87.dip0.t-ipconnect.de) has joined
*	zcourts has quit (Remote host closed the connection)
*	astronavt (~astronavt@2604:2000:1343:4291:4c6:a64e:8385:895f) has joined
*	obihann has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	ck_y (~ck@92.63.169.1) has joined
*	antsanto has quit (Remote host closed the connection)
*	cdg has quit (Ping timeout: 240 seconds)
*	connrs (~connrs@conners.plus.com) has joined
*	lambda-11235 has quit (Ping timeout: 248 seconds)
*	lambda-11235 (~lambda-11@campus-112-208.ucdavis.edu) has joined
*	earangol (~user@c-76-118-8-59.hsd1.ma.comcast.net) has joined
*	connrs has quit (Ping timeout: 260 seconds)
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	path[l] (~vsi@c-73-189-43-89.hsd1.ca.comcast.net) has joined
*	HMPerson1_ (~HMPerson1@128.210.107.52) has joined
*	HMPerson1 has quit (Remote host closed the connection)
*	emilypi has quit (Ping timeout: 248 seconds)
*	HMPerson1__ (~HMPerson1@128.211.64.90) has joined
*	path[l] has quit (Client Quit)
*	ddere (uid110888@gateway/web/irccloud.com/x-qcltnxlpeovpzjtw) has joined
*	auto_complete_ has quit (Ping timeout: 248 seconds)
*	HMPerson1_ has quit (Ping timeout: 260 seconds)
*	antsanto (~antsanto@171.78.153.37) has joined
*	nicknight has quit (Quit: WeeChat 0.4.2)
*	antsanto has quit (Remote host closed the connection)
*	path[l] (~vsi@c-73-189-43-89.hsd1.ca.comcast.net) has joined
*	brandly (~brandly@c-73-234-172-147.hsd1.ma.comcast.net) has joined
*	maheshpec has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	merijn (~merijn@209.226.201.242) has joined
*	cschneid_ (~cschneid@97-122-77-37.hlrn.qwest.net) has joined
*	tremon has quit (Quit: getting boxed in)
*	justanotheruser has quit (Ping timeout: 260 seconds)
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sun Nov 19 17:09:44 2017

**** BEGIN LOGGING AT Wed Nov 22 10:31:42 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	mizu_no_oto (~textual@2604:6000:1012:403b:0:cc10:6e66:f4df) has joined
*	funrep has quit (Ping timeout: 240 seconds)
*	Philonous (~Philonous@unaffiliated/philonous) has joined
*	aravindhs has quit (Quit: aravindhs)
*	Achylles (~Achylles@191.254.130.112) has joined
*	codyw (~cody@24.130.87.147) has joined
*	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has joined
*	ranberry (~ranberry@173-19-77-59.client.mchsi.com) has joined
*	mceier has quit (Ping timeout: 240 seconds)
*	AndreasPK_ has quit (Remote host closed the connection)
<spietz>	keychaks: if you're using nix what's the benefit of using a cabal sandbox?
*	fr33domlover (~fr33domlo@fsf/member/fr33domlover) has joined
*	mceier (~mceier@89-68-132-187.dynamic.chello.pl) has joined
<spietz>	kaychaks
<spietz>	*
*	lemonpepper24 (~lemonpepp@gateway/vpn/privateinternetaccess/lemonpepper24) has joined
*	cdg has quit (Remote host closed the connection)
*	cdg_ (~cdg@2600:1700:3120:40e0:1f5:b2b7:3224:89a) has joined
*	azahi (~azahi@unaffiliated/azahi) has joined
*	raynold (uid201163@gateway/web/irccloud.com/x-nzqbwnvnhsccbqzo) has joined
*	codyw has quit (Ping timeout: 268 seconds)
*	petermw has quit (Remote host closed the connection)
*	ranberry has quit (Ping timeout: 248 seconds)
*	hurtsi (kytoner1@gateway/shell/tkk.fi/x-hywjiwbkcfbqdsvm) has joined
*	mlehmk (~mlehmk@unaffiliated/mlehmk) has joined
*	ranberry (~ranberry@173-19-77-59.client.mchsi.com) has joined
*	ddellacosta (~ddellacos@64.94.31.206) has joined
*	quobo has quit (Quit: Connection closed for inactivity)
*	valentinbuza has quit (Ping timeout: 268 seconds)
*	yellowj has quit (Ping timeout: 250 seconds)
*	funrep (~funrep@31-208-65-162.cust.bredband2.com) has joined
<lambdamu_>	kaychaks: Hey the way I deal with the zlib dependency for the zlib haskell package is to use this paste with nix-shell and then execute the cabal commands inside the shell: http://lpaste.net/360199
*	theelous3 (~theelous3@unaffiliated/theelous3) has joined
<lambdamu_>	nix-shell -p zlib doesn't work unfortunately
*	Welkin has quit (Quit: leaving)
*	codesoup (~codesoup@2607:fea8:e2df:fbf0:5df0:2f95:5e96:59a4) has joined
*	Welkin (~Welkin@107.147.90.29) has joined
<lambdamu_>	Although when you build a haskell package that way no gc root for the nix store is added, so it can happen that with gc the zlib store path is removed
*	DeATh`RoW (~jsa@vps.matteocicuttin.it) has joined
*	ddellaco_ (~ddellacos@172.58.185.95) has joined
*	tommd has quit (Ping timeout: 260 seconds)
*	k (~krok@unaffiliated/krok) has joined
*	oisdk (~textual@51-171-255-121-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined
*	gfixler has quit (Ping timeout: 248 seconds)
<lambdamu_>	I think there are options with nix-shell to have a root added, but generally I don't bother so I can't tell you more
*	ma27 (~ma27@p200300CFB3C1A001CA5B76FFFEE20190.dip0.t-ipconnect.de) has joined
*	tommd (~tommd@glacier.galois.com) has joined
*	oisdk has quit (Client Quit)
*	funrep has quit (Ping timeout: 250 seconds)
*	ddellacosta has quit (Ping timeout: 240 seconds)
*	m1n (~m1n@unaffiliated/m1ntfr3sh) has joined
*	tac-tics has quit (Quit: Leaving)
*	erikd has quit (Ping timeout: 250 seconds)
*	zachk (~zachk@unaffiliated/zachk) has joined
*	marr has quit (Ping timeout: 248 seconds)
*	Wuzzy (~Wuzzy@p5B0DFB93.dip0.t-ipconnect.de) has joined
*	oisdk (~textual@51-171-255-121-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined
*	takitus (~wcm@cpe-67-246-226-203.rochester.res.rr.com) has joined
*	DeATh`RoW has quit (Ping timeout: 258 seconds)
*	localhorse has quit (Ping timeout: 240 seconds)
*	erikd (~erikd@hendrix.mega-nerd.net) has joined
*	metts (~skypatrol@188-143-14-65.pool.digikabel.hu) has joined
*	gxt has quit (Ping timeout: 248 seconds)
*	oisdk has quit (Client Quit)
*	erikd has quit (Ping timeout: 250 seconds)
*	ptvirgo (~pvirgo@pool-72-92-21-72.phlapa.fios.verizon.net) has joined
*	erikd (~erikd@hendrix.mega-nerd.net) has joined
*	ptvirgo has quit (Client Quit)
<codeshot_>	I went to solve Kevlin Henney's FizzBuzz program for Haskell giving the neatest code I could. In order to do that I ended up re-inventing Data.Functor.Compose but with a different Applicative instance
*	biglama has quit (Quit: Lost terminal)
*	humanoyd has quit (Quit: WeeChat 1.9.1)
<codeshot_>	Sorry, a different Alternative instance
*	osa1 has quit (Ping timeout: 255 seconds)
<codeshot_>	How come Compose has the Alternative instance that it does instead of following the pattern of the Applicative instance, that <|> be implementent with (<|>) <$> a <*> b
*	zargoertzel (~zar@4e.3e.32a9.ip4.static.sl-reverse.com) has joined
<codeshot_>	This is an amazing instance and there were only 3 reasonable choices so I'm curious why we have the one we do
*	funrep (~funrep@31-208-65-162.cust.bredband2.com) has joined
*	albertus1 (~seb@x55b4b9f5.dyn.telefonica.de) has joined
*	munchee has quit (Changing host)
*	munchee (uid28187@unaffiliated/jiraffe) has joined
*	munchee has quit (Changing host)
*	munchee (uid28187@gateway/web/irccloud.com/x-fcxwnplsqghqowbr) has joined
*	zariuq has quit (Ping timeout: 255 seconds)
*	Cale_ (~cale@CPEd8eb97edd8f0-CM0026f39a59ad.cpe.net.cable.rogers.com) has joined
*	jncunha has quit (Ping timeout: 258 seconds)
*	Pamelloes (~jbrot@0587361409.wireless.umich.net) has joined
<Cale_>	Hello from a coffee shop in Toronto :)
*	jao (~jao@pdpc/supporter/professional/jao) has joined
<Cale_>	Anyone here coming to the FunctionalTO meetup tonight?
<codeshot_>	hello Cale_
*	funrep has quit (Ping timeout: 248 seconds)
<codeshot_>	maybe another yeah
*	mda1 has quit (Quit: Connection error?!)
<codeshot_>	Cale_, you're pretty expert, can you answer this quandry?
<codeshot_>	I went to solve Kevlin Henney's FizzBuzz program for Haskell giving the neatest code I could. In order to do that I ended up re-inventing Data.Functor.Compose but with a different Applicative instance
*	codesoup has quit (Ping timeout: 252 seconds)
<codeshot_>	Sorry, a different Alternative instance
<codeshot_>	How come Compose has the Alternative instance that it does instead of following the pattern of the Applicative instance, that <|> be implementent with (<|>) <$> a <*> b
<codeshot_>	This is an amazing instance and there were only 3 reasonable choices so I'm curious why we have the one we do
*	sssilver_ (~sssilver@2605:6000:ead6:6700:5105:5625:640d:30bd) has joined
<Cale_>	I don't recall which Alternative instance it has
*	pwnz0r has quit (Read error: Connection reset by peer)
<codeshot_>	Compose (a <|> b)
<Cale_>	Does it rely on Alternative instances for the functors?
<codeshot_>	(Alternative f, Applicative g)
<codeshot_>	other options would have been (Applicative f, Alternative g) <~~ very cool, or (Alternative f, Alternative g) <~~ interesting but would be super ambiguous
*	DeATh`RoW (~jsa@ip-237.net-89-3-78.rev.numericable.fr) has joined
*	LKoen (~LKoen@2a01:e35:2eed:a430:d174:b99a:2ef2:31) has joined
<codeshot_>	I propose that (Applicative f, Alternative g) is the correct choise
*	LKoen has quit (Remote host closed the connection)
<codeshot_>	choice
*	sssilver_ has quit (Max SendQ exceeded)
*	zargoertzel has quit (Ping timeout: 248 seconds)
<Cale_>	Ah, it's the cheapest instance, I guess.
*	Psybur (~broheim@pool-108-44-203-65.clppva.fios.verizon.net) has joined
*	sssilver_ (~sssilver@2605:6000:ead6:6700:5105:5625:640d:30bd) has joined
<Cale_>	Looks like they implemented (<|>) just by coercing away the newtype
<codeshot_>	This is how cool my preferred option is: http://lpaste.net/360200
<Cale_>	But yeah, it's hard to say what the "right" instance is, when there's more than one to choose from
*	localhorse (~me@unaffiliated/boscop) has joined
<codeshot_>	SubZero models reaching down underneath values to add new structure
<Cale_>	You can also do a similar trick just with Monoid though.
<codeshot_>	(lowering the zeropoint in a parallel to Physics)
<codeshot_>	But Monoid doesn't have half the descriptive power and clarity of code
*	DeATh`RoW has quit (Ping timeout: 258 seconds)
<Cale_>	It's really similar...
*	codesoup (~codesoup@CPE00fc8de45853-CM00fc8de45850.cpe.net.cable.rogers.com) has joined
*	DeATh`RoW (~jsa@vps.matteocicuttin.it) has joined
*	jncunha (~jncunha@a213-22-47-232.cpe.netcabo.pt) has joined
*	Winwin (~Winwin@35.100.126.78.rev.sfr.net) has joined
<codeshot_>	I started there and realised it wasn't right - it works for some append models but not general "we started with one end decision for each point of the functor's source and we work back to expand the decisions that could have been made to get there" which allows much more arbitrary stuff, including <|> that builds structure instead of just appending
<codeshot_>	I think this would be an important foundation for compiler optimizers, for example
*	Psybur has quit (Ping timeout: 240 seconds)
<Winwin>	https://cryptosrevolution.wixsite.com/beta/
<Cale_>	> let fizzbuzz n = fromMaybe (show n) $ ("fizz" <$ guard (n `mod` 3 == 0)) <> ("buzz" <$ guard (n `mod` 5 == 0)) in map fizzbuzz [1..30]
<lambdabot>	 ["1","2","fizz","4","buzz","fizz","7","8","fizz","buzz","11","fizz","13","14...
*	neo4rm (1bfb2536@gateway/web/freenode/ip.27.251.37.54) has joined
*	shreyansh_k (Elite20764@gateway/shell/elitebnc/x-igkugrkpjiudigwk) has joined
<codeshot_>	yeah that was my starting point, but the problems it solves are very limited
<codeshot_>	you have to change your intuition about what lines to start writing quite radically even for similar problems
<Cale_>	I suppose. Certainly Applicative functors are more interesting.
*	neo4rm has quit (Client Quit)
*	shreyansh_k (Elite20764@gateway/shell/elitebnc/x-igkugrkpjiudigwk) has left ("Leaving")
*	jncunha87 (~jncunha@a213-22-47-232.cpe.netcabo.pt) has joined
<codeshot_>	How does one go about trying to do something about this?
*	jncunha has quit (Ping timeout: 240 seconds)
<codeshot_>	Soon I'll have some demonstration of this here: https://github.com/code5hot/subzero
*	funrep (~funrep@31-208-65-162.cust.bredband2.com) has joined
<codeshot_>	It's currently out of date code
*	bartholin has quit (Ping timeout: 248 seconds)
*	floryst (~floryst@cpe-45-37-110-36.nc.res.rr.com) has joined
*	nickolay has quit (Ping timeout: 268 seconds)
*	chaosmasttter (~chaosmast@p54B47CA8.dip0.t-ipconnect.de) has joined
*	jncunha (~jncunha@a213-22-47-232.cpe.netcabo.pt) has joined
*	iAmerikan has quit (Ping timeout: 248 seconds)
*	funrep has quit (Ping timeout: 255 seconds)
*	funrep (~funrep@31-208-65-162.cust.bredband2.com) has joined
<Cale_>	codeshot_: You mean selecting a different instance? Usually just making a newtype wrapper is the thing
*	localhorse has quit (Read error: Connection reset by peer)
*	localhorse (~me@ip5f58a45f.dynamic.kabel-deutschland.de) has joined
*	localhorse has quit (Changing host)
*	localhorse (~me@unaffiliated/boscop) has joined
*	knupfer (~Thunderbi@p200300EB4BC6EA00857337F812587909.dip0.t-ipconnect.de) has joined
*	jncunha87 has quit (Ping timeout: 240 seconds)
*	stevenxl (uid133530@gateway/web/irccloud.com/x-skgmtquenbbebbab) has joined
<codeshot_>	well I can do that
*	Winwin (~Winwin@35.100.126.78.rev.sfr.net) has left
*	jncunha87 (~jncunha@a89-152-227-73.cpe.netcabo.pt) has joined
<codeshot_>	but I wonder if Compose should be adjusted or we should add Compose'
*	doodlehaus (~doodlehau@71-89-72-8.dhcp.bycy.mi.charter.com) has joined
<codeshot_>	developers need ready materials
*	romanix has quit (Quit: Leaving)
<codeshot_>	before they learn about implementing typeclasses, etc
*	jncunha87 has quit (Read error: Connection reset by peer)
*	jncunha has quit (Ping timeout: 255 seconds)
*	jncunha87 (~jncunha@a89-152-227-73.cpe.netcabo.pt) has joined
*	Jahangir has quit (Ping timeout: 258 seconds)
*	jncunha87 has quit (Read error: Connection reset by peer)
*	localhorse_ (~me@ip5f58a45f.dynamic.kabel-deutschland.de) has joined
*	jncunha87 (~jncunha@a89-152-227-73.cpe.netcabo.pt) has joined
*	localhorse_ has quit (Changing host)
*	localhorse_ (~me@unaffiliated/boscop) has joined
<Welkin>	codeshot_: what does Compose have to do with what you just said?
*	zcourts (~zcourts@162.229-30-62.static.virginmediabusiness.co.uk) has joined
*	Destol has quit (Quit: leaving)
*	cdg_ has quit (Remote host closed the connection)
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
*	bartholin (~bartholin@unaffiliated/bartholin) has joined
*	srdqty (~srdqty@70.126.27.20) has joined
*	justan0theruser has quit (Ping timeout: 240 seconds)
*	Pamelloes has quit (Ping timeout: 260 seconds)
*	localhorse has quit (Ping timeout: 248 seconds)
*	ddellaco_ has quit (Read error: Connection reset by peer)
*	chaosmasttter has quit (Ping timeout: 240 seconds)
<codeshot_>	well, it's functor composition which is what we want to do to write sophisticated programs, but it's applicative instance appears to be one that doesn't help with intuitive programs and few building blocks
<codeshot_>	that is, it looks like haskells "Compose" data type is not the most natural functor composition
*	ddellacosta (~ddellacos@172.58.185.95) has joined
<Welkin>	I have never even lloked at Compose except for an academic exercise that didn't actually need it
<Welkin>	looked*
<mud>	I used it in reflex a time or two and it actually helped. I forget the specifics though.
*	lemonpepper24 has quit (Quit: Leaving)
<codeshot_>	I just created a type so I could write something in an intuitive way and which applies to very many problems, and then I realised it was probably functor and it was but for the Alternative instance
*	osa1 (~omer@212.252.143.51) has joined
*	osa1 has quit (Changing host)
*	osa1 (~omer@haskell/developer/osa1) has joined
<codeshot_>	whereupon I was like "I think that's not what they would really want"
<codeshot_>	Here's the fizzbuzz game as a test case for my SubZero datatype: https://github.com/code5hot/subzero/blob/master/test/Spec.hs
<codeshot_>	SubZero's applicative gives [[1],[2]] <|> [[3],[4]] == [[1,3],[1,4],[2,3],[2,4]] instead of just [[1],[2],[3],[4]] so it's much richer
<codeshot_>	I'd like to get SubZero into base but with a name that reflects that it's an equal or maybe superior functor composition vs Compose
*	doodlehaus has quit (Remote host closed the connection)
<codeshot_>	especially so devs find it as an avenue from basic python system programming to compositional functional programming
*	chaosmasttter (~chaosmast@p54B47CA8.dip0.t-ipconnect.de) has joined
*	hphuoc25 (~hphuoc25@118.200.76.54) has joined
*	osa1 has quit (Ping timeout: 258 seconds)
*	leothrix (~leothrix@elastic/staff/leothrix) has joined
<Welkin>	what does python have to do with anything?
*	gxt (~gxt@2a02:908:e851:4020:a92c:5013:3011:5408) has joined
*	alvinsj has quit (Quit: gone to sleep.)
<codeshot_>	Ah, it's a popular programming language
*	tylerjl has quit (Ping timeout: 258 seconds)
<codeshot_>	and to be able to create great haskell programs it helps to have more mindshare
<mud>	codeshot_: So it's just about the Alternative instance it looks like?
<codeshot_>	you get more support and training
<codeshot_>	so far
*	byorgey has quit (Ping timeout: 240 seconds)
<mud>	I didn't know Compose actually gave you an Alternative, definitely never used that myself.
<codeshot_>	This suggests another prime type class derived from Alternative
<codeshot_>	I have to sleep on it for now though
<codeshot_>	mud, I don't think it's a good instance at all
<codeshot_>	it doesn't deliver on the potention of functor composition
<codeshot_>	*potential
*	hphuoc25 has quit (Ping timeout: 240 seconds)
*	Pacra (~Pacra@static-72-94-42-112.phlapa.ftas.verizon.net) has joined
*	byorgey (~byorgey@209.65.56.40) has joined
*	byorgey has quit (Changing host)
*	byorgey (~byorgey@haskell/developer/byorgey) has joined
*	hackage traildb 0.1.3.0 - TrailDB bindings for Haskell  https://hackage.haskell.org/package/traildb-0.1.3.0 (Adeon)
*	JappleAck has quit (Ping timeout: 248 seconds)
*	erisco (~erisco@198-84-159-71.cpe.teksavvy.com) has joined
*	{emptyset} has quit (Read error: Connection reset by peer)
*	Yuras has quit (Ping timeout: 240 seconds)
*	conal has quit (Quit: Computer has gone to sleep.)
*	ddellaco_ (~ddellacos@172.56.23.163) has joined
*	Pamelloes (~jbrot@0587361409.wireless.umich.net) has joined
*	ddellacosta has quit (Ping timeout: 258 seconds)
*	vlatkoB has quit (Remote host closed the connection)
*	funrep has quit (Ping timeout: 248 seconds)
**** ENDING LOGGING AT Wed Nov 22 12:06:10 2017

**** BEGIN LOGGING AT Fri Nov 24 10:19:43 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:46:51 2017)
*	Channel #haskell url: http://www.haskell.org/
<saurabhnanda>	thanks, pretty useful. Should probably be merged with Data.List in base itself.
*	mohsen_ has quit (Ping timeout: 258 seconds)
<saurabhnanda>	and any idea how to use https://www.stackage.org/haddock/lts-9.0/bytestring-0.10.8.1/Data-ByteString.html#v:split
*	t7 (~tommo@host5-81-182-9.range5-81.btcentralplus.com) has joined
<saurabhnanda>	it's not accepting single-quoted chars as given in the docs.
*	auto_complete_ has quit (Ping timeout: 248 seconds)
<crucify_me>	https://ptpb.pw/9lx9   hi how does the lambda expression work here, with (\_ n -> n + 1) I understand the second part (increment). thanks
*	knupfer has quit (Ping timeout: 246 seconds)
<cocreature>	a Char doesn’t make sense. bytestring is a sequence of bytes, you can’t split that on unicode characters
*	Philonous has quit (Remote host closed the connection)
<saurabhnanda>	cocreature: but the example of that function seems to be doing exactly that.
<cocreature>	if you want ascii encoding you can use (fromIntegral . ord) to go from Char to Word8
<saurabhnanda>	`split 'a'  "aXaXaXa"`
<cocreature>	saurabhnanda: right the docs are broken
<saurabhnanda>	what?!
*	johan (~johan@c-1b02e255.016-9-6c756e3.cust.bredbandsbolaget.se) has joined
<saurabhnanda>	ignore the surprise.
*	johan has quit (Client Quit)
<saurabhnanda>	so, is GHC accepting doc PRs via github?
<cocreature>	you need a PR for bytestring not for GHC
<saurabhnanda>	s/GHC/base/
<Welkin>	ghc repo is here https://ghc.haskell.org/trac/ghc
*	ma27 (~ma27@2a00:cb0:8002:1054:228:f8ff:fe5d:c64a) has joined
<saurabhnanda>	oh this is not even base
<saurabhnanda>	it's a separate package
*	Fekinox has quit (Read error: Connection reset by peer)
*	jb55 has quit (Ping timeout: 248 seconds)
*	hackage animate-example 0.0.0, animate 0.2.0 (jxv): https://qbin.io/y5zvqhj
*	deepredsky (~rajesh@81.27.211.204) has joined
<crucify_me>	^ hoping for help with that part of lambda ' \_ n -> ' above
*	chrisdotcode (~quassel@unaffiliated/chrisdotcode) has joined
<crucify_me>	the wildcard always throws me off
<crucify_me>	what would that represent in a definition of length ?
<crucify_me>	https://ptpb.pw/9lx9  << re: this
<Welkin>	that is const
<Welkin>	:t const
<lambdabot>	a -> b -> a
<Welkin>	well, almost
*	Fekinox (~Zen@2604:2000:a05b:2900:c477:34ef:5cde:c151) has joined
<Welkin>	:t (+1) . const
<lambdabot>	Num (b -> a) => a -> b -> a
<Welkin>	:t (+1) (.).(.) const
<lambdabot>	Num ((b1 -> b2 -> a1) -> (a2 -> b1) -> a2 -> b2 -> a1) => (b1 -> a1) -> (a2 -> b1) -> a2 -> b2 -> a1
<Welkin>	lol
*	Xal has quit (Ping timeout: 268 seconds)
<crucify_me>	Welkin, er, is that for my benefit?
*	robotroll has quit (Read error: Connection reset by peer)
*	petermw has quit (Remote host closed the connection)
<Welkin>	just playing around
<Welkin>	I don't quite understand your question
<Welkin>	the lambda you wrote should be self-explanatory
<crucify_me>	its a textbook
*	Xal (~Xal@S010664777dabacc3.vw.shawcable.net) has joined
*	emmanuel_erc (~user@c-76-104-19-229.hsd1.va.comcast.net) has joined
*	quobo has quit (Quit: Connection closed for inactivity)
*	deepredsky has quit (Ping timeout: 250 seconds)
<Welkin>	> (+1) . const $ 9 2
<lambdabot>	 error:
<lambdabot>	     • Could not deduce (Num t0)
<lambdabot>	       from the context: (Num (t -> a), Num (b -> a), Num t)
*	smckay (~smckay@cpe-72-181-43-235.rgv.res.rr.com) has joined
<Welkin>	> (+1) $ const $ 9 2
<lambdabot>	 error:
<lambdabot>	     • Could not deduce (Num t0)
<lambdabot>	       from the context: (Num (t -> a), Num (b -> a), Num t)
<crucify_me>	I'm not following with const example
<Welkin>	> ((+1) . const) 9 2
<lambdabot>	 error:
<lambdabot>	     • Could not deduce (Num b0)
<lambdabot>	       from the context: (Num (b -> a), Num b, Num a)
<Welkin>	o.o
<Welkin>	I just meant that it throws away the first parameter
*	Swizec has quit (Quit: Computer has gone to sleep.)
<Welkin>	\_ n -> n + 1
*	ardron has quit (Quit: Leaving)
*	tirej has quit (Ping timeout: 252 seconds)
*	deepredsky (~rajesh@81.27.211.204) has joined
<crucify_me>	could you explain how the wildcard is used there, and the first n in that lambda Welkin 
*	hoc has quit (Quit: Connection closed for inactivity)
<Pacra>	thats wild
*	taktoa has quit (Remote host closed the connection)
*	hackage hslua-module-text 0.1.2.1 - Lua module for text  https://hackage.haskell.org/package/hslua-module-text-0.1.2.1 (tarleb)
<Welkin>	because all functions are curried, `\a b -> ...` is actually `\a -> \b -> ...`
*	m1n has quit (Quit: WeeChat 1.9.1)
<crucify_me>	ok thanks so n there is the list itself ?
<Welkin>	the `_` is a variable you can bind to like any other, but is used to represent a "don't care" when you don't want to use that parameter in your equation
*	hackage pipes-safe 2.2.6 - Safety for the pipes ecosystem  https://hackage.haskell.org/package/pipes-safe-2.2.6 (GabrielGonzalez)
<crucify_me>	ok got that..
<Welkin>	no, the n is obivously not a list because you are applying (+1) to it
<Welkin>	you can't do that to a list
<Welkin>	it must be some kind of Num, probably an Int
<crucify_me>	n is a seed value ?
<Welkin>	okay, I see
<crucify_me>	or , careful to say, an accumulator?
<Welkin>	I should have looked at your paste earlier
*	zariuq has quit (Ping timeout: 240 seconds)
<Welkin>	it is used as the accumulator function for foldr
<Welkin>	:t foldr
<lambdabot>	Foldable t => (a -> b -> b) -> b -> t a -> b
*	codyw (~cody@24.130.87.147) has joined
<Welkin>	foldr takes an accumulator function where the first parameter is an element from your Foldable structure (like a List), and the second parameter is your accumulator value
*	EvilMachine has quit (Quit: EvilMachine)
<Welkin>	here, the accumulator is set to 0
<Welkin>	@src foldr
<lambdabot>	foldr f z []     = z
<lambdabot>	foldr f z (x:xs) = f x (foldr f z xs)
<crucify_me>	excellent thanks. In the lambda it didn't look like an accumulator to me. (some people here prefer seed value)
*	herr_jth (~HerrJth@ip5f5bd771.dynamic.kabel-deutschland.de) has joined
*	deepredsky has quit (Ping timeout: 250 seconds)
*	m1n (~m1n@unaffiliated/m1ntfr3sh) has joined
<Welkin>	well, the value you provide to it on the first application is a seed value, but the value that gets passed around on each iteration is an accumulation of all of the operations (an accumulator)
<crucify_me>	so what are you calling the first parameter ? the \_
<crucify_me>	?
<Welkin>	that is the element from the list
<Welkin>	foldr iterates over a foldable structure one element at a time
*	davr0s (~textual@host86-157-70-100.range86-157.btcentralplus.com) has joined
<crucify_me>	ok so that is like a staging area
<EvanR>	those variable names are good for seeing the structure at a glance but not for understanding the intended use
*	cschneid_ (~cschneid@2603:300b:901:300:b51e:951a:da74:35a1) has joined
<EvanR>	in that @src listing
*	cschneid_ has quit (Remote host closed the connection)
<ggVGc>	what is this variable naming you talk of
*	mohsen_ (~Mohsen@89.45.50.186) has joined
<EvanR>	z and x
*	mohsen_ has quit (Client Quit)
<ggVGc>	in haskell you donit need variable names
<ggVGc>	point free all the things
<EvanR>	foldr kind of cant be defined in terms of simpler point free parts, its the core interpreter of the list data structure
<EvanR>	im not sure how to make that precise
*	mohsen_ (~Mohsen@89.45.50.186) has joined
<crucify_me>	I understand the point free element, the \_ is as Welkin said the first element of the list that is being folded over. EvanR would love elaboration on it thanks
<Welkin>	that is not point-free
<EvanR>	i just showed up, what is \_
<Welkin>	the point-free discussion has nothing to do with our discussion
<crucify_me>	https://ptpb.pw/9lx9
<Welkin>	you can safely ignore that crucify_me 
<crucify_me>	ok ! thanks
<EvanR>	the first argument (_) is the element from the list
*	cdg (~cdg@2600:1700:3120:40e0:c52:5266:6ec9:217d) has joined
<Welkin>	crucify_me: try to implement foldr and foldl yourself
<EvanR>	the visitee
<Welkin>	it helps a lot
<Welkin>	implement them as recursive functions
<Welkin>	you can even fix them to work just on lists
<Welkin>	so you don't have to deal with Foldable
<crucify_me>	the text has been walking through it. It was using a lambda as the arg that had me confused . 
<crucify_me>	the fact its just the first, second element, etc being counted helped .
*	danza has quit (Ping timeout: 246 seconds)
*	knupfer (~Thunderbi@p200300EB4BC0E00039E70A6980204427.dip0.t-ipconnect.de) has joined
<Welkin>	crucify_me: https://imgur.com/a/CbkR5
<Welkin>	I think Cale made that (not sure where I grabbed it from)
<Welkin>	but it is a very helpful diagram to understand folds
<crucify_me>	the hardest thing is looking at \_ as a single element , not a 'working' function . thanks Welkin  cool 
<Welkin>	just look at the left portion on foldr and foldl
<crucify_me>	I went through folds and it is a bit tough. thanks I 'll take a look
<Welkin>	right anf left folds can take some time to build intuition for
<Welkin>	foldr is easier
*	deepredsky (~rajesh@81.27.211.204) has joined
*	Arcaelyx (~Arcaelyx@209.58.138.227.adsl.inet-telecom.org) has joined
<crucify_me>	trippy I need to look at those trees on a desktop. thanks kindly Welkin working on it this week.
*	m1n has quit (Quit: WeeChat 1.9.1)
<Welkin>	try working them out on paper
<Welkin>	start with a small list of maybe 5 elements
<Welkin>	and work out each step of the calculation until you get your final result
*	cdg has quit (Ping timeout: 255 seconds)
<Welkin>	each "iteration"
<EvanR>	you have to know that e1 + e2 cant be lazily evaluated (for Int or Integer or Double...)
<EvanR>	tricky part of evaluating that by hand
*	smckay has quit (Quit: smckay)
*	deepredsky has quit (Ping timeout: 248 seconds)
*	fsestini_ (~fsestini@91.253.7.51) has joined
*	fsestini has quit (Ping timeout: 268 seconds)
*	fsestini_ is now known as fsestini
<crucify_me>	EvanR, Welkin ok thanks, that would be called linear recursion, not tail right/
<crucify_me>	?
<EvanR>	foldr isnt tail recursive, i dont know what linear recursion is
<crucify_me>	it lines up in a stack, so to speak
<EvanR>	interesting
<EvanR>	that implementation detail doesnt apply to haskell really
*	durandal_ has quit (Remote host closed the connection)
<crucify_me>	hmm, it is foggy remembrances of scheme
*	durandal1 (~durandal1@2601:647:4900:1f83:bc0f:87d4:f796:e976) has joined
<EvanR>	haskell is lazy so a call stack doesnt really make sense, all calls are effectively tail calls
<EvanR>	but not necessarily tail recursive (tail position, and recursive)
<crucify_me>	hmm, I was using the SICP book, it makes the distinction in scheme
<EvanR>	schema does eager evaluation, theres a totally different implementation for that
<crucify_me>	here is random sentence : When we make a normal recursive call, we have to push the return address onto the call stack then jump to the called function. This means that we need a call stack whose size is linear 
*	Disconnected ()
**** ENDING LOGGING AT Fri Nov 24 11:01:36 2017

**** BEGIN LOGGING AT Fri Nov 24 11:02:25 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	You are now known as crucify_me
-NickServ-	This nickname is registered. Please choose a different nickname, or identify via /msg NickServ identify <password>.
*	fendor (~fendor@e249-024.eduroam.tuwien.ac.at) has joined
<EvanR>	that doesnt apply to haskell
>Nickserv<	identify ****
-NickServ-	You are now identified for n_blownapart.
*	zzz has quit (Remote host closed the connection)
<crucify_me>	ok thanks, EvanR I was disconnected briefly
*	kroogs (~kroogs@71-212-5-43.tukw.qwest.net) has joined
*	coot___________ (~coot@89-72-221-217.dynamic.chello.pl) has joined
<crucify_me>	so anything like this 1 : (2 : (3 : []))  I was looking at as linear recursion , wrongly I guess EvanR 
*	hackage subzero 0.1.0.2 - Helps when going "seed values" -> alternatives and optional -> answers  https://hackage.haskell.org/package/subzero-0.1.0.2 (codeshot)
<EvanR>	that doesnt look like recursion
<amf>	with `stack haddock` im getting a failure, but no information to know what exactly failed.. are there any flags i can pass to stack or haddock to increase verbosity? (stack --verbose haddock doesnt help)
*	alx741 (~alx741@190.152.174.73) has joined
<EvanR>	crucify_me: if you use foldr, depending on how you use it, it may or may not use a bunch of extra space
<EvanR>	but SICP wont help you understand that
*	stevenxl (uid133530@gateway/web/irccloud.com/x-fgzlilpqpautozzx) has joined
*	emilypi has quit (Ping timeout: 248 seconds)
*	Fekinox has quit (Read error: Connection reset by peer)
*	codesoup (~codesoup@2607:fea8:e2df:fbf0:5df0:2f95:5e96:59a4) has joined
*	erikd has quit (Ping timeout: 260 seconds)
*	erikd (~erikd@hendrix.mega-nerd.net) has joined
*	Fekinox (~Zen@cpe-74-72-183-234.nyc.res.rr.com) has joined
*	kroogs has quit (Ping timeout: 240 seconds)
*	jncunha (~jncunha@a89-152-225-5.cpe.netcabo.pt) has joined
<crucify_me>	EvanR, interesting. SICP introduced me to big O notation and worked out tail vs linear timestamps, etc. thanks can't wait to understand what you mean
*	lukaramu (~lukaramu@port-51462.pppoe.wtnet.de) has joined
<crucify_me>	if you call them timestamps I forget
*	deepredsky (~rajesh@81.27.211.204) has joined
<EvanR>	tail vs linear timestamps?
*	sssilver (~sssilver@2605:6000:ead6:6700:e4b7:ca04:c87d:af58) has joined
<crucify_me>	well big O notation for each
*	tomphp has quit (Read error: Connection reset by peer)
*	quobo (uid178934@gateway/web/irccloud.com/x-cjgrjyxoxwzvgqin) has joined
*	deepredsky has quit (Ping timeout: 268 seconds)
*	neoncontrails has quit (Remote host closed the connection)
*	Salome (~kuri@aba7-fefc-adff-36e6-cd80-8a3b-07d0-2001.dyn.estpak.ee) has joined
*	CodeWeaver (464fb585@gateway/web/freenode/ip.70.79.181.133) has joined
*	hackage xmlhtml 0.2.5.2 - XML parser and renderer with HTML 5 quirks mode  https://hackage.haskell.org/package/xmlhtml-0.2.5.2 (DougBeardsley)
*	ziocroc has quit (Ping timeout: 248 seconds)
*	sea-gull has quit (Ping timeout: 248 seconds)
*	deepredsky (~rajesh@81.27.211.204) has joined
*	waqe (~waq`@cpe-65-26-197-34.wi.res.rr.com) has joined
*	waqe (~waq`@cpe-65-26-197-34.wi.res.rr.com) has left ("Leaving")
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
*	tomphp (~tomphp@213.205.198.241) has joined
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	path[l] (~vsi@c-73-189-43-89.hsd1.ca.comcast.net) has joined
*	Psychiatrist has quit (Remote host closed the connection)
*	coot___________ has quit (Quit: coot___________)
*	ziocroc (~ziocroc@151.74.11.149) has joined
*	neoncontrails (~neoncontr@99-26-122-26.lightspeed.sndgca.sbcglobal.net) has joined
*	gugah has quit (Ping timeout: 255 seconds)
*	sssilver has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	coot___________ (~coot@89-72-221-217.dynamic.chello.pl) has joined
*	tomphp has quit (Ping timeout: 248 seconds)
*	aarvar (~foewfoiew@50.34.105.170) has joined
*	iraultza (iraultza@136.85-84-99.dynamic.clientes.euskaltel.es) has left
<Gurkenglas_>	How hard would it be to allow libraries to use something like implicit parameters to write an instance template that turns into an instance when the missing classes/types come into scope?
*	crobbins has quit (Read error: Connection reset by peer)
*	mohsen_ has quit (Quit: WeeChat 1.9)
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	deepredsky has quit (Ping timeout: 248 seconds)
*	crobbins (~crobbins@2602:30a:c08e:19e0:aaf7:790b:6148:469e) has joined
<Gurkenglas_>	(Of course one of the classes/types must still be defined in the current module)
*	kroogs (~kroogs@71-212-5-43.tukw.qwest.net) has joined
*	codesoup has quit (Ping timeout: 255 seconds)
*	saurabhnanda has quit (Remote host closed the connection)
*	twanvl (~twanvl@92-110-121-28.cable.dynamic.v4.ziggo.nl) has joined
*	tomphp (~tomphp@213.205.198.241) has joined
*	auto_complete_ has quit (Ping timeout: 248 seconds)
*	plutoniix (~q@node-4nb.pool-125-25.dynamic.totbb.net) has joined
<Gurkenglas_>	Ooh, there's a concern that factors relatively neatly out of this: How possible would it be to have ?asd nameclash with asd, so the ? would be closer to a defer-type-errors operator
*	ericshortcut (~ericshort@179.215.124.57) has joined
*	plutoniix has quit (Max SendQ exceeded)
*	ego has quit (Quit: wir müssen wissen — wir werden wissen)
*	kroogs has quit (Ping timeout: 246 seconds)
*	plutoniix (~q@node-4nb.pool-125-25.dynamic.totbb.net) has joined
*	ego (~ego@parallaxcorporation.xyz) has joined
*	yellowj has quit (Ping timeout: 240 seconds)
*	chaosmasttter (~chaosmast@p54B47CA8.dip0.t-ipconnect.de) has joined
*	lsund has quit (Ping timeout: 248 seconds)
*	tomphp has quit (Client Quit)
*	codesoup (~codesoup@CPE00fc8de45853-CM00fc8de45850.cpe.net.cable.rogers.com) has joined
<CodeWeaver>	Okay, I've got another thunk/laziness related question...  I was pondering the splitAt function and its various cousins for lists.  As a technical exercise, I wanted to see if I could implement a version that didn't chew up memory holding on to the second half as long as the first half was consumed.
*	osa1 (~omer@212.252.143.51) has joined
*	osa1 has quit (Changing host)
*	osa1 (~omer@haskell/developer/osa1) has joined
<CodeWeaver>	I started with the version in base, explicitly typed to ints so I didn't have any polymorphism issues like last time.
<CodeWeaver>	I was amused to discover that the one in base doesn't seem to have this problems under -O1, but does under -O0.  Then I got curious as to what optimizations caused that.
*	chaosmasttter has quit (Ping timeout: 260 seconds)
*	ChaiTRex has quit (Ping timeout: 248 seconds)
<CodeWeaver>	code here:  https://pastebin.com/bm4wZ0qU
*	Arcaelyx has quit (Quit: Textual IRC Client: www.textualapp.com)
<CodeWeaver>	I've been unable to figure out how standard splitAt avoids holding on to the whole list until the first sublist is completely used up, and the second part gets consumed.
*	path[l] has quit (Quit: path[l])
<CodeWeaver>	Well, it doesn't, actually, without -O0, but I can't figure out what subset of the -O1 optimizations _allow_ it to avoid that fate.
<CodeWeaver>	Errr, I mean it doesn't using -O0
*	hphuoc25 has quit (Remote host closed the connection)
<cocreature>	CodeWeaver: how are you measuring that it’s holding the list in memory?
*	x77686d has quit (Quit: x77686d)
<CodeWeaver>	cocreature:  That's a fair question.  Two ways.  Rudimentary:  Watching the memory growth go out of control at a system level.  The difference between -O1 and -O0 is immediate and obvious.
<CodeWeaver>	cocreatre:  Also, I looked at the core to see if I could spot ways in which, maybe, lists were being brought out to... what is it called? CAF level?
*	azahi (~azahi@unaffiliated/azahi) has joined
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<CodeWeaver>	I haven't run any of GHC's memory analysis and graphing tools just yet, but the effect seemed really obvious, and the program's designed to BE really obvious.
<CodeWeaver>	And also in fairness I can't read Core very well yet.
*	path[l] (~vsi@c-73-189-43-89.hsd1.ca.comcast.net) has joined
*	tomphp (~tomphp@213.205.198.241) has joined
*	path[l] has quit (Client Quit)
*	herr_jth has quit ()
*	fr33domlover (~fr33domlo@fsf/member/fr33domlover) has joined
*	deepredsky (~rajesh@81.27.211.204) has joined
*	alhariel (~alhariel@177.131.164.55) has joined
*	path[l] (~vsi@c-73-189-43-89.hsd1.ca.comcast.net) has joined
*	xormor (~xormor@unaffiliated/xormor) has joined
<JuanDaugherty>	does, "core" here mean physical memory content?
<cocreature>	JuanDaugherty: core is GHC’s intermediate language
<JuanDaugherty>	ah
*	hackage heist 1.0.1.1 - An Haskell template system supporting both HTML5 and XML.  https://hackage.haskell.org/package/heist-1.0.1.1 (DougBeardsley)
<cocreature>	or rather one of the intermediate languages
<CodeWeaver>	No, I mean.. GHC's ... STG language?
<cocreature>	STG is one level below core :)
<CodeWeaver>	Ah.
<CodeWeaver>	My mistake. Still.
<crucify_me>	length' = foldr ( \_ n -> n + 1 ) 0     wondering EvanR Welkin if you have time: how does haskell know that n is the accumulator function, and how is it set to initial value 0 ?    or any member help please?
<sternmull>	I am in need for asynchronous threads that work on their own state and communicate with each other, pretty much like Erlang processes. Modeling this on top of Async's turned out to get pretty messy. Is there a good package for such things?
<CodeWeaver>	The dump_simpl stuff .
<CodeWeaver>	That's what I meant. APologizes for bad use of the terms.
<CodeWeaver>	At best I've discovered three optimizations in -O1 any one of which that, if i turn off, cause the bad behaviour to appear,  But turning them on in -O0 doesn't  cause the bad behaviour to disappear, and its not clear what transforms are making it better or how I'd do it 'by hand' at the Haskell level if I needed to.
*	x77686d (~whm@c-107-2-11-38.hsd1.az.comcast.net) has joined
<cocreature>	it looks like with -O0, GHC floats out the call to splitAt
<cocreature>	I actually find the -O0 behavior to be more surprising than the -O1 behavior :)
<CodeWeaver>	Hey, no argument from me.
*	Foritus has quit (Ping timeout: 248 seconds)
<cocreature>	you are not holding any explicit reference to [0..n-1]
<CodeWeaver>	True.
<cocreature>	so there is nothing that causes GHC to keep it around
*	deepredsky has quit (Ping timeout: 240 seconds)
*	fragamus has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<CodeWeaver>	Well, I would have thought in stockSplitAt, which is from base, would hold on to the second half even if you processed a very large first half.  Like, the way I read that code, the behaviour SHOULD be to use up memory.
<CodeWeaver>	Its not clear to me how the optimizations are avoiding it.
<CodeWeaver>	But I could be reading the code wrong.
*	cocreature stares at the code again
*	osa1 has quit (Ping timeout: 248 seconds)
<CodeWeaver>	And then, I'm not sure what optimizations are doing it, much less how.
<CodeWeaver>	Also not quite sure why it would change anything to have the internal splitAt' in that function floated out in -O0 would change that behaviour.
*	tomphp has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<CodeWeaver>	Also apparently can't grammar before coffee.
*	cyborg-one (~cyborg-on@176-119-93-220.broadband.tenet.odessa.ua) has joined
*	cyborg-one (~cyborg-on@176-119-93-220.broadband.tenet.odessa.ua) has left
*	hololeap (~hololeap@unaffiliated/hololeap) has joined
*	Yuras has quit (Ping timeout: 246 seconds)
<cocreature>	so with -O1 it pattern matches on the result of splitAt', that gives it a tuple. note that none of the elements is forced at this point so the large list has not been evaluated yet. it then starts going through a loop on the first element of that tuple to find the last element. this will evaluate the large list but nothing is retaining references to those elements so they can be immediately garbage collected
*	Pamelloes (~jbrot@c-98-224-221-28.hsd1.mi.comcast.net) has joined
<CodeWeaver>	GImme a moment to read that.
*	hackage Villefort 0.1.2.5 - Villefort is a task manager and time tracker written in haskell.  https://hackage.haskell.org/package/Villefort-0.1.2.5 (ChrisReuter)
*	kroogs (~kroogs@71-212-5-43.tukw.qwest.net) has joined
<CodeWeaver>	Well, okay, but the second half of the list is already.... held on to by the caller by way of a thunk that, when evaluated, would itself have to walk down the list, no?
*	path[l] has quit (Quit: path[l])
<CodeWeaver>	Isn't the need to eventually process that second part of that initial tuple the thing that should hold on to the whole list?
*	path[l] (~vsi@c-73-189-43-89.hsd1.ca.comcast.net) has joined
<CodeWeaver>	I mean that's to me why it _has_ bad behaviour when run with -O0
<cocreature>	the reason why this is not the case (as far as I understand it, I might be completely wrong here) is that you are not calculating the first and the second part of the tuple independently
<cocreature>	if you just had splitAt xs = (take n xs, drop n xs) then yeah you would retain a reference to xs
<crucify_me>	https://ptpb.pw/qP6P  these are some notes on foldr. I see how \_ in ' length' = (\_ n -> n + 1) 0 ' works as the 'x' in (x:xs). but how does foldr know that n is the accumulator ?  
*	chaosmasttter (~chaosmast@p54B47CA8.dip0.t-ipconnect.de) has joined
*	deepredsky (~rajesh@81.27.211.204) has joined
<crucify_me>	sorry mis posted ... 
*	Pamelloes has quit (Ping timeout: 248 seconds)
<CodeWeaver>	Yeah, but in pattern matching to split open the tuple to get the first part, what _is_ retained in order to get the second part?  As far as I know it's not going to re-evaluate the function calls to splitAt'
<crucify_me>	length' = foldr (\_ n -> n + 1 ) 0
*	ericshortcut has quit (Remote host closed the connection)
*	conal (~conal@209.58.139.26) has joined
*	tommd (~tommd@71-34-77-223.ptld.qwest.net) has joined
*	ericshortcut (~ericshort@179.215.124.57) has joined
*	ruben_ (~ruben@5.119.221.87.dynamic.jazztel.es) has joined
*	rzp has quit (Quit: Leaving)
*	CodeWeaver scratches head
<cocreature>	the longer I’m staring at this the more I’m confusing myself :)
<CodeWeaver>	I'm glad I"m not the only one. :D
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
<cocreature>	heh :)
<CodeWeaver>	Such a simple bit of code.... but it vexes me.
*	sphinxo (~sphinxo@82-132-219-174.dab.02.net) has joined
*	path[l] has quit (Quit: path[l])
<sphinxo>	naming convention for libraries that provide c bindings?
*	metts has quit (Ping timeout: 240 seconds)
*	emerson has quit (Quit: WeeChat 1.9.1)
*	emerson (emerson@freenode/staff/emerson) has joined
<sphinxo>	libname-haskell ?
<cocreature>	so let me try to rephrase and you tell me if I’m making sense: the reason why the list is not being retained is that evaluating the first element which forces the evaluation of the call to splitAt' also partially evaluates the second element. in particular it evaluates it sufficently far to see that it doesn’t need to keep elements around
*	deepredsky has quit (Ping timeout: 240 seconds)
*	Youmu has quit (Quit: Connection closed for inactivity)
*	metts (~skypatrol@62-165-237-162.pool.digikabel.hu) has joined
*	kroogs has quit (Ping timeout: 248 seconds)
<CodeWeaver>	If that's the case, why does itnot do that in -O0?  If it's one of the optimizations, which one?
<hololeap>	crucify_me: i'm not exactly sure what you mean. it knows what n is because that is how the function is coded. this is reflected in the type signature for foldr
<cocreature>	sphinxo: libname-hs seems to be reasonably popular
*	ericshortcut has quit (Ping timeout: 240 seconds)
*	deepredsky (~rajesh@81.27.211.204) has joined
*	tomphp (~tomphp@213.205.198.241) has joined
<sphinxo>	cocreature: thanks!
*	auto_complete_ has quit (Ping timeout: 240 seconds)
*	hackage criterion 1.2.4.0 - Robust, reliable performance measurement and analysis  https://hackage.haskell.org/package/criterion-1.2.4.0 (ryanglscott)
<cocreature>	sphinxo: but maybe I’m just trying to get you to use my naming convention so that I don’t have to feel bad for being really uncreative when it comes to package names :)
<CodeWeaver>	Looking at splitAt' in the third clause, where the bulk of the work is done... as you pull more and more elements lazily off of the first list, I agree that the same function that you need to get the first sublist fully evaluated walks down the entire function call chain....
<sphinxo>	cocreature: I'm all about uncreative and consistent
*	x77686d has quit (Quit: x77686d)
<CodeWeaver>	I'd have to draw out how the thunks are set up that would allow it to happen.
<crucify_me>	hololeap, thanks a lot. so in foldr the accumulator argument is expected. I need to figure out where it is in foldr 's definition. 
<CodeWeaver>	But then I'm still left with... what is it in the optimizations that allows it to behave as you might say 'correctly'?
<CodeWeaver>	And why does it misbehave with -O0?
<CodeWeaver>	If you're right, why would it ever hold on to memory?
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	deepredsky has quit (Ping timeout: 240 seconds)
*	Swizec (~swizec@70.134.65.120) has joined
<CodeWeaver>	The more I think bout it the more you make sense, but I'm still left with that mystery.
<cocreature>	yeah I’m confused about that myself
<cocreature>	*makes up excuse about being too tired*
*	path[l] (~vsi@c-73-189-43-89.hsd1.ca.comcast.net) has joined
<CodeWeaver>	You've been more than a good sport about it, so my thanks for your efforts. :)
*	fragamus (~textual@2602:306:3a1a:87a0:8063:1238:78e5:5dbe) has joined
<CodeWeaver>	There's a thunk visualizer for ghc somewhere I recall....
<EvanR>	ghc-vis
<CodeWeaver>	This will help me at least verify the thunking we think is happening
*	fendor has quit (Ping timeout: 252 seconds)
*	emilypi has quit (Ping timeout: 240 seconds)
*	davr0s (~textual@host86-157-70-100.range86-157.btcentralplus.com) has joined
<hololeap>	crucify_me: foldr has a different implementation for each Foldable instance, such as []
*	deepredsky (~rajesh@81.27.211.204) has joined
*	auto_complete_ has quit (Ping timeout: 240 seconds)
*	Garmy (~garmy@p4FC96308.dip0.t-ipconnect.de) has joined
<sphinxo>	Conventions for namespacing of c bindings? 
<CodeWeaver>	Power dwindling.  Back shortly.
*	Foritus (~buggery@cpc91390-watf11-2-0-cust41.15-2.cable.virginm.net) has joined
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	Swizec has quit (Quit: Computer has gone to sleep.)
*	python476 has quit (Quit: ERC (IRC client for Emacs 25.3.1))
<hololeap>	crucify_me: the implementation for [] is here: http://hackage.haskell.org/package/base-4.10.0.0/docs/src/GHC.Base.html#foldr
<crucify_me>	thanks kindly hololeap . so what about this definition, is the v there what is used as the accumulator ? http://lpaste.net/360242
*	fsestini has quit (Quit: fsestini)
<crucify_me>	ie does n satisfy the v arg ?
<hololeap>	crucify_me: that's correct
<crucify_me>	excellent thanks
*	CodeWeaver has quit (Ping timeout: 260 seconds)
*	AxelAlex (~AxelAlex@2601:81:4300:21:74d3:71e9:291d:af0f) has joined
*	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has joined
<EvanR>	for some reason the infix code there makes me realize... the f passed to foldr gets the first element of the list and the result of folding the rest of the list as the two arguments
*	auto_complete_ has quit (Ping timeout: 268 seconds)
<hololeap>	crucify_me: the reason why is because you are calling f with two arguments: x (of type 'a') and either v for the empty list case or (foldr f v xs) for the non-empty case (both of which are of type 'b')
*	cdg (~cdg@2600:1700:3120:40e0:9c9a:65bf:5ae2:b839) has joined
<hololeap>	crucify_me: does that make sense?
<crucify_me>	hololeap, I'm working on that and EvanR 's comment 
*	eSVG (~svg@2601:c6:8302:8b50:851f:f722:600d:c37a) has joined
*	AxelAlex has quit (Client Quit)
*	jb55 (~jb55@208.98.200.100) has joined
*	zzq has quit (Ping timeout: 252 seconds)
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	ruben_ has quit (Quit: Leaving)
*	path[l] has quit (Quit: path[l])
*	deepredsky has quit (Ping timeout: 248 seconds)
*	x77686d (~whm@c-107-2-11-38.hsd1.az.comcast.net) has joined
<hololeap>	crucify_me: even if you didn't explicitly put in the type signature, the compiler could infer that `f' is a function with two arguments. when you pass in the lambda, you are telling it what the function `f' should be
*	tommd has quit (Ping timeout: 260 seconds)
<crucify_me>	hololeap, very helpful thanks
<hololeap>	crucify_me: np :)
*	cdg has quit (Ping timeout: 258 seconds)
<EvanR>	hmm breakpoint :: a -> a
<EvanR>	breakpoint r = r
<MarcelineVQ>	EvanR: when you see something in a module called GHC that is just id but has a different name, it's typically a signal to the compiler to put something not-haskell there to do magical things
*	auto_complete_ has quit (Ping timeout: 258 seconds)
*	python476 (~user@mfl93-6-88-169-195-97.fbx.proxad.net) has joined
*	theelous3 (~theelous3@unaffiliated/theelous3) has joined
<EvanR>	ah
<EvanR>	i would love to make new magic things like that
*	cjwelborn has quit (Ping timeout: 252 seconds)
<crucify_me>	hololeap, yeah its no cake walk  :)
*	m1n (~m1n@unaffiliated/m1ntfr3sh) has joined
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	ck (~ck@92.63.169.1) has joined
*	ck is now known as Guest78015
*	mcoffin (~mcoffin@unaffiliated/mcoffin) has joined
*	Boreeas has quit (Remote host closed the connection)
*	lambda-11235 (~lambda-11@campus-030-112.ucdavis.edu) has joined
*	CodeWeaver (464fb585@gateway/web/freenode/ip.70.79.181.133) has joined
*	streblo has quit (Ping timeout: 248 seconds)
<CodeWeaver>	I hear that whole electricity thing helps make haskell go to.
<CodeWeaver>	too.
<crucify_me>	hololeap, thing is , there's still something odd / confusing about it :   
*	streblo (~streblo@c-98-210-186-11.hsd1.ca.comcast.net) has joined
*	deepredsky (~rajesh@81.27.211.204) has joined
<CodeWeaver>	Installing graph-vis. Shoulda done this yesterday. ;)
<EvanR>	foldr :: (a -> b -> b) -> b -> [a] -> Electricity -> b
<CodeWeaver>	errrr ghc-vis
<CodeWeaver>	bwahahahahaha 
*	CodeWeaver coughs and chokes.
<CodeWeaver>	Dammit, EvanR, I was enjoying that coffee :D
<EvanR>	hmm, now i want coffee
<crucify_me>	no scratch that: the accumulator is exactly where it should be: in the v place. the arguments seems out of order at first hololeap 
<CodeWeaver>	I'm still getting the grounds out of my USB port from the last time I tried to upload a cup so you're on your own.
<crucify_me>	seemed*
*	ninedotnine has quit (Read error: Connection reset by peer)
*	Taslem (439574fc@gateway/web/freenode/ip.67.149.116.252) has joined
<hololeap>	crucify_me: do you understand currying? that might be part of the reason why you're confused. that and higher-order functions are a bit hard to get used to
*	peter81 (5c49c9c9@gateway/web/freenode/ip.92.73.201.201) has joined
<EvanR>	i am not sure why foldr and foldl have the arguments going in opposite order
*	ninedotnine (~dan@modemcable078.123-81-70.mc.videotron.ca) has joined
<peter81>	why does product[1..n] :: Int yield 0 for all n>=66?
<crucify_me>	EvanR, haven't looked at foldl in a while, really?
<EvanR>	because overflow?
<platz>	is there a way do deal with `~` in filesystem paths?  http://lpaste.net/2936398247545012224
<crucify_me>	one moment hololeap 
<CodeWeaver>	66 factorial is pretty bloody big.
*	jb55 has quit (Ping timeout: 258 seconds)
<EvanR>	foldr :: Foldable t => (a -> b -> b) -> b -> t a -> b
<peter81>	EvanR: it overflows before 66 too
<EvanR>	foldl :: Foldable t => (b -> a -> b) -> b -> t a -> b
*	akem (~huh@anon-42-213.vpn.ipredator.se) has joined
<geekosaur>	because every even number adds a factor 2 and eventually you not only overflow but you've done so by shifting 0s onto the right, leaving you with only the 0 bits fitting
*	streblo has quit (Ping timeout: 248 seconds)
*	path[l] (~vsi@c-73-189-43-89.hsd1.ca.comcast.net) has joined
*	deepredsky has quit (Ping timeout: 255 seconds)
<peter81>	geekosaur: ah that explains it, thanks
<hololeap>	EvanR: i think it's just because it's more intuitive that way. (a -> b -> b) is nomming a's on the left and (b -> a -> b) is nomming a's on the right
*	Dembel (~Dembel@31.132.181.48) has joined
*	hackage BNFC-meta 0.6 - Deriving Parsers and Quasi-Quoters from BNF Grammars  https://hackage.haskell.org/package/BNFC-meta-0.6 (JonasDuregard)
*	auto_complete_ has quit (Ping timeout: 260 seconds)
<EvanR>	hololeap: i guess i have more intuition to hammer into my brain
<CodeWeaver>	Is that a formal term?  nomming? If not it should be. ;)
*	nicknight (~ubuntu@unaffiliated/nicknight) has joined
<nshepperd_>	Standard nommenclature
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	zariuq (~zar@176-114-240-18.rychlydrat.cz) has joined
*	CodeWeaver coughs and hacks again. ;)
*	xkapastel has quit (Quit: Connection closed for inactivity)
<crucify_me>	hololeap, yes \_ is just an x value from (x:xs), but written '\_' I always think it is more complex
<EvanR>	ok, if you imagine foldl "happening" starting on the right and going left, you have an a on the right, and the rest of the fold on the left
<hololeap>	EvanR: that
<hololeap>	EvanR: *that's the way i've always imagined it
<EvanR>	i can never tell if these pictures actually make sense, or its a trick caused by left-to-right writing
<crucify_me>	I heard not to think in terms of l -> r or r -> l. just that the cons is replaced by the function ie (+), and the empty list is replaced by 0 
<hololeap>	crucify_me: you could also write it (\x n -> n + 1). the underscore just emphasizes that the value is thrown away
<crucify_me>	helpful thanks
<EvanR>	'\_' isnt a unit of syntax that makes sense
<EvanR>	_ makes sense, \_ x -> x makes sense
*	doodlehaus (~doodlehau@71-89-72-8.dhcp.bycy.mi.charter.com) has joined
*	fsestini (~fsestini@93-32-68-243.ip32.fastwebnet.it) has joined
<crucify_me>	example in hutton book to write length. you saw it right? sorry yeah its \_ n in this case
<crucify_me>	EvanR, 
<byorgey>	crucify_me: when you replace cons with a function and empty list by a value, that is specifically foldr.
*	auto_complete_ has quit (Ping timeout: 240 seconds)
<byorgey>	you can't think of foldl that way.
<crucify_me>	byorgey, thanks, yeah this is for foldr
<crucify_me>	right value is correct, 0 is specific
*	theelous3 has quit (Read error: Connection reset by peer)
*	floryst (~floryst@cpe-45-37-110-36.nc.res.rr.com) has joined
<sternmull>	EvanR: about the argument order i think this comes from the final node when you draw them as tree, see https://en.wikibooks.org/wiki/Haskell/Lists_III#foldr
*	Philonous (~Philonous@unaffiliated/philonous) has joined
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	coot___________ has quit (Quit: coot___________)
<EvanR>	left and right are cultural, up and down are ambiguous, diagonal is both. the only fair way is to have the notation start near you and progress directly away in 3D
<EvanR>	for lists
<crucify_me>	I wipe with my left hand
*	unK_ has quit (Quit: KVIrc 4.9.2 Aria http://www.kvirc.net/)
<EvanR>	TMI
<hololeap>	programming meets general relativity
<crucify_me>	sorry ! :)
<CodeWeaver>	The faster your haskell program goes, the more compressed your output is?
<crucify_me>	couldn't resist, its a holiday day
<crucify_me>	here*
*	coot___________ (~coot@89-72-221-217.dynamic.chello.pl) has joined
*	conal has quit (Quit: Computer has gone to sleep.)
*	tomphp has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<EvanR>	[1,2,3,2,1] notation makes lists look symmetric when they arent
*	Xcr0n[ZA] (~manjaro-k@185.142.24.141) has joined
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	cloudhead (~cloudhead@ip5f5bd3aa.dynamic.kabel-deutschland.de) has joined
*	conal (~conal@209.58.139.26) has joined
*	akem (~huh@anon-42-213.vpn.ipredator.se) has left ("Leaving")
*	nect (~nect@pool-108-11-27-233.atclnj.fios.verizon.net) has joined
*	conal has quit (Client Quit)
<hololeap>	the most general way to think of it is foldr starts with the last value in the recursive data structure (the empty list [])
*	Pawka has quit ()
*	emilypi has quit (Ping timeout: 255 seconds)
<hololeap>	so it has to unfold the whole thing and start evaluating backwards once it reaches the end
<Welkin>	although foldr builds up the expression as it goes
*	Pamelloes (~jbrot@c-98-224-221-28.hsd1.mi.comcast.net) has joined
<hololeap>	Welkin: i thought it built up a chain of thunks?
<byorgey>	hololeap: but that doesn't explain why foldr can sometimes return a finite result when called on an infinite list.
<hololeap>	maybe i'm confused
<byorgey>	> foldr (||) False (False : False : False : True : repeat False)
<lambdabot>	 True
<byorgey>	hololeap: what you said is true IF the combining function is strict in its right-hand argument.
*	vlatkoB has quit (Remote host closed the connection)
*	kroogs (~kroogs@71-212-5-43.tukw.qwest.net) has joined
<sternmull>	look my link above, for my taste this is a good explanation. Take that from a guy that needed some time to get a feeling for foldl and foldr :)
<phaazon>	    Preprocessing library for basement-0.0.4..
<phaazon>	    /usr/bin/ld.gold: error: .stack-work/dist/x86_64-linux-tinfo6-nopie/Cabal-2.0.0.2/build/Basement/Terminal/Size_hsc_make.o: requires dynamic R_X86_64_32 reloc which may overflow at runtime; recompile with -fPIC
<EvanR>	hololeap: what you said sounds like foldl
<phaazon>	    /usr/bin/ld.gold: error: .stack-work/dist/x86_64-linux-tinfo6-nopie/Cabal-2.0.0.2/build/Basement/Terminal/Size_hsc_utils.o: requires dynamic R_X86_64_PC32 reloc against 'vprintf' which may overflow at runtime; recompile with -fPIC
<phaazon>	    collect2: error: ld returned 1 exit status
<phaazon>	I wanted to paste the gist of that
<phaazon>	oops sorry
<phaazon>	anyway, anyone what’s going on? :(
<phaazon>	+know
<phaazon>	(jesus wtf is wrong with me tonight :D)
*	Mikaela1 (~Mikaela@71.19.252.27) has joined
*	conal (~conal@209.58.139.26) has joined
*	Forlorn (~Forlorn@unaffiliated/forlorn) has joined
*	Pamelloes has quit (Ping timeout: 240 seconds)
<MarcelineVQ>	phaazon: arch?
<phaazon>	MarcelineVQ: yep
<MarcelineVQ>	what's wrong is you need to add ghc-build: nopie in your  ~/.stack/config.yaml  and install ncurses5-compat-libs from the AUR
<phaazon>	MarcelineVQ: what the… ?!
*	SpinTensor has quit (Quit: WeeChat 1.9.1)
*	osmos has quit (Ping timeout: 260 seconds)
*	Garmy has quit (Quit: Bye!)
*	nerteren has quit (Ping timeout: 240 seconds)
*	srk has quit (Ping timeout: 240 seconds)
<hololeap>	i see, so i was right, but the unfolding process can short-circuit if the function (f :: a -> b -> b) doesn't evaluate b for some a (due to laziness). however, if that isn't the case, it will keep unfolding until it reaches []
*	auto_complete_ has quit (Ping timeout: 260 seconds)
*	asjo has quit (Ping timeout: 248 seconds)
*	mattyw has quit (Ping timeout: 258 seconds)
*	shikhin has quit (Quit: Alas.)
*	shikhin (shikhin@heddw.ch) has joined
*	nerteren (~nerteren@jirijakes.eu) has joined
<hololeap>	`True || (foldr f v xs)` never evaluates the second part and it just returns True
*	peter81 has quit (Quit: Page closed)
*	ziocroc2 (~ziocroc@151.74.31.54) has joined
*	durandal1 has quit (Remote host closed the connection)
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	srk (sorki@fedora/sorki) has joined
*	xcmw (~textual@cpe-98-28-136-79.cinci.res.rr.com) has joined
*	durandal1 (~durandal1@2601:647:4900:1f83:bc0f:87d4:f796:e976) has joined
*	deepredsky (~rajesh@81.27.211.204) has joined
<EvanR>	hololeap: well it may be the case that all the second arguments will be needed to get the full answer
*	kroogs has quit (Ping timeout: 260 seconds)
<EvanR>	but you dont necessarily have to view the full answer on the consuming end
<EvanR>	in which case its lucky that the foldr algorithm doesnt require traversing the whole list regardless
*	Hoegerkartellen (~Hoegerkar@185.147.236.185) has joined
<phaazon>	MarcelineVQ: is there a blog post or anything stating why this is needed?
<phaazon>	that seems insane
<EvanR>	unlike foldl. to get anything back from foldl, the list spine must be traversed to the end (if it exists)
<sternmull>	phaazon: Create a ~/.stack/config.yaml with "ghc-build: nopie" in it and install ncurses5-compat-libs from AUR. This at least worked for me. And of course... it sucks. See https://bbs.archlinux.org/viewtopic.php?id=230091
*	ziocroc has quit (Ping timeout: 246 seconds)
*	lastjedi (~quassel@183.83.207.184) has joined
*	gxt has quit (Ping timeout: 264 seconds)
<MarcelineVQ>	phaazon: Probably not, there's a stack github issue or two that allude to the underlying cause but I don't reacall that the deal was. possibly something to do with not having a specific enough ghc package available on stack's end to combat the weird way arch is doing things these days
*	asjo (~asjo@virgil.koldfront.dk) has joined
<EvanR>	> foldl (\z _ -> z) 6 [1,2,3]
<lambdabot>	 6
<EvanR>	> foldl (\z _ -> z) 6 [1..]
<lambdabot>	 mueval-core: Time limit exceeded
<hololeap>	i see... because foldr calls `'f' first, but foldl calls `foldl' first... for foldl there's no chance to short-circuit 
<phaazon>	MarcelineVQ: what do you mean weird ways?
<EvanR>	foldl can short circuit, but only after it unwinds the whole list
<hololeap>	makes sense
<EvanR>	so its not a great shortcircuit
*	streblo (~streblo@c-73-15-23-128.hsd1.ca.comcast.net) has joined
<EvanR>	> foldl (\z _ -> z) 6 [undefined, undefined, undefined]
*	deepredsky has quit (Ping timeout: 268 seconds)
<cloudhead>	hey, can someone tell me what I need to do to improve on this: http://lpaste.net/360243? Wondering if I'm missing some instances perhaps..
<lambdabot>	 6
*	stevenxl has quit (Quit: Connection closed for inactivity)
*	eSVG has quit (Ping timeout: 258 seconds)
<EvanR>	> foldl (\z _ -> z) 6 (repeat undefined)
<lambdabot>	 mueval-core: Time limit exceeded
<CodeWeaver>	Interesting point.  YOu'd want to foldl' (strict version) on, say, a folded list using (+), but you'd want foldr for (|||) because of the short circuiting.  Neat.
*	hamishmack has quit (Quit: hamishmack)
*	desperek (~draco@unaffiliated/desperek) has joined
<phaazon>	MarcelineVQ: I’m very curious about what you mean, because I like arch very well
*	jb55 (~jb55@208.98.200.100) has joined
*	deepredsky (~rajesh@81.27.211.204) has joined
*	Soft has quit (Ping timeout: 260 seconds)
*	ashirase has quit (Ping timeout: 246 seconds)
*	Hoegerkartellen has quit (Ping timeout: 248 seconds)
<EvanR>	i was about to say that foldl' acts more like foldr
<MarcelineVQ>	well in the case of having to add nopie there's clearly some issue regarding how stack or ghc or arch's gcc are dealing with linking flags.  generally though by weird way, and I'm not sure if this is relevant to stack, I mean arch's making all their haskell package's dynamic so if you want to install pandoc or something similar you have to install 104 packages along with it
*	baweaver is now known as baweaver_away
*	Salome has quit (Quit: Leaving)
*	Hoegerkartellen (~Hoegerkar@2a03:8600:1001:1041::1010) has joined
<nshepperd>	arch ghc maintainer got it into his head to make haskell libraries dynamic by default
<EvanR>	so i checked the source... and its implemented with foldr :)
*	ashirase (~ashirase@modemcable064.17-177-173.mc.videotron.ca) has joined
*	ph88_ (~h88@095-097-065-054.static.chello.nl) has joined
*	justan0theruser has quit (Ping timeout: 240 seconds)
<crucify_me>	glad you're still on it. the fold stuff is tricky
<MarcelineVQ>	I avoid that issue by not installing anything haskell related with pacman, but I shouldn't have to avoid pacman, arch _is_ pacman
<nshepperd>	and I guess doesn't use haskell because there were a few rounds of total breakage :(
*	path[l] has quit (Quit: path[l])
<hololeap>	> foldl' (\z _ -> z) 6 (repeat undefined)
<lambdabot>	 mueval-core: Time limit exceeded
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Fri Nov 24 13:21:54 2017

**** BEGIN LOGGING AT Sat Nov 25 10:32:08 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<C_Everett_Koop>	MarcelineVQ just to make sure i'm not confused, --extra-lib-dirs should be equivalent to adding the location to DYLD_LIBRARY_PATH right?
<Profpatsch>	cocreature: I’m trying to make a library (dhall) accessible from JS.
*	vlatkoB has quit (Ping timeout: 248 seconds)
<cocreature>	Profpatsch: Text is not represented as a javascript string, the type for that is JSString
<Profpatsch>	cocreature: Oh right, I need to go through that.
<Profpatsch>	rn I’m just trying to pretty-print to the console.
*	vlatkoB (~IRC_clien@unaffiliated/vlatkob) has joined
<Profpatsch>	is there a pretty-printer in aeson?
<cocreature>	no but iirc there is an aeson-pretty package
<MarcelineVQ>	C_Everett_Koop: I'm not quite sure
*	Glasstache has quit (Quit: leaving)
*	Philonous has quit (Remote host closed the connection)
*	fragamus has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<MarcelineVQ>	C_Everett_Koop: but it doesn't look like it, based on   stack --extra-lib-dirs DIRS exec env
<crucify_me>	how does reverse actually switch the order of the elements beginning with [] , when its written recursively with concat like this? 
*	hphuoc25 has quit (Ping timeout: 248 seconds)
<crucify_me>	https://ptpb.pw/rIyC
<crucify_me>	that syntax confuses me
<crucify_me>	yesterday I was told there is no linear recursion in haskell which requires a 'stack' that goes from right to left
*	coot___________ has quit (Quit: coot___________)
<crucify_me>	but even thinking of it that way...
*	neoncontrails has quit (Remote host closed the connection)
*	heurist has quit (Ping timeout: 240 seconds)
*	tirej (~tirej@unaffiliated/tirej) has joined
*	cpup has quit (Quit: Breaking stuff)
*	tommd (~tommd@71-34-77-223.ptld.qwest.net) has joined
<crucify_me>	I don't see how it extracts out the [] to get this result :     (([] ++ [3]) ++ [2]) ++ [1]
*	hackage servant-cassava 0.10 - Servant CSV content-type for cassava  https://hackage.haskell.org/package/servant-cassava-0.10 (phadej)
<crucify_me>	from ' reverrse [1,2,3] '
*	heurist (~heurist@unaffiliated/heurist) has joined
<rightfold>	I don't quite understand the signature of parseJSON. It returns a *parser*, but takes the input itself? Shouldn't the parser already take the input?
<rightfold>	Does "parser" here actually mean Either?
*	cdg has quit (Remote host closed the connection)
<phadej>	rightfold: parser there is such because we have Value -> Parser a, but also Object -> Parser a, and Text -> Parser a etc.
*	cdg (~cdg@2600:1700:3120:40e0:4963:72d5:16c9:eb75) has joined
<rightfold>	What does "Parser" concretely do?
*	gugah (~gugah@181.229.86.80) has joined
<rightfold>	Looking at the definition it seems to be a CPS-based error reporting monad
<phadej>	rightfold: but yes, Parser in aeson is a cps-ised Result, which is kind-of Either
<rightfold>	Thanks. :3
<phadej>	(also there's attoparsec's Parser in the haddocks, btw)
*	tommd has quit (Ping timeout: 240 seconds)
<phadej>	the ones which are in: http://hackage.haskell.org/package/aeson-1.2.3.0/docs/Data-Aeson-Parser.html
*	codyw (~cody@24.130.87.147) has joined
<phadej>	and those are different :)
*	path[l] (~vsi@c-73-189-43-89.hsd1.ca.comcast.net) has joined
<masaeedu[m]>	When people talk about monads being a "monoid in the category of endofunctors", it seems to me that this implies we are only talking about one functor at a time, e.g. say []
*	Big_G has quit (Read error: Connection reset by peer)
<masaeedu[m]>	And that the morphisms in the monoidal category are natural transformations, which are functions `forall a. [a] -> [a]`
<rightfold>	masaeedu[m]: the full phrase is "a monad in X is just a monoid in the category of endofunctors of X, with product × replaced by composition of endofunctors and unit set by the identity endofunctor."
*	hackage genvalidity-hspec-aeson 0.1.0.1, genvalidity 0.4.0.2, validity-path 0.2.0.2, validity 0.4.0.2, genvalidity-path 0.2.0.2 (Norfair): https://qbin.io/rr8rya712
<nshepperd>	perhaps the aeson 'Parser' type should really be called 'Parsed'
<MarcelineVQ>	crucify_me: it's difficult to tell which part is confusing you from that description.  you understand that reverrse [1,2,3] is equivalent to (([] ++ [3]) ++ [2]) ++ [1]  but what part are you having trouble with specifically?
*	Arcaelyx (~Arcaelyx@2601:646:c200:27a1:6d:9cdb:395f:404b) has joined
<masaeedu[m]>	rightfold: Ok, that's useful. So the `X` in `of X` is just the category of types
*	hphuoc25 (~hphuoc25@132.147.71.104) has joined
<masaeedu[m]>	we're talking about functors which take types to other types
<masaeedu[m]>	like `[]` takes `String` to `[String]`
*	cdg has quit (Ping timeout: 250 seconds)
*	x77686d has quit (Quit: x77686d)
*	cloudhead has quit (Ping timeout: 248 seconds)
*	neoncontrails (~neoncontr@2600:1702:850:9ed0:5d40:90c0:b28a:afb8) has joined
*	TipsyMe has quit (Quit: TipsyMe)
<masaeedu[m]>	And which take corresponding functions on those types to lifted functions (via fmap)
<rightfold>	So monoidal operation is A × A -> A
<masaeedu[m]>	But if you have a category in which the objects are functors (of types to types), the morphisms in that category must be natural transformations
<masaeedu[m]>	no?
<rightfold>	Monad is join : A ∘ A ~> A (i.e. join :: A (A a) -> A a)
*	neoncontrails has quit (Remote host closed the connection)
<masaeedu[m]>	But this is what I don't understand
<rightfold>	join is a natural transformation from A ∘ A to A
<masaeedu[m]>	why are you allowed to change the `A a` into `a`
<masaeedu[m]>	in the nested type
<rightfold>	Note how any function "f : forall a. F a -> G a" is a natural transformation in Haskell
*	torgdor has quit (Ping timeout: 268 seconds)
<masaeedu[m]>	hmm
*	vydd has quit (Ping timeout: 252 seconds)
<masaeedu[m]>	right
<masaeedu[m]>	But both `F` and `G` must be the same thing
<masaeedu[m]>	in a monoid
<masaeedu[m]>	i.e. a category comprised of a single endofunctor objet
*	Neomex has quit (Remote host closed the connection)
<rightfold>	So with join, F is A ∘ A, and G is A
<masaeedu[m]>	`[]` and `[[]]` are distinct functors, so in a monoidal category you can't have them both
<rightfold>	And with monoid, mappend :: a × a -> a
<rightfold>	Hence "× replaced by ∘"
<masaeedu[m]>	But doesn't that make it a non-monoid?
*	hphuoc25 has quit (Ping timeout: 240 seconds)
*	cpup (~cpup@24-151-98-142.dhcp.nwtn.ct.charter.com) has joined
*	Neomex (~Neomex@net-37-117-41-170.cust.vodafonedsl.it) has joined
*	durandal1 has quit (Remote host closed the connection)
<crucify_me>	my trouble is that (++) would be identity R and L so how does that flip the order of elements ? https://ptpb.pw/rIyC
*	michalisko has quit (Quit: ZNC 1.6.3+deb1 - http://znc.in)
*	durandal1 (~durandal1@2601:647:4900:1f83:2802:3303:e92e:d4ff) has joined
<masaeedu[m]>	If your category consists of both the functors `A ∘ A` and `A`, that's two objects right there
<rightfold>	The category X may have multiple endofunctors
<rightfold>	For example, Hask has both `[]` and `[] ∘ []`.
<masaeedu[m]>	The category `X` is { Types, functions on types }
<masaeedu[m]>	X isn't the category of functors
<nshepperd>	aren't the elements of this monoid {I, A, A∘A, A∘A∘A, ...}
*	mohsen_1 (~Mohsen@5.121.36.137) has joined
<MarcelineVQ>	crucify_me: it's only identity if the order is unchanged.
<masaeedu[m]>	Then you talk about the category of endofunctors on X
<rightfold>	`Functor []` is an endofunctor on Hask; the one that takes types to list types
<MarcelineVQ>	> [1] ++ [2,3]
<lambdabot>	 [1,2,3]
<MarcelineVQ>	> [2,3] ++ [1]
<lambdabot>	 [2,3,1]
<rightfold>	`Functor ([] ∘ [])` is an endofunctor on Hask; the one that takes types to list of list types
<MarcelineVQ>	 reverrse (x:xs) = reverrse xs ++ [x]   assigns the head of the list to x, and the tail to xs.  ++ is being used on the tail and then the head.
<C_Everett_Koop>	MarcelineVQ command line extra-lib-dirs doesn't work either. only thing that works seems to be to set environment variables
<crucify_me>	MarcelineVQ, oh yeah, one sec thank you
<masaeedu[m]>	Yup, following you so far
<masaeedu[m]>	That's two different endofunctors
<C_Everett_Koop>	OTOH, seems to work as intended on my linux-based CI
<masaeedu[m]>	in a monoidal category of endofunctors, there's only room for one
<Welkin>	endoplasmic reticulums!
<rightfold>	masaeedu[m]: yeah, I'm pretty sure that's what was meant here
<rightfold>	the "of" should be "on"
*	Sampuka_ has quit (Ping timeout: 248 seconds)
*	Xcr0nZA (~manjaro-k@172.111.200.195) has left ("Konversation terminated!")
<MarcelineVQ>	C_Everett_Koop: if it works on linux for you and not mac it's a good idea to make a stack issue about it
<rightfold>	[] : Hask -> Hask; [] ∘ [] : Hask -> Hask; pure : Id ~> []; join : [] ∘ [] -> []
<nshepperd>	where is 'monoidal category' coming from
<masaeedu[m]>	"A monoid in the category of endofunctors"
<masaeedu[m]>	Think about all endofunctors that go `Hask -> Hask`
*	serendependy has quit (Ping timeout: 255 seconds)
<masaeedu[m]>	[], IO, etc. etc.
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
<crucify_me>	MarcelineVQ, yes I need to do things by hand. I try to visualize a "mechanism" working in the recursion, and it causes me much anguish ! thank you
<rightfold>	Two of those are [] and [] ∘ []
<Welkin>	where did the names "monad" and "monoid" come from? Why weren't they called "nonads" or "gonoids"?
<masaeedu[m]>	The category of all such endofunctors has the functors as objects, and natural transformations as morphisms
<nshepperd>	right, isn't a 'monoid in a category' a different thing? or are they related somehow
<masaeedu[m]>	rightfold: Yes
<masaeedu[m]>	nshepperd: Poorly educated on this subject, if there's a meaningful difference I'm unaware of it
<masaeedu[m]>	maybe that's what I'm getting wrong
<crucify_me>	monad is from mathematics I read somewhere
<crucify_me>	duh
<masaeedu[m]>	I was assuming a "monoid in a category" is just a category formed out of a subset of a category's objects and morphisms
<Welkin>	yes, I know they come from math
<Welkin>	I am asking about the origin of the names in math
<rightfold>	So the monoid has two operators
<crucify_me>	meaning, duh that I stated the obvious
<masaeedu[m]>	Specifically a unitary subset
*	tommd (~tommd@71-34-77-223.ptld.qwest.net) has joined
<masaeedu[m]>	rightfold: Right, it has two morphisms
<rightfold>	mu : [] × [] -> [] and eta : Id -> []
<masaeedu[m]>	That lead from and to itself the single object in the category
<crucify_me>	Welkin, I didn't mean for that to come out as demeaning. it was self-deprecating.
<masaeedu[m]>	Well that's the part I can't wrap my head around
<crucify_me>	since I don't know squat
<rightfold>	You can have multiple monoids
*	hackage html-tokenizer 0.6.2 - An "attoparsec"-based HTML tokenizer  https://hackage.haskell.org/package/html-tokenizer-0.6.2 (NikitaVolkov)
<rightfold>	One of those uses the object []
<masaeedu[m]>	in e.g. the original hask category, a monoid doesn't work like that
*	numee has quit (Ping timeout: 260 seconds)
<rightfold>	Objects in this category are endofunctors such as []
*	serendependy (~christoph@76.78.91.42) has joined
<masaeedu[m]>	You can't go from one type to another in the morphims
<rightfold>	No, but this isn't Hask, but htis is the endofucntors on Hask
<masaeedu[m]>	Right, so you have to go from the endofunctor to the same endofunctor
<masaeedu[m]>	And the morphisms need to be natural transformations
<rightfold>	No, you don't have to
<masaeedu[m]>	Which basically ends up restricting you to `[a] -> [a]`
<rightfold>	You define the monoid for some object
<crucify_me>	the problem with programming is one cannot visualize a program operating as a mechanic visualizes how a car works. how to unlearn that habit?
<rightfold>	We pick the object []
<rightfold>	From this follows that eta : [] x [] -> []
<rightfold>	s/eta/mu/
<rightfold>	A monoid is tripled (object, mu : object x object -> object, eta : id -> object)
<masaeedu[m]>	How can you have a morphism from `[] x []`, when it isn't an object in the category?
<Welkin>	huh, it looks like "monad" comes from western philosophy and predates category theory by hundreds of years
<rightfold>	It is an object in this category if you "replace x by o" :)
<masaeedu[m]>	The only object in a monoid category is a single endofunctor
<Welkin>	https://en.wikipedia.org/wiki/Monadology
<rightfold>	Which was mentioned in the original message
*	hphuoc25 (~hphuoc25@132.147.71.104) has joined
<Welkin>	or https://en.wikipedia.org/wiki/Monad_(philosophy) for a better explanation
<rightfold>	So, after replacing x with o, we get eta : [] o [] -> [], which is clearly a morphism between Hask endofunctors
*	kroogs (~kroogs@71-212-5-43.tukw.qwest.net) has joined
*	tommd has quit (Ping timeout: 255 seconds)
<Welkin>	the monad goes back to ancient greece D:
<masaeedu[m]>	Ok, just wanted to say I appreciate your patience here
*	path[l] has quit (Quit: path[l])
<masaeedu[m]>	A natural transformation is `forall a. F a -> G a`, for two functors `F` and `G`, correct?
<nshepperd>	masaeedu[m]: i don't think we're talking about a monoid category
<rightfold>	In Haskell, that's always a natural transformation, yes.
*	azahi has quit (Ping timeout: 248 seconds)
<masaeedu[m]>	Ok, cool
<rightfold>	In general, there are more restrictions, but due to parametricity this always goes in Haskell.
<masaeedu[m]>	So now let's substitute the symbols
<masaeedu[m]>	nshepperd: hmm, that would explain some things
<masaeedu[m]>	but it causes other mental problems
<masaeedu[m]>	So `F` and `G` are both `[]`
<rightfold>	Oh, this category isn't a monoid, no.
*	mohsen_1 has quit (Quit: WeeChat 1.9.1)
<rightfold>	It has multiple objects. Monoids don't.
<masaeedu[m]>	Right, ok
*	FreeBirdLjj has quit (Remote host closed the connection)
<rightfold>	Don't confuse "single-object categories ~ monoids" with monoidal categories. :)
*	Guest24088 has quit (Remote host closed the connection)
*	cjwelborn has quit (Remote host closed the connection)
<masaeedu[m]>	So this is what I've been wrestling with the whole time
<masaeedu[m]>	in that, like
<masaeedu[m]>	If you have a monoidal category with objects as functors and morphisms as natural transformations
<rightfold>	A single-object category is a category with one object, and all morphisms are endomorphisms on that object. It is a monoid where mempty = identity morphism, and mappend = morphism composition.
*	hackage wai-middleware-rollbar 0.5.0 - Middleware that communicates to Rollbar.  https://hackage.haskell.org/package/wai-middleware-rollbar-0.5.0 (joneshf)
<nshepperd>	or monoids in categories, which is a different thing entirely
<masaeedu[m]>	you can't accommodate a `[[]] -> []` natural transformation
<rightfold>	A monoidal category always has more than one object.
*	hphuoc25 has quit (Ping timeout: 248 seconds)
<rightfold>	It always has at least two; X and X^2
*	FreeBirdLjj (~freebirdl@114.86.108.88) has joined
<Unode>	I'm going around all this and getting stuck, I have "getReference rn refs = find (liftM2 (||) ((== rn) . refName) ((== rn) . refAlias)) refs" however refAlias returns a Maybe T.Text. How can I rewrite this? It's not possible to have the second part return a Bool (or is it?).
<rightfold>	Otherwise you couldn't define mu : X^2 -> X
<masaeedu[m]>	oh
<masaeedu[m]>	OH
<nshepperd>	'C is a monoidal category' means that in addition to having objects and morphism, you have a product on objects (C, C) -> C
<masaeedu[m]>	so a monoidal category is more like
<masaeedu[m]>	a different mapping to the set concept of monoids
<masaeedu[m]>	where the elements of the set actually start corresponding to category objects
<nshepperd>	and a unit object I : C
<masaeedu[m]>	rather than just category morphisms
<rightfold>	The set itself corresponds to an object
<nshepperd>	such that the product obeys the monoid laws
*	michalisko (~michalisk@ec2-34-253-116-118.eu-west-1.compute.amazonaws.com) has joined
*	azahi (~azahi@unaffiliated/azahi) has joined
<masaeedu[m]>	nshepperd: Right
*	chaosmasttter (~chaosmast@p54B47CA8.dip0.t-ipconnect.de) has joined
<masaeedu[m]>	Ok, so then obviously in that thing up there you have an identity functor
<masaeedu[m]>	sitting around as an actual object
*	felixonmars has quit (Ping timeout: 240 seconds)
<nshepperd>	eg. the category of endofunctors on Hask is a monoidal category, where the product is functor composition
<masaeedu[m]>	and you're free to have a natural transformation from it to your functor of interest for your monad
<masaeedu[m]>	's `return`
*	coot___________ (~coot@89-72-221-217.dynamic.chello.pl) has joined
<nshepperd>	(F × G) -> Compose F G
<masaeedu[m]>	right
<masaeedu[m]>	ok, this is much clearer
<masaeedu[m]>	I was just laboring under the wrong mapping
<masaeedu[m]>	Thanks very much
*	kroogs has quit (Ping timeout: 240 seconds)
<masaeedu[m]>	I was watching Bartosz's excellent video series, and he talks about one mapping, where a monoidal set corresponds to a single element category, and the id morphism is the unit element, morphism composition is the product, etc.
<masaeedu[m]>	and then I tried to misapply it all here
*	knupfer has quit (Ping timeout: 250 seconds)
*	felixonmars (~felixonma@archlinux/developer/felixonmars) has joined
<nshepperd>	So I guess 'object E is a monoid in a category C' means that C is monoidal, and that there are morphisms 'E × E -> E' and 'I -> E' such that... how does one write the monoid laws in this situation?
<rightfold>	My favorite newtype Endo c a = Endo (c a a); instance Category c => Monoid (Endo c a) where { mempty = Endo id; mappend (Endo a) (Endo b) = Endo (a . b) } :D
*	fragamus (~textual@99-161-168-122.lightspeed.rcklca.sbcglobal.net) has joined
<rightfold>	nshepperd: same as in algebra but with "up to isomorphism"
*	Youmu has quit (Quit: Connection closed for inactivity)
<masaeedu[m]>	nshepperd: Well the right and left composition of the identity functor with your functor of interest will leave both the types and the functions between them alone
<masaeedu[m]>	so that's two down
<nshepperd>	I've only ever seen the laws in algebra writing in pointful form
*	dtornabene (~daniel@68-116-133-238.dhcp.ftwo.tx.charter.com) has joined
*	Pacra has quit (Quit: This computer has gone to sleep)
<nshepperd>	but I suppose you mean, write them in pointfree notation then interpret . as morphism composition
<rightfold>	... such that × is associative up to isomorphism and I is the left and right identity of × up to isomorphism.
<nshepperd>	rightfold: those are the laws of a monoidal category
*	path[l] (~vsi@c-73-189-43-89.hsd1.ca.comcast.net) has joined
<nshepperd>	no, i'm talking about the laws for the two natural transformations. you called them eta and mu
<rightfold>	Oh.
<rightfold>	Eh, × should be mu, and I should be eta
<nshepperd>	I have a morphism called mu :: E × E -> E
<nshepperd>	and one called eta :: I -> E
<rightfold>	Yes, mu must be associative. So mu ([], ([], [])) = mu (([], []), [])
*	Swizec (~swizec@70.134.65.208) has joined
<nshepperd>	E is an object
*	hphuoc25 (~hphuoc25@132.147.71.104) has joined
<nshepperd>	(this is all happening in the monoidal category C, whose product is ×)
<masaeedu[m]>	nshepperd: I guess it depends on what functor composition means
<rightfold>	And mu (I, a) = mu (a, I) = a
*	kroogs (~kroogs@71-212-5-43.tukw.qwest.net) has joined
<nshepperd>	rightfold: no
<rightfold>	:(
<nshepperd>	I and E are abstract objects. you can't look inside them or talk about elements
<nshepperd>	you're giving me the laws for a monoidal category again :p
<rightfold>	Not doing that
*	james1 (~fluidsDev@c-73-169-245-192.hsd1.wa.comcast.net) has joined
*	humanoyd (~humanoyd@p200300DCB3DE81004A5D60FFFE655171.dip0.t-ipconnect.de) has joined
*	james1 has quit (Client Quit)
*	james1 (~fluidsDev@c-73-169-245-192.hsd1.wa.comcast.net) has joined
<masaeedu[m]>	But you can have a functor on this category itself
<masaeedu[m]>	Specifically a functor that takes two elements and maps to some other thing in the same category
<masaeedu[m]>	It's like a bifunctor on a category of endofunctors on Hask (for the original monad use case)
*	fr33domlover has quit (Quit: fr33domlover)
*	SaleemPheku (~Ustad@unaffiliated/saleempheku) has joined
*	hphuoc25 has quit (Ping timeout: 268 seconds)
*	kroogs has quit (Ping timeout: 260 seconds)
*	x77686d (~whm@c-107-2-11-38.hsd1.az.comcast.net) has joined
<masaeedu[m]>	And the bifunctor needs to be defined so it carries the pair `I, O` or `O, I` to O (where `I` is the identity object in the category and `O` is any other object in the category)
*	hariel (~alhariel@177.131.164.228) has joined
*	smithbower (~smithbowe@d104-205-53-200.abhsia.telus.net) has joined
*	mohsen_1 (~Mohsen@37.59.248.21) has joined
<nshepperd>	hm. mu . eta × id_E = snd
<nshepperd>	and mu . (id_E × eta) = fst
*	alhariel has quit (Ping timeout: 255 seconds)
<nshepperd>	express something like the usual requirement that (x `mu` 1) = x and (1 `mu` x) = x
<crucify_me>	Welkin, hi , you copy that? 
<Welkin>	crucify_me: yes
<crucify_me>	thanks
<nshepperd>	assumes there are special morphisms fst : A × I -> A and snd : I × A -> A
*	Swizec has quit (Quit: Computer has gone to sleep.)
*	ph88 (~ph88@87.214.234.33) has joined
<nshepperd>	mu . (id_E × mu) = mu . (mu × id_E) . assoc
<nshepperd>	for the associativity of mu
<ph88>	if typeclass functions are not used will ghc optimize away everything related to that typeclass?
*	hphuoc25 (~hphuoc25@132.147.71.104) has joined
<masaeedu[m]>	nshepperd: Not quite getting what id_E × mu means
<masaeedu[m]>	isn't `id_E` an object, and `mu` a natural transformation?
*	Wuzzy has quit (Quit: Wuzzy)
*	mohsen_1 has quit (Ping timeout: 260 seconds)
*	Pamelloes (~jbrot@c-98-224-221-28.hsd1.mi.comcast.net) has joined
*	slack1256 has quit (Remote host closed the connection)
<nshepperd>	I'm trying to do this in a general monoidal category 
<masaeedu[m]>	Right
<nshepperd>	so id_E is a morphism (the identity on E) and mu is a morphism
<nshepperd>	id_E : E -> E
<nshepperd>	mu : E × E -> E
<qqwy>	ph88: I believe it does
<rightfold>	What does ghc-nopie mean?
<qqwy>	ph88 it will also inline all functions of a typeclass if they are only used by one instance.
<qqwy>	(i.e. skip the typeclass-checing)
<nshepperd>	id_E × mu is supposed to be a morphism (E × (E × E)) -> E × E
<qqwy>	checking*
<qqwy>	instance-checking*
<qqwy>	there we go :-)
<masaeedu[m]>	But even in a general monoidal category, wouldn't identity still be an object?
<nshepperd>	composing the morphisms "next to each other". like (***) in haskell
<masaeedu[m]>	Unless we're now talking about monoidal categories as single object categories
<masaeedu[m]>	With the operators as morphisms
*	torgdor (~weechat@cpe-104-32-77-28.socal.res.rr.com) has joined
<nshepperd>	masaeedu[m]: I"m talking about the identity morphism
<nshepperd>	you know, the identity of morphism composition
<nshepperd>	there's one for every object
<masaeedu[m]>	yeah
<masaeedu[m]>	right
*	hphuoc25 has quit (Ping timeout: 250 seconds)
*	Pamelloes has quit (Ping timeout: 240 seconds)
<nshepperd>	no, i'm not talking about single object categories
<masaeedu[m]>	Ok, so you're kind of abstracting over "for any object `E` in the category"
<masaeedu[m]>	dadada
<dminuoso>	Terminology question: `f a`, would you ever call "a" an argument? Or do you stricly say "f is applied to value `a` (just a value, not an argument) ?
*	tommd (~tommd@71-34-77-223.ptld.qwest.net) has joined
<dminuoso>	Having real problems with the word "argument" for reasons I cant quite articulate yet.
*	azahi has quit (Ping timeout: 240 seconds)
<nshepperd>	for any object E, in the category, it forms a monoid if there are morphisms eta and mu such that blah blah blah
*	codyw has quit (Ping timeout: 240 seconds)
<koz_>	dminuoso: Is 'f' a function or a higher-kinded type?
<MarcelineVQ>	dminuoso: sure peole use argument or parameter to refer to a when it's convenient to
<ph88>	good to know qqwy 
<masaeedu[m]>	ok, cool
<dminuoso>	koz_, a function
<masaeedu[m]>	i'm beginning to understand
<masaeedu[m]>	so eta doesn't necessarily have to be id
<ph88>	does ghc do cross module optimizations ?
<dminuoso>	koz_, but I'd be happy to explore this on higher kinded types as well.
<rightfold>	f wouldn't necessarily be a higher-kinded type
<rightfold>	it'd be a type constructor
<rightfold>	you could pass it as an argument to some higher-kinded types
<nshepperd>	right
*	azahi (~azahi@unaffiliated/azahi) has joined
<ph88>	if i put some library in my cabal file does the entire library end up in the binary or just the bits i'm using ?
<koz_>	The reason I ask is because I have no problem with referring to a 'type argument' in such a case.
<rightfold>	for example: Cofree f
<dminuoso>	The reason I have problems with the word "argument" is that it feels so imperative.
<rightfold>	Why would it?
<koz_>	dminuoso: Then use 'parameter'?
<rightfold>	You have a function. You give it an argument. It returns a result.
<MarcelineVQ>	because imperative programming is always causing arguments
<nshepperd>	morphisms eta : I -> E and mu : E × E -> E. where I is the identity of the category product
<dminuoso>	koz_, thats wrong in every way.
*	cdg (~cdg@2600:1700:3120:40e0:4963:72d5:16c9:eb75) has joined
<masaeedu[m]>	Ok, that's new to me. I guess you could check your formulation using the degenerate case
<dminuoso>	koz_, parameter is what you call the variable the argument gets substituted for in the abstraction
<masaeedu[m]>	where in a single element category your eta should become id
*	xormor_ (~xormor@unaffiliated/xormor) has joined
<koz_>	dminuoso: Yeah, point taken.
<rightfold>	It really doesn't matter.
<nshepperd>	masaeedu[m]: I guess
<nshepperd>	 a monoid in a single object category doesn't sound like much fun
*	tommd has quit (Ping timeout: 250 seconds)
<masaeedu[m]>	I mean most of the monoids I'd seen up to now were just that
<nshepperd>	well. a single object category *is* a monoid
<nshepperd>	but it's a monoid in the category of sets
<nshepperd>	which is very much not a single object category
*	hackage c2hs 0.28.3 - C->Haskell FFI tool that gives some cross-language type safety  https://hackage.haskell.org/package/c2hs-0.28.3 (deech)
*	jsmock (~Thunderbi@xdsl-89-1-159-62.netcologne.de) has joined
<masaeedu[m]>	hmm
*	xormor has quit (Ping timeout: 258 seconds)
*	trosa-work (~user@cnf78-9-78-196-66-15.fbx.proxad.net) has joined
<masaeedu[m]>	So sets are the monoidal category here?
*	ivans_ has quit (Read error: Connection reset by peer)
<rightfold>	Aw man, I so want GHC 8.2 so I can use deriving strategies everywhere.
*	ivans (~noob@36.37.135.86) has joined
<nshepperd>	a single object category satisfies the 'normal' algebra definition of a monoid: a set of elements S (the morphisms) and a function (·) : S × S -> S that is associative and has in identity in S
<masaeedu[m]>	that the single object category is a monoid on?
<nshepperd>	masaeedu[m]: yeah
<nshepperd>	see the key words in the algebra definition: a *set* S, and a *function* (·)
<nshepperd>	sets and functions are the objects and morphisms of the category of sets, respectively
<masaeedu[m]>	Right, so the hom set is the set
*	darjeeling_ has quit (Ping timeout: 248 seconds)
<masaeedu[m]>	and composition is the function
<masaeedu[m]>	and the id morphism is the unit element in the hom set
<nshepperd>	yep
*	oisdk has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<masaeedu[m]>	ok, cool
<masaeedu[m]>	thanks
<masaeedu[m]>	it's slippery, this stuff
*	osa1 has quit (Ping timeout: 240 seconds)
*	DoubleJ has quit (Ping timeout: 255 seconds)
*	`Guest00000 (~user@37.113.171.71) has joined
*	Swizec (~swizec@70.134.65.208) has joined
<ertes>	dminuoso: let me make you uncomfortable:  a function is an object that you can call, giving it an argument, and it returns a result
*	jsmock has quit (Quit: jsmock)
<Welkin>	a function is a subroutine that you jump to in the execution of your code, and may or may not have parameters that you pushed onto your stack for it to use in calculating a result
<rightfold>	A function is an object that has exactly one method.
<ertes>	i think my description didn't actually break abstraction boundaries =)
<ertes>	it's just uncomfortable wording
*	auto_complete_ has quit (Ping timeout: 240 seconds)
<masaeedu[m]>	A function is a coroutine that will call you back after the first date
<rightfold>	Welkin: Wait till you see the optimization called "registers" that have been all the rage since the eighties. I believe they're a sort of high-speed global mutable variables.
<Welkin>	rightfold: registers are older than call stacks
<ertes>	… and then ever again
<ertes>	*never
*	solv3d (~solV3d@p4FC0F1B9.dip0.t-ipconnect.de) has joined
*	netheranthem has quit (Ping timeout: 240 seconds)
<ertes>	if you want your function to call you back, you have to keep calling it
<dminuoso>	ertes, so an "argument" is just the role of an expression in beta reduction (if this makes any sense) ?
<ertes>	dminuoso: i'm just joking
*	mohsen_1 (~Mohsen@89.45.50.186) has joined
<ertes>	a function is a value of type (a -> b) for some 'a' and 'b'
<ertes>	but i don't really understand your issue with "argument"
*	bennofs (~benno@2a00:c1a0:4300:dd00:ce3d:82ff:fec6:6d58) has joined
*	martino (~martino@fer01-2-78-241-27-225.fbx.proxad.net) has joined
*	sepp2k1 (~Sepp2k@x4dbbba6b.dyn.telefonica.de) has joined
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	codswore (uid262810@gateway/web/irccloud.com/x-mhjwcjvjmmjiifjz) has joined
<dminuoso>	ertes, I think it's okay. May have found the clarity I was looking for in lambda calculus actually.
*	rain1 (~rain1@unaffiliated/rain1) has left ("Leaving")
*	hphuoc25 (~hphuoc25@132.147.71.104) has joined
*	trosa-work has quit (Remote host closed the connection)
*	DoubleJ (~DoubleJ@unaffiliated/doublej) has joined
*	sepp2k has quit (Ping timeout: 250 seconds)
*	smckay has quit (Quit: smckay)
*	auto_complete_ has quit (Ping timeout: 258 seconds)
*	TipsyMe (~TipsyMe@50-50-232-91.waus.wi.frontiernet.net) has joined
*	fr33domlover (~fr33domlo@fsf/member/fr33domlover) has joined
*	oisdk (~textual@51-171-255-121-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined
*	Jesin has quit (Quit: Leaving)
*	Neomex has quit (Quit: Leaving)
*	kroogs (~kroogs@71-212-5-43.tukw.qwest.net) has joined
*	hphuoc25 has quit (Ping timeout: 268 seconds)
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	azahi has quit (Quit: ded)
*	kroogs has quit (Ping timeout: 248 seconds)
*	hphuoc25 (~hphuoc25@132.147.71.104) has joined
*	am2904 (~textual@cpc93326-hers8-2-0-cust184.6-3.cable.virginm.net) has joined
*	Disconnected ()
**** ENDING LOGGING AT Sat Nov 25 12:25:31 2017

**** BEGIN LOGGING AT Sat Nov 25 12:28:30 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	inhortte has quit (Quit: Leaving.)
*	inhortte (~polaris@212.21.249.185.static.user.ono.com) has joined
*	oisdk has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	animated (~mike@S0106001a8c588b03.vc.shawcable.net) has joined
*	mohsen_1 has quit (Quit: WeeChat 1.9.1)
*	olligobber (~olligobbe@unaffiliated/olligobber) has joined
*	auto_complete_ has quit (Ping timeout: 248 seconds)
*	mekeor (~mekeor@ipservice-092-211-198-093.092.211.pools.vodafone-ip.de) has joined
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	nimbleark (~nimbleark@unaffiliated/nimbleark) has joined
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	Swizec has quit (Quit: Computer has gone to sleep.)
*	auto_complete_ has quit (Ping timeout: 240 seconds)
*	yqt (~yqt@81.88.230.28) has joined
*	Welkin has quit (Quit: leaving)
*	mohsen_ has quit (Ping timeout: 240 seconds)
*	mekeor has quit (Ping timeout: 255 seconds)
*	animated has quit (Quit: animated)
*	gugah has quit (Quit: Leaving)
*	james1 has quit (Quit: WeeChat 1.9.1)
*	erikd_ (~erikd@hendrix.mega-nerd.net) has joined
*	dqd has quit (Ping timeout: 264 seconds)
*	mohsen_ (~mohsen@89.45.50.186) has joined
*	dqd (id@bruta.dqd.cz) has joined
*	dqd has quit (Changing host)
*	dqd (id@wikipedia/dqd) has joined
*	codesoup has quit (Remote host closed the connection)
*	mohsen_ has quit (Client Quit)
*	erikd has quit (Ping timeout: 258 seconds)
*	hphuoc25 (~hphuoc25@132.147.71.104) has joined
*	quobo (uid178934@gateway/web/irccloud.com/x-hggfvleyopgpdexx) has joined
<heath>	http://mishadoff.com/blog/clojure-design-patterns/
*	XorSwap has quit (Ping timeout: 258 seconds)
*	prophile (~alynn@oftn/oswg-member/prophile) has joined
*	mekeor (~mekeor@ipservice-092-211-198-093.092.211.pools.vodafone-ip.de) has joined
*	hphuoc25 has quit (Ping timeout: 250 seconds)
*	zachk (~zachk@unaffiliated/zachk) has joined
*	grawity1 has quit ()
*	noobineer1 has quit (Ping timeout: 240 seconds)
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	codesoup (~codesoup@CPE00fc8de45853-CM00fc8de45850.cpe.net.cable.rogers.com) has joined
*	humanoyd has quit (Quit: WeeChat 1.9.1)
*	aarvar has quit (Ping timeout: 240 seconds)
*	Vicfred (~I||I||II|@189.217.1.75) has joined
*	kroogs (~kroogs@71-212-5-43.tukw.qwest.net) has joined
*	jfredett_ (~quassel@2601:189:c600:c2e:6dd1:e543:e609:2bad) has joined
*	Deide (Deide@94.5.85.133) has joined
*	kir (~kir@185.103.96.139) has joined
*	mivael__ (~mivael@80.70.77.145) has joined
*	dogbitsman (~user@c-73-8-74-230.hsd1.il.comcast.net) has joined
<dogbitsman>	:t (1+1)
<lambdabot>	Num a => a
*	torgdor has quit (Quit: WeeChat 1.9.1)
*	jfredett has quit (Ping timeout: 252 seconds)
*	auto_complete_ has quit (Ping timeout: 248 seconds)
*	knupfer has quit (Ping timeout: 255 seconds)
<dogbitsman>	:t fmap fmap fmap
<lambdabot>	(Functor f2, Functor f1) => (a -> b) -> f1 (f2 a) -> f1 (f2 b)
<crucify_me>	foldr and foldl are convoluted. I guess they are used often ?
*	XorSwap (~XorSwap@wnpgmb016qw-ds01-103-253.dynamic.bellmts.net) has joined
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
<johnw>	crucify_me: convoluted?
<johnw>	they are used extremely often
<johnw>	they represent an induction principle for lists: a value for nil, and a function called for every cons, recursively, this might explain the types better
*	kroogs has quit (Ping timeout: 260 seconds)
<crucify_me>	johnw induction principle ?
<crucify_me>	foldl is making my head spin. I understand foldr well enough
<johnw>	foldr is more fundamental, in the sense that foldl can be implemented in terms of it
*	aarvar (~foewfoiew@50.34.105.170) has joined
<crucify_me>	johnw thanks one moment I'd like to pastebin something if you have time
*	hackage concurrent-output 1.10.1 - Ungarble output from several threads or commands  https://hackage.haskell.org/package/concurrent-output-1.10.1 (JoeyHess)
<johnw>	by "induction principle" I mean a recursion strategy in this case: a function whose job it is to produce a result by visiting all its members
<johnw>	sure, paste away
*	auto_complete_ has quit (Ping timeout: 240 seconds)
*	mekeor has quit (Ping timeout: 248 seconds)
*	raichoo (~raichoo@dslb-178-001-146-234.178.001.pools.vodafone-ip.de) has joined
*	darjeeling_ (~darjeelin@D-173-250-188-78.dhcp4.washington.edu) has joined
*	MP2E (~MP2E@ip68-224-146-82.lv.lv.cox.net) has joined
*	jfredett (~quassel@2601:189:c600:c2e:6dd1:e543:e609:2bad) has joined
*	slassh (~slassh@94.10.235.192) has joined
<crucify_me>	johnw this is psuedo code for foldr foldl, that shows their generalized behavior, from textbook: 
<crucify_me>	https://ptpb.pw/Qok0
*	slassh has quit (Read error: Connection reset by peer)
*	vishnix (~vishwas@97-126-77-97.tukw.qwest.net) has joined
*	path[l] has quit (Quit: path[l])
<crucify_me>	can you read that ?  
*	Xion__ has quit (Ping timeout: 240 seconds)
<johnw>	horrible notation taken out of context, but yes
<johnw>	it shows how they differ in association
<johnw>	i'd find a better explanation ;)
*	jfredett_ has quit (Ping timeout: 252 seconds)
<crucify_me>	well, its a (good) textbook, though I studied these in another book and had trouble then with it
<crucify_me>	as well
<johnw>	@src foldl
<lambdabot>	foldl f z []     = z
<lambdabot>	foldl f z (x:xs) = foldl f (f z x) xs
<johnw>	@src foldr
<lambdabot>	foldr f z []     = z
<lambdabot>	foldr f z (x:xs) = f x (foldr f z xs)
<johnw>	if you read carefully, you can see the identity between those, and your textbook
<johnw>	the call to 'f' is being hidden in the # symbol
<johnw>	and your textbook's 'f' is the name of the foldl or foldr
<crucify_me>	thanks yeah I have the actual definitions. I'm confused by it all
<johnw>	keep banging your head on it, the confusion should evaporate soon
<johnw>	the clearest definition I know is this:
*	am2904 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
<rightfold>	foldl is foreach with accumulator. foldr f z replaces (:) by f and [] by z.
*	sepp2k1 has quit (Ping timeout: 248 seconds)
<crucify_me>	foldr maps the empty set to value, foldl maps the accumulator and the empty to value, right ?
<johnw>	foldr f z replaces nil with z, and cons with a call to f
<crucify_me>	empty *set
<crucify_me>	sorry empty list
<johnw>	so that [a, b, c] becomes f a (f b (f c z))
<johnw>	thus, foldr (:) nil xs = xs
*	sepp2k (~Sepp2k@x4dbad33e.dyn.telefonica.de) has joined
*	dogbitsman has quit (Quit: ERC (IRC client for Emacs 25.2.1))
*	Sgeo has quit (Read error: Connection reset by peer)
<crucify_me>	ok thanks, foldl is the issue now.
*	jfredett_ (~quassel@2601:189:c600:c2e:6dd1:e543:e609:2bad) has joined
*	Xion__ (~xion@84-72-219-169.dial-in.hispeed.ch) has joined
*	ma27 (~ma27@p200300CFB3C1A001CA5B76FFFEE20190.dip0.t-ipconnect.de) has joined
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	soirbleu (bcc14fd7@gateway/web/freenode/ip.188.193.79.215) has joined
*	machinedgod has quit (Ping timeout: 248 seconds)
<johnw>	[a, b, c] becomes f (f (f z a) b) c
*	jfredett_ has quit (Read error: Connection reset by peer)
*	Hexagenic has quit (Read error: Connection reset by peer)
*	jfredett has quit (Ping timeout: 258 seconds)
<johnw>	note that in both cases, the 'a' value is "visited" first
*	Welkin (~Welkin@107.147.90.29) has joined
*	jfredett (~quassel@2601:189:c600:c2e:6dd1:e543:e609:2bad) has joined
*	rudol has quit (Ping timeout: 260 seconds)
*	codyw (~cody@24.130.87.147) has joined
*	auto_complete_ has quit (Ping timeout: 260 seconds)
*	Xion__ has quit (Ping timeout: 268 seconds)
<crucify_me>	johnw working thanks
*	Sgeo (~Sgeo@ool-18b98dd9.dyn.optonline.net) has joined
*	wolfcub (~alhariel@177.131.164.72) has joined
*	jfredett has quit (Ping timeout: 258 seconds)
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	hariel has quit (Ping timeout: 248 seconds)
*	hackage rob 0.0.1 - Simple projects generator  https://hackage.haskell.org/package/rob-0.0.1 (gianlucaguarini)
*	wolfcub has quit (Max SendQ exceeded)
*	augur (~augur@192.195.83.130) has joined
*	jfredett_ (~quassel@2601:189:c600:c2e:7844:9151:a798:4a29) has joined
<crucify_me>	also thanks rightfold 
*	wolfcub (~alhariel@177.131.164.72) has joined
*	ayylmaoo[m] (ayylmaooma@gateway/shell/matrix.org/x-tpmclkcctgiflrja) has joined
*	inhortte has quit (Remote host closed the connection)
*	sssilver_ (~sssilver@2605:6000:ead6:6700:dd8b:1c43:f81d:a6c8) has joined
*	vydd (~vydd@178-223-56-183.dynamic.isp.telekom.rs) has joined
*	vydd has quit (Changing host)
*	vydd (~vydd@unaffiliated/vydd) has joined
*	veik (~Ralz@186-106-138-183.baf.movistar.cl) has joined
*	machinedgod (~machinedg@198-84-249-5.cpe.teksavvy.com) has joined
*	auto_complete_ has quit (Ping timeout: 240 seconds)
*	Destol (~Destol@dsl-173-206-103-49.tor.primus.ca) has joined
*	coot___________ has quit (Quit: coot___________)
*	hiratara has quit (Ping timeout: 258 seconds)
*	machinedgod has quit (Ping timeout: 248 seconds)
*	Pamelloes (~jbrot@c-98-224-221-28.hsd1.mi.comcast.net) has joined
*	maddybutt (~maddy@72.18.233.74) has joined
*	wennefer0 (~wennefer0@cpe-75-181-13-213.carolina.res.rr.com) has joined
*	wennefer0 has quit (Changing host)
*	wennefer0 (~wennefer0@unaffiliated/wennefer0) has joined
*	hiratara (~hiratara@240f:7:4708:1:dceb:a5af:28be:c21a) has joined
*	tankf33der[m] (tankf33der@gateway/shell/matrix.org/x-vyercbzeokpuiouf) has joined
*	cdg has quit (Remote host closed the connection)
*	cdg (~cdg@2600:1700:3120:40e0:4963:72d5:16c9:eb75) has joined
*	Welkin (~Welkin@107.147.90.29) has left
<ph88>	guys, i've read this SO answer https://stackoverflow.com/a/32476604/1833322 but still i'm like o_O that sequence gives a cartesian product of list of lists  .. can someone comment ?
*	Pamelloes has quit (Ping timeout: 248 seconds)
*	localhorse_ (~me@unaffiliated/boscop) has joined
<MarcelineVQ>	what are you expecting to see vs what you are seeing?
*	tankf33der[m] (tankf33der@gateway/shell/matrix.org/x-vyercbzeokpuiouf) has left
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	erisco (~erisco@198-84-159-71.cpe.teksavvy.com) has joined
*	localhorse__ (~me@unaffiliated/boscop) has joined
<MarcelineVQ>	Are you after an explanation of sequence on lists that's differenant the the one given there?
*	wennefer0 has quit (Ping timeout: 255 seconds)
*	localhorse has quit (Ping timeout: 252 seconds)
<ph88>	it feels like sequence is like a double list comprehension or something
*	alveric1 (~LordAlver@i577A6146.versanet.de) has joined
*	sternmull has quit (Ping timeout: 268 seconds)
<ph88>	i was trying to implement it as list comprehension before and i got stuck
*	path[l] (~vsi@c-73-189-43-89.hsd1.ca.comcast.net) has joined
*	xormor_ is now known as xormor
*	localhorse_ has quit (Ping timeout: 240 seconds)
<ph88>	well maybe i can just remember that sequence just does that and not think about it too hard
*	localhorse_ (~me@ip5f58a45f.dynamic.kabel-deutschland.de) has joined
*	localhorse_ has quit (Changing host)
*	localhorse_ (~me@unaffiliated/boscop) has joined
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<ph88>	but then i don't really understand it's use (also in relation to other monads)
*	takuan (~takuan@d8d86b861.access.telenet.be) has joined
*	durandal_ (~durandal1@2601:647:4900:1f83:9cc8:e42f:92ff:b14b) has joined
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sat Nov 25 14:04:46 2017

**** BEGIN LOGGING AT Sun Nov 26 14:38:12 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	Thra11_ has quit (Quit: IRC for Sailfish 0.9)
<crucify_me>	so I guess foldr and foldl are not rocket science. If I just study scanr and scanl with various functions, the behavior is fairly straightforward.
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	x77686d (~whm@c-107-2-11-38.hsd1.az.comcast.net) has joined
<crucify_me>	if anyone could suggest simple lambda functions to use, aside from (\_ n -> n + 1) , that are interesting and instructive, I'd really appreciate it.
<crucify_me>	that would make sense with , say, foldl
<slack1256>	church encondings!
*	bsmt has quit (Ping timeout: 268 seconds)
<crucify_me>	please elaborate friend!
<slack1256>	oh with a foldl/foldr. There are more straighforwards uses for those lambdas
<slack1256>	One is replicate the behaviour of other functions of list with a correct lambda
<Tuplanolla>	> foldr (\ x f -> shows x . f) id [1 .. 4] "" -- Here's a good one, crucify_me.
<lambdabot>	 "1234"
<crucify_me>	cool !
<slack1256>	> foldr (\a acc -> if (a <= 3) then a : acc else acc) [] [1..10]
*	chaosmasttter has quit (Ping timeout: 250 seconds)
<lambdabot>	 [1,2,3]
*	DeATh`RoW (~jsa@vps.matteocicuttin.it) has joined
<Cale>	> foldr (\x xs s -> s : xs (x + s)) (\s -> [s]) [1,2,3,4,5] 0
<lambdabot>	 [0,1,3,6,10,15]
*	bsmt (~bsmt@host-174-45-104-119.bzm-mt.client.bresnan.net) has joined
<crucify_me>	id Tuplanolla ? man I still don't really get id. I learned a bunch of stuff with flip id, const id, but its still a mystery.
<jle`>	id is p simple, id x = x
<Cale>	There's really not much to get about id
<slack1256>	Cale: I have always found confusing those foldr with 3 parameters (and the trick to write foldl from foldr). But this helps!
<crucify_me>	but in category theory its crucial with that little jughandle that turns the function 'round
<Cale>	huh?
<jle`>	> foldr (.) id [(+3), (*8), (^2)] 4
<lambdabot>	 131
<monochrom>	You don't need category theory for this.
<Cale>	Well, the identity arrows are an important part of the definition of a category, sure.
<crucify_me>	written on a blackboard, id is like a jughandle (east coast word for freeway turnoff)
<jle`>	foldr (+) 0 [1,2,3] is 1+2+3+0, so foldr (.) id [(+3), (*8), (^2)] is ((+3) . (*8) . (^2) . id)
<jle`>	here id is just used as like a function that you can compose that doesn't make a difference
<monochrom>	id doesn't turn around anything either.
<crucify_me>	excellent thanks so much for these examples 
<jle`>	yes id does the opposite of turning something around
<jle`>	it literally does nothing
<jle`>	in composition
<slack1256>	monochrom: he is refering to the usual way id is written in diagrams, as an arrow to goes to itself
<crucify_me>	yup^
<monochrom>	OK, but category theory is completely unenlightening for this.
<monochrom>	I have a feeling that I'm watching a 3rd-rate sci-fi movie in which they make up jargons like "quantum SSL Internex tunnel"
<jle`>	yes, it's kind of like telling a 1st grader that they need to learn group theory to understand 3 + 0
<crucify_me>	so if you tack on id to this ((+3) . (*8) . (^2) . id)  ...
*	zair (~zair@198-84-213-2.cpe.teksavvy.com) has joined
<crucify_me>	what does that do?
<jle`>	it's the same as (+3) . (*8) . (^2)
*	ntc2 (ae194cd2@gateway/web/freenode/ip.174.25.76.210) has joined
<jle`>	but if you don't believe me, just try it out :)  or manually expand out the function composition
*	emilypi has quit (Ping timeout: 248 seconds)
<jle`>	foldr needs a "base case" to fill in for [], so 'id' is the one that doesn't change anything
<slack1256>	Has anyone written a helm source for autocompletion of module names?
<crucify_me>	thanks! got my day's work cut out :)
*	LKoen has quit (Quit: “It’s only logical. First you learn to talk, then you learn to think. Too bad it’s not the other way round.”)
<jle`>	crucify_me: see if you can prove that (f . id) = f
<jle`>	and (id . f) = f
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	mud (~mud@unaffiliated/kadoban) has joined
*	t4nk441 (a2c12870@gateway/web/freenode/ip.162.193.40.112) has joined
<Zemyla>	So showListWith isn't a good consumer, and I thought of a way to fix that.
<crucify_me>	but seriously, I have all these notes about foldl. I just want to chuck them. scanl is what explains it, its like a trace
<jle`>	all you need to do is expand out the definition of (.), (f . g) = \x -> f (g x)
<jle`>	so (f . id) = \x -> f (id x)
<jle`>	which is \x -> f x, which is just f
<mniip>	you need eta-contraction too
*	sepp2k1 has quit (Read error: Connection reset by peer)
<mniip>	(that last fact that you used)
<Zemyla>	:t \sh ls s -> (:) '[' $ either id id $ foldr (\x r -> Right $ sh x $ either id ((:) ',') r) (Left $ ']':s) ls
<lambdabot>	Foldable t1 => (t2 -> [Char] -> [Char]) -> t1 t2 -> [Char] -> [Char]
<mniip>	which uh, extensional equality I guess
<crucify_me>	eta reduction, yes very cool
<jle`>	try out (id . f) = f, it's even more fun!
<Zemyla>	That's the definition I want showListWith (well, showList__ in GHC.Show) to use, because it uses foldr.
<crucify_me>	Zemyla, haven't looked at either yet :(
<Zemyla>	But yeah, that's a good use for foldr. Try tracing you way through that.
*	aarvar (~foewfoiew@50.34.105.170) has joined
<crucify_me>	thanks
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	hackage dejafu 0.9.1.0 - Systematic testing for Haskell concurrency.  https://hackage.haskell.org/package/dejafu-0.9.1.0 (barrucadu)
<crucify_me>	I mean if you take the simplest case, id of (*) is 1. so with functions, what is the point of using id , whereas in math, the id of (*) has an obvious role
<mniip>	sequenceA = traverse id
<int-e>	:t foldr id
<lambdabot>	Foldable t => b -> t (b -> b) -> b
<Zemyla>	crucify_me: It has use in the definition of foldl.
<mniip>	or that
<Zemyla>	Well, foldl from foldr.
<crucify_me>	hmm ok
<Zemyla>	:t \f z l -> foldr (\a r x -> r $ f x a) id l z
<lambdabot>	Foldable t1 => (t2 -> t3 -> t2) -> t2 -> t1 t3 -> t2
*	Senecea (~textual@2601:48:8100:72c7:d069:2c66:a34b:43f4) has joined
*	fragamus has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<int-e>	@src $
<lambdabot>	f $ x = f x
<Zemyla>	Where does lambdabot get @src information from?
<mniip>	a hand typed file I think
*	jb55 (~jb55@70-36-49-138.dyn.novuscom.net) has joined
<int-e>	it has a text file with definitions, basically
<int-e>	so it's often inaccurate and very much incomplete
*	t4nk441 (a2c12870@gateway/web/freenode/ip.162.193.40.112) has left
*	ntc2 has quit (Quit: Page closed)
<mniip>	% :info $
<yahb>	mniip: ($) :: forall (r :: GHC.Types.RuntimeRep) a (b :: TYPE r). (a -> b) -> a -> b -- Defined in `GHC.Base'; infixr 0 $
*	crobbins (~crobbins@2602:30a:c08e:19e0:5a35:2b5d:2a47:c43f) has joined
*	nokia3210 has quit ()
*	ammazza (~ammazza@130.155.159.164) has joined
*	ziyourenxiang has quit (Ping timeout: 248 seconds)
*	ph88 has quit (Quit: Leaving)
*	nighty- has quit (Quit: Disappears in a puff of smoke)
*	kroogs (~kroogs@71-212-5-43.tukw.qwest.net) has joined
*	ntc2 (ae194cd2@gateway/web/cgi-irc/kiwiirc.com/ip.174.25.76.210) has joined
*	bennofs has quit (Quit: WeeChat 1.9.1)
*	auto_complete_ has quit (Ping timeout: 248 seconds)
<crucify_me>	so you can use id as the seed/accum value such as in ? :   foldr (\ x f -> shows x . f) id [1 .. 4] ""
*	sethetter has quit (Ping timeout: 248 seconds)
*	ammazza has quit (Ping timeout: 248 seconds)
*	aarvar has quit (Quit: Leaving.)
<crucify_me>	> foldr (\ x f -> shows x . f) id [1 .. 4] ""
<lambdabot>	 "1234"
<crucify_me>	how does id work there?
<mniip>	here in
<mniip>	:t foldr
<lambdabot>	Foldable t => (a -> b -> b) -> b -> t a -> b
<mniip>	b is a function
<mniip>	the answer desired for the empty list is a ShowS that does nothing
<mniip>	i.e \x -> x
<crucify_me>	ok, yeah it just calls for a function there so you use id. no numeric value works
*	fragamus (~textual@2602:304:b2d0:4749:2414:44ab:42c4:a9ba) has joined
*	barcabuona has quit (Ping timeout: 258 seconds)
*	kroogs has quit (Ping timeout: 255 seconds)
<crucify_me>	so mniip where there would normally be an accum value, you put id since it is an immutable value ?
<mniip>	what
<crucify_me>	nothing is being replaced by a new value
*	maerwald has quit (Ping timeout: 268 seconds)
<crucify_me>	in say, foldr (+) 0 [2,3,4]
<mniip>	that's because there the b is Int
<crucify_me>	ok I get it. It's just printing out so we use id
*	maerwald (~maerwald@mail.hasufell.de) has joined
<mniip>	look at the type of foldr again
<mniip>	(a -> b -> b) -> b -> [a] -> b
<mniip>	a is the type of the elements
<mniip>	b is anything you choose
*	smckay has quit (Quit: smckay)
<crucify_me>	ok thanks mniip .. getting there
*	smckay (~smckay@cpe-72-181-43-235.rgv.res.rr.com) has joined
*	cloudhead has quit (Ping timeout: 248 seconds)
*	chao-tic has quit (Ping timeout: 276 seconds)
*	Xal (~Xal@S010664777dabacc3.vw.shawcable.net) has joined
*	emilypi has quit (Ping timeout: 260 seconds)
<infinisil>	e really convenient
<infinisil>	why is my message cut off weechat -.-
<infinisil>	Damnit, why can't Haskell have named parameters like Idris, they're really convenient
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	garphy is now known as garphy`aw
*	Fairy has quit (Ping timeout: 248 seconds)
<infinisil>	okay they are named i guess, but the convention seems to be to use single letters for types, which makes it really hard to understand
*	Fairy (~Fairy@unaffiliated/fairy) has joined
<monochrom>	That's a superficial understanding.
*	a3Dman has quit (Ping timeout: 240 seconds)
*	jon_ (~jon@user-10878hq.cable.mindspring.com) has joined
*	nuncanada (~dude@179.235.130.117) has joined
<monochrom>	There is no point replacing the highly general "a -> a" by any more "meaningful" or longer names.
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
<infinisil>	monochrom: I guess i parameters of types, e.g. this: http://hackage.haskell.org/package/pipes-4.3.7/docs/Pipes-Core.html#t:Proxy
<monochrom>	But if you look at Parsec or Megaparsec, you willl see "Parser open -> Parser close -> Parser a -> Parser a" which is just right.
*	ammazza (~ammazza@130.155.160.155) has joined
<monochrom>	I don't understand "I guess i parameters of types"
<infinisil>	monochrom: open, close are type parameters?
*	jon_ is now known as locodeviant
*	nikolah has quit (Quit: WeeChat 0.4.2)
<infinisil>	i mean parameters of types
<infinisil>	actually I'm not sure what I'm even saying
<monochrom>	You can talk the the authors of pipes about this, you know, if you see it from pipes.
<monochrom>	s/talk the the/talk to the/
*	durandal1 has quit (Remote host closed the connection)
*	HaskellLord69 has quit (Ping timeout: 240 seconds)
*	gugah (~gugah@181.229.86.80) has joined
*	durandal1 (~durandal1@2601:647:4900:1f83:1d62:50e:79e7:b0fa) has joined
*	auto_complete_ has quit (Ping timeout: 276 seconds)
*	HaskellLord69 (~weechat@gateway/vpn/privateinternetaccess/haskelllord69) has joined
*	Jeanne-Kamikaze (~Jeanne-Ka@2601:647:4300:f30f:d85d:fa2e:f5a3:fca1) has joined
<slack1256>	what about pipes
*	thc202 has quit (Ping timeout: 258 seconds)
<infinisil>	Haha, forget what I said, i never said anything
<monochrom>	HTM = Human Transactional Memory.
<slack1256>	(making the human input 'y' to confirm which transsaction succeds?)
<infinisil>	Actually I do have a question regarding pipes
<slack1256>	yay
<infinisil>	So I'm pretty new to Haskell, and I read the pipes introduction, and it seems like that's what I really need for my project, but I'm not quiet sure
*	DeATh`RoW has quit (Ping timeout: 258 seconds)
<Clint>	what have you got to lose except your time and energy
*	statusbot (~statusbot@ec2-54-204-153-42.compute-1.amazonaws.com) has joined
<infinisil>	The program is supposed to be a server, and connecting 2 client together for a game
<slack1256>	if you need (effectful) streaming behaviour, pipes / conduit are your friend
*	hololeap (~hololeap@unaffiliated/hololeap) has joined
<slack1256>	conduit argueably has better documentation and is simple overall
*	fall_ has quit (Remote host closed the connection)
*	jb55 has quit (Ping timeout: 255 seconds)
*	fall_ (~fall@betty.countzero.no) has joined
<slack1256>	pipes is confusing because it has too much type parameters (that don't do much unless you get bidirectional)
*	bsmt has quit (Ping timeout: 276 seconds)
<infinisil>	All of this is done through a TCP connection, so what I did was to spawn a thread for every client that may update a global shared state of the server (using STM)
<infinisil>	and have it do transitions like this.
*	bsmt (~bsmt@host-174-45-104-119.bzm-mt.client.bresnan.net) has joined
<infinisil>	It's a mess I tell ya
*	Sampuka has quit (Remote host closed the connection)
<infinisil>	and I'm not even done yet
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<infinisil>	Can pipes handle such a situation? Is it well suited for this task?
*	DeATh`RoW (~jsa@vps.matteocicuttin.it) has joined
<infinisil>	I guess the answer is yes, given I know what I'm doing
<slack1256>	I am in favor on minimal working code and only abstract when you need
<slack1256>	if using stm and listening manually works for you at the moment I would go for that
*	tabemann has quit (Ping timeout: 240 seconds)
<slack1256>	(we only have so many hours a day)
<infinisil>	Hmm true..
*	durandal1 has quit (Remote host closed the connection)
<slack1256>	but if you end up needing streaming guarrantee as early termination, safe exception handling or co-routine behaviour well you know you could modify your code to use pipes or conduit
<infinisil>	I guess I should first do some stuff with monad transformers, as I only read a tutorial about them, haven't used them
*	durandal1 (~durandal1@2601:647:4900:1f83:1d62:50e:79e7:b0fa) has joined
<slack1256>	(argueably *the greatest* strenght of haskell is refactoring on a broader sense, so don't worry too much getting the code right the first time)
<infinisil>	slack1256: While reading the pipes tutorial made a lot of sense, looking into pipes-networkig, pipes-concurrent was really confusing, as it's not just a simple Producer/Pipe, but rather some abstraction on top of it
*	Princess17b29a has quit (Ping timeout: 248 seconds)
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	fall_ has quit (Remote host closed the connection)
*	fall_ (~fall@betty.countzero.no) has joined
<slack1256>	yeah, libraries ecosystem are like that. I am not gonna lie, it is hard stuff to get into
*	fragamus has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<slack1256>	so do it only when you *know* you will get the bang for buck
*	x77686d has quit (Quit: x77686d)
*	Jesin has quit (Quit: Leaving)
<infinisil>	Alright, thanks!
*	alhariel (~alhariel@186-194-42-89.i-next.psi.br) has joined
*	plutoniix (~q@175.176.222.7) has joined
<slack1256>	(for example pipes-safe uses a monad transformer for the early termination. That requires knowledge of how transformers work9
<crucify_me>	> foldr (.) id [(+3) , (*8) , (^2)] 4
<lambdabot>	 131
*	bsmt has quit (Ping timeout: 240 seconds)
<crucify_me>	so, I'm tripping: isn't there one too many arguments here? ^
<slack1256>	@type foldr
<lambdabot>	Foldable t => (a -> b -> b) -> b -> t a -> b
<alhariel>	foldr returns a function in that case
*	Pamelloes has quit (Ping timeout: 248 seconds)
<slack1256>	@type foldr (.)
<lambdabot>	Foldable t => (a -> b) -> t (b -> b) -> a -> b
<alhariel>	the 4 is the argument to that function
<infinisil>	sneaky
<slack1256>	@type foldr (.) id
<lambdabot>	Foldable t => t (b -> b) -> b -> b
*	nuncanada has quit (Quit: Leaving)
<slack1256>	@type foldr (.) id [(+3)]
<lambdabot>	Num b => b -> b
<slack1256>	@type foldr (.) id [(+3)] 4
<lambdabot>	Num b => b
*	nuncanada (~dude@179.235.130.117) has joined
<slack1256>	you can see it even clearly expanding manually the foldr definition
*	Pamelloes (~jbrot@c-98-224-221-28.hsd1.mi.comcast.net) has joined
<crucify_me>	one moment
<infinisil>	Is there some step-by-step evaluation thing for haskell?
<slack1256>	foldr (.) id [(+3)] == (+3) . id
<slack1256>	well yeah, just replace the definition various times until you get a value
<slack1256>	foldr for list is
<slack1256>	@src foldr
<lambdabot>	foldr f z []     = z
<lambdabot>	foldr f z (x:xs) = f x (foldr f z xs)
<alhariel>	handy
<Tuplanolla>	infinisil: http://chrisuehlinger.com/LambdaBubblePop/
<alp>	infinisil, it's not for haskell per se, but close enough: https://github.com/well-typed/visualize-cbn
<slack1256>	so here your "f = (.)" your "z = id" and the list is clear
<alhariel>	does anyone know how to install lambdabot with stack btw
<alhariel>	build*
*	zero_byte (~zer0@ip-89-103-110-138.net.upcbroadband.cz) has joined
*	james4 (~james4@c-73-169-245-192.hsd1.wa.comcast.net) has joined
*	Guest78 has quit (Remote host closed the connection)
<crucify_me>	slack1256, sorry I didn't get all that
*	Xion__ has quit (Ping timeout: 248 seconds)
<slack1256>	which part you didn't get?
<slack1256>	the how to expand part?
*	Welkin (~Welkin@107.147.90.29) has joined
<crucify_me>	"the 4 is the argument to that function ^ "
<crucify_me>	member comment
<infinisil>	Tuplanolla: Neat!
<crucify_me>	frankly I haven't been able to read the signature quite yet
<slack1256>	this should be parsed as this (  foldr (.) id [(+3) , (*8) , (^2)]  ) $ 4
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
<slack1256>	( foldr (.) id [(+3) , (*8) , (^2)] ) $ 4
<infinisil>	alp: Also neat!
*	Guest78 (~textual@2604:2000:c680:8700:88e3:e078:f7f7:65c3) has joined
<slack1256>	so the foldr is returning a function
*	smckay has quit (Quit: smckay)
*	acarrico has quit (Ping timeout: 252 seconds)
*	crobbins has quit (Ping timeout: 240 seconds)
*	t7 has quit (Quit: Leaving)
<infinisil>	I also looked into pipes-aeson, which has this crazy type: https://hackage.haskell.org/package/pipes-aeson-0.4.1.8/docs/Pipes-Aeson.html#v:decoded (the decoded function)
<slack1256>	yeah, that library is the intersection of 2 ecosystems: pipes & lens
*	alhariel has quit (Quit: WeeChat 1.9.1)
<slack1256>	I would use just aeson
*	fall_ has quit (Remote host closed the connection)
*	auto_complete_ has quit (Ping timeout: 260 seconds)
*	fall_ (fall@bettyipv6.countzero.no) has joined
*	codesoup has quit (Remote host closed the connection)
*	siddhanathan[m] (siddhanath@gateway/shell/matrix.org/x-xglwsjvukcfrhbcv) has joined
<slack1256>	https://stites.io/posts/2016-04-12-Data-Text.html 
<infinisil>	using aeson currently
<slack1256>	is this true? UTF16 is faster to encode/decode that UTF8?
<Clint>	why wouldn't it be?
<Welkin>	who is sam stites?
*	jedws (~jedws@2001:8003:243f:6200:c54e:50bb:a2a1:5f1a) has joined
<slack1256>	seems to be /a guy/
*	durandal1 has quit (Remote host closed the connection)
*	durandal1 (~durandal1@2601:647:4900:1f83:1d62:50e:79e7:b0fa) has joined
*	behr328 has quit (Quit: Textual IRC Client: www.textualapp.com)
<crucify_me>	slack1256, thing is, how is 4 a function there? : $ 4  
*	jrabe has quit ()
*	head_victim has quit ()
*	bydo has quit (Quit: nah.)
*	behr328 (~behr328@ool-18bed7a5.dyn.optonline.net) has joined
<Welkin>	crucify_me: that is applying a function to 4
<slack1256>	^ that
<Welkin>	$ is an infix function (that just does function application)
*	durandal1 has quit (Remote host closed the connection)
*	atk has quit (Quit: Well this is unexpected.)
<Welkin>	:t ($)
<lambdabot>	(a -> b) -> a -> b
<slack1256>	@src ($)
<lambdabot>	f $ x = f x
*	atk (~Arch-TK@ircpuzzles/staff/Arch-TK) has joined
*	bydo (~cdr@unaffiliated/bydo) has joined
<slack1256>	(it is put to avoid parentesis)
*	durandal1 (~durandal1@2601:647:4900:1f83:1d62:50e:79e7:b0fa) has joined
<infinisil>	Welkin: "sam stites" has a levenshtein distance of 3 to "sams tits"
*	db8093246 has quit (Remote host closed the connection)
*	jrabe (irc@janikrabe.com) has joined
*	muyfine (~textual@162-238-124-142.lightspeed.sntcca.sbcglobal.net) has joined
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	oisdk (~textual@51-171-255-121-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined
*	YongJoon (~Thunderbi@121.67.187.140) has joined
<crucify_me>	so without answering with lambdabot, could I ask, are id and the list [(+3), (*8), (^2)] read as a single argument ? 
*	slack1256 someday will use a mixin for text types and everything will be alright on the world
*	sethetter (4467c840@gateway/web/cgi-irc/kiwiirc.com/ip.68.103.200.64) has joined
<slack1256>	@type foldr (.) id ([+3])
<lambdabot>	error:
<lambdabot>	    A section must be enclosed in parentheses thus: (+ 3)
<Welkin>	function application happens left to right
<slack1256>	@type foldr (.) id [+3]
<lambdabot>	error:
<lambdabot>	    A section must be enclosed in parentheses thus: (+ 3)
<slack1256>	@type foldr (.) id [(+3)]
<lambdabot>	Num b => b -> b
<slack1256>	that's a function
<Welkin>	> foldr (.) id [(+ 3)] $ 2
<lambdabot>	 5
<Welkin>	lol
*	codesoup (~codesoup@CPE00fc8de45853-CM00fc8de45850.cpe.net.cable.rogers.com) has joined
<Welkin>	it's hard to see what that actually does
<Welkin>	until you read the type
*	vydd has quit (Ping timeout: 260 seconds)
<Welkin>	I couldn't tell
*	xkapastel has quit (Quit: Connection closed for inactivity)
<Welkin>	it is really stupid
<Welkin>	it is equivalent to (+ 3)
<muyfine>	Does anyone have examples of a Free Monad that one of its 
*	afarmer (~afarmer@24.7.34.170) has joined
*	kroogs (~kroogs@71-212-5-43.tukw.qwest.net) has joined
<muyfine>	operations consumes the Free Monad?
<muyfine>	I have http://lpaste.net/360269
<muyfine>	and trying to figure out how to define Group
*	n300 has quit (Ping timeout: 240 seconds)
<muyfine>	I thought `Group String (Proto next)` would work, but makeFree gives me hell for trying that
*	gienah (~mwright@gentoo/developer/gienah) has joined
*	durandal1 has quit (Remote host closed the connection)
<muyfine>	been searching around for examples but haven't been able to find any
*	durandal1 (~durandal1@2601:647:4900:1f83:1d62:50e:79e7:b0fa) has joined
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<Zemyla>	Oh, when will Rep and Rep1 in Generic become injective?
<crucify_me>	right, so that entire part, (.) id [(+3), (*8), (^2)] is read as the function ? sorry not clear
<Welkin>	crucify_me: no, foldr is used to construct a function that performs all of those operations on a value
<Welkin>	it would create a function (+ 3) . (* 8) . (^ 2)
<Welkin>	> foldr (.) id [f, g, h] :: Expr
<lambdabot>	 error:
<lambdabot>	     • Couldn't match expected type ‘Expr’ with actual type ‘b0 -> b0’
<lambdabot>	     • Probable cause: ‘foldr’ is applied to too few arguments
<Welkin>	> foldr (.) id [f, g, h] x :: Expr
<lambdabot>	 f (g (h x))
<crucify_me>	Welkin, 'performs all of those operations on a value, so 4 is the value (from far above example?)
<Welkin>	`f (g (h x))` is the same as `(f . g . h) x` which is the same as `f . g . h $ x`
*	Smaczny (~Smaczny@185.103.96.139) has joined
<Welkin>	crucify_me: yes
*	simplegauss has quit (Ping timeout: 276 seconds)
<Welkin>	the result from foldr is a function
<Welkin>	in this case
<Welkin>	you can also think of it like this `(foldr (.) id [f, g, h]) x`
*	kroogs has quit (Ping timeout: 240 seconds)
*	simplegauss (~user@c-98-207-169-254.hsd1.ca.comcast.net) has joined
<Welkin>	the parentheses are not necessary because of the precedence of functon application, but you can add them anyway
<Welkin>	and it is left associative, so functions are applied from left to right
<crucify_me>	thanks, so by using (.), the argument which would be a simple operator, like (+) , is more complex because (.) is combining ?
<Welkin>	`((((foldr (.)) id) [f, g, h])) x` is the same as well
*	jmcarthur has quit (Ping timeout: 255 seconds)
<Welkin>	it is because the values you are folding are functions (all of one parameter) and your initial accumulator value is `id`, the identity function
*	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined
<Welkin>	composition `(.)` is being used here to accumulate the list of functions into a single function
<crucify_me>	ok so the composition is (.) and the list, which requires just one parameter
*	YongJoon has quit (Ping timeout: 240 seconds)
<crucify_me>	*all of which requires one parameter
<Welkin>	I don't understand what you mean
<Welkin>	I think it may be a simple misunderstanding of foldr
<Welkin>	have you implemented your own foldr?
<crucify_me>	(.) doesn't stand alone as an argument
<Welkin>	it does
<crucify_me>	geez
<Welkin>	it takes up one "slot"
<Welkin>	:t foldr
<lambdabot>	Foldable t => (a -> b -> b) -> b -> t a -> b
<Welkin>	:t foldr (.)
<lambdabot>	Foldable t => (a -> b) -> t (b -> b) -> a -> b
<Welkin>	it is the accumulating function
<Welkin>	justl ike any other accumulating function
*	fragamus (~textual@2602:306:3a1a:87a0:907f:b4ac:5acb:ed93) has joined
*	romanix has quit (Quit: Leaving)
<Welkin>	well, those types don't help
<Welkin>	because you would have to unify them by hand o.o
<Welkin>	but anyway
<Welkin>	it is easier to work this out on paper, by hand
<Welkin>	to truly understand what is going on
<Welkin>	rather than trying to figure it out by running the code
<Welkin>	function application has the highest precendence of any operator
<Welkin>	it always comes first
<Welkin>	and it goes left to right
<aplainze2akind>	In the context of a fold, wouldn't it follow the folding order anyway? Is precedence relevant?
*	DeATh`RoW has quit (Ping timeout: 258 seconds)
<Welkin>	so, unless you have some explicit parentheses to tell the compiler otherwise, `foldr g acc xs` is going to be resolved as `((foldr g) acc) xs` no matter what `g`g may be
<Welkin>	as long as `g` matches the type that foldr expects
<Welkin>	every time you supply a parameter to a function, you can cross it off form the type
<Welkin>	:t foldr
<lambdabot>	Foldable t => (a -> b -> b) -> b -> t a -> b
<aplainze2akind>	I mean foldr (.) id [f, g, h] $ x would give (f . g . h . id) x which is (f (g (h x)))
*	behr328 has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	doodlehaus (~doodlehau@71-89-72-8.dhcp.bycy.mi.charter.com) has joined
<Welkin>	so in this case, once we suppluy it with `g`, we can cross off the first parameter in the type which is `(a -> a -> b)`, so the type now becomes `b -> t a -> b` for some *new* `a` and `b`
<crucify_me>	Welkin I get it now. really appreciate it. the accum value represents a combined function of (+3)(*8)(^2) that is applied to 4
*	augur (~augur@192.195.83.130) has joined
<Welkin>	crucify_me: yes, the final accumulator value, the end result
<crucify_me>	foldr combines the simple math operators to be applied to the last parameter, in this case 4
*	simplegauss (~user@c-98-207-169-254.hsd1.ca.comcast.net) has left ("ERC (IRC client for Emacs 25.2.1)")
<crucify_me>	by using (.)
<Welkin>	yes
<crucify_me>	Welkin excellent thanks!
<Welkin>	just like you can combine numbers using (+), you can combine functions using (.)
<Welkin>	the result of the first is also a number
<crucify_me>	I knew that, I was thinking of the accum wrongly
<Welkin>	the result of the second is also a function
*	steshaw (uid30841@apache/committer/steshaw) has joined
*	serendependy has quit (Ping timeout: 255 seconds)
<Welkin>	so in the case of using (.) for your accumlator function, the end result `b` is actually some function `c -> d`
*	behr328 (~behr328@ool-18bed7a5.dyn.optonline.net) has joined
*	doodlehaus has quit (Ping timeout: 248 seconds)
<crucify_me>	so id is squeezed in there, but that is still necessary ?
<Welkin>	every time you supply a function with a new parameter, you have to cross out that parameter from the type, unify the type the function expects for that parameter with the actual type you have supplied, then update the other variables in the rest of the type to reflect the change
*	tirej has quit (Quit: Lost terminal)
*	antsanto (~antsanto@171.60.248.52) has joined
<Welkin>	this is easier to show than tell
<Welkin>	much easier on paper of course
*	machinedgod has quit (Ping timeout: 260 seconds)
*	james4 has quit (Quit: WeeChat 1.9.1)
<crucify_me>	ok I get that part, thanks so much, if I could just get the use of id straight...
*	aplainze2akind has quit (Quit: leaving)
*	markus1189 (~markus118@p4FDC0DA6.dip0.t-ipconnect.de) has joined
<Welkin>	`id` is used here as a filler value
<Welkin>	foldr expects a starting value
<Welkin>	`id` works fine because it doesn't do anything
<Welkin>	the types work out
<aplainzetakind>	It's like 0 for (+)
<Welkin>	this way, it is the most generalized that it can be
<crucify_me>	exactly. but (.) is in the accum place
<Welkin>	so it can work on any list of functions of one parameter
<crucify_me>	so id is not in the accum place
<Welkin>	(.) is your accumulator function, while `id` is your initial accumulator value
<crucify_me>	got it.
<Welkin>	sorry, I failed to include `id` in my earlier explanation
<aplainzetakind>	Think of foldr as replacing (:) operators with the fuction you give it. So when you fold [f,g,h] = f : g: h : [] with (.), you will have f . g . h . (something to put in place of [])
<Welkin>	I really recommend working out the types on paper
<aplainzetakind>	Than something is usually chosen to be a "neutral" value for the function you're folding with. Since composing with id is basically not changing anything, that's a sensible start.
*	antsanto has quit (Ping timeout: 248 seconds)
<Welkin>	I don't think I would have ever understand it had I not done that
<aplainzetakind>	s/Than/That/
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
<Welkin>	it really is just basic algebra
*	markus1199 has quit (Ping timeout: 268 seconds)
<crucify_me>	foldr (+) 0 [2,3,4]   is not a good parallel since it appears that the (.) example has an additional parameter
*	mikedlr (sid170860@gateway/web/irccloud.com/x-qifkifqohaatbzah) has joined
<Welkin>	they are equivalent
<aplainzetakind>	No. It is an exact analogue.
<Welkin>	except that the (.) example will produce a function
*	rblaze (~Adium@199.201.64.3) has joined
<Welkin>	the (+) example will produce a number value
<aplainzetakind>	Think of functions as objects themselves, on the same level of numbers.
<Welkin>	functions are first class, so they can be treated as values
<aplainzetakind>	(.) takes two such objects and produces another, just like (+) and numbers.
<crucify_me>	its trippy but I see how it works now. 
*	MP2E (~MP2E@ip68-224-146-82.lv.lv.cox.net) has joined
*	behr328 has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<crucify_me>	its a good thing I made such short work of it. :)
<crucify_me>	THANKS
<Welkin>	it's time to check up on my farm in stardew valley. I haven't been there in over a year!
<Welkin>	I bet my chicken is sad
*	m1n (~m1n@unaffiliated/m1ntfr3sh) has joined
*	auto_complete_ has quit (Ping timeout: 268 seconds)
*	themagician has quit ()
<crucify_me>	you mean we've been at it for a year?
<crucify_me>	I thought it was like 8 months
*	Natch has quit (Ping timeout: 248 seconds)
*	hackage egison 3.7.6 - Programming language with non-linear pattern-matching against non-free data  https://hackage.haskell.org/package/egison-3.7.6 (SatoshiEgi)
*	nighty- (~nighty@kyotolabs.asahinet.com) has joined
*	behr328_ (~behr328@ool-18bed7a5.dyn.optonline.net) has joined
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	carlomagno (~cararell@inet-hqmc08-o.oracle.com) has joined
*	chao-tic (~chao@218.101.54.122) has joined
*	Natch (~Natch@h-155-122.A444.priv.bahnhof.se) has joined
*	emilypi has quit (Ping timeout: 276 seconds)
*	rblaze has quit (Ping timeout: 240 seconds)
*	behr328_ has quit (Client Quit)
*	harfangk (~quassel@211.48.51.34) has joined
*	rblaze (~Adium@12.11.109.225) has joined
*	zair has quit (Ping timeout: 268 seconds)
*	auto_complete_ has quit (Ping timeout: 255 seconds)
*	FreeBirdLjj (~freebirdl@114.86.108.88) has joined
*	behr328_ (~behr328@ool-18bed7a5.dyn.optonline.net) has joined
*	jb55 (~jb55@70-36-49-138.dyn.novuscom.net) has joined
*	quobo has quit (Quit: Connection closed for inactivity)
*	rblaze1 (~Adium@2620:10d:c091:180::1:310c) has joined
*	machinedgod (~machinedg@198-84-249-5.cpe.teksavvy.com) has joined
*	lemonpepper24 (~lemonpepp@gateway/vpn/privateinternetaccess/lemonpepper24) has joined
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sun Nov 26 16:55:24 2017

**** BEGIN LOGGING AT Thu Nov 30 11:40:34 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<dminuoso>	How does one make a polymorphic type from a monotype?
<mniip>	ooh coyoneda
<dmwit>	dminuoso: Each instance of `Num` has to say how it works.
<mniip>	do you mean the existentially packed "free" functor construction?
<mniip>	or something else
*	albertus1 (~seb@x4e32df5a.dyn.telefonica.de) has joined
*	machinedgod has quit (Quit: Lost terminal)
<fishythefish>	dminuoso: i.e. it's part of the minimal complete definition for a Num instance
<jle`>	dminuoso: are you familiar with how typeclasses work
<jle`>	when you write an instance of a typeclass for a type, you must provide definitions for those methods for your type
*	machinedgod (~machinedg@198-48-220-190.cpe.pppoe.ca) has joined
<mniip>	oooh
<humanoyd>	dmwit: alternatively, you could provide a link to the github repo of the least smart employee :>
<dmwit>	dminuoso: Maybe a fun minimization of your question: How does `mempty :: Monoid a => a` work? How does one make a polymorphic value out of nothing?
<mniip>	I should say I am pretty familiar with Coyoneda the type
<mniip>	but I never considered it in terms of the yoneda lemma itself
<Psybur>	humanoyd, ooh if you get it please share :D
<dmwit>	humanoyd: github.com/dmwit
*	path[l] (~vsi@199.201.64.130) has joined
*	tac-tics (~tac-tics@ec2-52-38-248-100.us-west-2.compute.amazonaws.com) has joined
<mniip>	damn
<balor>	I've seen type constraints like this http://lpaste.net/360380 in a few libraries.  How do I write a function that takes a `V`?  I had thought `d :: V Int ~ Int -> String`  would take either `(1, 2)` or `(0,1,2)` and return `"V 2"`.
*	mson has quit (Quit: Connection closed for inactivity)
<mniip>	forall b. (a -> b) -> f b
<mniip>	is pretty much
<mniip>	NT ((->) a) f
<Psybur>	dmwit, thats a lot of forking
<mniip>	which uh
<dmwit>	Psybur: That's the github way. =/
<mniip>	liftYoneda and runYoneda evidence a natural isomorphism between NT ((->) a) f and f a
<dminuoso>	dmwit: Ah, my brain was disabled there. Somehow I did not realize it was part of Num. Maybe I should stop using :t to figure things out about things.
*	ma27 has quit (Ping timeout: 240 seconds)
<mniip>	fascinating
<jle`>	balor: d :: (V a ~ Int) => a -> String
<balor>	jle`, thanks
*	ma27 (~ma27@p200300CFB3C1A001CA5B76FFFEE20190.dip0.t-ipconnect.de) has joined
<mniip>	now what exactly is the coyoneda lemma
<jle`>	balor: but be aware that the only sensible implementations are constant strings
*	lambda-11235 has quit (Ping timeout: 260 seconds)
<jle`>	d _ = "something"  etc. are the only implementations possible
<jle`>	you can't use the input
<mniip>	the definition of Coyoneda makes me think of dinatural transformations
*	qmm has quit (Quit: leaving)
<mniip>	from (-> a) to f
<dmwit>	You can if there's an appropriate typeclass lying around.
*	qmm (~daniel@unaffiliated/qmm) has joined
<dmwit>	class Select a where select :: a -> V a -- or something
<balor>	jle`, yes. That makes sense.  I'm just playing with simple examples right now.  I can probably ensure that X is an instance of `show` somewhere and use that.
<mniip>	some sort of...
<mniip>	hmm, is there a Profunctor in profunctors for it
*	bts- has quit (Ping timeout: 248 seconds)
*	graphtheory has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	bmeynell has quit (Remote host closed the connection)
*	erde74 (~erde74@p5080B868.dip0.t-ipconnect.de) has joined
*	zmt00 has quit (Ping timeout: 240 seconds)
*	zachk (~zachk@unaffiliated/zachk) has joined
*	alexteves (~alexteves@a79-169-252-242.cpe.netcabo.pt) has joined
<balor>	I had to use `d :: (V a ~ b) => a -> String` rather than  `d :: (V a ~ Int) => a -> String` as "Expected kind ‘* -> *’, but ‘Int’ has kind ‘*’"
*	erde74 has quit (Remote host closed the connection)
<jle`>	balor: oh yeah i noticed that the kind signature you had for V was a bit weird
*	graphtheory (~textual@150.129.183.76) has joined
<jle`>	it seems like you want V :: * -> *
<jle`>	but the one you wrote was V a :: * -> *
<jle`>	which makes V :: k -> * -> *
<mniip>	Product (Clown Op) f
<mniip>	there it is
<jle`>	balor: and, through kind inference, V :: * -> * -> *
*	Yuras has quit (Ping timeout: 276 seconds)
<mniip>	end of that as a universal wedge
<jle`>	balor: you should write type family V a :: *, perhaps
<balor>	jle`, The example comes from https://github.com/diagrams/diagrams-core/blob/master/src/Diagrams/Core/V.hs
<mniip>	dmwit, is that enough edwardklike gibberish to work at galois :D
*	codyw (~cody@c-73-231-132-53.hsd1.ca.comcast.net) has joined
*	path[l] has quit (Quit: path[l])
*	jgt (~jgt@aje167.neoplus.adsl.tpnet.pl) has joined
*	bmeynell (~bmeynell@142.197.108.175) has joined
*	zmt00 (~zmt00@desktop-06abn6e.dynamic.ucsd.edu) has joined
*	path[l] (~vsi@199.201.64.130) has joined
<jle`>	balor: ah okay.  then yea, V is supposed to take two arguments
<jle`>	V a b ~ Int, maybe
*	Average-user (~lucas@pc-127-31-120-200.cm.vtr.net) has joined
*	zwuggy (cb7bb5b1@gateway/web/freenode/ip.203.123.181.177) has joined
<jle`>	or `V a` is a Functor
<jle`>	(or at least, a single-argument type constructor
*	tomphp (~tomphp@cpc73822-dals21-2-0-cust404.20-2.cable.virginm.net) has joined
<zwuggy>	:t \f a -> f ($ a)
<lambdabot>	(((a -> b) -> b) -> t) -> a -> t
<zwuggy>	^ so is that a valid proof of triple contradiction is single contradiction in intuitionistic logic?
*	sepp2k has quit (Quit: Leaving.)
*	lambda-11235 (~lambda-11@campus-110-125.ucdavis.edu) has joined
<zwuggy>	(substituting bottom for b and t)
<mniip>	sounds legit
<fishythefish>	lgtm
<balor>	jle`, Right...I'll go and read. This discussion has been really helpful in clarifying my misunderstandings about TypeFamilies. Thanks.
<mniip>	@djinn Not (Not (Not a)) -> Not a
<lambdabot>	f a b = void (a (\ c -> c b))
<jle`>	balor: no problem :)
*	Xal has quit (Ping timeout: 240 seconds)
<Average-user>	Hi, sorry to interrupt, but have someone worked with a Haskell minikenren before? Or another Logic Haskell library?
*	cdg (~cdg@172.58.3.150) has joined
*	bmeynell has quit ()
*	jmelesky_ (~jmelesky@162.213.77.59) has joined
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	ski has quit (Ping timeout: 255 seconds)
*	Xal (~Xal@S010664777dabacc3.vw.shawcable.net) has joined
*	cschneid_ has quit (Read error: Connection reset by peer)
*	ma27 has quit (Ping timeout: 250 seconds)
*	jmelesky has quit (Ping timeout: 255 seconds)
*	ma27 (~ma27@p200300CFB3C1A0010228F8FFFE5DC64A.dip0.t-ipconnect.de) has joined
*	cschneid_ (~cschneid@2603:300b:901:300:147c:7d60:c234:b3bf) has joined
*	cdg has quit (Ping timeout: 248 seconds)
*	mlehmk (~mlehmk@unaffiliated/mlehmk) has joined
*	jmelesky (~jmelesky@162.213.77.59) has joined
<byorgey>	jle`: yeah, it's more that V takes an argument and returns a Functor
*	bts- (~bts@199.253.244.24) has joined
<zwuggy>	mniip: why do we need a void there?
<zwuggy>	... in what djinn siad
<mniip>	I don't think you do
<mniip>	but it's not incorrect
<zwuggy>	yeah, mine is exactly that without the void
<mniip>	void @Void = id
*	juhp has quit (Quit: juhp)
*	juhp (~juhp@redhat/juhp) has joined
<mniip>	in fact otherwise Void wouldn't be initial
<zwuggy>	so it is kind of incorrect?
<mniip>	no
*	soniku has quit (Ping timeout: 248 seconds)
*	jmelesky_ has quit (Ping timeout: 248 seconds)
<mniip>	both of these are equally correct, and with closer consideration, equal
*	ninedotnine has quit (Read error: Connection reset by peer)
<zwuggy>	what syntax is 'void @Void = id'?
*	xcmw (~textual@cpe-65-27-241-63.cinci.res.rr.com) has joined
*	balor has quit (Quit: Leaving)
<mniip>	TypeApplication
<mniip>	:t void
<lambdabot>	Functor f => f a -> f ()
<mniip>	hmm that's the wrong void
*	ninedotnine (~dan@modemcable078.123-81-70.mc.videotron.ca) has joined
<mniip>	:t absurd
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
<lambdabot>	Void -> a
<mniip>	ah duh lambdabot doesn't have TypeApplications
<mniip>	% :t absurd @Void
<yahb>	mniip: absurd @Void :: Void -> Void
*	bts- has quit (Ping timeout: 240 seconds)
*	robotroll (~robotroll@unaffiliated/robotroll) has joined
*	thblt (~user@55.184.14.109.rev.sfr.net) has joined
*	kafle (~homs@96-2-2-75-dynamic.midco.net) has joined
*	cement has quit (Remote host closed the connection)
<zwuggy>	ah, now I get it, thanks!
<mniip>	absurd is "the" unique morpshism from the initial object Void of the Hask category
<EvanR>	Void -> Void makes sense
<mniip>	id @Void is the identity morphism around Void
*	juhp has quit (Client Quit)
<mniip>	together the two statements imply
*	traitedd (1b22f63d@gateway/web/freenode/ip.27.34.246.61) has left
*	juhp (~juhp@redhat/juhp) has joined
<mniip>	that absurd @Void = id @Void
*	kroogs2 (~kroogs@174-24-241-172.tukw.qwest.net) has joined
<zwuggy>	yep, makes sense.
*	mjhoy (~user@50-203-248-222-static.hfc.comcastbusiness.net) has joined
<EvanR>	but Void -> a has had some philosophical criticism
<zwuggy>	what doesn't make sense is why djinn thought to include it, yet to me.
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Thu Nov 30 12:14:25 2017

**** BEGIN LOGGING AT Fri Dec  1 10:36:23 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | AoC leaderboard 43100-84040706
*	Topic for #haskell set by glguy (Thu Nov 30 21:14:35 2017)
*	Channel #haskell url: http://www.haskell.org/
<EvanR>	http://hackage.haskell.org/package/regex-posix-0.95.2/docs/Text-Regex-Posix-Wrap.html
*	garphy`aw is now known as garphy
<cocreature>	I’m pretty sure the type signature of =~ is deliberately terrible
<daey>	xD
<EvanR>	and there is no documentation
*	minn has quit (Ping timeout: 276 seconds)
<EvanR>	but it executes a match somehow
<EvanR>	if you can get the types to match up
*	antsanto has quit (Remote host closed the connection)
<daey>	im just confused why regex would require a new operator
*	xcmw (~textual@host-129-137-24-2.vpn.uc.edu) has joined
*	teddy_error has quit (Quit: Peace ☮︎)
<EvanR>	it doesnt, but =~ is common in another langauges
<cocreature>	daey: note that there is nothing special about operators in Haskell. they are just ordinary definitions
<cocreature>	the only difference is that by default they are used in infix form
<mnoonan>	oh, =~ is a perlism?
*	osa1 (~omer@212.252.142.76) has joined
*	osa1 has quit (Changing host)
*	osa1 (~omer@haskell/developer/osa1) has joined
*	FreeBirdLjj has quit (Remote host closed the connection)
*	auto_complete_ (~pouriafew@72.142.16.190) has joined
*	replay (~replay@pdpc/supporter/student/replay) has joined
*	zariuq has quit (Ping timeout: 250 seconds)
*	wrengr_away is now known as wrengr
*	stella (~stella@128.90.72.196) has joined
*	ma27 has quit (Ping timeout: 258 seconds)
*	auto_complete_ has quit (Ping timeout: 248 seconds)
*	tusj (~tusj@185.176.244.79) has joined
*	garphy is now known as garphy`aw
*	osa1 has quit (Ping timeout: 255 seconds)
<rightfold>	Perl uses =~ for regex marching and =~ s/// for regex substitution.
*	XorSwap (~XorSwap@140.193.117.66) has joined
<rightfold>	For Turing-complete, side-effecting definitions of “regex”.
<crucify_me>	well lambdabot doesn't work just like ghci. ie. this gives an error  ' > let ff = foldr (.) id [(+ 5), (^ 3)] '  parse error on input '='  ..   whats the beef?
<cocreature>	crucify_me: use "@let ff = …"
*	peacememories has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<crucify_me>	thanks cocreature 
*	Neomex (~Neomex@net-37-117-7-51.cust.vodafonedsl.it) has joined
<crucify_me>	@let ff = foldr . id [(+5), (^ 3)]
<lambdabot>	 .L.hs:194:14: error:
<lambdabot>	     • Couldn't match expected type ‘a -> a1 -> b -> b’
<lambdabot>	                   with actual type ‘[Integer -> Integer]’
*	ali_bush has quit (Remote host closed the connection)
<crucify_me>	different error
*	jb55 has quit (Ping timeout: 276 seconds)
<EvanR>	we need a name for the "completion" of something by adding the ability to do turing complete stuff and side effects
*	sternmull has quit (Ping timeout: 258 seconds)
*	JuanDaugherty (~juan@98.4.124.117) has joined
*	shiyas has quit (Ping timeout: 250 seconds)
<crucify_me>	cocreature, hey could you look at that? ^
*	VolcanoMan has quit (Ping timeout: 248 seconds)
<crucify_me>	it works fine in ghci
*	VolcanoMan (~VolcanoMa@143.248.230.141) has joined
<cocreature>	you forgot parentheses around the dot
*	lionelhutz has quit (Quit: Leaving)
<crucify_me>	dang. thanks. one more thing, prefix notation doesn't work ie ..
*	alvinsj (~alvinsj@p57ADD20A.dip0.t-ipconnect.de) has joined
*	rm8 (~rm8@rrcs-76-79-189-90.west.biz.rr.com) has joined
<crucify_me>	@let fff = (.) foldr id [(+5), (^ 3)]
<lambdabot>	 .L.hs:194:20: error:
<lambdabot>	     • Couldn't match expected type ‘a -> b -> b’
<lambdabot>	                   with actual type ‘[Integer -> Integer]’
<crucify_me>	I thought haskell was fine with that
*	stella has quit (Quit: Leaving)
*	minn (~minn@pool-173-66-222-98.washdc.fios.verizon.net) has joined
*	peacememories (~textual@e234-063.eduroam.tuwien.ac.at) has joined
*	astronavt (~astronavt@2604:2000:1343:4291:5d49:17ba:23cd:c0d7) has joined
<ongy>	if you want to pass an infix function (e.g. . or +) to something that expects a function, you have to pass it in parentheses. so (.) or (+)
*	jevdplas (~chatzilla@ptr-fr9rvcmcxvwav0xsaqe.18120a2.ip6.access.telenet.be) has joined
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<ongy>	:t foldr (.) id [(+5), (^ 3)]
<lambdabot>	Num b => b -> b
*	Average-user (~lucas@dvc-107-174-156-186.movil.vtr.net) has joined
*	ziyourenxiang has quit (Ping timeout: 252 seconds)
<EvanR>	and you can use regular functions infix like `div`
<EvanR>	> 15 `divMod` 7
<fishythefish>	crucify_me: your definition of fff starts with (.) foldr id, which is foldr . id, which is foldr
<lambdabot>	 (2,1)
<crucify_me>	ongy I was wondering about prefix notation
<fishythefish>	you're essentially trying to typecheck `foldr [(+5), (^3)]`
<fishythefish>	remember that function application is left-associative
<crucify_me>	oh yeah ok so I offset the composition so to speak
*	Maticz (~Maticz@ptr-9hfwz2qini0qzdg0lat.18120a2.ip6.access.telenet.be) has joined
*	Wizek_ (~Wizek@catv-89-132-132-110.catv.broadband.hu) has joined
<crucify_me>	hey, any more interesting examples for why foldr (.) id is so useful according to lore? also what about examples for flip foldr id. I'm confused about that.
*	minn (~minn@pool-173-66-222-98.washdc.fios.verizon.net) has left ("Leaving")
<crucify_me>	fishythefish, et al ^
*	kakashiAL has quit (Ping timeout: 240 seconds)
*	astronavt has quit (Ping timeout: 255 seconds)
*	natrys has quit (Ping timeout: 248 seconds)
*	woodson has quit (Ping timeout: 240 seconds)
<dminuoso>	crucify_me: check the type signature
*	garphy`aw is now known as garphy
*	agjacome has quit (Quit: leaving)
<fishythefish>	I was under the impression that `foldr (.) id` is about as useful as it's definition makes it out to be: it builds up a function by composing a list of its parts
<Guest18476>	https://gist.github.com/anonymous/1e9ce4250418cbc2fd851eff375991f8
<fishythefish>	does lore make a bigger deal out of it than that?
<Guest18476>	it is giving me non exhaust pattern
<jevdplas>	Hey guys, I have a question about folds. I want to rewrite a function so it does not have a memory leak. I've been told to use fold', but the function that I use is non-strict in its second argument. Would a foldr combined with seq be a good option for this?
<cocreature>	Guest18476: you are not handling lists with fewer than 3 arguments
*	serendependy has quit (Ping timeout: 240 seconds)
<fishythefish>	Guest18476: that's because the only case you handle is when you're argument can match x:y:z:xs
<fishythefish>	zs*
<fishythefish>	your*
*	fishythefish is tired
<Guest18476>	ok, so i need to add base case
<cocreature>	jevdplas: can you show us the function? also are you sure you actually have a space leak?
<Guest18476>	how do i do that in the if then else function?
<fishythefish>	Guest18476: also, there's no real reason to use xs and all the heads and tails
<Guest18476>	sorry, i'm very new to haskell
<fishythefish>	you already have the names x, y, z, zs
<Guest18476>	ah ok 
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
<Guest18476>	let me rewrite real quick
<fishythefish>	you don't need to add the other cases to the if/then/else
<fishythefish>	you can add another line like fibonacciNumber [] = []
<fishythefish>	etc.
<dminuoso>	fishythefish: Mind my asking, "lore" ?
<fishythefish>	dminuoso: ask crucify_me 
*	dfeuer (~dfeuer@wikimedia/Dfeuer) has joined
<dminuoso>	Oh. crucify_me ^-
<Guest18476>	ok thanks, let me rewrite
*	Maticz has quit (Remote host closed the connection)
<dfeuer>	edwardk: ping
*	Maticz (~Maticz@ptr-9hfwz2ravmjqari6ebp.18120a2.ip6.access.telenet.be) has joined
*	soniku has quit (Ping timeout: 264 seconds)
*	teddy_error (~teddy-err@unaffiliated/teddy-error/x-0949760) has joined
*	goodboy has quit (Ping timeout: 250 seconds)
<crucify_me>	dminuoso, I just meant stuff I read online that its useful but I was looking for some example other than simple arithmetic 
<Guest18476>	https://gist.github.com/anonymous/ecb6af918186c33a2a6b55a058d70f93
*	auto_complete_ (~pouriafew@72.142.16.190) has joined
<Guest18476>	sum (x:y) doesn't match the type for z
<fishythefish>	x:y is already an issue
<fishythefish>	y isn't a list
<fishythefish>	why not just write x + y?
<Maticz>	Hey guys, when profiling the heap and generating the graph, how can you identify a space leak with the graph?
<Guest18476>	k
<fishythefish>	Guest18476: also, if you're gonna use that base case for everything, you can instead put `fibonacciNumber _ = []` at the end
<jevdplas>	cocreature, here is the function. I suppose the or would create a space leak, no? http://lpaste.net/7969301887763611648
<mnoonan>	crucify_me: related to foldr (.) id, foldr (>=>) return is also handy sometimes (chain a pipeline of monadic actions together)
<fishythefish>	you can also deduplicate your code by binding a name to the recursive call
<cocreature>	jevdplas: change it to "tileType (getTile f row col) == typ || acc" and it should be fine
*	pera has quit (Ping timeout: 240 seconds)
*	jb55 (~jb55@208.98.200.100) has joined
*	humanoyd has quit (Quit: WeeChat 1.9.1)
<fishythefish>	Guest18476: you can pattern match as (x:t@(y:z:zs)) so you can use t instead of y:z:zs
*	garphy is now known as garphy`aw
<jevdplas>	cocreature, thanks. Can you explain why this is the case?
<Guest18476>	ah ok 
<cocreature>	jevdplas: let’s start the other way around: why do you think it contains a space leak?
*	auto_complete_ has quit (Ping timeout: 264 seconds)
*	JuanMiguel (~juanmi@252.red-176-84-7.dynamicip.rima-tde.net) has joined
*	garphy`aw is now known as garphy
<crucify_me>	mnoonan, thanks I don't know about monads yet or pipelines
<Guest18476>	http://lpaste.net/360427
<Guest18476>	i'm having redundant pattern..... 
<fishythefish>	the catch-all pattern needs to be last
<fishythefish>	haskell attempts to match patterns from the top-down, and everything will match _
<fishythefish>	you can get rid of the parens around t
*	afarmer has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
*	hackage hocker 1.0.2 - Interact with the docker registry and generate nix build instructions  https://hackage.haskell.org/package/hocker-1.0.2 (ParnellSpringmeyer)
<jevdplas>	cocreture, since I would expect the evaluation of the expression to be deferred.
*	cdg_ has quit (Remote host closed the connection)
<jevdplas>	which would thus be a space leak
<cocreature>	jevdplas: let’s change this slightly to make it easier to explain: do you also think that "foldr (\x acc -> x || acc) False" has a space leak
<Guest18476>	http://lpaste.net/360428
*	natrys (~natrys@180.234.44.248) has joined
<Guest18476>	it is not working.... 
<Guest18476>	it returned [1]
<fishythefish>	on what input?
<erisco>	what did you try
<Guest18476>	i tried [1..10]
*	jfredett_ (~quassel@c-24-63-187-248.hsd1.ma.comcast.net) has joined
<fishythefish>	this is what i would expect
<crucify_me>	> :t foldr (.) id
<lambdabot>	 <hint>:1:1: error: parse error on input ‘:’
<Guest18476>	the return value should be [1,2,3,5,8]
<Guest18476>	instead it gave me [1]
<fishythefish>	this function doesn't compute fibonacci numbers, it grabs elements from the head of the list as long as x + y == z
<fishythefish>	are you trying to filter a list for fibonacci numbers?
*	hphuoc25 has quit (Remote host closed the connection)
<Guest18476>	yeah
<Guest18476>	it's a practice problem 
*	xcmw has quit (Ping timeout: 240 seconds)
<fishythefish>	then you need to revisit the logic, not your implementation
<Guest18476>	ok 
*	hphuoc25 (~hphuoc25@132.147.71.104) has joined
*	BenceF (~user@catv-80-99-72-156.catv.broadband.hu) has joined
<fishythefish>	try manually processing the input [1..10] just as your code says to
<fishythefish>	that might give you a better idea of when/how/why this fails
<Guest18476>	ok
<jevdplas>	cocreature: I think so, but I'm really confused right now.
*	hackage tasty-hunit 0.10.0.1 - HUnit support for the Tasty test framework.  https://hackage.haskell.org/package/tasty-hunit-0.10.0.1 (RomanCheplyaka)
*	jfredett has quit (Ping timeout: 250 seconds)
<cocreature>	@source foldr
<lambdabot>	Unknown command, try @list
<cocreature>	@src foldr
<lambdabot>	foldr f z []     = z
<lambdabot>	foldr f z (x:xs) = f x (foldr f z xs)
<cocreature>	jevdplas: let’s walk through this for a small example
*	hphuoc25 has quit (Remote host closed the connection)
*	hphuoc25 (~hphuoc25@132.147.71.104) has joined
*	hphuoc25 has quit (Remote host closed the connection)
<crucify_me>	:t foldr (.) id
<lambdabot>	Foldable t => t (b -> b) -> b -> b
<cocreature>	foldr (\x acc -> x || acc) False [True, False] = True || foldr (\x acc -> x || acc) False [False] = True
*	hphuoc25 (~hphuoc25@132.147.71.104) has joined
<cocreature>	and it will behave similarly regardless of how long the tail of the list is
<cocreature>	without leaking space
*	ystael has quit (Ping timeout: 240 seconds)
<BenceF>	Hi, what was the command in GHCi to see which elements of a list are forced?
<fishythefish>	you might be looking for :sprint
<jevdplas>	cocreature, I see. But what's the difference when we turn the arguments of || around or we apply he foldr on [False, True]? 
<[exa]>	Hm is there some good tutorial about parsing a C-like programming language in haskell, using any parsec variant?
<[exa]>	ideally just example code with the least possible amount of magic
*	cschneid_ has quit (Ping timeout: 240 seconds)
*	oish has quit (Ping timeout: 248 seconds)
<BenceF>	fishythefish: it gives me `as = _' even after `take 2 as' was evaluated
<cocreature>	jevdplas: let’s try it out: "foldr (\x acc -> acc || x) False [True, False] = foldr (\x acc -> x || acc) False [False] || True"
<cocreature>	jevdplas: but || is defined by pattern matching on the first argument. so now we actually need to evaluate the result of that foldr
*	hphuoc25 has quit (Ping timeout: 248 seconds)
<crucify_me>	frankly I'm still having a tough time reading the signatures for foldr / foldl
<cocreature>	so we don’t get the desirable shortcircuiting on the first True
*	jxv has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	natrys has quit (Quit: natrys)
<EvanR>	crucify_me: try rewriting the signature so its about lists and not foldables
<fishythefish>	BenceF: what type is as? you might be running into issues with polymorphism
<EvanR>	foldr :: (a -> b -> b) -> b -> [a] -> b
*	oish (~charlie@linux-lisbon.cryptostorm.net) has joined
<BenceF>	fishythefish: it might be. it is (Num a, Enum a) => [a]
<fishythefish>	BenceF: e.g. let as = "asdf" is fine; let as = [1..10] will be problematic, but let as = [1..10] :: [Int] is fine
<jevdplas>	cocreture: I see now. Thanks for your  explanation.
<fishythefish>	BenceF: yeah, then annotate with a concrete type
<crucify_me>	thanks EvanR I'm very confused now
<BenceF>	fishythefish: thank you for the tip
<fishythefish>	crucify_me: foldr/foldl were originally defined for lists. when Foldable was introduced, the type signatures were generalized, so it's easier to start by studying the original list definitions
*	XorSwap has quit (Ping timeout: 248 seconds)
<crucify_me>	makes sense, so the function part, (a -> b -> b) .. 
<Maticz>	is there anyone with any experience in profiling the heap to find space leaks? I've generated a graph and need some help in identifying potentional space leaks
<fishythefish>	b is the type of your accumulator, and a is the element type. that function says how to combine an element into your accumulator
<Profpatsch>	data D a = A | B (D a) | Note a
<aberrant>	why foldr vs foldl ?
<aberrant>	(in general)
<fishythefish>	aberrant: they do different things
<Profpatsch>	Can I strip all Note’s from a value of D w/o enumerating all constructors?
<fishythefish>	aberrant: https://wiki.haskell.org/Foldr_Foldl_Foldl%27 might be a useful read
<Profpatsch>	Err
<Profpatsch>	data D a = A | B (D a) | Note a (D a)
*	dfeuer has quit (Read error: Connection reset by peer)
<aberrant>	thanks, fishythefish
*	osa1 (~omer@haskell/developer/osa1) has joined
*	dfeuer (~dfeuer@wikimedia/Dfeuer) has joined
<Profpatsch>	e.g. B (B ( Note "foo" (Note "bar" (B (B (Note "baz" (B A))))))
<Profpatsch>	To B (B (B (B (B A))))
<EvanR>	so you want to flatten it
<crucify_me>	fishythefish, thanks for that while tired. :) 
<Profpatsch>	f d = case d of { (Note d') -> f d'; d' -> d' }
*	ystael (~ystael@50-199-243-61-static.hfc.comcastbusiness.net) has joined
*	auto_complete_ (~pouriafew@72.142.16.190) has joined
<Profpatsch>	will only strip down to B (B (B (B (Note "baz" (B A))))
*	connrs (~connrs@conners.plus.com) has joined
<Profpatsch>	I guess that only works correctly with enumerating every constructor that has a (D a) in the product and manually applying f
<Profpatsch>	Or changing the orig type to a functor and use recursion schemes.
<daey>	i often read in haskell libraries that 'this library is a wrapper around C-library X' is that a wanted state? or just due to the lack of a native haskell driver?
*	afarmer (~afarmer@199.201.64.139) has joined
<Profpatsch>	daey: Depends on what you want to achieve.
*	AndreasK has quit (Quit: Going offline, see ya! (www.adiirc.com))
<Profpatsch>	daey: Which libraries do you have in mind?
<daey>	Profpatsch: right now im looking at the usb package which is a wrapper around 'bindings-libusb' which is a wrapper around 'libusb-1.*' :'D
<daey>	https://hackage.haskell.org/package/usb this one to be specific
*	agjacome (~agjacome@139.47.29.114) has joined
*	cdg (~cdg@157.166.173.4) has joined
<Profpatsch>	daey: I can imagine that there is a *lot* of man hours in libusb.
<Profpatsch>	And reimplementing that in every language just isn’t a good way to spend developer time.
<Profpatsch>	Same with e.g. bluetooth
*	pera (~pera@unaffiliated/pera) has joined
<Profpatsch>	Or other system-specific stuff.
<daey>	so these wrapper constructs arent necessarily bad then?
<Profpatsch>	No, of course not.
<Profpatsch>	Depends on what you want to achieve.
<daey>	i thought they were simply due to 'time  constrains'
*	auto_complete_ has quit (Ping timeout: 250 seconds)
<Profpatsch>	If you want to compile to JS, then yeah.
*	cdg has quit (Remote host closed the connection)
*	cschneid_ (~cschneid@c-73-229-189-202.hsd1.co.comcast.net) has joined
<Profpatsch>	daey: Well, Haskell doesn’t have an awesome C FFI for nothing.
<Profpatsch>	There’s also a library for C++ FFI
*	siddharthvipul has quit (Quit: Leaving)
*	sepp2k has quit (Read error: Connection reset by peer)
*	osa1 has quit (Ping timeout: 246 seconds)
<crucify_me>	fishythefish, EvanR thanks so much its not a leap to read the generalized form .. now!
*	auto_complete_ (~pouriafew@72.142.16.190) has joined
*	peacememories has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	jevdplas has quit (Ping timeout: 276 seconds)
<crucify_me>	what about foldr (.) id   ...
<crucify_me>	:t foldr (.) id
<lambdabot>	Foldable t => t (b -> b) -> b -> b
<crucify_me>	I know how unification works pretty much, but what happened to our a type ?
*	peacememories (~textual@e234-063.eduroam.tuwien.ac.at) has joined
*	peacememories has quit (Client Quit)
<mnoonan>	crucify_me: the type variable names are basically arbitrary
<dminuoso>	mnoonan: I think he's referring to the fact that foldr had two type variables
*	chaosmasttter (~chaosmast@p54B47CA8.dip0.t-ipconnect.de) has joined
<mnoonan>	ah
<fishythefish>	crucify_me: well, let's do some unification
<fishythefish>	:t foldr
<geekosaur>	I'm tempted to say you don't actually know how unification works.
<lambdabot>	Foldable t => (a -> b -> b) -> b -> t a -> b
<fishythefish>	:t (.)
<lambdabot>	(b -> c) -> (a -> b) -> a -> c
<fishythefish>	:t id
<lambdabot>	a -> a
*	sleffy has quit (Ping timeout: 246 seconds)
*	auto_complete_ has quit (Ping timeout: 268 seconds)
<geekosaur>	but, as a hint: foldr is described in terms of a (somewhat elaborated) (a -> b)
<geekosaur>	but we gave it an (a -> a)
<crucify_me>	I know that (a -> b -> b) is a ~ (b -> b)
<geekosaur>	er
<fishythefish>	who
<fishythefish>	whoa
<crucify_me>	in the case of id 
<fishythefish>	okay, let's start by fixing shadowing
<crucify_me>	did I say that wrong?
<fishythefish>	i'll leave the foldr type variables as they are, but (.) ones I will tack on a ', and for id, i will tack on ''
*	tomphp (~tomphp@cpc73822-dals21-2-0-cust404.20-2.cable.virginm.net) has joined
<fishythefish>	so we have a -> b -> b ~ (b' -> c') -> (a' -> b') -> a' -> c'
<fishythefish>	and b ~ a'' -> a''
*	twanvl (~twanvl@92-110-121-28.cable.dynamic.v4.ziggo.nl) has joined
<crucify_me>	please hold on
<fishythefish>	so a ~ b' -> c', and b ~ a' -> b' ~ a' -> c' ~ a'' -> a''
<fishythefish>	sure, take your time
<dminuoso>	fishythefish: What does ~ denote?
<fishythefish>	dminuoso: type equality
<dminuoso>	fishythefish: Ah. Im guessing it has a low precedence?
<fishythefish>	dminuoso: relative to ->, yes
<edwardk>	Dfeuer: pong
<crucify_me>	the function that takes an element and the acc value: (a -> b -> b) , in terms of identity, a -> a , that would give us a ~ (b->b), right ?
<fishythefish>	crucify_me: rephrase?
<dfeuer>	edwardk: was I right about how you can magic up Applicative from Distributive?
*	VolcanoMan has quit (Ping timeout: 240 seconds)
<dfeuer>	By using Pair (Either (a -> b) a), where Pair a = Pair a a ?
<dfeuer>	er...
<edwardk>	Yep
<fishythefish>	crucify_me: the function filling that role is (.) here, not id
<dfeuer>	Well, something likee that.
<dminuoso>	crucify_me: Remember that the composition is wrapped in () which means its passed as a first class function.
*	hackage postgres-tmp 0.2.0 - Create a temporary database that is deleted after performing some operation  https://hackage.haskell.org/package/postgres-tmp-0.2.0 (cocreature)
<dminuoso>	(.) itself is the argument :)
<dfeuer>	edwardk: that's pretty gross. The big question is whether everyone will *want* something equivalent to that Applicative instance; there could be a different one that's better, or the user may not know yet....
<dfeuer>	edwardk: also, I'm curious what you meant about Compose and monads in that comment.
*	VolcanoMan (~VolcanoMa@143.248.230.141) has joined
*	thunderrd has quit (Ping timeout: 260 seconds)
*	astronavt (~astronavt@2604:2000:1343:4291:bc1d:eea8:f931:72ca) has joined
<crucify_me>	well, if we unify id with (a -> b -> b), since (b -> b) is identity, that would make (b -> b) ~ a   
<fishythefish>	we're not trying to perform that unification
<fishythefish>	also, type variables belonging to different function signatures should be named differently to avoid confusion here
<crucify_me>	ok
*	teddy_error has quit (Quit: Peace ☮︎)
*	darveter (2e75241a@gateway/web/freenode/ip.46.117.36.26) has joined
<fishythefish>	crucify_me: do you understand why that unification is not pertinent?
<crucify_me>	I think so, because:
<crucify_me>	the input is unchanged by id in the definition
<fishythefish>	this has nothing to do with the semantics
<fishythefish>	this is about the order of the arguments
*	JuanMiguel has quit (Quit: This computer has gone to sleep)
<fishythefish>	:t foldr
<lambdabot>	Foldable t => (a -> b -> b) -> b -> t a -> b
<dminuoso>	crucify_me: compose = (.); foldr compose id
<dminuoso>	crucify_me: bing?
<fishythefish>	when you say `foldr (.) id`, (.) is the first argument, and id is the second
*	cdg (~cdg@157.166.173.4) has joined
<fishythefish>	so we're trying to unify the type of (.) with a -> b -> b
<fishythefish>	the type of id is being unified with just b
*	danielzx (252ebeab@gateway/web/freenode/ip.37.46.190.171) has joined
*	VolcanoMan has quit (Ping timeout: 248 seconds)
<danielzx>	Hello there! Are any questions fine here in regards to Haskell?
*	VolcanoMan (~VolcanoMa@143.248.230.141) has joined
<crucify_me>	ok yeah that changes things doesn't it
<fishythefish>	danielzx: pretty much
*	astronavt has quit (Ping timeout: 252 seconds)
<fishythefish>	crucify_me: with that in mind, do my previous type equalities make sense?
*	kolko has quit (Quit: ZNC - http://znc.in)
*	Noldorin has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
*	xcmw (~textual@cpe-65-27-241-63.cinci.res.rr.com) has joined
*	ertes has quit (Ping timeout: 246 seconds)
<danielzx>	Okey, I have a question in regards to an error message I can't grasp (I'm a beginner who's learning Haskell for their uni course)
<crucify_me>	the notation you use '  and ''  I need to go through that. thanks kindly fishythefish et al 
<danielzx>	Can I link a img via Imgur here?
<fishythefish>	danielzx: sure, but if you have a paste, that's even better
<darveter>	crucify_me: foldr is very simple: foldr g z [a,b,...,n] = g a (g b (... (g n z) ...))
<dminuoso>	danielzx: absolutely
<fishythefish>	crucify_me: the ' is just another letter in the identifier
<crucify_me>	thanks I'll put it in my editor and try to sort it out
<dminuoso>	crucify_me: Also this visualization might really be amazing. `foldr` basically just swaps out : for something else. https://wiki.haskell.org/wikiupload/3/3e/Right-fold-transformation.png
<dminuoso>	crucify_me: if you imagine : being swapped out for (.) it should be utterly obvious
<darveter>	crucify_me: so foldr (.) id [a,b,...,n] = a . b . ... . n . id
*	solv3d has quit (Ping timeout: 240 seconds)
<dminuoso>	crucify_me: and there id takes the role of `z`
<crucify_me>	yeah dminuoso the book I'm using says don't think of foldr 's behavior as recursive even though the function is
*	ystael has quit (Ping timeout: 250 seconds)
*	davr0s (~textual@host81-155-65-221.range81-155.btcentralplus.com) has joined
<crucify_me>	darveter, dminuoso fishythefish thanks again I gotta go to work
<danielzx>	https://i.imgur.com/ajUlJaI.png I don't really understand what this error message entails
*	beaky has quit (Read error: Connection reset by peer)
<darveter>	crucify_me: (f . g) . h = f . (g . h) , so we can omit the parentheses. best.
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Fri Dec  1 12:07:57 2017

**** BEGIN LOGGING AT Sat Dec  2 11:18:00 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | AoC leaderboard 43100-84040706
*	Topic for #haskell set by glguy (Thu Nov 30 21:14:35 2017)
*	Channel #haskell url: http://www.haskell.org/
<EvanR>	like, you could encode every inductive element of the type as a separate ctor
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
<danielzx>	http://lpaste.net/1914507828542832640 I try to compile the code but get this error
<danielzx>	:(
<erisco>	yes because line 3 should start as  group (x:xs) =
<erisco>	I've said this two or three times now… ;)
<EvanR>	also how do you do case analysis on a type with infinite ctors
*	mxstrbng has quit (Ping timeout: 268 seconds)
<danielzx>	I'm sorry, been on this assignment for a few days now and kinda frustrated 
<EvanR>	this is like a theory with an infinite number of axioms, one for each theorem you would normally have to prove
*	XorSwap has quit (Ping timeout: 248 seconds)
<danielzx>	Not your fault though ^^
<netsu>	hello there! Trying build aged package. And there's errors, because ghc infer [] like IsList and "" like IsString. How can I disable such general behaviour? 
<crucify_me>	well the hutton book is very good but the section on folds was skimpy. thanks for patient help yesterday all.
<Tuplanolla>	You would have to replace pattern matching with elimination, EvanR.
<erisco>	x = 1 and xs = [1,2] and we want to know what  span (==x) xs  reduces to
<danielzx>	so thanks for being patient with me through all this
<erisco>	> span (==1) [1,2]
<lambdabot>	 ([1],[2])
<erisco>	so  span (==1) [1,2]  reduces to  ([1],[2])
<fishythefish>	Tuplanolla: does this gain anything over just adding an extra argument to a regular constructor?
<Tuplanolla>	Peace of mind, fishythefish.
<danielzx>	Wasn't that my explanation? 
<danielzx>	:O
<erisco>	I wanted you to tell me precisely, not give an explanation
<fishythefish>	for some definition of "peace"
<danielzx>	fair enough
*	smckay has quit (Quit: smckay)
<erisco>	reductions are precise
*	mxstrbng (~mxstrbng@213.181.205.62) has joined
<crucify_me>	fishythefish, << awesome human
<EvanR>	would you want a type which has a ctor for every point on a circle
<erisco>	so, we can pattern match this result …  group (x:xs) = let (g, xs') = span (==x) xs in ?
<erisco>	what is the final thing we need to do for '?' ?
*	cschneid (~cschneid@c-73-169-38-50.hsd1.co.comcast.net) has joined
<monochrom>	Hi erisco, does the assignment require the student to write their own "group"?
*	ego has quit (Quit: wir müssen wissen — wir werden wissen)
<erisco>	monochrom, we're yak shaving at the moment… not allowed to import things
*	auto_complete_ has quit (Ping timeout: 260 seconds)
<monochrom>	Yikes
<monochrom>	But erisco++ for Socratic method.
<EvanR>	i hope not allowed to import things means, also NoImplicitPrelude :)
<erisco>	this is the only complicated part of the overall answer, though… once we have group the rest will fall into place
*	ego (~ego@parallaxcorporation.xyz) has joined
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
*	gtomas has quit (Quit: gtomas)
<erisco>	and since I was asked to implement group in my first functional programming course, I think it is reasonable :)
*	robotroll has quit (Remote host closed the connection)
<danielzx>	What's g in your statement?
*	justan0theruser (~justanoth@unaffiliated/justanotheruser) has joined
*	oish (~charlie@159.22.169.217.in-addr.arpa) has joined
<EvanR>	what other principles can we corrupt by allowing infinite... can proofs be infinitely long
<erisco>	for the sample where  x = 1  and  xs = [1,2]  then  g = [1]  because  span (==x) xs = ([1],[2])
<netsu>	Oh, I found. Somewhy `:set -XOverloadedStrings` ghci.conf have higher priority than `Extensions: NoOverloadedStrings` in *.cabal
<danielzx>	ok, so the first element=
<danielzx>	?*
<lambdabot>	Maybe you meant: v @ ? .
<monochrom>	Infinitely long proofs are equivalent to allowing fix :: (a->a)->a in programming.
<erisco>	feel free to choose a longer name
<EvanR>	can diagrams be infinitely big
<monochrom>	There are infinite graphs so yeah.
<erisco>	danielzx, the first element of the 2-tuple returned by  span (==x) xs  yes
<danielzx>	So wouldn't ? = group as we are using span on the entire list?
*	Average-user has quit (Quit: Leaving.)
*	xcmw (~textual@cpe-65-27-241-63.cinci.res.rr.com) has joined
<EvanR>	can expressions be infinitely big
<monochrom>	Quantum wave functions can also be thought of as infinitely big matrices.
<EvanR>	skeptical...
<monochrom>	or infinitely big vectors? I forgot which
<erisco>	danielzx, what we have determined with span is one of the groups we need to yield
*	mstruebing has quit (Disconnected by services)
<Tuplanolla>	It's functions being infinite-dimensional vectors, monochrom.
<danielzx>	yes
<monochrom>	(See Heisenberg's "matrix mechanics")
*	mxstrbng is now known as mstruebing
<EvanR>	ok when you only have continuous functions you can encode all the info in a countable number of parameters
*	cschneid has quit (Ping timeout: 248 seconds)
<erisco>	danielzx, right? say our list is [1,1,1,2,3] then span will give us ([1,1],[2,3])
<danielzx>	exactly
*	mstruebing1 (~mstruebin@2a00-1dc0-cafe--298f-12e7.static.as43289.net) has joined
<erisco>	danielzx, so the first part of the missing piece is  x : g
*	zachk (~zachk@unaffiliated/zachk) has joined
*	justanotheruser has quit (Ping timeout: 240 seconds)
<erisco>	because  x : g  in that example will be  [1,1,1]
<danielzx>	can I say that g = xs?
<erisco>	why would you like to say that?
<nshepperd_>	I don't think infinitely long proofs would make any sense
<danielzx>	cause I always use x:xs for all our courses when talking about pattern matching
<danielzx>	or am I confusing them now?
<nshepperd_>	You could prove anything by use of fix id :p
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	`Guest00000 has quit (Ping timeout: 240 seconds)
<erisco>	okay, I am not exactly sure what you mean. We used (x:xs) when we said  group (x:xs) =
<monochrom>	danielzx, there are obviously more patterns than x:xs
<EvanR>	perhaps because proofs ought to be verifiable in finite time
<danielzx>	yes
<EvanR>	so maybe that is a principle to keep in mind when expanding something from finite to infinite
<danielzx>	and when you used x:g I automatically associated it with x:xs and got confused
<erisco>	ah, okay, so in the position of the question mark, that is not a pattern, it is an expression
<danielzx>	oki, so we want an expression after in?
<erisco>	if I say  f (x:xs) = x:xs  for example the x:xs on the left of = is a pattern, and the x:xs on the right of = is an expression
<erisco>	the first means "match a list with a head and a tail" and the second means "create a list with this head and this tail"
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Sat Dec  2 11:36:27 2017

**** BEGIN LOGGING AT Sat Dec  2 11:36:45 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | AoC leaderboard 43100-84040706
*	Topic for #haskell set by glguy (Thu Nov 30 21:14:35 2017)
*	Channel #haskell url: http://www.haskell.org/
*	Disconnected ()
**** ENDING LOGGING AT Sat Dec  2 11:38:18 2017

**** BEGIN LOGGING AT Sat Dec  2 11:46:48 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | AoC leaderboard 43100-84040706
*	Topic for #haskell set by glguy (Thu Nov 30 21:14:35 2017)
*	Channel #haskell url: http://www.haskell.org/
<danielzx>	g = the prefix and xs' the final list containing elements which occur more than once
<erisco>	yes, but answer precisely
<monochrom>	"the prefix" is vague.
<erisco>	and your description of the rest of the list seems off
<monochrom>	If someone asked you "3+4 = ?" you would answer simply and pointedly "7" you would not write an essay on addition and its history and its place in civilization.
<danielzx>	the longest prefix?
<erisco>	every time I ask what something is equal to, or what it reduces to, or what it is equivalent to, etc, I am looking for a formal answer, not a story ;)
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
<danielzx>	lol
<danielzx>	so how is my description of the rest of the list of?
*	codyw (~cody@c-73-231-132-53.hsd1.ca.comcast.net) has joined
<erisco>	because it is not necessarily containing elements which occur more than once
<erisco>	in fact, in this case  xs' = [2,3]  which clearly doesn't satisfy that
<danielzx>	if you say then that all the element which aren't equal to x?
*	mkoenig has quit (Ping timeout: 240 seconds)
<erisco>	well, no, you might be conflating with the larger problem we are solving
<erisco>	> group [1,2,1,2]
<lambdabot>	 [[1],[2],[1],[2]]
<erisco>	remember that group only looks at adjacent elements
<erisco>	in the larger problem we sorted the list first, so all the equal elements are adjacent
<danielzx>	yes
*	oisdk (~textual@51-171-255-121-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined
*	mkoenig (~mkoenig@93.115.89.101) has joined
<erisco>	so, the rest of the list may contain elements equal to x, we just know it isn't the head of that list
*	ian_andrich (~ian_andri@c-73-223-61-224.hsd1.ca.comcast.net) has joined
<erisco>	if we know the list was sorted then we know no other elements are equal to x, but that is extra information outside the scope of group
*	auto_complete_ has quit (Ping timeout: 248 seconds)
<erisco>	so, what does g equal and what does xs' equal?
<erisco>	remember we're at  let (g, xs') = ([1,1],[2,3]) in 1 : g
<monochrom>	Or, to zoom in a bit, (g, xs') = ([1,1],[2,3])
<erisco>	if I asked what does x equal in  let x = 5 in 3 + x  what would you tell me
<danielzx>	5
<erisco>	right, and what would you tell me for  let (x, y) = (5, 6) in 3 + x  ?
<danielzx>	(5, 6)
<danielzx>	or wait
<danielzx>	5
*	manjaro-kde5_ (~manjaro-k@S01068c7f3b31bdab.ed.shawcable.net) has joined
<erisco>	right! remember on the left of = we are pattern matching
<danielzx>	alright
<erisco>	so, going back, what does g equal and what does xs' equal?
<danielzx>	g = the longest prefix([1,1]) and xs' = the remaining elements which didn't match with the head so ([2,3])?
*	mstruebing has quit (Quit: WeeChat 1.9.1)
*	mstruebing1 is now known as mstruebing
*	erikd (~erikd@hendrix.mega-nerd.net) has joined
<erisco>	yes
*	mstruebi1 (~mstruebin@213.181.205.62) has joined
*	mstruebing is now known as Guest50870
*	leothrix has quit (Ping timeout: 250 seconds)
<erisco>	though I see you're unwilling to let go of the wordy explanations :P
*	mstruebi1 has quit (Client Quit)
*	tom-lambda (5f9754fc@gateway/web/freenode/ip.95.151.84.252) has joined
<danielzx>	It's a old habit, makes it easier for me to understand :P
*	jb55 (~jb55@S0106586d8f7ea4ba.vc.shawcable.net) has joined
<erisco>	so now substitute g and xs' into 1 : g
*	mstruebi1 (~mstruebin@213.181.205.62) has joined
<danielzx>	So it becomes 1 : [(1,1)]
<danielzx>	?
<erisco>	try again
<erisco>	that would be a type error, and that doesn't match what you said g was equal to
*	mstruebi1 is now known as mstruebing
*	mstruebing has quit (Client Quit)
<danielzx>	I said g is equal to [(1,1)]
*	mstruebing (~mstruebin@213.181.205.62) has joined
<danielzx>	the longest prefix
<TMA>	danielzx: you did not say that before
<erisco>	the brackets are playing tricks on you
<danielzx>	"g = the longest prefix([1,1])" or?
<TMA>	danielzx: you said something quite different
<danielzx>	eh?
<erisco>	([1,1]) and [(1,1)] are not the same thing
<erisco>	([1,1]) is mundanely the same as [1,1]
<erisco>	[(1,1)] is a list containing the 2-tuple (1,1)
*	oisdk has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<danielzx>	oh wow now I see the mistake
<danielzx>	sorry about that
*	forell (~forell@unaffiliated/forell) has joined
<erisco>	I thought you were using parens as an aside in speech, sorry
*	garphy`aw is now known as garphy
<danielzx>	so it would be 1 : ([1,1])?
<erisco>	perhaps a reason to be precise in the first place ;)
<danielzx>	seems like it lol
*	inhortte has quit (Ping timeout: 248 seconds)
<erisco>	yes, and go ahead and make it all sugar
<danielzx>	make it all sugar_
<erisco>	haha, I just mean to choose the square bracket notation over :
*	Xal has quit (Ping timeout: 260 seconds)
<danielzx>	Like so [1, ([1,1])]?
<danielzx>	or?
<erisco>	no, lets go the other way and remove all the sugar then
<danielzx>	sorry haha¨
<erisco>	rewrite ([1,1]) to use : and []
*	ninedotnine has quit (Read error: Connection reset by peer)
*	behr328 has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	ninedotnine (~dan@modemcable078.123-81-70.mc.videotron.ca) has joined
<danielzx>	1 : [(1)]?
*	fishythefish has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	mson (uid110608@gateway/web/irccloud.com/x-sqpojsarxxsyigiy) has joined
<TMA>	danielzx: good first step
<erisco>	well that's getting closer, now rewrite [(1)] to use : and []
<danielzx>	1 : [()]
<erisco>	remember that [] is a constructor
<erisco>	when I say "use []" I mean to use the constructor, not to use the square bracket sugar (that is what we want to get rid of!)
<danielzx>	oh
*	barcabuona has quit (Quit: WeeChat 1.9.1)
*	Xal (~Xal@S010664777dabacc3.vw.shawcable.net) has joined
<erisco>	this tends to be confusing so you have to pay really close attention
*	tomlukeywood (~tom@host-92-19-232-58.static.as13285.net) has left
*	behr328 (~behr328@ool-18bed7a5.dyn.optonline.net) has joined
*	safe (~safe@unaffiliated/safe) has joined
*	zwarag_ (~zwarag@2a02:8388:e82:b00:4cbe:172d:dd13:652b) has joined
<danielzx>	so something like 1 : (not sure what to put here)
<erisco>	[] is a constructor, and square brackets with stuff between them is some sugar notation
<erisco>	entirely different things
<erisco>	okay, what is the empty list?
*	Guest50870 has quit (Ping timeout: 260 seconds)
*	Noldorin has quit (Ping timeout: 260 seconds)
*	unyu has quit (Ping timeout: 260 seconds)
<danielzx>	a pattern?
<danielzx>	or what do you mean?
<erisco>	I am looking for an expression, which is going to be a constructor, that makes the empty list
*	eliasr has quit (Ping timeout: 260 seconds)
<danielzx>	wouldn't that be [] = []
<erisco>	okay, why do you have = in there?
*	felixsch__ has quit (Ping timeout: 260 seconds)
<erisco>	lets just explain lists then
<danielzx>	I was thinking in the same sense as "function name" [] = []
<erisco>	:t []
<lambdabot>	[a]
*	mkoenig has quit (Remote host closed the connection)
<erisco>	> []
<lambdabot>	 []
*	xnyhps has quit (Ping timeout: 260 seconds)
*	zwarag has quit (Ping timeout: 260 seconds)
<erisco>	[] is the constructor which makes the empty list
<danielzx>	oh
<erisco>	now, what other constructor do lists have?
<danielzx>	:
<danielzx>	[a]
*	eliasr (uid27497@gateway/web/irccloud.com/x-tqntdbvooemuvpps) has joined
<danielzx>	[a,a,...n]
<erisco>	right, so, given the empty list, how do you add an element?
<danielzx>	a : []
*	manjaro-kde5_ has quit (Quit: Konversation terminated!)
<erisco>	[a] and [a,a,...n] are not constructors
<danielzx>	ok
<erisco>	right, and what is another way to write  a : []  ?
*	behr328 has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<erisco>	this other way is the sugar notation, i.e. using square brackets with comma-separated elements between them
<danielzx>	[a]
*	Jeanne-Kamikaze has quit (Remote host closed the connection)
<erisco>	right
<danielzx>	Uhm, can I ask a question?
<erisco>	go ahead
*	behr328 (~behr328@ool-18bed7a5.dyn.optonline.net) has joined
<danielzx>	How much left do we have to go through so that I can attack my assignment again?
*	fishythefish (~fishythef@24.35.64.112) has joined
*	JappleAck has quit (Ping timeout: 248 seconds)
<danielzx>	not wanting to be rude or anything, if it sounded like that
<erisco>	after group we need to just do a simple map
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	systemfault has quit (Client Quit)
<erisco>	this is the only difficult part of it
<humanoyd>	Is there a 24-days-of-hackage this year?
<TMA>	it depends on whether it starts making sense to you -- if it does, you'll be able to proceed fast, if not ...
<erisco>	I am leading you through about the lowest path of resistance as I can think of, given that we cannot import group
<erisco>	and the overall solution, given group and order (which we defined earlier), is a one-liner, so it is hard to beat that
<TMA>	danielzx: back to [(1)] ... do you see why it is not the same as 1 : [()] ?
<danielzx>	we can't change the content of a tuple?
*	mstruebing1 (~mstruebin@2a00-1dc0-cafe--298f-12e7.static.as43289.net) has joined
<erisco>	we seem to be getting tripped up over redundant parentheses and how the square bracket notation works
*	carlomagno (~cararell@inet-hqmc02-o.oracle.com) has joined
*	oisdk (~textual@51-171-255-121-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined
*	ericshortcut has quit (Remote host closed the connection)
<erisco>	[(1)] is the same as [1]
<hpc>	but () is not the same as nothing
<erisco>	we do not have 1-tuples in Haskell
<erisco>	() is a constructor for a type also called () or pronounced "unit", and we needn't bother with that for this problem
<danielzx>	so it's a waste of space
<erisco>	no, it is just not applicable to the problem we're solving at the moment
*	taktoa (~quassel@173.230.18.199) has joined
*	robotroll (~robotroll@unaffiliated/robotroll) has joined
<erisco>	lets just go through a couple examples of translating between :/[] and the sugar notation
*	osa1 has quit (Ping timeout: 246 seconds)
<erisco>	desugar these: [1,2,3]  1:[2,3]  1:2:[3]
*	Swizec has quit (Ping timeout: 240 seconds)
<erisco>	then sugar these:  3:2:1:[]  3:2:[1]  3:[2,1]
*	i-am-the-slime (~mark@2a02:8109:9200:3920:1984:cae0:b1e6:772) has joined
<danielzx>	(1,2,3:[]) for the first one, correct?
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sat Dec  2 12:21:18 2017

**** BEGIN LOGGING AT Sun Dec  3 14:52:12 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | AoC leaderboard 43100-84040706
*	Topic for #haskell set by glguy (Thu Nov 30 21:14:35 2017)
*	Channel #haskell url: http://www.haskell.org/
*	stickyfingaz has quit (Remote host closed the connection)
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	Guest78 (~textual@2604:2000:c680:8700:8ba:1750:2b83:a9c5) has joined
*	stickyfingaz (~matic@92.63.31.245) has joined
*	auto_complete_ has quit (Ping timeout: 255 seconds)
*	drw77 has quit (Quit: Leaving)
*	alex`` has quit (Ping timeout: 260 seconds)
*	mson (uid110608@gateway/web/irccloud.com/x-yhnyofbqkjdraszm) has joined
*	ian_andrich (~ian_andri@c-73-223-61-224.hsd1.ca.comcast.net) has joined
*	a3Dman has quit (Ping timeout: 240 seconds)
*	pepton has quit (Ping timeout: 255 seconds)
*	coot_ has quit (Quit: coot_)
*	FreeBirdLjj (~freebirdl@116.230.52.231) has joined
*	quobo (uid178934@gateway/web/irccloud.com/x-ezwieqbyzllzlvyv) has joined
*	baboum has quit (Quit: WeeChat 1.9.1)
*	silver_ (~silver@93.85.36.20) has joined
*	lambda-11235 has quit (Ping timeout: 240 seconds)
*	thblt has quit (Ping timeout: 248 seconds)
*	jxv has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	__main__ (~main@50-250-226-89-static.hfc.comcastbusiness.net) has joined
*	leothrix has quit (Ping timeout: 260 seconds)
*	jxv (~jxv@2605:e000:9060:6500:e05a:c63c:f6b2:8a9b) has joined
*	silver has quit (Ping timeout: 248 seconds)
*	darjeeling_ has quit (Ping timeout: 248 seconds)
*	ammazza (~ammazza@2405:b000:206:2:0:b001:159:119) has joined
*	FreeBirdLjj has quit (Remote host closed the connection)
*	jxv has quit (Client Quit)
*	FreeBirdLjj (~freebirdl@116.230.52.231) has joined
*	puregreen has quit (Ping timeout: 260 seconds)
*	bonz060 has quit (Quit: WeeChat 1.6)
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
*	FreeBirdLjj has quit (Read error: Connection reset by peer)
*	FreeBird_ (~freebirdl@116.230.52.231) has joined
*	rihards has quit (Quit: rihards)
*	lambda-11235 (~lambda-11@campus-119-014.ucdavis.edu) has joined
*	nighty- has quit (Quit: Disappears in a puff of smoke)
*	mandiblegrip (~user@123.51.111.34) has joined
*	_main_ (~main@104.59.218.233) has joined
*	stickyfingaz has quit (Quit: Leaving)
*	barcabuona (~babbage@524BAC8C.cm-4-4c.dynamic.ziggo.nl) has left ("WeeChat 1.9.1")
*	maerwald has quit (Ping timeout: 260 seconds)
*	ezrios has quit (Quit: WeeChat 1.9.1)
*	_main_ has quit (Read error: Connection reset by peer)
*	sgronblo has quit (Ping timeout: 248 seconds)
*	__main__ has quit (Read error: Connection reset by peer)
*	_main_ (~main@50-250-226-89-static.hfc.comcastbusiness.net) has joined
*	maerwald (~maerwald@mail.hasufell.de) has joined
*	FreeBird_ has quit (Ping timeout: 255 seconds)
*	henriquezanin[m] (henriqueza@gateway/shell/matrix.org/x-rslicmgybkiznwir) has joined
<dminuoso>	Sigh.. [1]    66983 segmentation fault  stack ghci
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<dminuoso>	Okay so apparently today is not the day to step into this damn function `some`. :-)
*	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined
*	_main_ is now known as __main__
*	{emptyset} (~aconant1@c-73-222-75-3.hsd1.ca.comcast.net) has joined
*	nshepperd has quit (Quit: WeeChat 1.9.1)
<tabemann>	when using gi-gtk I can get Haskell code to segfault easily
<tabemann>	without having to use any unsafe functions
*	i-am-the-slime has quit (Ping timeout: 260 seconds)
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	FreeBirdLjj (~freebirdl@116.230.52.231) has joined
<crucify_me>	if this makes sense, any suggestions for composed basic prelude functions that would be good practice for unifying the types ? I now understand how ' foldr (.) id ' is unified pretty well.
<dminuoso>	tabemann: Well I did nothing but step into a harmless beginner function. But it appears that in todays nightly build the bug is gone.
<dminuoso>	But its slightly frustrating to have 2 panics and 1 seg fault within a week doing only beginner stuff, no extensions or funky things. :(
<dminuoso>	crucify_me: (.) . (.)
<tabemann>	you got haskell to make your kernel panic?
*	Neomex has quit (Read error: Connection reset by peer)
*	uuplusu (~uuplusu@183.157.160.59) has joined
<dminuoso>	tabemann: nah, ghc panics
<crucify_me>	trippy seriously dminuoso 
<crucify_me>	?
<tabemann>	ah
*	Neomex (~Neomex@net-37-117-30-94.cust.vodafonedsl.it) has joined
<dminuoso>	crucify_me: Yes. It's a freaking awesome combinator. You can also do (.) . (.) . (.) if you want
<dminuoso>	I tried it, and failed. It's kind of confusing.
*	uuplusu has quit (Client Quit)
*	knupfer (~Thunderbi@p200300EB4BD41F001903F63F0057F635.dip0.t-ipconnect.de) has joined
<crucify_me>	confusing? you are writing to me regarding the second one?
*	XorSwap has quit (Ping timeout: 260 seconds)
<ph88>	doubleChar :: [Char] -> [Char]    doubleChar = (>>= replicate 2)    how come  bind does the same as concatMap here ?
<dminuoso>	crucify_me: I tried doing type unification on the first, after maybe 30 minutes of starring at as and bs I kind of gave up.
<dminuoso>	ph88: For [] that's what bind does.
<ph88>	oh ok
<crucify_me>	how is it awesome dminuoso I cant comprehend it at the moment
*	auto_complete_ has quit (Ping timeout: 255 seconds)
<crucify_me>	the 1st one
*	FreeBirdLjj has quit (Ping timeout: 255 seconds)
*	uuplusu (~uuplusu@183.157.160.59) has joined
<crucify_me>	let alone the 2nd one
*	starc (~quassel@bolt.sonic.net) has joined
<dminuoso>	ph88: a >>= b is the same as `join $ b <$> a`, and for lists join folds using concat
<dminuoso>	crucify_me: well the type makes it very obvious what it does.
<crucify_me>	really
<dminuoso>	:t (.)
*	Junior (adb7ee73@gateway/web/freenode/ip.173.183.238.115) has joined
<lambdabot>	(b -> c) -> (a -> b) -> a -> c
<dminuoso>	:t (.) . (.)
<lambdabot>	(b -> c) -> (a1 -> a2 -> b) -> a1 -> a2 -> c
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
<dminuoso>	:t (.) . (.) . (.)
<lambdabot>	(b -> c) -> (a1 -> a2 -> a3 -> b) -> a1 -> a2 -> a3 -> c
<glguy>	Doing Advent of Code this year? Join the #haskell group: http://adventofcode.com/2017/leaderboard/private 43100-84040706 (yes, I've sent this out already but every time I do a couple more people join)
<crucify_me>	cannot follow what it does
<crucify_me>	but would like to learn
<dminuoso>	crucify_me: maybe aligning helps: https://gist.github.com/dminuoso/3d0b15ef96b149d35ddee3d8d2935ea7
<dminuoso>	crucify_me: note that you can think of a as a1
<dminuoso>	if that helps.
<Junior>	Hi, I'm learning Haskell and I'd like to know any learning resources people have found useful.  Any recommendations?
<crucify_me>	but in English what does the 1st one do?
<dminuoso>	crucify_me: the first one is just (.) function composition.
<Junior>	I'm reading Haskell Programming From First Principles book
<dminuoso>	crucify_me: they are all function composition in fact.
*	knupfer has quit (Ping timeout: 255 seconds)
<Junior>	Also referring to Learn You A Haskell book.
<crucify_me>	yeah, so what does it do and what would the inputs look like?
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<dminuoso>	crucify_me: f . g = \x -> f(g(x))
<dminuoso>	crucify_me: the type signature tells you what the inputs look like.
*	ljc (~ljc@unaffiliated/ljc) has joined
*	bonz060 (~bonface@gateway/tor-sasl/bonz060) has joined
<crucify_me>	Junior, I started Graham Hutton's book. he's a professor with a very clear style. I found the other book to be overwhelming (from 1st principles) but I am not a programmer and self-teaching at later age.
*	auto_complete_ has quit (Ping timeout: 260 seconds)
<crucify_me>	dminuoso, but functions f and g are not (.) 
*	doodlehaus (~doodlehau@71-89-72-8.dhcp.bycy.mi.charter.com) has joined
*	takuan has quit (Remote host closed the connection)
<dminuoso>	crucify_me: (.) is a function itself.
<Junior>	crucify_me, that is his "Haskell Programming" book?
<dminuoso>	crucify_me: so why not compose (.) after (.) ;-)
<Junior>	I meant "Programming Haskell" book?
<glguy>	Junior: http://www.cs.nott.ac.uk/~pszgmh/pih.html
<crucify_me>	2nd edition Junior . I can at least move through it with help here on the irc
<dminuoso>	:t (.)
<lambdabot>	(b -> c) -> (a -> b) -> a -> c
*	eSVG (~svg@2601:c6:8302:8b50:c972:54af:f335:f47b) has joined
<dminuoso>	Obviously since that has the characterstics of a' -> b' you can compose that with.. well (.) ;-)
*	stphrolland has quit (Quit: leaving)
*	ammazza has quit (Ping timeout: 255 seconds)
<crucify_me>	hmm I'm baffled, its not obvious to me
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
<Junior>	Thanks, crucify_me.  I'll check that out.  Any other learning material you would recommend besides that book?  Blogs, Courses, videos?
*	raingloom (~raingloom@catv-178-48-182-38.catv.broadband.hu) has joined
<dminuoso>	crucify_me: But fair enough, it's a bit heavy. Have you done `flip id` ?
<hpc>	crucify_me: a' = (b -> c), b' = ((a -> b) -> a -> c)
<crucify_me>	that and 1st principles book are well-regarded on this chatroom
<crucify_me>	Junior, ^
<crucify_me>	hpc sorry what's that there?
*	davr0s (~textual@host81-155-65-221.range81-155.btcentralplus.com) has joined
<hpc>	that's how the type of (.) unifies with the type (a' -> b')
<crucify_me>	thanks
<ahf>	290
<dminuoso>	crucify_me: The last document on showing how type unification works out on (.) . (.) was about 130 lines long.
<Junior>	I see, crucify_me.  Have you tried building an app with Haskell?
<dminuoso>	crucify_me: The mental model that helped was rewriting into (.) (.) (.), and then starting off with (.) (.)
<crucify_me>	ok thanks Im going to skip it. appreciate it. flip id I could probably do. dminuoso 
<dminuoso>	crucify_me: flip id is a neat one. 
<dminuoso>	:t id
<lambdabot>	a -> a
<dminuoso>	:t flip id
<lambdabot>	b -> (b -> c) -> c
*	afarmer (~afarmer@24.7.34.170) has joined
<erisco>	:t const id
<lambdabot>	b -> a -> a
<hpc>	:t const const
<lambdabot>	b1 -> a -> b2 -> a
<erisco>	:t const . const
<lambdabot>	a -> b1 -> b2 -> a
<takitus>	Junior: If you can find it, Bird & Wadler's Introduction to Functional Programming Using Haskell is excellent. Not a Haskell tutorial, mind you.
<crucify_me>	yeah I did flip id  and const id and found it interesting. let me paste something...
<crucify_me>	not the unification per se but .. let me look at it again
<Cale>	dminuoso, crucify_me: I find it helps to think of (.) . (.) as being a special case of fmap . fmap
*	yellowj has quit (Ping timeout: 258 seconds)
<dminuoso>	Cale: Yeah I learned about that trick from Edward Kmett when he talked about semantic editor combinators.
*	slackman has quit (Remote host closed the connection)
*	slackman (~slackman@e5.ce.9bc0.ip4.static.sl-reverse.com) has joined
<crucify_me>	Cale hmm, I haven't done fmap yet.
*	db8093246 has quit (Remote host closed the connection)
<Cale>	So, fmap :: (a -> b) -> (f a -> f b), and so fmap . fmap :: (a -> b) -> (g (f a) -> g (f b)) (for some functors f and g)
<dminuoso>	Cale: Or wait.. (.) is a kind of fmap?
<Cale>	yeah
<Cale>	with f t = e -> t
<Junior>	takitus, thanks I'll check that out as well.  Any recommendations on a first app to build?  I was thinking of doing a toDo app.
<crucify_me>	sorry that is over my head. haven't met functor yet
<Cale>	So if f t = e -> t, and g t = e' -> t, then we get  fmap . fmap :: (a -> b) -> (e' -> e -> a) -> (e' -> e -> b)
*	tabemann (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net) has left
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	ShalokShalom has quit (Remote host closed the connection)
<Cale>	class Functor f where
*	nomicflux has quit (Quit: nomicflux)
*	ph88 has quit (Remote host closed the connection)
<Cale>	  fmap :: (a -> b) -> f a -> f b
*	KeyJoo has quit (Ping timeout: 260 seconds)
<Cale>	It just generalises the sorts of data structures that you can have "map"-like functions on
*	tabemann (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net) has joined
<Cale>	If we pick f = (->) e
<takitus>	Junior: As in a things-to-do-reminder? Sure, go for it.
<Cale>	that is, the function type constructor partially applied to one argument
<Cale>	(->) e a = e -> a
*	ShalokShalom (~quassel@80-108-196-21.cable.dynamic.surfer.at) has joined
<Cale>	then we get the specialised type:  fmap :: (a -> b) -> (e -> a) -> (e -> b)
<Junior>	takitus, how is Haskell as far as web development goes?
<dminuoso>	Cale: what is e in this case?
<Cale>	which is exactly the type of function composition
*	ShalokShalom has quit (Remote host closed the connection)
<Cale>	any fixed type
*	tabemann (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net) has left
<Cale>	(it's a type variable)
<EvanR>	e for environment
*	doodlehaus has quit (Remote host closed the connection)
*	ShalokShalom (~quassel@80-108-196-21.cable.dynamic.surfer.at) has joined
<dminuoso>	Cale: Mmm. Is this Functor instance made explicit somewhere?
<Cale>	It's in the Prelude
<Cale>	All there is to it is
>Junior<	I've looked at a lot of books, Hutton is refreshingly written in lucid style and is only 28 dollars on kindle
<Cale>	instance Functor ((->) e) where
*	tabemann (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net) has joined
<Cale>	  fmap = (.)
*	ziyourenxiang has quit (Remote host closed the connection)
<takitus>	Junior: I can't comment, I haven't used it for anything Web-oriented yet.
<Junior>	Okay, what kind of things have you used it for?
<EvanR>	unpacking... fmap f myFunction x = f (myFunction x)
<Cale>	Junior: My full time job is developing web applications entirely in Haskell, and I think it's pretty great overall
<EvanR>	er, x would be better named e 
<dminuoso>	Cale: Mmm curious, I did not spot it on https://hackage.haskell.org/package/base-4.10.0.0/docs/Data-Functor.html#t:Functor 
*	jimmyrcom_ has quit (Remote host closed the connection)
*	auto_complete_ has quit (Ping timeout: 260 seconds)
*	SenasOzys has quit (Ping timeout: 248 seconds)
*	ammazza (~ammazza@130.155.160.155) has joined
<Cale>	Junior: We use Reflex-DOM with GHCJS to build the Web frontends, and Reflex-DOM with GHC's cross compilation to build Android and iOS application frontends from the same Reflex-DOM code.
<Junior>	Cale, what web application framework do you use for your day to day job for this?  I was thinking of trying Yesod.
<dminuoso>	Or maybe that LiftedRep threw me off. Not sure what that's about
<Cale>	dminuoso: hmm, I don't know what instances are in scope there
<Cale>	dminuoso: Apparently the instance is defined in GHC.Base though
*	jimmyrcom_ (~fold@71-11-240-211.dhcp.dntn.tx.charter.com) has joined
<dminuoso>	Well there is a `Functor ((->) LiftedRep LiftedRep r)` is that actually it?
*	steeze has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
<dminuoso>	Ah yeah I see it in the source for it.
<Cale>	Junior: For the backend stuff, we use Snap, even though we don't really use most of its features, since all our applications are single page applications which consist of a blob of Javascript compiled from Haskell that controls the contents of the DOM, and communicate with the backend via websocket.
*	leothrix (~leothrix@elastic/staff/leothrix) has joined
<dminuoso>	Cale: Well from that perspective (.) . (.) is quite obvious.
<Cale>	Junior: So most of the complexity of the backend is dealing with all the websocket communication, which Snap doesn't really do a whole lot for (though it has some websockets integration that we do use)
<Cale>	dminuoso: ahh, yeah, that would be it
<Cale>	dminuoso: Haddock has some weird prettyprinting bugs when it comes to hidden arguments
*	locodeviant (~jon@user-10878hq.cable.mindspring.com) has joined
<Cale>	dminuoso: Since it works off of GHC's internal representations
<dminuoso>	Ah fair enough
*	hackage prometheus-client 0.3.0, prometheus-metrics-ghc 0.3.0, wai-middleware-prometheus 0.3.0 (fimad): https://qbin.io/wq7u9k2
<crucify_me>	back to unifying, so now that I know how to do foldr (.) id  , and could probably do const id and flip id from earlier study, should one keep practicing how to unify higher order functions. how to master it?
<dminuoso>	crucify_me: I've been told to just implement HM :|
*	rockfordal (~Rockforda@62-220-170-253.cust.bredband2.com) has joined
<crucify_me>	what's that?
*	cschneid has quit (Ping timeout: 255 seconds)
*	remexre has quit (Quit: ZNC 1.6.5 - http://znc.in)
<Junior>	Cale: I see, so you work with straight pure Javascript?  No PureScript or something else for the front end coding?
<Cale>	Junior: We write the frontend in Haskell. It gets compiled to Javascript by GHCJS
<Cale>	The same frontend also gets compiled to ARM code to run on mobile devices
*	dan_f has quit (Quit: dan_f)
*	kritz (640f7dc7@gateway/web/freenode/ip.100.15.125.199) has joined
*	rblaze (~Adium@209.6.152.108) has joined
*	asthasr has quit (Quit: Leaving)
<dminuoso>	crucify_me: The Hindley Milner typesystem. A system that formally describes what you have implicitly been doing to infer types from things like `foldr (.) id`
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
<crucify_me>	Cale is a math whiz I think fwiw , Junior
<kritz>	does anyone know / familiar with brick gui that can help me debug? 
<Cale>	Somewhat ironically, our applications run a good bit faster on mobile devices with native ARM code controlling the contents of the DOM than on fast desktop machines running Javascript
*	thc202 has quit (Ping timeout: 260 seconds)
*	jrabe has quit (Quit: Scheduled maintenance)
*	dhart has quit ()
*	atk has quit (Quit: Well this is unexpected.)
*	cdg (~cdg@172.58.6.145) has joined
<Junior>	Cale,I see not to familiar with ghcjs.  I guess I have something else to research.
*	atk (~Arch-TK@ircpuzzles/staff/Arch-TK) has joined
*	bydo has quit (Quit: nah.)
<Cale>	Junior: You might want to check it out via reflex-platform
<kritz>	im trying to port my 2048 console game to brick but im having trouble fixing my ui errors
<dminuoso>	Cale: I find that very unsurprising. Been doing web development for a year now, and it's mindboggingly how slow browsers are - they make you forget the advances in chip design for the past 15 years.
<crucify_me>	thanks dminuoso you go through that like a formal study?
<Cale>	https://github.com/reflex-frp/reflex-platform
*	bydo (~cdr@unaffiliated/bydo) has joined
<Cale>	Even if I didn't want to use reflex, if I had to install ghcjs, I would use reflex-platform to do it, just because it saves all the headaches involved in getting the right dependencies set up.
*	remexre (~remexre@c-107-4-203-126.hsd1.mn.comcast.net) has joined
*	darjeeling_ (~darjeelin@D-69-91-152-132.dhcp4.washington.edu) has joined
*	ian_andrich has quit (Ping timeout: 248 seconds)
*	jrabe (irc@bouncer.tech) has joined
<Cale>	If you scroll down to the readme section, there's a little tutorial there.
<dminuoso>	crucify_me: Nah. I just learned the meaning of the symbols, then I just looked at each rule in the type system. Its actually not that hard.
<Junior>	Cale, thanks.  I'll check that out.  Any recommendations on finding a Haskell development job without experience.  I have background in OO programming with the Microsoft .NET Framework.
<Cale>	We still don't have nearly enough beginner documentation for reflex and reflex-dom, but dalaing has been writing a bunch of good blog posts.
*	plutoniix (~q@175.176.222.7) has joined
*	ljc has quit (Remote host closed the connection)
*	rblaze has quit (Ping timeout: 260 seconds)
*	auto_complete_ has quit (Ping timeout: 248 seconds)
*	plutoniix has quit (Max SendQ exceeded)
*	infinity0 has quit (Ping timeout: 248 seconds)
<dminuoso>	crucify_me: Havent done that because Im busy learning how parser combinators work, but I intend on trying out HM after I've started doing some parsers. It seems like the right order to do things.
*	cdg has quit (Ping timeout: 255 seconds)
*	albertus1 has quit (Quit: Leaving.)
<crucify_me>	as long as Cale is here, if a beginner goes through those Bartosz lectures on category theory, can the math-weak beginner keep up ? I watched the 1st two videos and they were fairly easy.
*	plutoniix (~q@175.176.222.7) has joined
<Cale>	Junior: I'm really not sure. The reason I can find jobs is that I hung around on IRC and taught everyone Haskell for several years until some of them started companies :)
<Cale>	crucify_me: I haven't watched his lectures.
*	Snuupy1 (~Snuupy@185.38.150.112) has joined
<Cale>	crucify_me: You shouldn't need to know any category theory in order to use Haskell effectively though.
<dminuoso>	crucify_me: I have no math background, and I got through them fairly easy. Some I had to watch twice, and redraw my own diagrams.
*	sanitypassing has quit (Quit: Leaving.)
*	desperek has quit (Quit: xoxo)
<Cale>	But if you are interested in it, just keep at it, and I'm sure you'll get somewhere :)
<kritz>	can someone help me debug my 2048 game? I'm using brick GUI
<crucify_me>	cool! I like math. right now I'm learning basic binary arithmetic
*	cschneid (~cschneid@97-122-77-37.hlrn.qwest.net) has joined
<crucify_me>	binary long division is weird
*	doodlehaus (~doodlehau@71-89-72-8.dhcp.bycy.mi.charter.com) has joined
<crucify_me>	thanks for the input
*	rblaze (~Adium@2620:10d:c091:180::1:4fc3) has joined
*	xkapastel has quit (Quit: Connection closed for inactivity)
<Wizek>	kritz: Are you the person who also asked about Hs GUIs on /r/Haskell?
<kritz>	yea lol, 
*	antsanto (~antsanto@171.76.42.228) has joined
<kritz>	i gave up on threepenny after it couldn't find my css paths, and now im having more trouble debugging brick
<woodson>	I have question. If I want to impletement a jwt on my server when i send my token over to my elm client do i also need a jwt library in elm?
<woodson>	[7:07] 
<woodson>	im still confuse about the jwt do both parties need a jwt library to work with the token?
*	pfurla (~textual@ool-182ed51a.dyn.optonline.net) has joined
<Wizek>	kritz: I might be able to help you. Can you give a bit of context about your problem?
>lambdabot<	:t flip id
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
<dminuoso>	Cale: Ah ha. So (->) is a Functor between types?
<kritz>	Wizek: so i tried to port my game to brick (it already runs on terminal but without keyboard input - instead it uses letters), following this tutorial: https://samtay.github.io/articles/brick.html
*	cschneid has quit (Ping timeout: 260 seconds)
<dminuoso>	Cale: This might be a silly question but, if (-> e) is a Functor, what exactly are the underlying categories
<kritz>	But I'm having a bunch of debug errors, ranging from incorrect return types to (^.) not working 
*	freshIntoFunctio (adefe45a@gateway/web/freenode/ip.173.239.228.90) has joined
<kritz>	i mean compilation errors
<Junior>	Cale and crucify_me thanks for the info guys.  I'm going to get going will be back. :)
*	Gurkenglas (~Gurkengla@dslb-094-223-133-187.094.223.pools.vodafone-ip.de) has joined
*	Junior has quit (Quit: Page closed)
<Wizek>	kritz: can you post the type errors somewhere? E.g. as a gist?
*	dan_f (~dan@24.148.32.207) has joined
*	connrs has quit (Ping timeout: 248 seconds)
*	fr33domlover (~fr33domlo@fsf/member/fr33domlover) has joined
<kritz>	sure 1 sec
*	mandiblegrip has quit (Quit: ERC (IRC client for Emacs 25.3.1))
*	auto_complete_ has quit (Ping timeout: 260 seconds)
*	connrs (~connrs@conners.plus.com) has joined
*	alx741 has quit (Quit: alx741)
*	fr33domlover has quit (Client Quit)
<Gurkenglas>	singular casts traversals to traversal1s, unsafeSingular casts traversals to lenses. What other optic casts are possible?
*	alx741 (~alx741@190.152.58.122) has joined
*	Swizec has quit (Ping timeout: 250 seconds)
<kritz>	Wizek: https://codeshare.io/5wPNm9 Here it is, sry for the length
*	mandiblegrip (~Thomas@123.51.111.34) has joined
*	prg318 has quit (Quit: ZNC 1.6.5 - http://znc.in)
*	rblaze has quit (Ping timeout: 255 seconds)
<Wizek>	kritz: thanks, taking a look
*	Swizec (~swizec@199.21.86.210) has joined
<Cale>	dminuoso: Hask and Hask
<Cale>	dminuoso: (->) e is basically the covariant Hom functor
*	cdg (~cdg@c-69-94-206-50.hs.gigamonster.net) has joined
*	prg318 (~prg@deadcodersociety/prg318) has joined
<Cale>	(internal)
<Cale>	Category theorists would write something like hom(E,-)
<Cale>	It could also be regarded as -^E
*	hackage classyplate 0.3.0.2 - Fuseable type-class based generics  https://hackage.haskell.org/package/classyplate-0.3.0.2 (lazac)
*	jeltsch has quit (Quit: jeltsch)
*	steeze (~steeze@97-118-59-77.hlrn.qwest.net) has joined
<dminuoso>	Cale: Ah hom(E, -) made this blatantly obvious now, thanks.
*	cdg has quit (Ping timeout: 276 seconds)
*	Guest78 has quit (Ping timeout: 255 seconds)
<Wizek>	kritz: You seem to have quite a few `Variable not in scope` errors. Are you missing some imports perhaps?
*	cschneid (~cschneid@97-122-77-37.hlrn.qwest.net) has joined
*	conal has quit (Quit: Computer has gone to sleep.)
*	antsanto has quit (Remote host closed the connection)
<kritz>	Wizek: Yea, gotta correct those, thanks. The ones I don't understand are the ^., I assumed they are like getters in classes, and I followed it like the tutorial but I'm getting lenses errors
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
*	antsanto (~antsanto@171.76.42.228) has joined
<ekr>	for some reason i find the following unusually funny: https://en.wikipedia.org/wiki/John_Launchbury#Career_and_research 
*	nighty- (~nighty@kyotolabs.asahinet.com) has joined
<ekr>	perhaps the most understating description of Haskell yet. (one among many other sources of inspiration for Swift).
<Wizek>	kritz: They are like getters for ADTs indeed. It's part of `lens`. Let's start with fixing the missing imports first, and maybe some other errors will vanish too as a result, okay?
*	cschneid has quit (Ping timeout: 248 seconds)
<kritz>	Wizek: Sure, I'll update the code now
*	pie_ has quit (Ping timeout: 260 seconds)
*	atomi_ (~atomi@71-83-179-177.dhcp.lnbh.ca.charter.com) has joined
*	atomi_ has quit (Client Quit)
*	infinity0 (~infinity0@freenet/developer/infinity0) has joined
*	auto_complete_ has quit (Ping timeout: 255 seconds)
<mniip>	haha
<mniip>	I think I just had a taste of what edwardk called too many parameters
*	jb55 has quit (Ping timeout: 250 seconds)
*	eSVG has quit (Ping timeout: 276 seconds)
<kritz>	Wizek: Just making sure, are my changes visable in real time? 
*	conal (~conal@209.58.148.156) has joined
<mniip>	comp_assoc : forall (X Y Z W : ob_carrier), forall (pX : ob X), forall (pY : ob Y), forall (pZ : ob Z), forall (pW : ob W), forall (f : hom_carrier X Y pX pY), forall (g : hom_carrier Y Z pY pZ), forall (h : hom_carrier Z W pZ pW), forall (pf : hom X Y pX pY f), forall (pg : hom Y Z pY pZ g), forall (ph : hom Z W pZ pW h), comp X Z W pX pZ pW (comp X Y Z pX pY pZ f g pf pg) h (comp_hom X Y Z pX pY pZ f g pf pg) ph = comp X Y W pX pY pW f (comp Y Z W 
<mniip>	pY pZ pW g h pg ph) pf (comp_hom Y Z W pY pZ pW g h pg ph);
*	auto_complete_ (~pouriafew@CPEbc4dfb2915f3-CMbc4dfb2915f0.cpe.net.cable.rogers.com) has joined
<Wizek>	kritz: they seem to be. Ping me when to take a look when you are done, okay?
*	jb55 (~jb55@70-36-49-138.dyn.novuscom.net) has joined
<kritz>	Wizek: Now I've corrected the import errors, but I'm having trouble with the lenses. In the tutorial I was following, variables are names with _, which I was assuming are private variables. But they're accessed as ^. without the underscore. When i do the same I get a lenses error
*	antsanto has quit (Remote host closed the connection)
<Wizek>	kritz: taking a look
*	Solarion (~solarion@fsf/member/solarion) has joined
<Wizek>	kritz: Did you also update the type errors in your paste? I still see some missing variables
*	auto_complete_ has quit (Ping timeout: 255 seconds)
*	miranfan has quit (Ping timeout: 260 seconds)
*	sgronblo has quit (Ping timeout: 248 seconds)
*	tabemann has quit (Ping timeout: 268 seconds)
<kritz>	Wizek: I thought I did, which line are you referring to?
*	ghuntley has quit (Quit: Connection closed for inactivity)
<Wizek>	kritz: 12, for example
<Wizek>	here: https://codeshare.io/5wPNm9
<kritz>	Wizek: Yea I see your highlight, that's what I'm confused about
<Wizek>	Oh, right, 1 sec
*	jb55 has quit (Ping timeout: 268 seconds)
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
<Wizek>	kritz: So, I see _grid is a field in your Game ADT. 
*	jb55 (~jb55@70-36-49-138.dyn.novuscom.net) has joined
<Wizek>	kritz: and indeed, it is "private", meaning if you use lenses, you won't have to touch it by hand
<kritz>	Wizek: Yea, I thought if I access it using ^. I dont need the underscore
*	doodlehaus has quit (Remote host closed the connection)
*	YongJoon (~Thunderbi@121.67.187.140) has joined
<Wizek>	kritz: but first you have to define grid based on _grid. With the `lens` package you can do, IIRC, `makeLenses ''Grid` to have TemplateHaskell automatically define them for you
<Wizek>	but wait a sec, checking if that's the same with the lens library you are using
*	twanvl has quit (Read error: Connection reset by peer)
*	locodeviant has quit (Quit: locodeviant)
<Wizek>	kritz: looking here: https://hackage.haskell.org/package/microlens-0.4.8.1/docs/Lens-Micro.html it seems you'll need to include the `microlens-th` package
<Wizek>	or you may also choose to just use the regular `lens` package if you will
<Wizek>	which has this included
*	sgronblo has quit (Ping timeout: 268 seconds)
<kritz>	you mean just import Lens?
<Wizek>	kritz: read this page first: http://hackage.haskell.org/package/microlens-th-0.4.1.1/docs/Lens-Micro-TH.html the section titled `Dealing with “not in scope” errors` 
<kritz>	Wizek: Thanks!
*	hphuoc25 (~hphuoc25@132.147.71.104) has joined
*	banc has quit (Ping timeout: 260 seconds)
*	t7 has quit (Quit: Leaving)
*	jimmyrcom_ has quit (Remote host closed the connection)
*	yellowj (~yellowj@cable-178-149-162-69.dynamic.sbb.rs) has joined
*	jimmyrcom_ (~fold@71-11-240-211.dhcp.dntn.tx.charter.com) has joined
<Wizek>	kritz: Ping me if it works. Oh and you'll have to write `makeLenses ''Game` not `makeLenses ''Grid`
*	banc (~master@217.151.98.163) has joined
*	jb55 has quit (Ping timeout: 268 seconds)
<kritz>	Wizek: Yup will do!
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
*	yahb has quit (Ping timeout: 246 seconds)
*	hphuoc25 has quit (Ping timeout: 248 seconds)
Python interface unloaded
**** ENDING LOGGING AT Sun Dec  3 17:01:24 2017

**** BEGIN LOGGING AT Mon Dec  4 10:42:11 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | AoC leaderboard 43100-84040706
*	Topic for #haskell set by glguy (Thu Nov 30 21:14:35 2017)
<[exa]>	Junior_: but otherwise no, no suggestions. :] Do you have some software that you'd want to see working and it's still missing?
*	Channel #haskell url: http://www.haskell.org/
*	valentinbuza (~valentinb@unaffiliated/valentinbuza) has joined
*	twanvl (~twanvl@92-110-121-28.cable.dynamic.v4.ziggo.nl) has joined
*	nshepperd (~nshepperd@pool-71-183-192-163.nycmny.fios.verizon.net) has joined
<Junior_>	rightfold: Blockchain is foreign territory for me, and looking at the writings online seems quite technical.  Just want an idea if this is something a Haskell newbie can figure out.  Or something more advanced.
*	marr (~ccc@77-253-106-169.adsl.inetia.pl) has joined
<crucify_me>	I think this is a quick question: when we have the type for flip id, the (b -> c) takes a single argument, and the first b in the type sign. is the other argument of the binary function, correct? ie both arguments are accounted for and can be ascertained from a glance at the signature...  https://ptpb.pw/wu1y
<Junior_>	exa: I've had some projects that I've had in mind to build.
*	hackage integer-gmp 1.0.1.0 - Integer library based on GMP  https://hackage.haskell.org/package/integer-gmp-1.0.1.0 (HerbertValerioRiedel)
<[exa]>	Junior_: please elaborate
<crucify_me>	as in , say , flip id 4 (/) 2 
*	vlatkoB has quit (Remote host closed the connection)
<erisco>	crucify_me, I don't understand the question. reword it for me please
*	Swizec has quit (Ping timeout: 255 seconds)
<Junior_>	exa: I'm in a club and I've been tasked with creating daily schedules of roles to fill in meetings.  I'm thinking of doing this as a more automated process.
<[exa]>	Junior_: great, what about writing a web app for that?
<[exa]>	Junior_: or maybe just a commandline tool
<crucify_me>	so b -> (b -> c) -> c   << (b -> c) is a binary function required by flip, so with b -> (b -> c) -> c  ,  the two b's there are the two arguments.
<[exa]>	:t flip id
<lambdabot>	b -> (b -> c) -> c
<crucify_me>	erisco, ^
<Junior_>	exa: I was thinking of doing it as a web app.
*	jfredett_ (~quassel@c-24-63-187-248.hsd1.ma.comcast.net) has joined
*	biglama (~Day_dream@ip-188.net-82-216-175.joinville2.rev.numericable.fr) has joined
<erisco>	crucify_me, what is the question?
<[exa]>	Junior_: Did you try to code any webapp before?
*	mcoffin has quit (Quit: leaving)
*	anonymous-n00b has quit (Quit: Leaving.)
<[exa]>	crucify_me: are you asking where the actual type of `flip id` came from?
<crucify_me>	ie in a type difinition, you can always see *all* the arguments required .  no [exa] 
<crucify_me>	there are no implicit arguments in a type def
<Junior_>	exa: Haven't coded a web app in a functional language before.  But have experience creating web apps in Microsoft .Net Technology stack.
*	localhorse_ (~me@2a03:2260:3009:400:2997:e536:c128:c8aa) has joined
*	jfredett has quit (Ping timeout: 255 seconds)
<crucify_me>	those are questions ^
*	localhorse_ has quit (Changing host)
*	localhorse_ (~me@unaffiliated/boscop) has joined
*	Swizec (~swizec@199.21.86.210) has joined
*	replay (~replay@pdpc/supporter/student/replay) has joined
<Junior_>	exa: I'm thinking maybe the scheduling app wouldn't be a first project to tackle first.  Am planning to create a toDo list app first to get my feet wet.
<[exa]>	crucify_me: seems I've failed to parse that as a question too :]
<fishythefish>	crucify_me: are you trying to understand the type of `flip id`?
<crucify_me>	both arguments of (/) in flip id 4 (/) 2   are accounted for in the signature, if I understand correctly
<crucify_me>	in the type signature of flip id
<fishythefish>	yes
<fishythefish>	they must be
<fakenullie>	:t flip id
<lambdabot>	b -> (b -> c) -> c
*	MP2E (~MP2E@ip68-224-146-82.lv.lv.cox.net) has joined
<crucify_me>	b and (b .. ) right?
<[exa]>	crucify_me: unify (:t (/) ) with (b->c)
*	conal (~conal@209.58.148.156) has joined
<crucify_me>	fishythefish, thanks you understood! I was trying to be clear
*	iAmerika1 (~dwshrewt@unaffiliated/iamerikan) has joined
*	motersen (~user@x4e371578.dyn.telefonica.de) has joined
*	localhorse has quit (Ping timeout: 276 seconds)
<crucify_me>	good call [exa] thanks
<mnoonan>	that's kind of funny.. flip id === flip ($)
<fishythefish>	crucify_me: not quite - the first `b` corresponds to 4; the `b` in `b -> c` just states that the function (/) can take 4 as its first argument
<fishythefish>	mnoonan: not really, ($) is just `id` specialized
<crucify_me>	hmm ok wait
<mnoonan>	fishythefish: fair enough
<fishythefish>	you can use `id` instead of $, but it'll have different precedence
<glguy>	:t id :: (a -> b) -> a -> b
<lambdabot>	(a -> b) -> a -> b
*	d-fish (~karl@129.10.9.45) has joined
*	durandal1 (~durandal1@2601:647:4900:1f83:91aa:657c:815d:1d78) has joined
<erisco>	and associativity
<glguy>	:t id :: (a -> b -> c) -> a -> b -> c
<lambdabot>	(a -> b -> c) -> a -> b -> c
<fishythefish>	yes, fixity, associativity, etc
<crucify_me>	so in fishythefish 's last post to me ^ ...
<crucify_me>	this is what I'm trying to grep
<glguy>	so if we use that second type signature then: flip id :: a -> (a -> b -> c) -> b -> c
*	tomphp (~tomphp@cpc73822-dals21-2-0-cust404.20-2.cable.virginm.net) has joined
<[exa]>	crucify_me: the weird point is that 'c' in the type of `flip id` becomes a functional type (say, d->e) in your case
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
<crucify_me>	[exa], don't get that notation
<crucify_me>	wait please hold on
<fishythefish>	crucify_me: in particular, `c` is the type of `(/) 4`
<crucify_me>	hold on
<[exa]>	:t flip id 4 (/)
<lambdabot>	Fractional b => b -> b
<[exa]>	:t flip id 4
<lambdabot>	Num b => (b -> c) -> c
<[exa]>	:t (/)
<lambdabot>	Fractional a => a -> a -> a
<crucify_me>	[exa] please wait
<fishythefish>	crucify_me: IRC doesn't go anywhere :)
<crucify_me>	I know but..
<[exa]>	crucify_me: sorry, I just wanted to display to you all the stuff that's important for seeing it
<crucify_me>	thanks one moment
*	codesoup (~codesoup@2607:fea8:e2df:fbf0:5df0:2f95:5e96:59a4) has joined
*	durandal1 has quit (Ping timeout: 240 seconds)
*	Destol (~Destol@dsl-173-206-103-49.tor.primus.ca) has joined
*	hackage ghc-boot-th 8.2.2 - Shared functionality between GHC and the @template-haskell@library  https://hackage.haskell.org/package/ghc-boot-th-8.2.2 (HerbertValerioRiedel)
<ph88>	when i use   cabal install --only-dependencies  does it install stuff system wide ?
*	connrs has quit (Ping timeout: 240 seconds)
*	soniku has quit (Ping timeout: 255 seconds)
<crucify_me>	so if c becomes d -> e , that means there are implicit arguments in a type signature
<fishythefish>	crucify_me: depends on what you mean
<crucify_me>	flip takes a binary func, so I thought b -> (*b* -> c) were the two arguments
<fishythefish>	type variables are polymorphic, so it's unwise to assume that a type variable corresponds to a single non-function value
<crucify_me>	the two b's
<[exa]>	crucify_me: in the signature of `flip id`, there is some redundancy of what 'c' can become... the type system is required to always work with most general types possible
<crucify_me>	I see
*	ma27 has quit (Ping timeout: 250 seconds)
*	yellowj has quit (Quit: WeeChat 1.9.1)
<fishythefish>	crucify_me: one way to see that's not the case is to think about what `flip id` should do, and translate that into a type signature
<crucify_me>	please illustrate
<jle`>	dminuoso: ah yes, it's definitely based on how Parser's Applicative/Monad instances affect state :)
<fishythefish>	well, you tell me - what should `flip id` do? specify how many arguments it should take and what it should do to them
*	hackage ghc-boot 8.2.2 - Shared functionality between GHC and its boot libraries  https://hackage.haskell.org/package/ghc-boot-8.2.2 (HerbertValerioRiedel)
*	agjacome has quit (Quit: leaving)
<[exa]>	crucify_me: we can reconstruct the whole type signature manually if you want :]
*	bsmt has quit (Ping timeout: 255 seconds)
<cocreature>	ph88: if you’re not in a sandbox, it installs it “user-wide” which on a single-user system is pretty much system-wide
<crucify_me>	well, apparently flip id is in the SKI calculus, so it must do something cool.
*	adi_ (~adi@86.121.76.71) has joined
<ph88>	oh oh .. that's not good
<ph88>	where does it place files ?
<[exa]>	crucify_me: you might want to read this --- https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system
<cocreature>	~/.ghc
<ph88>	ok
<crucify_me>	flip id changes the application order of an expression
<cocreature>	just use a sandbox
<cocreature>	or use new-build
<fishythefish>	crucify_me: yes, and no. SKI is turing-complete, so you can do some cool stuff in it. you can also do boring stuff
<monochrom>	and weird stuff
<fishythefish>	crucify_me: okay, so let's be more specific. can `flip id` be applied to any arguments? if so, how many?
<monochrom>	The S combinator is more weird than cool, for example.
<crucify_me>	ok, forget that, but that's what it does, but I don't know why you would do that
*	Xion__ (~xion@84-72-219-166.dial-in.hispeed.ch) has joined
*	seveg has quit (Ping timeout: 248 seconds)
<crucify_me>	flip takes its function (id), and flips the two? arguments of (id), which in the prior example are 4 (/)
<fishythefish>	yes, but what does `flip id` do?
*	cdg has quit (Remote host closed the connection)
*	adi_ has quit (Quit: leaving)
<crucify_me>	so we have flip id 4 (/) 2 end, as I was saying yesterday, we end up with a sort of situation where it becomes like prefix notation (/) 4 2
<crucify_me>	and*
<fishythefish>	crucify_me: but this is not convincing me that you understand the semantics of `flip id`, only that you've seen an example of its use
<crucify_me>	id, I guess, just gets dropped, but I don't really know wtf is going on
*	yellowj (~yellowj@cable-178-149-162-69.dynamic.sbb.rs) has joined
*	connrs (~connrs@conners.plus.com) has joined
*	dfeuer has quit (Ping timeout: 276 seconds)
*	Guest77180 has quit (Remote host closed the connection)
*	durandal1 (~durandal1@2601:647:4900:1f83:91aa:657c:815d:1d78) has joined
<crucify_me>	prefix notation, ie the arguments are not flipped
<crucify_me>	to say (/) 2 4
*	hackage ghci 8.2.2 - The library supporting GHC's interactive interpreter  https://hackage.haskell.org/package/ghci-8.2.2 (HerbertValerioRiedel)
*	ma27 (~ma27@p200300CFB3C1A001CA5B76FFFEE20190.dip0.t-ipconnect.de) has joined
*	drewbert (~drewbert@96.74.3.185) has joined
<fishythefish>	2 is not an argument of flip, so let's ignore that
*	drewbert is now known as Guest6338
<crucify_me>	ok
*	sleffy (~sleffy@2620:83:8001:572::1:1db) has joined
<fishythefish>	in general, `flip id x y` does what?
*	taktoa has quit (Remote host closed the connection)
<crucify_me>	y x
*	sun777 (~sun777@2804:54:17ff:1c00::1000) has joined
<fishythefish>	so what must the types of x and y be?
<crucify_me>	flops ?
*	Junior_ has quit (Quit: Page closed)
<fishythefish>	(we can arrive at the conclusion via a type unification exercise, but it's useful to have intuition about the relation between the type signature and the semantics)
<fishythefish>	crucify_me: is flops a type?
<crucify_me>	:)
*	Synthetica has quit (Quit: Connection closed for inactivity)
*	seveg (~seveg@188-167-253-236.dynamic.chello.sk) has joined
<crucify_me>	idk
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
<jle`>	hey so can
*	adi1 (~adi@2a02:2f0a:4020:3e1:f182:a2f8:cd0c:fe60) has joined
<jle`>	State/Writer/Reader etc. become pattern synonyms already
<monochrom>	Yes.
<jle`>	now that we have the ability to specify pattern synonym coverage
<monochrom>	Who will do it?
<fishythefish>	crucify_me: just from the expression `y x`, you immediately know something about the type of y
<jle`>	hmmm
*	Deide (~Deide@90.214.90.235) has joined
<crucify_me>	I don't follow .
<fishythefish>	crucify_me: in the expression `y x`, can we have y = 5? y = id? y = const?
<monochrom>	An Aesop fable: A community of mice has been taunted by a cat lately. So they convene to design-by-committee a countermeasure. They conclude that tying a bell around the cat's neck will give everyone early warning so everyone can flee in time.
*	adi1 has quit (Client Quit)
<monochrom>	But who will do the tying?
<crucify_me>	yes all those because it is first
*	albertid_ has quit (Remote host closed the connection)
<fishythefish>	crucify_me: really? what does `5 x` mean?
*	robotroll has quit (Read error: Connection reset by peer)
<monochrom>	And to think that Aesop predates game theory by like 2000 years.
*	m3adi3c (~adi@2a02:2f0a:4020:3e1:f182:a2f8:cd0c:fe60) has joined
*	steeze (~steeze@63.76.231.82) has joined
<crucify_me>	ok so in an expression, only id or const would work, otherwise if it were 5 that would just be a list of args
*	sgronblo has quit (Ping timeout: 260 seconds)
<crucify_me>	and not an expression
<fishythefish>	crucify_me: so what distinguishes things that work from things that don't?
*	m3adi3c has quit (Client Quit)
<crucify_me>	order / precedence / 
<fishythefish>	does `5` even have a precedence?
*	bennofs (~benno@2a00:c1a0:4300:dd00:ce3d:82ff:fec6:6d58) has joined
<crucify_me>	what if I just said order
<fishythefish>	what does "order" mean?
<erisco>	:t \x y -> x `5` y
<lambdabot>	error: parse error on input ‘5’
<erisco>	hmm… I feel like that should technically work
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<fishythefish>	erisco: that's not a valid identifier
<erisco>	:t \x y -> 5 x y
<lambdabot>	Num (t1 -> t2 -> t3) => t1 -> t2 -> t3
<monochrom>	erisco: I think the idea is that inside `` it wants a variable name
<crucify_me>	in an expression, we can't have a num in the first place, we need a function, even it is say \_ that can take a Num
<jle`>	yeah `` does not work on arbitrary expressions
<monochrom>	But I should check Haskell 2010 to be sure
*	jb55 (~jb55@208.98.200.100) has joined
<fishythefish>	crucify_me: precisely. `y x` is a function application: we're applying `y` to `x`
<[Leary]>	> g x y = x 5 y
<lambdabot>	 <hint>:1:7: error:
<lambdabot>	     parse error on input ‘=’
<lambdabot>	     Perhaps you need a 'let' in a 'do' block?
<jle`>	`` is specifically a part of expression syntax
*	desperek (~draco@unaffiliated/desperek) has joined
*	steeze has quit (Client Quit)
<fishythefish>	crucify_me: so now, what are the types of `x` and `y`?
<[Leary]>	> let g x y = x 5 y in g (+) 2
<lambdabot>	 7
*	rockfordal has quit (Remote host closed the connection)
*	steeze (~steeze@63.76.231.82) has joined
<jle`>	"`someidentifier`" is itself a syntax token or individible unit, i believe
*	codesoup has quit (Ping timeout: 255 seconds)
<crucify_me>	right, so in what sort of case would flip id become useful.. say if we had ....
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<crucify_me>	input where the numeral came first for whatever reason?
<fishythefish>	:t flip id
<lambdabot>	b -> (b -> c) -> c
<fishythefish>	:t (&)
<lambdabot>	a -> (a -> b) -> b
<fishythefish>	> 5 & succ & show
<lambdabot>	 "6"
*	bts- has quit (Ping timeout: 255 seconds)
<crucify_me>	really trying to get that
<jle`>	that's (5 & succ) & show
*	Neomex (~Neomex@net-37-117-30-94.cust.vodafonedsl.it) has joined
*	takitus (~wcm@cpe-67-246-226-203.rochester.res.rr.com) has joined
<fishythefish>	crucify_me: we can use (&) as a shorter spelling of flip id
<fishythefish>	(&) takes the left argument and feeds it into the function on the right
*	m3adi3c (~user@2a02:2f0a:4020:3e1:f182:a2f8:cd0c:fe60) has joined
<monochrom>	Inside `` the grammar wants qvarid (alphabetic variable name, optionally with module name) or qconid (alphabetic data constructor, optionally with module name)
<Psybur>	That & reminds me of Java's dot
*	tomphp has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	JappleAck has quit (Quit: Leaving)
*	m3adi3c has quit (Client Quit)
<crucify_me>	fishythefish, last point understood
<fishythefish>	Psybur: or more generally, F#'s |> or equivalent in other languages
*	hackage servant-match 0.1.1 - Standalone implementation of servant’s dispatching mechanism  https://hackage.haskell.org/package/servant-match-0.1.1 (cocreature)
<monochrom>	> 10    `       mod                 `  4
<lambdabot>	 2
*	osa1 (~omer@212.252.143.153) has joined
*	osa1 has quit (Changing host)
*	osa1 (~omer@haskell/developer/osa1) has joined
<monochrom>	Not one single token :)
*	tongcx has quit (Ping timeout: 260 seconds)
<monochrom>	Hell, more extreme:
<monochrom>	> 10`             mod              `4
<lambdabot>	 2
*	monochrom is evil
<[exa]>	monochrom: will it go multiline?
<monochrom>	Yes but I can't show it on lambdabot
<[exa]>	:[
*	steeze has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
<Psybur>	> :{
<lambdabot>	 <hint>:1:1: error: parse error on input ‘:’
<fishythefish>	crucify_me: that explanation kinda spoils the exercise, though.
<crucify_me>	but I'm not crystal clear so not really :)
*	nokia3210 (~qwop@196.75.52.27) has joined
*	codesoup (~codesoup@CPE00fc8de45853-CM00fc8de45850.cpe.net.cable.rogers.com) has joined
*	tongcx (~tongcx@unaffiliated/tongcx) has joined
<crucify_me>	in ghci things are different. we can use infix notation for (/)
<crucify_me>	but in (/) that won't work? checking now...
<crucify_me>	in (/) notation*
*	d-fish has quit (Quit: Konversation terminated!)
*	rblaze has quit (Quit: Leaving.)
<fishythefish>	crucify_me: not sure what you mean, but lambdabot/ghci/ghc shouldn't be behaving differently
*	steeze (~steeze@63.76.231.82) has joined
<crucify_me>	right so (/) the function only works in the first place as you illustrated, (/) is not interchangeable with `/`
*	valentinbuza has quit (Ping timeout: 248 seconds)
<fishythefish>	 / is the infix version of (/)
*	sleffy has quit (Ping timeout: 255 seconds)
<crucify_me>	in other words, (/) cannot be used like an infix operator
<fishythefish>	sure it can, just remove the parens
*	steeze has quit (Client Quit)
<Tuplanolla>	It would certainly be nice if you could undo backticks with parentheses and vice versa.
*	rblaze (~Adium@2620:10d:c091:200::2:6461) has joined
<crucify_me>	ok, I see where this is going. the main point is that (/) must be in the first place of the expression, so flip id will do that for us
*	jluttine has quit (Ping timeout: 248 seconds)
<Tuplanolla>	> 42 `(`(/)`)` 13 -- Like this.
<lambdabot>	 <hint>:1:5: error: parse error on input ‘(’
<fishythefish>	crucify_me: you're conflating two orthogonal questions
<monochrom>	For that to work, they may have to use a different puntuation than backtick.
<Tuplanolla>	It's just that it makes looking up fixities impossible.
<crucify_me>	??
*	descender has quit (Ping timeout: 240 seconds)
<fishythefish>	crucify_me: `flip id` isn't about operators, fixity, or even binary functions
<fishythefish>	> flip id 4 succ
<lambdabot>	 5
*	valentinbuza (~valentinb@unaffiliated/valentinbuza) has joined
<dolio>	Why would that be nice?
<monochrom>	Because "nice" is subjective? :)
<crucify_me>	it just gets the function to the left . 
<monochrom>	Because it's a tautology that every idea is "nice" in some sense? :)
<fishythefish>	crucify_me: yes, that's what we said before with `flip id x y` = `y x`
<crucify_me>	so in what case would we have (input?) where 4 was out of place
<fishythefish>	crucify_me: I don't understand the question
<crucify_me>	when would we ever write flip id 4 (/) instead of (/) 4
<crucify_me>	?
<[Leary]>	The use cases are the same as anywhere else you use flip. flip id isn't special.
<fishythefish>	you probably wouldn't
*	LKoen has quit (Remote host closed the connection)
<fishythefish>	rather than using flip id, i'd use &, and i'm unlikely to use & most of the time
*	hackage base 4.10.1.0 - Basic libraries  https://hackage.haskell.org/package/base-4.10.1.0 (HerbertValerioRiedel)
<crucify_me>	so flip id is a good learning tool mostly?
<monochrom>	And there is section syntax like (4 /) and (4 `div`) which is more elemetary than even &
<crucify_me>	ie good exercise for doing interesting unifications? seriously
<fishythefish>	depends on what you're learning - it's another simple type unification exercise, i suppose
<mnoonan>	I'd much rather see (&) or flip ($) in real code, or a section of $ if you were applying to to something
<crucify_me>	ok , because I was thinking of a case where by a typo or a database or what have you, where for some reason the num came in before the function
<Tuplanolla>	> 42 `lookup '/' ops` 13 -- I just like the idea of being able to say this, dolio.
<lambdabot>	 <hint>:1:12: error: parse error on input ‘'’
*	ma27 has quit (Ping timeout: 264 seconds)
<crucify_me>	if that makes sense
*	steeze (~steeze@63.76.231.82) has joined
<crucify_me>	also for this business about SKI 
<fishythefish>	crucify_me: it depends. just because you're given x and f in that order doesn't mean you can't still evaluate `f x`
<jle`>	Tuplanolla: that's nice but i think it might be hard to unambiguously parse it
<jle`>	Tuplanolla: remember that tokenization happens *before* any type checking
<jle`>	so if you can have ``-s in ``s, it gets tricky
<crucify_me>	right so its one way to evaluate that: x and f
<jle`>	42 `'/' `lookup` ops` 13   ...?
<dolio>	That doesn't have any parentheses in it, so I'm not clear how it answers my question.
<bitemyapp>	requiring type information to disambiguate a parse tree is one of the Original Sins of C that carried into C++
<Tuplanolla>	Bourne shell has this problem, jle`.
*	HarveyPwca has quit (Ping timeout: 248 seconds)
<fishythefish>	crucify_me: no, the expression `f x` does not have `flip id` or any equivalent in it
*	erisco has quit (Ping timeout: 268 seconds)
<crucify_me>	sorry could you reword that?
<dolio>	It looks way more complicated than () cancelling `` and vice versa.
*	seveg has quit (Ping timeout: 276 seconds)
<crucify_me>	ok right f x is just f x. I was trying to read about how flip id in haskell is : S (K (S I)) K
<crucify_me>	not that I know what S (K (S I)) K  is
<fishythefish>	crucify_me: it's an expression in the SKI calculus
*	durandal1 has quit (Ping timeout: 255 seconds)
*	tongcx has quit (Ping timeout: 260 seconds)
*	tongcx (~tongcx@unaffiliated/tongcx) has joined
*	danthemyth has quit ()
<crucify_me>	ok I'll look at it later. I was under the impression that flip id was essential haskell since it kept coming up .. fishythefish 
*	HarveyPwca (~HarveyPwc@ip-64-134-197-34.public.wayport.net) has joined
<fishythefish>	crucify_me: you can expand S, K, and I in the lambda calculus and reduce
<fishythefish>	crucify_me: "kept coming up" in what context?
*	chaosmasttter (~chaosmast@p54B47CA8.dip0.t-ipconnect.de) has joined
*	osa1 has quit (Ping timeout: 248 seconds)
<crucify_me>	there are stackOverflow questions about it, more than a few, and here on the channel people saying it was an interesting exercise, leading me to think it was important
<nshepperd>	flip id is the same as the operator &, which is sometiems used for stylistic reasons
*	sleffy (~sleffy@2620:83:8001:572::1:1db) has joined
<crucify_me>	right so (&) would allow for the argument to go first
<fishythefish>	crucify_me: "interesting exercise" doesn't mean "used often"
<crucify_me>	word
<crucify_me>	thanks KINDLY ALL
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
*	hackebeilchen has quit (Read error: Connection reset by peer)
*	durandal1 (~durandal1@2601:647:4900:1f83:91aa:657c:815d:1d78) has joined
<crucify_me>	granted in stackOverflow they all pertained to unifying flip with id and how it is able to compile
*	twandy has quit (Ping timeout: 255 seconds)
<mnoonan>	@let x <. f = (f, x)
<lambdabot>	 Defined.
<mnoonan>	@let (f,x) .> y = f x y
<lambdabot>	 Defined.
<mnoonan>	> 4 <.flip id.> (+1) -- Tuplanolla 
<lambdabot>	 error:
<lambdabot>	     Ambiguous occurrence ‘<.’
<lambdabot>	     It could refer to either ‘Lens.<.’,
<mnoonan>	:|
<Tuplanolla>	> 42 <|-flip id-|> (+ 13)
<lambdabot>	 55
*	nokia3210- (~qwop@196.75.159.109) has joined
*	nokia3210- has quit (Client Quit)
*	nokia3210- (~qwop@196.75.159.109) has joined
*	Neomex has quit (Quit: Leaving)
*	sgronblo has quit (Ping timeout: 260 seconds)
*	nokia3210 has quit (Ping timeout: 260 seconds)
*	saurabhnanda has quit (Ping timeout: 255 seconds)
<Tuplanolla>	> 42 <|-(<|-flip id-|>)-|> (+ 13) -- Almost.
<lambdabot>	 <hint>:1:21: error: parse error on input ‘)’
*	localhorse_ is now known as localhorse
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	systemfault (uid267009@gateway/web/irccloud.com/x-obwhsgptxghcrift) has joined
*	fishythefish has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	fishythefish (~fishythef@2620:10d:c090:200::5:1680) has joined
*	Noldorin has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
*	albertus1 (~seb@x4e3590de.dyn.telefonica.de) has joined
<callmecabman>	somebody asked about machine learning in Haskell, take a look at HLearn
*	dpower has quit (Ping timeout: 240 seconds)
*	soniku has quit (Ping timeout: 255 seconds)
*	dpower (~dpower@46.109.155.63) has joined
<callmecabman>	I don't know if it's production-ready but the formalism is beautiful.
*	ericshor_ has quit (Remote host closed the connection)
*	tongcx has quit (Ping timeout: 255 seconds)
*	Yuras has quit (Ping timeout: 260 seconds)
<cocreature>	iirc hlearn is dead and the author recommends that nobody uses it
<cocreature>	source: https://news.ycombinator.com/item?id=14409595
*	siddharthvipul has quit (Ping timeout: 240 seconds)
*	nokia3210- has quit ()
*	sleffy has quit (Ping timeout: 255 seconds)
*	nokia3210 (~qwop@196.75.159.109) has joined
<callmecabman>	Thanks. Anyway the algebraic structure of models can be exploited in any other language I suppose.
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Mon Dec  4 12:08:32 2017

**** BEGIN LOGGING AT Mon Dec  4 12:08:51 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | AoC leaderboard 43100-84040706
*	Topic for #haskell set by glguy (Thu Nov 30 21:14:35 2017)
*	Channel #haskell url: http://www.haskell.org/
*	alex`` (~alex@37.172.124.59) has joined
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Mon Dec  4 12:10:32 2017

**** BEGIN LOGGING AT Mon Dec  4 12:10:52 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | AoC leaderboard 43100-84040706
*	Topic for #haskell set by glguy (Thu Nov 30 21:14:35 2017)
*	Channel #haskell url: http://www.haskell.org/
*	seveg (~seveg@188-167-253-236.dynamic.chello.sk) has joined
*	mohsen_ has quit (Quit: WeeChat 1.9.1)
*	byorgey has quit (Ping timeout: 260 seconds)
*	crucify_me has quit (Read error: Connection reset by peer)
*	ars23 (~ars23@unaffiliated/ars23) has joined
*	byorgey (~byorgey@209.65.56.40) has joined
*	byorgey has quit (Changing host)
*	byorgey (~byorgey@haskell/developer/byorgey) has joined
<woodson>	I am getting this error using servant https://gist.github.com/Woody88/58f7d2251e222d8871521039ed99b7fc but I dont understand it
<ars23>	Hi guys. I have a short question. Does anyone know a library that implements functions for polynomial curve fitting?
<woodson>	anyone is able to help?
*	n_blownapart has quit (Ping timeout: 255 seconds)
*	agander (~agander@rm-19-41-106.service.infuturo.it) has joined
<Tuplanolla>	@hackage levmar
<lambdabot>	http://hackage.haskell.org/package/levmar
<cocreature>	woodson: you’ll have to show us the code producing that error. in particular the definition of API and the handlers
<Tuplanolla>	Try this one, ars23.
*	dpower has quit (Ping timeout: 255 seconds)
*	tom-lambda (1f509d08@gateway/web/freenode/ip.31.80.157.8) has joined
*	KongWubba (~yaaic@a89-182-94-88.net-htp.de) has joined
*	tongcx has quit (Ping timeout: 260 seconds)
<ars23>	thanks @Tuplanolla 
*	ma27 (~ma27@p200300CFB3C1A001CA5B76FFFEE20190.dip0.t-ipconnect.de) has joined
<woodson>	cocreature: I updated the gist
<tom-lambda>	Can you pass a Maybe Int as an argument to the Maybe type constructor? 
*	carlomagno has quit (Remote host closed the connection)
<woodson>	didnt copy the import however all the other files compile properly
<woodson>	I am just getting the error with Lib.hs
<lyxia>	:t Just (Just (0 :: Int)) -- tom-lambda ?
<lambdabot>	Maybe (Maybe Int)
*	carlomagno (~cararell@inet-hqmc06-o.oracle.com) has joined
*	dpower (~dpower@46.109.24.163) has joined
<tom-lambda>	Ah ok so it makes sense as a type a Maybe (Maybe Int)
<woodson>	cocreature: My API should be the combination of my server endpoints but i dont know what I am missing..
<byorgey>	tom-lambda: right.  exercise: what are all the possible values of type  Maybe (Maybe Bool) ?  (excluding undefined.)
<cocreature>	woodson: I’d start by giving "protected" an explicit type signature
*	tongcx (~tongcx@unaffiliated/tongcx) has joined
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	danthemyth has quit (Client Quit)
<tom-lambda>	16?
<byorgey>	tom-lambda: what are they?
*	SpinTensor has quit (Quit: WeeChat 1.9.1)
*	durandal1 has quit (Ping timeout: 255 seconds)
<tom-lambda>	Not 16 :P
*	sgronblo (~sam@153.206.106.62) has joined
<cocreature>	woodson: also the imports would be really helpful. I don’t want to have to guess where things are coming from …
*	crobbins_ is now known as crobbins
*	Guest6338 has quit (Remote host closed the connection)
<tom-lambda>	5 - Just True, Just False, Maybe Just True, Maybe Just False, Nothing  ?
*	drewbert (~drewbert@96.74.3.185) has joined
*	drewbert is now known as Guest29485
<byorgey>	tom-lambda: Just True and Just False do not have type  Maybe (Maybe Bool).
<woodson>	cocreature: I'm udpdating the gist
<cocreature>	woodson: if "Auth" is from servant-auth, you forgot to add the parameters
*	fr33domlover (~fr33domlo@fsf/member/fr33domlover) has joined
*	baboum (~flupe@2a01:e35:2eab:6cd0:9eb6:d0ff:feda:88db) has joined
<tom-lambda>	byorgey: Ah so is it just   Maybe Just True, Maybe Just False, Nothing ?
*	rovfugl (~Adium@cm-84.211.218.157.getinternet.no) has joined
<woodson>	cocreature: No its my type, I added the Auth.hs file
<woodson>	im done updating the gist
*	sgronblo has quit (Ping timeout: 240 seconds)
*	chaosmasttter has quit (Ping timeout: 260 seconds)
*	beanbagu1 (~bean_bag@host86-163-205-100.range86-163.btcentralplus.com) has joined
*	ilja_kuklic (~Thunderbi@host86-187-168-16.range86-187.btcentralplus.com) has joined
<fishythefish>	tom-lambda: you're missing a couple. also, "Maybe" wraps types; "Just" wraps values
<johnBoy>	fishythefish, one thing if you have time: this is one thing I'm still unclear on that you wrote : not quite - the first `b` corresponds to 4; the `b` in `b -> c` just states that the function (/) can take 4 as its first argument "
<johnBoy>	because ...
<johnBoy>	what happened to my nick
*	You are now known as crucify_me
-NickServ-	This nickname is registered. Please choose a different nickname, or identify via /msg NickServ identify <password>.
<callmecabman>	@djinn [a] -> a
<lambdabot>	Error: Undefined type []
<crucify_me>	<< nick
<fishythefish>	crucify_me: flip id x y = y x
*	rovfugl has quit (Quit: Leaving.)
<fishythefish>	so y has type b -> c and x has type b (to reuse the type variables from before)
<crucify_me>	right, but 4 is the first b in the signature
<crucify_me>	so the function, which must be binary ...
<fishythefish>	so here, x = 4 and y = (/)
*	tongcx has quit (Ping timeout: 240 seconds)
<crucify_me>	takes another b for a division calculation
<fishythefish>	crucify_me: you're mixing up a lot of stuff
<crucify_me>	really? 
*	iAmerika1 has quit (Ping timeout: 240 seconds)
<fishythefish>	haskell does not have binary functions. you can argue that the first argument to flip should be considered a binary function, but that spot is already occupied by id
<fishythefish>	there's nothing requiring that the spot occupied by (/) must be a binary function
<crucify_me>	since flip requires a function that is binary, since id is unary..
<fakenullie>	@pl map (\c -> bool toLower toUpper (isLower c) c)
<lambdabot>	map (bool toLower toUpper =<< isLower)
<crucify_me>	this is what I'm unclear on then
<fishythefish>	:t id :: (a -> b) -> a -> b -- crucify_me 
<lambdabot>	(a -> b) -> a -> b
<fishythefish>	see, id can be a "binary" function
<[Leary]>	id can take as many arguments as it wants to, provided you pick the first one well.
*	pera has quit (Ping timeout: 268 seconds)
*	durandal1 (~durandal1@2601:647:4900:1f83:91aa:657c:815d:1d78) has joined
<fishythefish>	:t id :: (a -> b -> c) -> a -> b -> c -- id can also be ternary, etc.
<lambdabot>	(a -> b -> c) -> a -> b -> c
<[Leary]>	since id f = f
*	steeze has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
<fakenullie>	:t id id
<lambdabot>	a -> a
<hexagoxel>	> id foldr (:) [] [1,2,3]
<crucify_me>	yes, so within the unified signature for flip id, flip is satisfied by id which is now binary (after the unification.)
<lambdabot>	 [1,2,3]
<lyxia>	tom-lambda: Maybe is a type constructor. Maybe (Just True) is ill-typed.
<tom-lambda>	Ok so Just Maybe Bool is nonsensical because Maybe Bool is a type?
*	Deidde (~Deide@90.214.90.235) has joined
<fishythefish>	tom-lambda: yes, and Maybe Just True is likewise nonsensical
<woodson>	cocreature: am I missing something?
<fishythefish>	it's also nonsensical because in the absence of parens, you're applying Just to Maybe and Bool. you're thinking of Just (Maybe Bool)
*	Psybur has quit (Ping timeout: 260 seconds)
<callmecabman>	In Haskell types and values are disjoint, that's a good intuition. And values "do live" in types, i.e. you can model them with sets quite successfully.
*	llinguini (uid257922@gateway/web/irccloud.com/x-aduhgarwocbndirl) has joined
<callmecabman>	(no DataKinds and other stuff)
*	teddy_error has quit (Quit: Peace ☮︎)
*	Deide has quit (Ping timeout: 252 seconds)
*	baboum has quit (Ping timeout: 260 seconds)
*	wedify has quit (Ping timeout: 240 seconds)
<tom-lambda>	So can you have Just Just True as a value of Maybe (Maybe Bool)?
<callmecabman>	Sure. Just (Just True)
*	tomphp (~tomphp@cpc73822-dals21-2-0-cust404.20-2.cable.virginm.net) has joined
<crucify_me>	I see, the second num argument for (/) has no place in the flip id signature; the application of flip to id requires two arguments. (/) and its arguments come later. so I was incorrect to think that there should be two arguments viewable in flip id that satisfied the function's (/) requirements.
<tom-lambda>	ahhh
<crucify_me>	please critique fishythefish ^
<crucify_me>	in the flip id *signature
<fishythefish>	crucify_me: the first two sentences are correct
<tom-lambda>	Maybe type constructor takes one argument so Just Just True doesn't work I guess
<callmecabman>	:t Just
<lambdabot>	a -> Maybe a
*	soirbleu (bcc14fd7@gateway/web/freenode/ip.188.193.79.215) has joined
*	Saukk has quit (Remote host closed the connection)
<fishythefish>	tom-lambda: not just that but, the Just value constructor also only takes one argument
<callmecabman>	:t Just (Just True)
<lambdabot>	Maybe (Maybe Bool)
<callmecabman>	:t Just Just True
<lambdabot>	error:
<lambdabot>	    • Couldn't match expected type ‘Bool -> t’
<lambdabot>	                  with actual type ‘Maybe (a0 -> Maybe a0)’
<tom-lambda>	ahh thanks!
*	afarmer_ (~afarmer@199.201.64.134) has joined
<tom-lambda>	Ok Ill try again
<tom-lambda>	Just (Just True), Just (Just False), Just Nothing
*	seveg has quit (Ping timeout: 276 seconds)
*	SenasOzys has quit (Read error: Connection reset by peer)
*	afarmer has quit (Ping timeout: 255 seconds)
<callmecabman>	almost
<fishythefish>	tom-lambda: what else?
<fakenullie>	> True == true
<lambdabot>	 error:
<lambdabot>	     • Variable not in scope: true :: Bool
<lambdabot>	     • Perhaps you meant data constructor ‘True’ (imported from Data.Bool)
*	Average-user (~lucas@pc-127-31-120-200.cm.vtr.net) has joined
*	baboum (~flupe@37.168.85.142) has joined
*	SpinTensor (~SpinTenso@i577A2829.versanet.de) has joined
<cocreature>	woodson: can’t spot anything, sry. if you upload your complete project somewhere, I might be able to take a look but this is beyond the size where one can spot bugs by just staring at it
<tom-lambda>	Just (Just True), Just (Just False), Just Nothing .... and Nothing?
<crucify_me>	right fishythefish 4 *is* an argument to (/). so the second Num arg to (/) is shown as partial application so to speak in b -> (b -> c)  ?
<callmecabman>	tom-lambda: exactly
<tom-lambda>	:D :D :D
*	tomphp has quit (Read error: Connection reset by peer)
<callmecabman>	modulo bottoms (sshhh let's pretend they do not exist)
<fishythefish>	crucify_me: no. `flip id` doesn't know that it's going to be dealing with (/), so its type signature is not specialized to match.
*	durandal1 has quit (Ping timeout: 255 seconds)
<Tuplanolla>	Those would simply be `Just (Just undefined)`, `Just undefined` and `undefined`.
<[exa]>	crucify_me: what about really going through the full type derivation?  (*wink*)
<tom-lambda>	Thanks for exercise helped a ton! Wish there was a repository of exercises like that somewhere
*	Wuzzy has quit (Quit: Wuzzy)
<fishythefish>	the types `b` and `b -> c` eventually correspond to the arguments `4` and `(/)`
<fishythefish>	the result of that unification is
<fishythefish>	:t flip id 4 (/)
<lambdabot>	Fractional b => b -> b
<fishythefish>	and now you can see where the other argument to (/) goes
*	SenasOzys (~SenasOzys@user208.77-105-199.netatonce.net) has joined
*	rblaze has quit (Quit: Leaving.)
*	rblaze (~Adium@2620:10d:c091:200::2:6461) has joined
*	seveg (~seveg@188-167-253-236.dynamic.chello.sk) has joined
*	chaosmasttter (~chaosmast@p54B47CA8.dip0.t-ipconnect.de) has joined
<crucify_me>	fishythefish, ok, I think I get this. when you do the unification, ghc gives us b -> (b -> c) -> c , which is the most generalized form of flip id, but ghc could read the unification as an id that is actually ternary, and accomodates more arguments.
<crucify_me>	does that happen under the hood?
*	bts- (~bts@144.121.64.94) has joined
<crucify_me>	not most generalized, but most simplified
<fishythefish>	crucify_me: most general is correct
<crucify_me>	excellent
<crucify_me>	your reminder that id can be ternary is what made it click
<fishythefish>	in the absence of an explicit type signature, ghc will infer the most general type possible for an expression
<fishythefish>	(ignoring monomorphism restriction)
<crucify_me>	so *implicit in the signature is the idea that (/) takes up to n arguments
<fishythefish>	no
<crucify_me>	not (/) but (#)
*	iAmerika1 (~dwshrewt@unaffiliated/iamerikan) has joined
<fishythefish>	what is (#) in your notation?
<crucify_me>	any function
<fishythefish>	again, this is a good time to remember that all functions are really unary
<crucify_me>	right that's what I meant by (b -> c) being partial application
*	steeze (~steeze@63.76.231.82) has joined
<fishythefish>	b -> c is a type signature; it doesn't make sense to say a type signature is a partial application
*	db8093246 has quit (Remote host closed the connection)
*	daey has quit (Read error: Connection reset by peer)
<fishythefish>	and in any case, the (b -> c) in the signature of `flip id` is not the result of partially applying a function (a -> b -> c)
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	davr0s (~textual@host81-155-65-221.range81-155.btcentralplus.com) has joined
*	lizardan (32f21ff1@gateway/web/freenode/ip.50.242.31.241) has joined
*	motersen has quit (Ping timeout: 248 seconds)
<crucify_me>	ok, but as you said re: id having the possibility of being ternary, that is the key to understanding how flip id allows for functions requiring various numbers of arguments.. fishythefish 
*	durandal1 (~durandal1@2601:647:4900:1f83:91aa:657c:815d:1d78) has joined
<fishythefish>	no, polymorphism and currying is how it allows for that
<fishythefish>	this is not peculiar to id or flip id
<[exa]>	crucify_me: you can also look at what expectations are taken on id in the whole function:
<[exa]>	crucify_me: > flip _ 1 div 1
<woodson>	cocreature: the Server type from Server is it supposed to accept handlers?
<[exa]>	> flip _ 1 div 1
<lambdabot>	 error:
<lambdabot>	     • Found hole:
<lambdabot>	         _ :: (Integer -> Integer -> Integer) -> Integer -> Integer -> t
<[exa]>	crucify_me: ^ this
*	pfurla has quit (Quit: Textual IRC Client: www.textualapp.com)
*	pfurla (~textual@38.86.167.91) has joined
<callmecabman>	hey does anybody know how to represent some kind of a subtyping hierarchy? Trying to represent the Chomsky hierarchy for grammars has droven me nuts
*	gws has quit ()
*	lizardan has quit (Client Quit)
*	blardo (~blardo@185.65.135.170) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<[exa]>	callmecabman: how do you want to represent it
<callmecabman>	I could've simulate it with typeclasses but I'm interested in data structures. The way it's done now is a number of castFromLowerToHigher functions
<fishythefish>	:t ($) -- let's just consider this function for a minute, crucify_me
<[exa]>	callmecabman: something like class RegularLang a => ContextFreeLang a ... ?
<lambdabot>	(a -> b) -> a -> b
*	soniku has quit (Ping timeout: 276 seconds)
<fishythefish>	this is just function application, of course
<crucify_me>	ok
<callmecabman>	[exa]: yeah
*	mizu_no__ (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
<fishythefish>	if you say the first argument (the one of type a -> b) is unary, you are correct in the sense that all functions in haskell are unary
*	aplainzetakind (~dk@78-131-29-87.pool.digikabel.hu) has joined
*	howdoi has quit (Quit: Connection closed for inactivity)
<[exa]>	callmecabman: whew, that's easier with the actual automata
*	toblorone (~toblorone@162.246.216.202) has joined
<fishythefish>	however, that does not mean that the function can't be (+) or any other function which you might otherwise consider binary, ternary, etc.
*	durandal1 has quit (Ping timeout: 255 seconds)
*	tomphp (~tomphp@cpc73822-dals21-2-0-cust404.20-2.cable.virginm.net) has joined
<fishythefish>	> let f = (+) $ 1 in f 2
<lambdabot>	 3
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
<fishythefish>	this is because we can specialize the signature when called for - when we apply ($) to (+), we specialize b to Num a => a -> a during unification
*	KeyJoo has quit (Ping timeout: 240 seconds)
*	bennofs has quit (Quit: WeeChat 1.9.1)
<[exa]>	callmecabman: I'd go with Regex class having only a type constructor for right-recursive grammar rules, then type constructor for any recursion but only a single non-terminal on the left, etc.
*	tongcx (~tongcx@unaffiliated/tongcx) has joined
<fishythefish>	crucify_me: this is what's going on with flip id. the second argument, a priori, can be *any function*, so it has the most general type (b -> c)
<[exa]>	callmecabman: coercions can be done by (recursive) lifting from the previous class
*	alexteves has quit (Ping timeout: 255 seconds)
<callmecabman>	[exa]: that's the current state of affairs, a bunch of smart constructors and cast functions
<fishythefish>	this doesn't mean that c itself can't itself be specialized to a function type
*	bennofs (~benno@2a00:c1a0:4300:dd00:ce3d:82ff:fec6:6d58) has joined
<cocreature>	woodson: yes, I have to go but I would recommend to debug this by removing parts of your API type and your handlers to narrow the issue down
<[exa]>	callmecabman: how do you differentiate the context-sensitive vs. full turing grammars?
<[exa]>	context size restrictions?
<callmecabman>	[exa]: n for nonterminals, t for terminals. CFProductionRule t n = n -> [ [Either t n] ]
<crucify_me>	right, the unification creates implicit behaviors and allows for more specificity later fishythefish 
<mniip>	your datum better be strict or your classes are going to be off
<callmecabman>	[exa]: GeneralProductionRule t n = [Either t n] -> [ [Either t n] ]
*	ilja_kuklic has quit (Remote host closed the connection)
<callmecabman>	any CFProductionRule can be trivially lifted to a general rule
*	sgronblo has quit (Ping timeout: 248 seconds)
*	kritz (640f7dc7@gateway/web/freenode/ip.100.15.125.199) has joined
<kritz>	hi
<fishythefish>	crucify_me: i urge you to be more precise with your language. unification is just about trying to substitute types. it doesn't create behavior.
<mniip>	callmecabman, I'm thinking of a thing,
<[exa]>	callmecabman: ...and I guess the lifting would be cooler if automated :]
<mniip>	some kind of gadt
<crucify_me>	it doesn't *create* implicit behaviors, but allows for behaviors that may come later right?
<mniip>	that would produce a more general type
<mniip>	if you don't use particular productions
*	typedrat (43b60c3f@gateway/web/freenode/ip.67.182.12.63) has joined
<fishythefish>	crucify_me: i would just say it sticks to the most general type
<[exa]>	crucify_me: you should really, really try the hindley-milner-style type derivation by hand, to see that there's no magic in it
<fishythefish>	types and behaviors are somewhat related in that a type constrains the sorts of behaviors you can implement
<typedrat>	Is there some sort of pre-existing benchmark of GHC compilation performance?
<kritz>	I've written 2048 as a terminal game using brick. My question might be unrelated to this thread, and sry if it sounds dumb, but would there be a way to load bots into my game in other languages. I was thinking that since the only things that need to be shared are my grid - which is a matrix, the score, and keyboard input from the bot, would this be possible?
<fishythefish>	but behavior/semantics are more of a value-level thing
<callmecabman>	mniip: more details please?
<mniip>	I'm not sure I have any
<fishythefish>	crucify_me: if you're still confused by the type, i recommend you do what [exa] is suggesting and derive the type of `flip id` by performing the unification yourself
<mniip>	just thinking out loud
<fishythefish>	we've done enough examples in this channel for you to do this, hopefully :)
<[exa]>	kritz: depends on the language the bots are coded in, and on the interface you're planning
<sbrg>	kritz: definitely. but what [exa] said.
*	Jacoby6000 has quit (Ping timeout: 255 seconds)
<kritz>	i'd go with python
<ph88>	can https://github.com/valderman/selda be used instead of persistent-sqlite ? or do i need both ?
<typedrat>	fritz: the way that I'd do it would either be some sort of tiny web server or `foreign export`ing a C API. 
<typedrat>	The former would be easier to use from Python but harder to implement, and vice versa
<crucify_me>	no the type makes sense, knowing what I now know regarding how (b -> c) for example is the most generalized form that resulted from id being unified.
<callmecabman>	[exa]: btw I tried to represent automata like data Automaton i = forall s. (s -> i -> s) (s -> Bool)
<kritz>	oh, i see
<[exa]>	kritz: I'd in fact suggest having bots as unix executables for the prototype (you pass them gamestate and memory, they give you decision and new memory)
<mniip>	callmecabman, that's too general imo
<mniip>	you need a finite s
<callmecabman>	the fun is that s may be potentially infinite so you get RE languages
<callmecabman>	yes
*	darjeeling_ (~darjeelin@D-128-95-62-165.dhcp4.washington.edu) has joined
*	durandal1 (~durandal1@2601:647:4900:1f83:91aa:657c:815d:1d78) has joined
<kritz>	since i run my game as stack exec 2048, how would i get a bot in another script if its on the terminal? sry for my newbieness
*	soirbleu has quit (Ping timeout: 260 seconds)
<crucify_me>	(b -> c) is just a function, but there could be n arguments to it, allowed by polymorphism in the ghc, right fishythefish ? thanks [exa] will work on that
<tabaqui1>	ertes-w: ping, I've lost history older than an hour
<kritz>	i'll look up unix executables, thanks
<fishythefish>	tabaqui1: topic has link to logs ;)
<[exa]>	kritz: oh you don't use unix. Unix is a great environment for cooperating programs! ;]
<callmecabman>	but the idea clicked, because there's the same trick: you can promote any DFA or DFA with stack to such a general automaton
*	ForceRecon has quit (Remote host closed the connection)
<kritz>	oh im on macOS lol, but i know unix is great
*	tomphp has quit (Read error: Connection reset by peer)
*	bts- has quit (Ping timeout: 276 seconds)
<dmwit_>	MacOS is pretty unix-y.
<fishythefish>	crucify_me: basically, yes -- as long as you remember that, to haskell, all functions actually just take 1 argument
*	ForceRecon (~forcereco@unaffiliated/forcerecon) has joined
*	dmwit_ is now known as dmwit
<fishythefish>	(polymorphism is not unique to ghc, by the way)
<[exa]>	kritz: it should work on MacOS. You just execute the python script, feed it the current game situation, gather the result, repeat
<[exa]>	kritz: anyway there are packages for running the python "directly", e.g. https://hackage.haskell.org/package/pyfi
<kritz>	damn, thats awesome. Thanks!
<callmecabman>	mniip: looks like a natural hierarchy IMO
<mniip>	one moment...
<dmwit>	A simple text interface is probably going to be easier and more modular than using pyfi.
<kritz>	oh
<crucify_me>	got it thanks fishythefish [exa]   !!
<[exa]>	kritz: the interactive upgrade would be 'execute the script, feed it first data, wait for answer, ....'.
<tabaqui1>	fishythefish: rly?) Anyway, he is out, I hope that can find him tomorrow
<dmwit>	(more modular: it will make it easy to write a bot in whatever language the bot author wants)
*	ilja_kuklic (~Thunderbi@host86-187-175-16.range86-187.btcentralplus.com) has joined
<[exa]>	kritz: if it's not performance-critical I also suggest going with text interface (you can easily test that by hand)
<fishythefish>	tabaqui1: sure, check /topic for the tunes.org link
*	alex`` has quit (Ping timeout: 248 seconds)
*	mizu_no_oto has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<fishythefish>	tabaqui1: i think he said to ping ertes since he's at home
*	valentinbuza has quit (Ping timeout: 240 seconds)
<kritz>	exa: I guess not. I'll try a text interface
<kritz>	thanks!
<dmwit>	kritz: http://hackage.haskell.org/package/process-1.6.2.0/docs/System-Process.html#v:readCreateProcess packages up most of what you need
*	rm8 has quit (Quit: i slep)
<dmwit>	kritz: Oh, `readProcess` is probably even better for starting out.
*	rm8 (~rm8@ip68-5-34-27.oc.oc.cox.net) has joined
<kritz>	dmwit: Hmm thanks, i'll look at that first then
<[exa]>	kritz: as a side note, there's a glorious book called 'the art of unix programming' that will show you how not to overdesign it :]
<mniip>	callmecabman, I have this in mind:
<mniip>	@let data LHS n t (a :: ()) (l :: Bool) where Emp :: LHS n t a False; T :: t -> LHS n t a l -> LHS n t '() l; N :: n -> LHS n t a l -> LHS n t (If l '() a) True
<lambdabot>	 Defined.
<mniip>	:t T () (N () (T () Emp))
<lambdabot>	LHS () () '() 'True
<mniip>	that says '() which means it's a context sensitive lhs
<mniip>	:t N () Emp
<lambdabot>	LHS () t a 'True
<mniip>	that says a which means it's context-free
*	HaskellLord69 (~weechat@gateway/vpn/privateinternetaccess/haskelllord69) has joined
<mniip>	if you put multiple in a list any context-free lhses could be subtyped to the context-sensitive
<mniip>	the 'True denotes the validity of the lhs at all
<mniip>	e.g
<mniip>	:t T () Emp
<lambdabot>	LHS n () '() 'False
<tabaqui1>	fishythefish: dunno, he has two accounts here, but freenode allows multiple logins
<tabaqui1>	I'll contact him later, anyway
<fishythefish>	the -w is for work
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Mon Dec  4 13:19:55 2017

**** BEGIN LOGGING AT Tue Dec  5 10:54:23 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | AoC leaderboard 43100-84040706
*	Topic for #haskell set by glguy (Thu Nov 30 21:14:35 2017)
*	Channel #haskell url: http://www.haskell.org/
<drdo>	So there's nothing done for me in this area? :P
*	henriksod has quit (Quit: henriksod)
<Cale>	daey: Well, and that would be tricky in something like Java even, let alone C.
<dmwit>	drdo: I think that's basically right. Sorry...
<drdo>	You guys know something else in some other language?
*	henriksod (~Thunderbi@89.160.47.146) has joined
<drdo>	Doesn't have to generate any particular format, just showing me a scrollable gui is fine
<cocreature>	drdo: I could probably throw my code on github if you want to be the one that cleans it up :)
*	Robin_Jadoul (~quassel@150.107.225.32) has joined
<cocreature>	drdo: d3.js can draw trees
<drdo>	cocreature: hmm, what's the fastest way to get something on the screen? :P
*	hackage inline-java 0.7.1 - Java interop via inline Java code in Haskell modules.  https://hackage.haskell.org/package/inline-java-0.7.1 (MathieuBoespflug)
<drdo>	cocreature: Yeah, I was using some other js lib now, but it's just too solw
<drdo>	*slow
<cocreature>	drdo: well d3 has at least implemented the “right” (i.e. the linear-time) algorithm
<crucify_me>	I woke up confused about the last unification of foldr (.) id     ..     I have foldr (.) :: (a' -> b') -> t (b' -> b') -> a' -> b'       so when we unify id with that, how do I think of how id is substituted for the first parameter (a' -> b') 
<dmwit>	drdo: Everything I know that is actually usable is of the form "first identify a smaller subgraph that you're interested in looking at right now. then I'll draw that".
<crucify_me>	?
<crucify_me>	I had this the other day
<cocreature>	so depending on what the lib you used before implemented, it might be worth a shot
<drdo>	dmwit: Yeah, doesn't really work for my purposes :S
*	zmt00 (~zmt00@128.54.230.209) has joined
<dmwit>	drdo: Usually you want the "identify a smaller subgraph" piece can be a little bit interactive, but as far as I know nothing is good for just displaying an entire big graph.
*	sgronblo has quit (Ping timeout: 240 seconds)
*	namowi (~namo@res380d-128-61-83-210.res.gatech.edu) has joined
<daey>	drdo: <3
<drdo>	It's really a tree though, not a general graph
<dmwit>	doesn't really matter, AFAIX
<dmwit>	...and I obviously don't xnow much. =P
<crucify_me>	sorry to those helping me, I'm almost there but I lost the last unification
*	Gurkenglas (~Gurkengla@dslb-094-223-133-187.094.223.pools.vodafone-ip.de) has joined
<cocreature>	well the algorithms for drawings trees tend to be special
<cocreature>	so it does matter
*	danza has quit (Ping timeout: 260 seconds)
<drdo>	Sounds a lot harder to properly draw a graph to be honest
*	i-am-the-slime (~mark@2a02:8109:9200:3920:2cdc:164:5659:7881) has joined
<cocreature>	it is
<drdo>	Though I haven't investigated that
<dmwit>	Theoretically there may be better algorithms for trees. Practically all the tools I know of that are usable for big trees can also handle big graphs (and were designed for big graphs).
<drdo>	graphviz doesn't like big anything
<cocreature>	diagrams also has a module for tree drawing but diagrams being slow was the whole reason why I implemented it myself in the first place :)
<dmwit>	crucify_me: Write `id :: c -> c`. Then unify `c -> c` with `a' -> b'`.
<cocreature>	so that’s not going to be helpful
<drdo>	cocreature: What do I need to do to get that working? What would be the fastest way to get something on the screen? :P
*	cherry-xw has quit (Quit: Mutter: www.mutterirc.com)
<drdo>	I'm actually trying to solve some other problem, not just draw trees for fun xD
*	i-am-the-slime has quit (Client Quit)
<cocreature>	drdo: well as I said that only generates coordinates, so it depends on how long it takes you to get from “here’s a tree annotated with coordinates” to an svg or whatever
<crucify_me>	dmwit so the whole parameter (a' -> b') becomes (c -> c)  ?
*	cherry-xw (~u0_a121@223.104.4.51) has joined
<cocreature>	drdo: I would probably give d3.js a shot before you do that
*	jfredett has quit (Ping timeout: 276 seconds)
<dmwit>	crucify_me: yes
*	i-am-the-slime (~mark@2a02:8109:9200:3920:e8f6:3e53:1861:d32d) has joined
*	fishythefish (~fishythef@2620:10d:c090:200::6:ecb9) has joined
<drdo>	cocreature: You sure that supports trees?
*	jfredett (~quassel@c-24-63-187-248.hsd1.ma.comcast.net) has joined
<cocreature>	drdo: yes
<dmwit>	drdo: You might consider looking into Gtk's tree tools. They put some thought into making them lazy, so the typical interaction mode is to show just the roots, then the user clicks on a root and expands the children of that root, then expands the children of some child, etc.
<cocreature>	drdo: https://github.com/d3/d3-hierarchy/blob/master/README.md#tree
<drdo>	dmwit: Won't help, I'm likely to get trees with insane branching factor at the root
<dmwit>	drdo: Since everything is user-driven, you typically only see a small sub-graph of the tree, one that's computationally feasible to completely dra.w
*	dxtr has quit (Quit: leaving)
<crucify_me>	so we have foldr (.) id :: Foldable t => t (c -> c) -> (c -> c)  , dropping the last set of parens     dmwit 
*	osa1 (~omer@212.252.142.14) has joined
*	osa1 has quit (Changing host)
*	osa1 (~omer@haskell/developer/osa1) has joined
<dmwit>	:t foldr (.) id -- let's check!
<lambdabot>	Foldable t => t (b -> b) -> b -> b
*	cherry-xw has quit (Client Quit)
<dmwit>	crucify_me: looks good to me
<crucify_me>	I went through this extensively with member here, then lost it !
<crucify_me>	dmwit, 
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
*	DTZUZO has quit (Quit: WeeChat 1.9)
*	llinguini (uid257922@gateway/web/irccloud.com/x-ddamfodfharyiotg) has joined
*	hackebeilchen has quit (Read error: Connection reset by peer)
*	cdg_ has quit (Remote host closed the connection)
*	tongcx has quit (Ping timeout: 255 seconds)
*	neoncontrails has quit (Remote host closed the connection)
*	cdg (~cdg@2600:1700:3120:40e0:2946:f4d:fcda:261) has joined
<crucify_me>	dmwit id seems unique, in the way in which it unified. It can only unify into a parameter of 2 elements, as in our case, right? 
*	sgronblo has quit (Ping timeout: 240 seconds)
<crucify_me>	the way in which it *unifies
<fishythefish>	crucify_me: what does "a parameter of 2 elements" mean?
<crucify_me>	sorry friend! I just sort of lost hold of this fishythefish 
*	zachk (~zachk@unaffiliated/zachk) has joined
<fishythefish>	id is generally pretty flexible due to its polymorphic type
<crucify_me>	two elements meaning...
*	fresheyeball (~isaac@2601:283:8202:6c0:76d4:35ff:fe64:4101) has joined
<crucify_me>	a' and b' in the first param of the type foldr (.)
<fresheyeball>	is there a flipped applicative operator?
<fresheyeball>	like
<fishythefish>	:t foldr (.)
<lambdabot>	Foldable t => (a -> b) -> t (b -> b) -> a -> b
*	xcmw has quit (Ping timeout: 240 seconds)
<fishythefish>	crucify_me: are you referring to the (a -> b) at the beginning?
<fresheyeball>	f <$> x <*> y <*> z = x <?> y <?> z <&> f
<fresheyeball>	where <?> is the operator I am looking for
*	Sampuka has quit (Ping timeout: 255 seconds)
<crucify_me>	yes, that is where we do the substitution
*	jfredett_ (~quassel@2601:189:c600:c2e:48bc:8f9:40b8:dd75) has joined
<crucify_me>	when the first unification we worked on is done, foldr (.) ...
<zachk>	fresheyeball you could make those with flip and infixl I believe
<fishythefish>	fresheyeball: lens defines <&> like that, I believe
<fresheyeball>	fishythefish: yeah it does
<fishythefish>	crucify_me: in what way is that a "parameter of 2 elements"?
<fresheyeball>	but not applicative flip 
*	cdg has quit (Ping timeout: 255 seconds)
*	i-am-the-slime has quit (Ping timeout: 260 seconds)
<fishythefish>	fresheyeball: ah, gotcha.
<fishythefish>	:t (<**>)
<lambdabot>	Applicative f => f a -> f (a -> b) -> f b
<crucify_me>	each type in the first param is replaced by a separate function, right?    ok that is poor terminology fishythefish 
<fresheyeball>	:i 
<fresheyeball>	:i (<**>_
<fresheyeball>	:i (<**>)
<fishythefish>	crucify_me: no, the type (a -> b) is the type of a function with an input of type a and an output of type b
*	n1k (~nonethous@unaffiliated/nonethousand) has joined
<zachk>	:t <*>
<lambdabot>	error: parse error on input ‘<*>’
<cocreature>	fresheyeball: lambdabot doesn’t do :i
<fishythefish>	:t (<*>) -- zachk 
<lambdabot>	Applicative f => f (a -> b) -> f a -> f b
<zachk>	:t (<*>)
<lambdabot>	Applicative f => f (a -> b) -> f a -> f b
*	jfredett has quit (Ping timeout: 240 seconds)
<fishythefish>	fresheyeball: should be defined in Control.Applicative
*	raynold (uid201163@gateway/web/irccloud.com/x-vwdyegwmyjseblpt) has joined
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
*	jfredett (~quassel@2601:189:c600:c2e:c59e:1b33:43cb:2c4e) has joined
<mniip>	% :i <**>
<yahb>	mniip: [Timed out]
<mniip>	oh please
<mniip>	% :i <**>
<crucify_me>	what I mean is there are only two types (a' -> b') to be substituted, so we substitute in (c -> c) as dmwi*t suggested. a is replaced by c and b is replaced by c to get (c -> c)
<yahb>	mniip: [Timed out]
<mniip>	% 1
<yahb>	mniip: 1
<mniip>	% :i <**>
<yahb>	mniip: (<**>) :: Applicative f => f a -> f (a -> b) -> f b -- Defined in `GHC.Base'; infixl 4 <**>
<mniip>	:s
<fishythefish>	crucify_me: yes
<fishythefish>	crucify_me: that doesn't mean that c -> c only unifies with such a type though
*	n1 has quit (Ping timeout: 255 seconds)
*	woodson (~woodson@142.204.244.68) has joined
*	jfredett_ has quit (Ping timeout: 255 seconds)
<crucify_me>	so ie fishythefish id can only be unified with a function that has a 2-type 1st parameter ie (y -> z)
*	sgronblo has quit (Ping timeout: 255 seconds)
<fishythefish>	crucify_me: no
*	tomphp has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	DTZUZO (~DTZUZO@S0106bcd16584b0aa.vs.shawcable.net) has joined
<crucify_me>	yikes...
<crucify_me>	the first unification of foldr (.) is a bit complicated, but I see how it works fine. 
<crucify_me>	then that composed function has (a -> b) as the first parameter
*	HMPerson1 has quit (Ping timeout: 268 seconds)
*	markus1189 has quit (Remote host closed the connection)
<crucify_me>	so in another case with 3 types in the 1st parameter, say (r -> s -> t), we can also unify id with that
<fishythefish>	crucify_me: yes. as an exercise, perform that unification
<crucify_me>	(r -> s -> t) -> (r -> s -> t)
<fishythefish>	(by the way, the position of that parameter is not really relevant)
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
*	xcmw (~textual@216.48.140.139) has joined
*	xcmw has quit (Client Quit)
<crucify_me>	is that wrong what I did ?
<fishythefish>	crucify_me: not quite. let id have the type a -> a. then unification entails setting a -> a ~ r -> s -> t and proceeding from there
*	siddharthvipul has quit (Quit: Leaving)
<crucify_me>	the position of that parameter is not really relevant?
*	thblt` (~user@unaffiliated/thblt) has joined
*	tinnotl_ (~tinnotl@92.53.29.160) has joined
<crucify_me>	so if we have a -> a ~ r -> s -> t    whatever is in the parameter is easily replaced with a -> a  ?
*	peacememories has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<MarcelineVQ>	crucify_me: (r -> s -> t) is read as (r -> (s -> t))    which is also a hint
<fishythefish>	crucify_me: unification is just about solving an equality of types. it doesn't matter whether this occurs in the first argument to a function or the hundredth
*	d-fish (~karl@129.10.9.45) has joined
*	ian_andrich (~ian_andri@c-73-223-61-224.hsd1.ca.comcast.net) has joined
*	thblt has quit (Ping timeout: 255 seconds)
*	sgronblo has quit (Ping timeout: 276 seconds)
*	codyw (~cody@c-73-231-132-53.hsd1.ca.comcast.net) has joined
*	cdg (~cdg@2600:1700:3120:40e0:2946:f4d:fcda:261) has joined
*	sea-gull has quit (Ping timeout: 240 seconds)
<crucify_me>	ok I'm lost then sorry
<fishythefish>	crucify_me: an equality of function types can be decomposed into two simpler type equalities. how do we do that?
*	mmalone (~mmalone@c-73-189-127-143.hsd1.ca.comcast.net) has joined
*	SpinTensor has quit (Quit: WeeChat 1.9.1)
<mnoonan_>	maybe writing the types in prefix form would help?  (->) a a ~ (->) r ((->) s t)
<crucify_me>	well, in the case where you do right association like MarcelineVQ suggested ^ 
<fishythefish>	(we always do right association)
<crucify_me>	let me paste my notes from the other day
*	Yuras has quit (Ping timeout: 260 seconds)
*	cdg has quit (Ping timeout: 255 seconds)
<crucify_me>	http://lpaste.net/360531
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
*	mmalone has quit (Ping timeout: 240 seconds)
*	osa1 has quit (Ping timeout: 255 seconds)
<crucify_me>	after line 18 my notes became poor
*	Sb (~hhehh@212.156.86.78) has joined
*	tongcx (~tongcx@unaffiliated/tongcx) has joined
<fishythefish>	well, also, those notes are about a particular example, but it's not the one i'm asking about at the moment
*	toblorone (~toblorone@162.246.216.202) has joined
<crucify_me>	I can't generalize about the process because I thought the substitution is done in the first param
*	peacememories (~textual@e240-232.eduroam.tuwien.ac.at) has joined
<crucify_me>	the first param disappears and the changes are transferred to the remainder of the type signature
*	ericshor_ has quit ()
<crucify_me>	as in the case of foldr (.)
*	sgronblo has quit (Ping timeout: 260 seconds)
*	natrys has quit (Quit: natrys)
<crucify_me>	foldr (.) :: (a' -> b') -> t (b' -> b') -> a' -> b'
<fishythefish>	crucify_me: well, if you take the view that all functions are unary, this is correct
*	Swizec has quit (Ping timeout: 248 seconds)
<crucify_me>	I'm just looking for a formula to work on the next one, say const id
<fishythefish>	however, your wording made it sound like `foldr (.) id` would be invalid since id is not the first argument of foldr (adopting your normal view that functions can be n-ary), and this is incorrect
*	Sb server istanbul.tr.undernet.com.tr
<daey>	why does haskell have a 'negate' function? how does it differ from '-a'
<fishythefish>	crucify_me: sure, that's a good exercise. work out the type of `const id`
<fishythefish>	daey: because e.g. (- 1) is a function subtracting 1, not the negative of 1
<fishythefish>	er
<fishythefish>	reverse that
<ahihi>	fishythefish: that's why subtract exists, not negate
<crucify_me>	no I didn't mean that about id not being the 1st argument
<Sb>	??
<daey>	fishythefish: ah (-) :: Num a => a -> a -> a
<ahihi>	i think negate mainly exists because you can't pass unary minus as a function
*	Sb has quit (Quit: Resart)
<ahihi>	> map negate [1,2,3]
<lambdabot>	 [-1,-2,-3]
<fishythefish>	yeah, the point i was trying to get across (badly) is that - is overloaded as a symbol
<fishythefish>	i should have said (-) 1
<crucify_me>	I was looking at it as "plugging in " and transforming the first argument of fold (.) which is (c -> c) being plugged into (a -> b) or as we had it (a' -> b')
*	tongcx has quit (Ping timeout: 248 seconds)
*	Swizec (~swizec@199.21.86.210) has joined
<fishythefish>	:t foldr (.) -- crucify_me 
<lambdabot>	Foldable t => (a -> b) -> t (b -> b) -> a -> b
<fishythefish>	the type of the first argument is not c -> c; that's the type of id
*	tongcx (~tongcx@unaffiliated/tongcx) has joined
<crucify_me>	I know but to do the unification
*	mohsen_ has quit (Quit: WeeChat 1.9.1)
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
<fishythefish>	to do the unification, we don't substitute that whole thing directly. we only substitute for individual type variables
<daey>	shouldnt something like 'map (-) 5 [1,2,3] work?
<fishythefish>	that's why we do the solving process
<daey>	shouldnt something like 'map (-) 0 [1,2,3]' work? *
<ahihi>	> map (0 -) [1,2,3]
<lambdabot>	 [-1,-2,-3]
<daey>	ah. that bracket setting i didnt come up with :D
<crucify_me>	we plug in c -> c , that drops off, and the type is now Foldable t => t (c -> c) -> c -> c
<crucify_me>	fully unified
*	jao (~jao@pdpc/supporter/professional/jao) has joined
*	dxtr (6e4fbd61@unaffiliated/dxtr) has joined
<fishythefish>	crucify_me: you're glossing over the actual unification process, but that is the result, yes
*	chaosmasttter (~chaosmast@p54B47CA8.dip0.t-ipconnect.de) has joined
<ahihi>	> map ((-) 0) [1,2,3] -- daey: another way to write the same thing
<lambdabot>	 [-1,-2,-3]
<crucify_me>	(a' -> b') is replaced by (c -> c), so wherever else we have a' -> b'   that is replaced by c -> c
*	yahb has quit (Remote host closed the connection)
*	yahb (xsbot@178.219.36.155) has joined
*	yahb has quit (Changing host)
*	yahb (xsbot@lua/bot/yalb) has joined
<fishythefish>	crucify_me: that's how it works out, but that's not how it happens
<crucify_me>	how is my wording glossing over the process?
*	humanoyd has quit (Quit: WeeChat 2.0)
<crucify_me>	hmm
<MarcelineVQ>	fishythefish, ahihi, daey: negate is the unarry -
<fishythefish>	crucify_me: what if the type signature wasn't made only out of bits that look like (a' -> b')? what if you had just a' and b' on their own somewhere?
*	myk267 (~myk267@unaffiliated/myk267) has joined
<MarcelineVQ>	afaik in the same way that 3 is   fromIntegral 3    -3  is negate 3
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	ziocroc2 (~ziocroc@151.74.122.229) has joined
<crucify_me>	a' and 'b would turn out to be a' -> a' and b' -> b'   right?
*	sgronblo has quit (Ping timeout: 255 seconds)
*	oish has quit (Ping timeout: 248 seconds)
<fishythefish>	right, but (-) is assumed to be the binary operator. if you want to pass around unary - as a first-class function, you can use negate
<fishythefish>	crucify_me: no, certainly not
<fishythefish>	crucify_me: such equalities would incur the occurs check and give you an infinite type error
<crucify_me>	oh right I looked at that. 
*	pfurla has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<crucify_me>	a ~ a -> a   => infinite type error
<fishythefish>	right
<crucify_me>	dang
<mniip>	"occurs check" is the more correct name
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
<daey>	when i see these in written work 'f $ a = f a' do these letters have specific meanings, or are they totally equal placeholders?
<crucify_me>	when (.) is unified with foldr, the first param of foldr is (a -> b -> c) , so since (.) has its signature, there are 3 elements that are being replaced, and I can see how it works at least superficially
<daey>	or are f == functors. m == monads etc.?
<mniip>	no
<fishythefish>	daey: f just means "function" and a just means "value" there
<mniip>	there's a bit of convention but otherwise no hard meaning
<daey>	so they are just random letters then?
<daey>	ah ok so not random
<mniip>	x, y, xs, ys,
<mniip>	f g h,
*	soniku has quit (Ping timeout: 260 seconds)
<mniip>	k
<mniip>	i j, m n
<mniip>	a b c
<daey>	:P
<fishythefish>	crucify_me: please, let's reserve the verb "unify" for something you do with types
<daey>	xs is the tail of a list, that i got
<fishythefish>	crucify_me: you don't unify (.) with foldr, but you can apply foldr to (.)
<daey>	x the head
<mniip>	not necessarily tail
<mniip>	it's whenever you have an 'ex'
<mniip>	and you have multiple other 'exes'
<daey>	well ive only seen it in these [x:xs] scenarios so far
<mniip>	could be xs@(x:_)
<fishythefish>	also, [x:xs] is different from x:xs
<mniip>	could be just plain 'xs'
<daey>	nvm :D
<mud>	mniip: I usually try to call that xxs@(x:xs), even if parts are left out.
<mniip>	I often tack on the 's' when there's a list involved
*	neoncontrails (~neoncontr@99-26-122-26.lightspeed.sndgca.sbcglobal.net) has joined
<mniip>	mud, I usually go with xw@(x:xs)
<mniip>	w for whole
<MarcelineVQ>	mud: not xss?
<mniip>	xss is for
<mniip>	((x:xs):xss)
*	sgronblo has quit (Ping timeout: 248 seconds)
<mud>	MarcelineVQ: Naw, since it's just x and xs squished together
<mniip>	I often would denote monadically wrapped values with a prefix m
<MarcelineVQ>	plethora@(onex:_unused)
<mniip>	like
<mniip>	foo mx = do x <- mx...
<crucify_me>	I stand corrected , I realize we are talking strictly about the types. sorry for saving keystrokes fishythefish 
<mniip>	this came to mind https://github.com/mniip/h6502/blob/master/src/H6502/OpcodeMap.hs#L526-L532
<fishythefish>	crucify_me: saving keystrokes is fine, but not when it obfuscates or changes meaning :)
*	valentinbuza (~valentinb@unaffiliated/valentinbuza) has joined
*	cdg (~cdg@172.58.174.203) has joined
*	pja has quit (Quit: pja)
*	oats[m] (oatsmatrix@durr/im/a/sheep) has joined
<mniip>	ooh I just came up with a nice solution for AoC
<mniip>	I think
<crucify_me>	thanks well in my notes, I think I fully understand the equivalences on lines 14 and 15, and how the types unify there    http://lpaste.net/360531
*	xinming has quit (Ping timeout: 255 seconds)
<crucify_me>	so why are the equivalences with id hard for me to grasp in the next unification?
<fishythefish>	crucify_me: where do you get lost?
<crucify_me>	one would start, by looking at the first parameter of foldr (.) 's type(a' -> b')
<mniip>	nah probably not
<crucify_me>	right?
<fishythefish>	crucify_me: yes, continue
<crucify_me>	I look at that , and say ...
*	emmanuel` has quit (Ping timeout: 248 seconds)
*	TweyII has quit (Ping timeout: 248 seconds)
<crucify_me>	I want to substitute that with the type signature of id ...
<crucify_me>	so that it agrees ...
<fishythefish>	you want to *unify* it
<crucify_me>	right
*	Destol has quit (Quit: leaving)
*	tongcx has quit (Ping timeout: 248 seconds)
*	cdg has quit (Ping timeout: 258 seconds)
<fishythefish>	okay, so what does the unification entail?
<crucify_me>	so in that parameter, there are two types a' -> b'. those must be equivalent to eachother
*	tongcx (~tongcx@unaffiliated/tongcx) has joined
<fishythefish>	why?
*	bennofs has quit (Quit: WeeChat 1.9.1)
<crucify_me>	because we're trying to unify them with id
<fishythefish>	yes, but why does that mean they must be equal types?
<fishythefish>	i'm not doubting your conclusion, but let's try to be a little more formal here
*	inad922 (~inad925@78-131-82-48.pool.digikabel.hu) has joined
<crucify_me>	ok hold on
*	hackage cabal-doctest 1.0.4 - A Setup.hs helper for doctests running  https://hackage.haskell.org/package/cabal-doctest-1.0.4 (phadej)
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
*	steeze (~steeze@63.76.231.82) has joined
<crucify_me>	because eventually we are trying to apply fold (.) to id , so the arguments must be of a form that can be accepted by id
*	tempeh (~ryan@dhcp73.cs.columbia.edu) has joined
<fishythefish>	that's ultimately a valid rationale because of the way foldr works, but we can reason more generally
*	sgronblo has quit (Ping timeout: 248 seconds)
*	carlomagno has quit (Remote host closed the connection)
<fishythefish>	foldr (.) accepts an argument of a particular type (a -> b). we want this argument to be id, so the type of id (as used here) must be equal to (a -> b)
*	carlomagno (~cararell@inet-hqmc05-o.oracle.com) has joined
<fishythefish>	so we can set these types equal and solve to get a series of substitutions
<crucify_me>	ok ..
<crucify_me>	so ..
<crucify_me>	(a -> b) must be ~ (c -> c)
<fishythefish>	yes, now how do we decompose that type equality?
*	tongcx has quit (Ping timeout: 240 seconds)
<crucify_me>	we look over to the right of the "remainding" type signature of foldr (.)
<fishythefish>	no
<crucify_me>	where we have t (b -> b) -> a -> b
*	oish (~charlie@159.22.169.217.in-addr.arpa) has joined
<crucify_me>	a -> b must also be equiv to c -> c
<crucify_me>	there
<fishythefish>	again, this is correct, but glosses over what's happening
<fishythefish>	whats*
<fishythefish>	(what's* - i'm tired)
*	chaosmasttter has quit (Ping timeout: 248 seconds)
<crucify_me>	ok so before I was cheating to get the result. I was just giving myself a false conception
<fishythefish>	it's only "cheating" because your technique isn't sufficiently general
*	afarmer has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
<fishythefish>	it'll tell you what to substitute for the a -> b at the end of the signature, but how do you handle the t (b -> b), for example?
<crucify_me>	ok well I like that sound if it, but I don't know exactly what that means :)
*	ketralnis has quit (Quit: Coyote finally caught me)
<crucify_me>	I can handle it because it remains as it is because it is not (a -> b)
<crucify_me>	it is not equiv to (c -> c)
<fishythefish>	it certainly does not remain as it is - the type of foldr (.) id was said to be Foldable t => t (c -> c) -> c -> c, remember?
<crucify_me>	right, but I understand the whole thing goes to c's in this latter case
<fishythefish>	why?
<crucify_me>	because ..
*	CASEgezadthfr (~ZZXv@lmcfwa.ericsson.ca) has joined
<crucify_me>	one moment I know why
*	Gurkenglas has quit (Read error: Connection reset by peer)
*	Gurkenglas (~Gurkengla@dslb-094-223-133-187.094.223.pools.vodafone-ip.de) has joined
*	dcoutts (~duncan@108.78.6.51.dyn.plus.net) has joined
*	woodson has quit (Ping timeout: 250 seconds)
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
*	jb55 has quit (Ping timeout: 248 seconds)
<crucify_me>	because when we did the unification in the first param, instead of using b' as the ghc does, we chose to set id to (c -> c), so wherever theres a b' it becomes c
*	Jahangir (~Ustad@14.139.123.36) has joined
<crucify_me>	instead of using * b   not b'
*	toby_ (~toby@88-110-104-87.dynamic.dsl.as9105.com) has joined
<fishythefish>	yes, but we can be more formal
*	toby_ is now known as Guest39878
<crucify_me>	I like formality
<crucify_me>	but tend to be rough around the edges
<fishythefish>	in general, we have an equality of types w -> x ~ y -> z if and only if w ~ y and x ~ z
*	tempeh has quit (Ping timeout: 260 seconds)
<fishythefish>	so our equality a' -> b' ~ c -> c can be broken down into the two simpler equalities a' ~ c and b' ~ c
*	toby1851 has quit (Ping timeout: 255 seconds)
<fishythefish>	this justifies us performing the substitutions a' ==> c and b' ==> c throughout the rest of the signature
*	vlatkoB has quit (Remote host closed the connection)
*	machinedgod has quit (Ping timeout: 255 seconds)
*	sgronblo has quit (Ping timeout: 248 seconds)
*	tomphp (~tomphp@cpc73822-dals21-2-0-cust404.20-2.cable.virginm.net) has joined
*	HMPerson1 (~HMPerson1@pal-210-106-85.itap.purdue.edu) has joined
*	egis has quit (Quit: Leaving)
<crucify_me>	right. so the way I see it.. 
<ph88>	https://www.youtube.com/watch?v=7NB8tMa8sUk ^^
*	hackage vinyl 0.7.0 - Extensible Records  https://hackage.haskell.org/package/vinyl-0.7.0 (AnthonyCowley)
*	alex`` has quit (Quit: WeeChat 1.9.1)
<crucify_me>	we must set equivalence in the first parameter with the incoming type signature. then the "rest of" / "remainder" must agree with the unification in the 1st parameter, or does that limit us ?
*	oish has quit (Ping timeout: 248 seconds)
<crucify_me>	by agreement I just mean knowing how the rest of the signature is affected
<fishythefish>	this sounds about right. you equate the expected type of the parameter with the actual type of the argument. you extract a set of substitutions from this equality and perform those on the rest of the type signature
*	aplainzetakind (~dk@78-131-29-87.pool.digikabel.hu) has joined
*	minn has quit (Ping timeout: 248 seconds)
<fishythefish>	crucify_me: try the exercise you mentioned: without running `:t const id`, work out what the type of `const id` should be
<crucify_me>	ok. going back ..
<aplainzetakind>	I get this when I attempt to stack build haskanoid: https://paste.pound-python.org/show/RmbfLajpSchgW1cNIH6w/
<Zemyla>	I wish there were a semigroup equivalent of Endo. Something like
*	xcmw (~textual@cpe-65-27-241-63.cinci.res.rr.com) has joined
<Zemyla>	@let newtype SEndo a = SEndo { appSEndo :: Maybe a -> a }
<crucify_me>	if there are 3 types expected by the parameter
<lambdabot>	 Defined.
<crucify_me>	and we try to unify that with id
<Zemyla>	@let instance Semigroup (SEndo a) where SEndo f <> SEndo g = SEndo $ \mx -> f $ Just $ g mx
<lambdabot>	 .L.hs:161:10: error:
<lambdabot>	     Not in scope: type constructor or class ‘Semigroup’
<lambdabot>	     |
<Zemyla>	Ugh.
<crucify_me>	what does that look like?
*	iAmerika1 (~dwshrewt@unaffiliated/iamerikan) has joined
*	iAmerikan has quit (Ping timeout: 255 seconds)
*	chaosmasttter (~chaosmast@p54B47CA8.dip0.t-ipconnect.de) has joined
<crucify_me>	is it that they are all 3 equated to c, such as q ~ c , r ~ c , s ~ c   ?
*	SenasOzys has quit (Ping timeout: 240 seconds)
*	carlomagno1 (~cararell@inet-hqmc05-o.oracle.com) has joined
<fishythefish>	crucify_me: what types are you trying to unify?
*	carlomagno has quit (Ping timeout: 255 seconds)
*	Hoegerkartellen (~Hoegerkar@185.147.236.185) has joined
<fishythefish>	(also, unification can pretty much always be carried out the same way, regardless of the number of types involved)
<crucify_me>	in the case where the 1st parameter has three : ( q -> r -> s)   unified with id
*	tongcx (~tongcx@unaffiliated/tongcx) has joined
<fishythefish>	crucify_me: you shouldn't need that for `const id`, but you would have q -> r -> s ~ a -> a, which gives you q ~ a and r -> s ~ a
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
*	Psybur has quit (Ping timeout: 248 seconds)
<byorgey>	aplainzetakind: do you have gcc installed?
<fishythefish>	remember that all functions are unary: q -> r -> s is the same as q -> (r -> s)
<byorgey>	aplainzetakind: did you look in config.log?
<crucify_me>	not for const id 
<aplainzetakind>	byorgey: yes, I can compile a hello world from the command line
<crucify_me>	just generally with that scenario in the first param
<aplainzetakind>	I couldn't find config.log actually.
*	Guest92619 has quit (Remote host closed the connection)
*	oish (~charlie@159.22.169.217.in-addr.arpa) has joined
*	drewbert (~drewbert@96.74.3.185) has joined
*	gugah (~gugah@116-214-231-201.fibertel.com.ar) has joined
<aplainzetakind>	It's not in my /var/log, nor in the directory I run stack from.
<ggVGc>	hrm, the more I write haskell the more I feel do notation obfuscates my code
<byorgey>	aplainzetakind: maybe check in .stack-work/logs/
*	drewbert is now known as Guest15294
<ggVGc>	every time I write I use do notationin IO it turns out prett ybad
<aplainzetakind>	byorgey: Not there either.
<ggVGc>	and usually my functions end up too long and non-specific
*	dfeuer has quit (Ping timeout: 248 seconds)
<ggVGc>	also, apparently I can't type today
<aplainzetakind>	Actually sudo find / -name config.log returns nothing.
<crucify_me>	in other words, how do you unify (q -> (r -> s)) and (c -> c)
<fishythefish>	crucify_me: you tell me. you know the general pattern for unifying function types
*	sgronblo has quit (Ping timeout: 268 seconds)
<byorgey>	aplainzetakind: I'm out of ideas then.  This looks like it might possibly be relevant: https://github.com/commercialhaskell/stack/issues/1633
<crucify_me>	it must be (c -> (c -> c)) fishythefish 
<fishythefish>	crucify_me: the output of a unification should be a set of type equalities, not a single type
<MarcelineVQ>	byorgey: the --with-compiler error makes me wonder if it's a cabal version issue, or by extension a stack version issue.  aplainzetakind: the first thing I'd try is a super fresh stack, like  stack upgrade --git
<aplainzetakind>	byorgey: Yes, googling the error mostly produces cases of broken gccs. Mine seems perfectly fine though.
*	Synthetica has quit (Quit: Connection closed for inactivity)
*	SenasOzys (~SenasOzys@user208.77-105-199.netatonce.net) has joined
<crucify_me>	right since that part is "disposed of" we have q ~ c , r ~ c , s ~ c     for whatever awaits in the remainder of the signature 
<fishythefish>	crucify_me: that's incorrect. how did you arrive at those equalities?
*	HarveyPwca (~HarveyPwc@ip-64-134-172-8.public.wayport.net) has joined
*	ilja_kuklic (~Thunderbi@host86-187-175-183.range86-187.btcentralplus.com) has joined
<aplainzetakind>	MarcelineVQ: My stack was installed through the gentoo overlay, is going behind the back of portage OK?
*	ian_andrich has quit (Ping timeout: 255 seconds)
<MarcelineVQ>	I encourage it, if I were you I'd upgrade stack and then uninstall the system version and just use the upgraded one. it'll be in ~/.local/bin
<MarcelineVQ>	but if gentoo grabs from git then it won't be any different, idk about gentoo
<crucify_me>	q ~ c , (r -> s) ~ (c -> c)    
<aplainzetakind>	OK, I'll try that and report back.
<MarcelineVQ>	I just encourage not using distro repo's when it comes to stack once you have a copy
<fishythefish>	crucify_me: not quite
<crucify_me>	hmm
*	`Guest00100 (~user@37.113.139.109) has joined
*	LKoen has quit (Quit: “It’s only logical. First you learn to talk, then you learn to think. Too bad it’s not the other way round.”)
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
*	mizu_no_oto has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	sleffy has quit (Ping timeout: 248 seconds)
*	crosleyt (~troy@209-217-208-226.northland.net) has joined
*	`Guest00000 has quit (Ping timeout: 277 seconds)
*	tempeh (~ryan@69.202.138.82) has joined
<[Leary]>	(a -> b) is like (a, b). Would this all look easier if you were seeing what you could conclude from setting (c, c) = (q, (r, s))?
<crucify_me>	dyslexia sets in
*	tempeh has quit (Client Quit)
<crucify_me>	any hints fishythefish 
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
<crucify_me>	[Leary], sorry just saw this....
<fishythefish>	crucify_me: try what [Leary] said
*	sgronblo has quit (Ping timeout: 240 seconds)
*	pfurla (~textual@ool-182ed51a.dyn.optonline.net) has joined
*	DTZUZO has quit (Read error: Connection reset by peer)
*	tomphp has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	mstruebing has quit (Quit: WeeChat 2.0)
<fishythefish>	crucify_me: you have all the information you need. the resulting equalities don't all need to look like <single type variable> ~ <single type variable>
*	lyxia rhymes with dyslexia.
<crucify_me>	right but what I did at 12:47 is wrong ...
<crucify_me>	ly*xia is nice
*	townsend has quit (Ping timeout: 258 seconds)
*	puregreen has quit (Ping timeout: 248 seconds)
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
*	conal has quit (Quit: Computer has gone to sleep.)
<ph88>	what does   :set -fobject-code   do ?
<crucify_me>	 ok  c ~ q , c ~ r -> s
*	agander (~agander@ba-19-149-100.service.infuturo.it) has joined
*	conal (~conal@209.58.148.156) has joined
*	raduom (~raduom@92.81.52.30) has joined
<fishythefish>	crucify_me: good!
*	arroyoc has quit (Quit: arroyoc)
<crucify_me>	so looking at it as a set..
*	arroyoc (~arroyoc@5.224.52.113) has joined
*	puregreen (~puregreen@93.185.27.166) has joined
<crucify_me>	thanks so much fishythefish . you realize you opened a can of worms
*	mmalone (~mmalone@c-73-189-127-143.hsd1.ca.comcast.net) has joined
<crucify_me>	and [Leary] 
<crucify_me>	thanks
*	benj1 has quit ()
*	geek00l (~geek00l@185.65.134.164) has joined
<[Leary]>	yw
*	sgronblo has quit (Ping timeout: 240 seconds)
<crucify_me>	really appreciate help without admonishment
*	rm8 has quit (Quit: i slep)
*	JappleAck has quit (Quit: Leaving)
<crucify_me>	so I guess with some study of the Milner business I'll be rolling
<crucify_me>	hinley milner
<crucify_me>	hindley
*	sgronblo (~sam@p1453062-ipngn15101marunouchi.tokyo.ocn.ne.jp) has joined
*	DTZUZO (~DTZUZO@S0106bcd16584b0aa.vs.shawcable.net) has joined
*	alex`` (~alex@2a01cb000bb310000e31f98b4cdf4eae.ipv6.abo.wanadoo.fr) has joined
<crucify_me>	late for work thanks ALL again
*	Jacoby6000 has quit (Ping timeout: 260 seconds)
*	Boomerang has quit (Ping timeout: 255 seconds)
*	CASEgezadthfr (~ZZXv@lmcfwa.ericsson.ca) has left ("Leaving")
*	xinming (~hyy@115.219.35.148) has joined
*	anonymous-n00b (~Adium@c-73-47-108-191.hsd1.ma.comcast.net) has joined
*	tomphp (~tomphp@cpc73822-dals21-2-0-cust404.20-2.cable.virginm.net) has joined
*	tongcx has quit (Ping timeout: 255 seconds)
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Tue Dec  5 13:07:05 2017

