15:13 You have joined the channel
15:13 crestfallen has joined (~crestfall@128.32.176.159)
15:13 Topic: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: https://gist.github.com/ | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org
15:13 glguy set the topic at: Jan 5, 2019, 7:21 AM
15:13 Mode: +CLnt
15:13 Created at: Nov 25, 2006, 10:42 PM
15:13 syd: Hey! Is there a way to add a `Bool` field to a persistent model such that it gets initialised with False in migrations?
15:13 syd: I tried `default=False` but that inserts the text `False`.
15:14 crestfallen: hi I'm learning about conversion functions and isomorphism. I guess tt = f . g is wrong here. what do these functions do ( I cannot get g to work alone ) thanks   https://termbin.com/0yx0
15:15 syd: aha, ` default=0` seems to wokr
15:15 kish has left IRC (Ping timeout: 245 seconds)
15:16 jle`: crestfallen: f is a -> () -> a, it takes an 'a' and a (), and returns an 'a'
15:16 lyxia: crestfallen: g takes a function k and applies it to (), which part of that is confusing?
15:16 acidjnk_new has left IRC (Ping timeout: 245 seconds)
15:17 jle`: g should work if you give it any (() -> a) function
15:17 jle`: for example g (\_ -> "hello")
15:17 crestfallen: I see thanks hold on please
15:17 deviantfero has left IRC (Ping timeout: 245 seconds)
15:19 hackage: git-lfs 1.1.0 - git-lfs protocol  https://hackage.haskell.org/package/git-lfs-1.1.0 (JoeyHess)
15:20 syd has left IRC (Remote host closed the connection)
15:20 deviantfero has joined (~deviantfe@ip168-243-230-189.intercom.com.sv)
15:20 crestfallen: jle`: so is tt correct there ?
15:20 jle`: i'm not sure what you mean by 'correct'
15:20 jle`: like, morally?
15:20 iqubic: crestfallen: does it type check?
15:21 conal has joined (~conal@207.189.24.189)
15:21 jle`: what is right/wrong here? is this a homework assignment maybe, where right and wrong have a clearly defined answer?
15:21 comerijn has joined (~merijn@83-160-49-249.ip.xs4all.nl)
15:22 crestfallen: jle`: no this is a guy with no programming background and no clue :)
15:22 jle`: hm
15:22 jle`: so how do you want us to answer this question?
15:22 jle`: we don't know what is wrong or right, because we aren't sure what you want to do
15:22 comerijn:  /quit
15:22 jle`: that's like saying if x = 3 is right or wrong, without telling us what you're using x for
15:22 comerijn has left IRC (Client Quit)
15:23 crestfallen: no thank you it does type check and I see how it works, or at least that it works
15:23 iqubic: It looks like f and g are two sides of an isomorphism. And it looks like like he's trying to prove that 'f . g = id'.
15:23 crestfallen: so the context is a tutorial on isomorphism
15:23 mdunnio has left IRC (Remote host closed the connection)
15:23 jle`: x = 3 is right if you're, say, calculating the number of letters in "abc"
15:23 kish has joined (~oracle@unaffiliated/oracle)
15:24 jle`: x = 3 is wrong if you're, say, calculating the population of the earth
15:24 merijn has left IRC (Ping timeout: 265 seconds)
15:25 jle`: is tt = f . g right or wrong? it depends on what you want to do with tt, or what you expect tt to be
15:25 crestfallen: the first example was swap :: (a -> b) -> (b -> a); swap (x,y) = (y,x). so the comment was that data is not lost in a "safe conversion"
15:25 natrys has joined (~natrys@165.22.212.116)
15:25 jle`: if you want tt to run a twitter clone as a web server, it's wrong :)
15:25 tirti has joined (c8727df5@200.114.125.245)
15:26 freeman42x has joined (~freeman42@2a02:8084:e80:9580:585e:37de:c447:4c07)
15:26 natrys has left IRC (Client Quit)
15:27 crestfallen: so  I see how tt = f . g is id. so in the type def, how does taking (() -> a) and () as arguments make it isomorphic?  
15:27 is_null has joined (~jpic@pdpc/supporter/professional/is-null)
15:27 is_null_ has joined (~jpic@pdpc/supporter/professional/is-null)
15:27 jgt1 has joined (~jgt@2a00:23c6:b81:4000:c5cc:80c4:ddb2:73df)
15:29 crestfallen: . :t tt               tt :: (() -> a) -> () -> a
15:29 crestfallen: I think I get it actually
15:30 iqubic: jle`: He's trying to prove that 'f . g' is 'id'
15:30 Gurkenglas has joined (~Gurkengla@unaffiliated/gurkenglas)
15:31 jle`: crestfallen: the fact that the types match isn't what makes it isomorphic
15:31 heatsink has joined (~heatsink@2600:1700:bef1:5e10:68b4:607f:85e1:f172)
15:31 Sgeo__ has joined (~Sgeo@ool-18b98995.dyn.optonline.net)
15:31 jle`: crestfallen: there are a lot of functions where the types match up correctly, but they do'nt form an isomorphism
15:31 jle`: so the types aren't really the important thing here
15:31 jle`: crestfallen: the important property is that for all inputs, it returns the same input unchanged
15:32 crestfallen: yeah thanks iqubic  jle`       the function is what makes it isomorphic right?
15:32 crestfallen: a conversion function like:
15:32 jle`: yeah. so try feeding it some sample inputs, and seeing what outputs you get
15:32 jle`: for example, feed it (\_ -> "hello").  what function do you get back out?
15:32 crestfallen: f :: A -> B    and    g :: B -> A
15:32 crestfallen: hold on
15:32 iqubic: this is isomorphic if and only if 'f . g = g . f = id' for all inputs.
15:33 crestfallen: yeah it works it's just identity : "hello"
15:33 jle`: it has to return (\_ -> "hello")
15:33 jle`: not "hello"
15:33 jle`: if you feed it (\_ -> "hello"), the result has to also be (\_ -> "hello")
15:34 crestfallen: ok but I was using tt
15:34 jle`: that's what i mean
15:34 Sgeo_ has left IRC (Ping timeout: 245 seconds)
15:34 jle`: if you give tt (\_ -> "hello"), it has to give back (\_ -> "hello") as an output
15:34 jle`: that's the only way it can be an isomorphism
15:34 jle`: if it gives back anything else, it's not an isomorphism
15:34 crestfallen: tt (\_ -> "hello") ()    returns "hello"
15:34 jle`: yeah, but it's not important what tt (\_ -> "hello") () gives back
15:34 jle`: what's important is what tt (\_ -> "hello") gives back
15:35 jle`: that's the 'point' of an isomorphism
15:35 jle`: if you give it an input, it has to return the same input unchanged, as output
15:35 heatsink has left IRC (Ping timeout: 245 seconds)
15:35 crestfallen: sorry I'm getting a print error with that input
15:35 ltriant has joined (~ltriant@210-84-15-181.dyn.iinet.net.au)
15:35 jle`: yeah, the output `() -> String` can't be shown, becuase it has no Show instance
15:35 iqubic: yes. of course.
15:36 iqubic: You can't print a function.
15:36 jle`: so you have to look at it analytically
15:36 jle`: or like, 'think' about what it does
15:36 jle`: maybe give it a name, newHello = tt (\_ -> "hello")
15:36 crestfallen: ok
15:36 jle`: what is the type of newHello, and how does it behave?
15:36 ryantrinkle has left IRC (Ping timeout: 245 seconds)
15:36 jle`: maybe to make it more explicit, newHello = tt (\() -> "hello")
15:36 crestfallen: let newHello = tt (\_ -> "hello")
15:37 crestfallen: sorry
15:37 jle`: so newHello is an isomorphism if and only if it is equivalent to the function (\() -> "hello")
15:37 lprd_ has joined (~jon@lfbn-1-886-87.w86-247.abo.wanadoo.fr)
15:37 jle`: er, tt is a valid isomorphism candidate if newHello is equivalent to (\() -> "hello") 
15:37 crestfallen: blushing
15:38 jle`: so, what is the type of newHello, and how does it behave when you give it different inputs?
15:38 fragamus has joined (~michaelgo@c-98-244-6-56.hsd1.ca.comcast.net)
15:38 nuxdie has left IRC (Ping timeout: 246 seconds)
15:39 jgt1 has left IRC (Ping timeout: 246 seconds)
15:39 crestfallen: the type is [Char]
15:39 abhixec has left IRC (Quit: leaving)
15:39 jgt1 has joined (~jgt@2a00:23c6:b81:4000:c5cc:80c4:ddb2:73df)
15:39 the_true_potato has joined (~the_true_@host86-159-96-197.range86-159.btcentralplus.com)
15:39 iqubic: Not quit.
15:40 jle`: crestfallen: you don't need to guess
15:40 justan0theruser has left IRC (Quit: WeeChat 2.4)
15:40 jle`: that's the magic of Haskell
15:40 jle`: you can just ask ghci :)
15:40 justanotheruser has joined (~justanoth@unaffiliated/justanotheruser)
15:40 wroathe has joined (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
15:40 crestfallen: is something amiss? > :t newHello           newHello : [Char]
15:40 yitz has left IRC (Ping timeout: 246 seconds)
15:40 nuxdie has joined (sid343142@gateway/web/irccloud.com/x-lqglrudlaxkjirpw)
15:41 st8less has left IRC (Ping timeout: 240 seconds)
15:41 yitz has joined (~yitz@unaffiliated/yitz)
15:41 jle`: let newHello = tt (\() -> "hello")
15:41 jle`: hm, are you using the same tt that you gave in the paste?
15:41 travisonloid has left ()
15:42 fryguybob has left IRC (Read error: Connection reset by peer)
15:42 Amras0000 has left IRC (Ping timeout: 240 seconds)
15:43 crestfallen: one moment please
15:43 crestfallen: yeah its the same...
15:43 conal has left IRC (Quit: Computer has gone to sleep.)
15:43 owlscientist has left IRC (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
15:44 conal has joined (~conal@207.189.24.189)
15:44 jle`: hm, can you paste the line you are using in ghci to define newHello?
15:44 lprd_ has left IRC (Ping timeout: 276 seconds)
15:44 conal has left IRC (Client Quit)
15:44 crestfallen:  λ > newHello = tt (\_ -> "hello")
15:44 ereu has left IRC (Ping timeout: 246 seconds)
15:45 iqubic: and what does ':t newHello' return?
15:45 crestfallen: ..     newHello :: [Char]
15:46 iqubic: Something isn't right here.
15:46 jle`: hm ... are you ... using ghc? this is  interesting
15:46 toblorone has left IRC (Remote host closed the connection)
15:46 jle`: % ff x () = x
15:46 yahb: jle`: 
15:46 jle`: % gg k = k ()
15:46 yahb: jle`: 
15:46 ereu has joined (~root@107.175.215.174)
15:46 jle`: % tt = ff . gg
15:46 yahb: jle`: 
15:46 iqubic: % :t tt (\_ -> "Hello")
15:46 yahb: iqubic: () -> [Char]
15:46 jle`: % newHello = tt (\() -> "hello")
15:46 yahb: jle`: 
15:46 jle`: % :t newHello
15:46 yahb: jle`: () -> [Char]
15:47 lambdabot has left IRC (Remote host closed the connection)
15:47 jle`: are you using the latest version of ghc maybe?
15:47 iqubic: That is the expected output of ':t newHello'
15:47 crestfallen: weird hold on pls
15:47 iqubic: And lambdabot is down.
15:47 linarcx has left IRC (Ping timeout: 240 seconds)
15:47 lambdabot has joined (~lambdabot@silicon.int-e.eu)
15:47 lambdabot has left IRC (Changing host)
15:47 lambdabot has joined (~lambdabot@haskell/bot/lambdabot)
15:47 fryguybob has joined (~fryguybob@173-243-161-100.tvc-ip.com)
15:48 conal has joined (~conal@207.189.24.189)
15:48 conal has left IRC (Client Quit)
15:48 is_null has left IRC (Ping timeout: 265 seconds)
15:49 dansho has joined (~dansho4@71-84-161-204.dhcp.astr.or.charter.com)
15:49 wroathe has left IRC (Ping timeout: 245 seconds)
15:49 is_null has joined (~jpic@pdpc/supporter/professional/is-null)
15:51 jakalx has left ()
15:51 ggVGc has left IRC (Quit: WeeChat 2.6)
15:53 danvet has left IRC (Ping timeout: 246 seconds)
15:53 voyons_osti has left IRC (Remote host closed the connection)
15:55 zmt00 has joined (~zmt00@2600:1700:7c00:8f20:58db:441a:5a1c:546f)
15:55 Azel has joined (~Thunderbi@ppp-115-87-132-123.revip4.asianet.co.th)
15:57 crestfallen: @let f :: a -> () -> a; f = \x _ -> x
15:57 lambdabot:  Defined.
15:57 crestfallen: @let g :: (() -> a) -> a; g k = k ()
15:57 lambdabot:  Defined.
15:57 crestfallen: @let tt = f . g
15:57 lambdabot:  .L.hs:179:6: error:
15:57 lambdabot:      Ambiguous occurrence ‘f’
15:57 lambdabot:      It could refer to either ‘Debug.SimpleReflect.f’,
15:58 jle`: f and g are already defined for lambdabot, so i used ff and gg earlier
15:58 crestfallen: @let ff :: a -> () -> a; ff = \x _ -> x
15:58 lambdabot:  Defined.
15:58 crestfallen: @let gg :: (() -> a) -> a; gg k = k ()
15:58 lambdabot:  Defined.
15:58 crestfallen: @let tt = ff . gg
15:58 lambdabot:  Defined.
15:59 crestfallen: @let conversion = tt (\_ -> "hello")
15:59 lambdabot:  Defined.
15:59 dyamon has left IRC (Ping timeout: 245 seconds)
15:59 crestfallen: > conversion
15:59 iqubic: :t coversion
15:59 lambdabot: error:
15:59 lambdabot:     • Variable not in scope: coversion
15:59 lambdabot:     • Perhaps you meant ‘conversion’ (line 185)
15:59 lambdabot:  <() -> [Char]>
15:59 iqubic: :t conversion
15:59 lambdabot: () -> [Char]
15:59 crestfallen: > conversion
16:00 lambdabot:  <() -> [Char]>
16:00 jle`: you can't show conversion
16:00 iqubic: It works properly.
16:00 jle`: but you can ask for its type
16:00 jle`: :t conversion
16:00 lambdabot: () -> [Char]
16:00 iqubic: :t conversion
16:00 lambdabot: () -> [Char]
16:00 crestfallen: hmm
16:00 jle`: crestfallen: is this different than the behavior you have in your own ghci?
16:00 crestfallen: I'm looking for the error...
16:01 jle`: if so, then i'd maybe file a bug report with ghc
16:01 dmwit: mmmm
16:01 jle`: (only one difference, ghci by default doesn't 'show' conversion if you ask it to, like lambdabot does here.  but :t conversion should be the same)
16:01 dmwit: I'd place a pretty strong bet on user error over GHC bug for something this simple.
16:01 jle`: dmwit: apparently after entering all of this, :t conversion => [Char]
16:02 dmwit: Maybe... 60:1.
16:03 EvanR: alright then. Let's see everyones $
16:03 EvanR: i'll hold onto it until this issue is resolved
16:04 cosimone has left IRC (Ping timeout: 245 seconds)
16:04 jle`: you should suggest we hand over the money to completely non-suspicious and totally trustworthy user RnavE
16:05 crestfallen: ok I did conversion = ff . gg    and ...
16:06 jle`: hold on, tt = ff . gg
16:06 jle`: and conversion = tt (\() -> "hello")
16:06 crestfallen: myconversion = conversion (\_ -> "hello")
16:06 crestfallen: yeah
16:06 crestfallen: I changed it but yeah I get the correct typecheck
16:06 jle`: and what was :t myconversion ?
16:06 jle`: ah hooray
16:07 jle`: i guess no bug in ghc
16:07 crestfallen: so how to print that
16:07 jle`: i wonder what was happening before
16:07 dmwit: collects his $0
16:07 jle`: crestfallen: you can't print it, it has no Show instance
16:07 EvanR: ohhhhh
16:07 crestfallen: EvanR has it out for me
16:07 jle`: crestfallen: but we can think about what it does
16:08 jle`: crestfallen: `myconversion :: () -> String`, yes?  so, what does this function do, do you think?
16:08 jle`: you can test it out by feeding it some sample inputs and seeing how it behaves on those sample inputs
16:08 EvanR: to visualize an arbitrary function, visualize the results for your chosen input
16:08 EvanR: then vary the input. (in case of ()... kind of hard... but still)
16:09 Azel has left IRC (Ping timeout: 240 seconds)
16:10 EvanR: disclaimer, warranty voided on this technique if you try to visualize Void -> A
16:10 crestfallen: thanks all, sorting this out...
16:10 o1lo01ol1o has left IRC (Remote host closed the connection)
16:10 iqubic: EvanR: That's absurd.
16:10 jle`: that's sparta
16:11 hpc: and don't think you can just do Void -> (Void -> A), that's a classic mistake
16:12 MarcelineVQ: LEMme tell MU all about it
16:13 crestfallen: getting more confused 
16:13 MarcelineVQ: only listen to the people using your name
16:13 hpc: following irc conversations is a legitimate skill sometimes ;)
16:14 fragamus has left IRC (Ping timeout: 276 seconds)
16:16 crestfallen: so what it does jle`    is ...
16:16 crestfallen: ff :: A -> B and gg :: B -> A
16:16 EvanR: i'm serious https://www.youtube.com/watch?v=faJ8N0giqzw
16:17 jle`: crestfallen: don't think about what it is made up of
16:17 jle`: crestfallen: just try exploring it in ghci
16:17 jle`: try observing it as if it were a black box
16:17 jle`: % conversion ()
16:17 yahb: jle`: ; <interactive>:403:1: error: Variable not in scope: conversion :: () -> t
16:18 jle`: > conversion ()
16:18 lambdabot:  "hello"
16:18 jle`: if you were someone who had no idea what this conversation was about, and just joined #haskell two seconds ago
16:18 jle`: what would you tell me about what you thought about that function `conversion` ?
16:18 jle`: based on the fact that we observe `conversion () => "hello"`
16:19 freeman42x: I am looking for a web framework / libraries (combo) that meets the following criteria: https://github.com/razvan-flavius-panda/blog/blob/master/Optimal%20Haskell%20web%20framework.md Any suggestions?
16:20 crestfallen: hold on sorry jle` I can't run conversion ()
16:20 jle`: it looks like you called it `myconversion` earlier
16:21 jle`: i originally called it newHello, newHelo = tt (\() -> "hello")
16:21 plutoniix has joined (~q@125.24.64.197)
16:21 crestfallen: yeah but conversion is still defined in the buffer
16:21 crestfallen: register
16:21 jle`: sure, so call it newHello = tt (\() -> "hello")
16:21 jle`: and try seeing what newHello () does
16:22 lprd_ has joined (~jon@lfbn-1-886-87.w86-247.abo.wanadoo.fr)
16:23 lemmih has joined (~lemmih@202.133.195.149)
16:25 ziyourenxiang has joined (~ziyourenx@unaffiliated/ziyourenxiang)
16:25 crestfallen: jle`: so yeah that works .. I mean it works just like const
16:25 jle`: it doesn't work just like const, does it?
16:25 jle`: const takes two inputs, but newHello takes one input
16:26 LKoen has left IRC (Remote host closed the connection)
16:26 slack1256 has joined (~slack1256@190-22-236-246.baf.movistar.cl)
16:26 crestfallen: but isn't it like currying with the first parameter defined as (\_ -> "hello)   ?
16:27 crestfallen: "
16:27 jle`: it works like `const "hello"`, maybe
16:27 jle`: is that what you mean?
16:27 lprd_ has left IRC (Ping timeout: 276 seconds)
16:27 crestfallen: I guess yeah
16:27 jle`: see if you can make yourself more sure of it :)
16:27 jle`: because the next step will only make sense fi you understand why it's the same as const "hello"
16:28 crestfallen: this is the tutorial it's the second example under basics: https://kseo.github.io/posts/2016-12-25-type-isomorphism.html
16:29 jle`: so, do you see why `newHello` is the same as `const "hello"`?
16:29 perrier-jouet has left IRC (Quit: WeeChat 2.6)
16:29 crestfallen: working..
16:30 justan0theruser has joined (justanothe@gateway/vpn/nordvpn/justanotheruser)
16:31 justanotheruser has left IRC (Ping timeout: 240 seconds)
16:31 crestfallen: yeah because you're inputting () to newHello, which is ignored, or not ignored but the isomorphism is completed when you input () jle`
16:32 crestfallen: so "hello" is all that is left
16:32 heatsink has joined (~heatsink@2600:1700:bef1:5e10:68b4:607f:85e1:f172)
16:32 jle`: the isomorphism is already 'completed' before you give the ()
16:33 jle`: remember, we are talking about isomorphisms between functions, not isomorphisms between strings
16:33 jle`: so, tt (const "hello") == const "hello", right?
16:34 nullifidian__ has joined (~nullifidi@unaffiliated/nullifidian)
16:35 Deide_ has left IRC (Quit: Seeee yaaaa)
16:35 crestfallen: hold on that's trippy I'm not sure I get that
16:35 jle`: crestfallen: okay, so `newHello = tt (const "hello")`, right?
16:35 jle`: and you just told me that newHello == const "hello"
16:36 jle`: so, by transitive property, if tt (const "hello") == newHello, and newHello = const "hello"
16:36 jle`: then that means that tt (const "hello") == const "hello"
16:36 jle`: if x == y and y == z, then x == z
16:36 acarrico has joined (~acarrico@dhcp-68-142-57-11.greenmountainaccess.net)
16:37 heatsink has left IRC (Ping timeout: 264 seconds)
16:37 nullifidian_ has left IRC (Ping timeout: 240 seconds)
16:37 kunningd has joined (~kunningdr@unaffiliated/kunningdruger)
16:38 crestfallen: yeah because (\_ -> "hello") is interchangeable with const "hello" because  \_ is a wildcard that returns "hello"
16:39 jathan has left IRC (Quit: WeeChat 2.3)
16:40 jle`: yeah. so do you see how `tt (const "hello")` returns `const "hello"`. it just returned our original input, unchanged
16:40 orzo: Is there a list package providing a lazy spine with strict unboxed elements?
16:40 jle`: and because nothing special is going on with "hello", you can maybe also see that `tt (const x) = const x`
16:41 jle`: and, since all functions from () are a constant function, this is like saying `tt blah == blah`
16:41 jle`: so tt = id.  since whatever function you give it, it'l return the same function in return
16:41 jle`: if you give it const "hello", it'll give back const "hello"
16:41 jle`: if you give it const 123, it'll gibe back const 123
16:41 jle`: if you give it const True, it'll give back const True, etc.
16:42 jle`: tt = id :)
16:44 tirti has left ()
16:44 moldybits has joined (~moldybits@unaffiliated/moldybits)
16:46 crestfallen: so id is 'const "hello"' but what about the type of tt      :t tt  () -> [Char]    where is the function const in that type signature jle`   ?
16:46 jle`: id is not const "hello"
16:46 jle`: and that is not the type of tt
16:46 crestfallen: its just hello
16:47 jle`: crestfallen: i'm saying that `tt = id`, which means `tt (const "hello")` is the same as `id (const "hello")`
16:47 jle`: which is the same as `const "hello"`
16:47 jle`: tt (const "hello")
16:47 Gurkenglas has left IRC (Ping timeout: 276 seconds)
16:47 jle`: = id (const "hello")
16:47 jle`:  = const "hello"
16:47 LKoen has joined (~LKoen@2a01cb0407597a004c5ea2d18927ccbe.ipv6.abo.wanadoo.fr)
16:48 jle`: and tt :: (() -> a) -> (() -> a), not whatever type you wrote out, heh
16:50 crestfallen: trippy I think I have it. thanks kindly jle`
16:50 jle`: np :)
16:50 anup has joined (62f94095@c-98-249-64-149.hsd1.nm.comcast.net)
16:51 anup: hi folks
16:51 anup: i wanted help for a programme
16:51 anup is now known as Guest22388
16:51 Guest22388: about permutations in haskell
16:52 Guest22388: input is: distribute 1 [2,3]
16:52 Guest22388: output required : [[1,2,3], [2,1,3], [2,3,1]]
16:52 Guest22388: any help is appreciated
16:54 jluttine has left IRC (Ping timeout: 265 seconds)
16:56 c_wraith: take it one step at a time. can you write something that outputs [[1,2,3]]?
16:56 LKoen has left IRC (Quit: “It’s only logical. First you learn to talk, then you learn to think. Too bad it’s not the other way round.”)
16:56 turab has left IRC (Ping timeout: 240 seconds)
16:57 captjakk has joined (~captjakk@174-16-212-40.hlrn.qwest.net)
16:58 hackage: emd 0.1.6.0 - Empirical Mode Decomposition and Hilbert-Huang Transform  https://hackage.haskell.org/package/emd-0.1.6.0 (jle)
16:58 VashTrigun has joined (~vash@ppp-94-69-228-224.home.otenet.gr)
16:58 argent0_ has left IRC (Ping timeout: 265 seconds)
17:00 DpEpsilon1 has left IRC ()
17:00 solonarv has left IRC (Ping timeout: 240 seconds)
17:00 captjakk has left IRC (Remote host closed the connection)
17:01 Axman6: @unmtl RWST (ExceptT e m)
17:01 lambdabot: Plugin `unmtl' failed with: `RWST (ExceptT e m)' is not applied to enough arguments, giving `/\A B C D. ExceptT e m -> B -> C (D, B, A)'
17:01 captjakk has joined (~captjakk@174-16-212-40.hlrn.qwest.net)
17:01 Axman6: @unmtl RWST r w s (ExceptT e m) a
17:01 lambdabot: r -> s -> ExceptT e m (a, s, w)
17:01 wroathe has joined (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
17:01 Axman6: @unmtl ExceptT e (RWST r w s m) a
17:01 lambdabot: ExceptT e (RWST r w s m) a
17:01 Axman6: :'(
17:02 Axman6: @unmtl ErrorT e (RWST r w s m) a
17:02 lambdabot: r -> s -> m (Either e a, s, w)
17:02 Axman6: that's the one, thanks lambdabot
17:03 Guest22388 has left IRC (Ping timeout: 260 seconds)
17:03 c_wraith: just remember that when you apply a transformer, its effects have to be jammed inside of what it's wrapping. 
17:05 captjakk has left IRC (Ping timeout: 240 seconds)
17:05 kish has left IRC (Ping timeout: 268 seconds)
17:06 wroathe has left IRC (Ping timeout: 268 seconds)
17:07 novum has left IRC (Ping timeout: 260 seconds)
17:09 abhixec has joined (~abhixec@73.92.49.6)
17:09 turab has joined (~turab@69.223.60.226)
17:10 jluttine has joined (~jluttine@109.204.147.177)
17:12 anj has joined (406a6f34@64.106.111.52)
17:13 Axman6: yeah it always feels backwards but makes sense
17:15 anj: distribute 1 [2,3] should return [[1,2,3], [2,1,3], [2,3,1]].
17:15 rekahsoft has left IRC (Ping timeout: 264 seconds)
17:15 jluttine has left IRC (Ping timeout: 240 seconds)
17:15 chalkmonster has joined (~chalkmons@unaffiliated/chalkmonster)
17:17 Gurkenglas has joined (~Gurkengla@unaffiliated/gurkenglas)
17:17 anj: any idea?
17:17 the_true_potato has left IRC (Ping timeout: 276 seconds)
17:18 Axman6: anj: c_wraith is trying to get you to work towards the solution through a series of logical steps. if that is all the requirement is, then you can just write: distribute 1 [2,3] = [[1,2,3], [2,1,3], [2,3,1]]
17:18 wildtrees has left IRC (Quit: Leaving)
17:18 Axman6: "c_wraith: take it one step at a time. can you write something that outputs [[1,2,3]]? "
17:20 argent0 has joined (~argent0@191.81.225.21)
17:21 Azel has joined (~Thunderbi@ppp-115-87-132-74.revip4.asianet.co.th)
17:21 turab has left IRC (Ping timeout: 240 seconds)
17:25 pera has left IRC (Quit: leaving)
17:26 freeman42x has left IRC (Ping timeout: 246 seconds)
17:26 jeltsch has left IRC (Ping timeout: 245 seconds)
17:28 conal has joined (~conal@207.189.24.189)
17:29 plutoniix has left IRC (Quit: Leaving)
17:30 rruizt has left IRC (Ping timeout: 268 seconds)
17:30 Azel has left IRC (Ping timeout: 276 seconds)
17:30 rruizt has joined (~rruizt@83-84-23-124.cable.dynamic.v4.ziggo.nl)
17:32 ryantrinkle has joined (~ryan@cpe-68-173-35-198.nyc.res.rr.com)
17:33 heatsink has joined (~heatsink@2600:1700:bef1:5e10:68b4:607f:85e1:f172)
17:33 qwe__ has joined (~kunningdr@unaffiliated/kunningdruger)
17:36 kunningd has left IRC (Ping timeout: 240 seconds)
17:37 chalkmonster has left IRC (Quit: WeeChat 2.6)
17:38 heatsink has left IRC (Ping timeout: 245 seconds)
17:38 laem_ has joined (~laem@unaffiliated/laem)
17:39 laem has left IRC (Ping timeout: 240 seconds)
17:41 slack1256 has left IRC (Ping timeout: 276 seconds)
17:42 dmwit: . o O ( Just nondeterministically choose l,r such that l++r = [1,2,3] and form l++[1]++r, what could be easier? )
17:44 conal has left IRC (Quit: Computer has gone to sleep.)
17:44 qwe__ is now known as kunningd
17:44 gdude2002 has joined (~gdude2002@141.98.102.235)
17:46 oisdk has left IRC (Quit: My MacBook has gone to sleep. ZZZzzz…)
17:46 Chaoxu has joined (2658a70d@gateway/web/cgi-irc/kiwiirc.com/ip.38.88.167.13)
17:46 VashTrigun has left IRC (Quit: WeeChat 1.9.1)
17:48 mearnsh has left IRC (Ping timeout: 240 seconds)
17:48 oisdk has joined (~oisdk@217-183-12-239-dynamic.agg2.dyx.chf-qkr.eircom.net)
17:49 zacts has joined (~zacts@dragora/developer/zacts)
17:50 chesscipher has joined (~oned4@151.51.60.203)
17:50 chesscipher: can someone help me installing haskell on openbsd?
17:50 chesscipher: I mean, stack;
17:51 chesscipher: rn I've done: pkg_add ghc cabal-install; cabal update; cabal install stack
17:51 chesscipher: tho in this last step it 'breaks'
17:51 chesscipher: ``cabal: The following packages are likely to be broken by the reinstalls: ghc-8.2.2. Use --force-reinstalls if you want to install anyway.''
17:52 chesscipher: and doing so it can't compile a couple of packages
17:52 jle`: chesscipher: usually you can use stack to install cabal-install, but i don't think it's normal to go the other way around
17:53 jle`: have you tried installing stack directly first?
17:53 jle`: instead of getting cabal-install first
17:53 mearnsh has joined (~mearnsh@69.85.85.198)
17:53 mearnsh has left IRC (Changing host)
17:53 mearnsh has joined (~mearnsh@unaffiliated/bounb)
17:54 ggVGc has joined (~ggVGc@unaffiliated/walt)
17:54 Chaoxu: What is the standard way to work with things that have multiple typeclass implementations? for example integers are monoids over + and *. There are times I feel it's easier to just define a function `useMappend: (a->a->a)->a->a->a`, and just pass the `mappend` function into it. 
17:54 chesscipher: jle`: from where? I couldn't find it in the openbsd repo
17:54 jle`: chesscipher: hm, does https://docs.haskellstack.org/en/stable/README/ help any?
17:55 eiGHttt has joined (~eiGHttt@115.231.100.106)
17:55 jle`: Chaoxu: usually we work with the functions specifically, yeah, like 8 * 3 vs. 8 + 3
17:55 chesscipher: jle`: (1) ``Sorry, this installer does not support your operating system: OpenBSD.''
17:55 Chaoxu has left IRC (Remote host closed the connection)
17:55 jle`: Chaoxu: the main issue is when you have to use typeclass-polymorphic abstractions
17:55 jle`: oh they left :'(
17:55 jle`: chesscipher: ah :'(
17:56 chesscipher: jle`: (2) there is no subtitle with ``openbsd'' in it in the /install_and_upgrade/
17:57 Chaoxu has joined (2658a70d@gateway/web/cgi-irc/kiwiirc.com/ip.38.88.167.13)
17:57 libertyprime has left IRC (Ping timeout: 245 seconds)
17:58 jle`: hm, i'm sorry, i'm not sure how to help in this case then. although, you should be able to get full haskell functionality with just cabal-install
17:58 jle`: (instead of needing stack)
17:59 lucasb has left IRC (Quit: Connection closed for inactivity)
17:59 Chaoxu has left IRC (Remote host closed the connection)
18:00 mathlover2 has joined (~mathlover@2604:6000:1111:a3aa:9c09:de0c:6803:c82c)
18:00 mathlover2 has left IRC (Remote host closed the connection)
18:00 chalkmonster has joined (~chalkmons@unaffiliated/chalkmonster)
18:00 jedws has joined (~jedws@101.180.86.173)
18:01 conal has joined (~conal@207.189.24.189)
18:01 CSP-SOFTWARE has joined (~uwx@172.245.163.218)
18:02 cybai has left IRC (Remote host closed the connection)
18:02 dmwit: chesscipher: What does `cabal install stack --dry-run` say?
18:02 dmwit: chesscipher: Perhaps you can just pin the versions of whichever packages it's reinstalling to the installed versions.
18:03 dmwit: chesscipher: Or at least the versions of the packages that come with GHC.
18:04 sclv: I’m not even sure if stack supports openbsd?
18:04 sclv: If there’s no ghc binaries for it that stack packages
18:04 sclv: Then having a stack binary is useless
18:04 deviantfero has left IRC (Ping timeout: 240 seconds)
18:05 chesscipher: dmwit: https://0x0.st/zthg.txt
18:05 thc202 has left IRC (Ping timeout: 245 seconds)
18:05 Hiro_ has left IRC (Ping timeout: 265 seconds)
18:05 chesscipher: sclv: ghc exists on openbsd, infact I have it installed, tho I'd like to install stack too
18:07 deviantfero has joined (~deviantfe@ip168-243-230-189.intercom.com.sv)
18:07 sclv: yes. But stack installs its OWN ghc
18:07 sclv: Not the system one
18:07 dmwit: chesscipher: Something like `cabal install stack --constraint 'directory installed' --constraint 'process installed'`.
18:07 sclv: and idk if it packages one for bsd
18:07 dmwit: But yes, this consideration about whether stack will even work once you're done with that is worth thinking about.
18:07 sclv: Given it doesn’t even give you a binary of stack itself
18:08 fragamus has joined (~michaelgo@c-98-244-6-56.hsd1.ca.comcast.net)
18:09 dmwit: (directory and process are the two packages marked by "new version" in your paste but that ship with GHC)
18:11 iqubic has left ("ERC (IRC client for Emacs 27.0.50)")
18:11 replay has left IRC (Quit: Textual IRC Client: www.textualapp.com)
18:11 ziyourenxiang has left IRC (Quit: Leaving)
18:11 milanj has left IRC (Quit: This computer has gone to sleep)
18:11 iqubic has joined (~user@2601:602:9000:5260:b0cb:39de:d7de:cfe5)
18:13 carldd has left IRC (Ping timeout: 240 seconds)
