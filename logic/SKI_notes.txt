All operations in lambda calculus can be encoded via 
abstraction elimination into the SKI calculus as binary 
trees whose leaves are one of the three symbols S, K, 
and I (called combinators).

Although the most formal representation of the objects 
in this system requires binary trees, they are usually 
represented, for typesetability, as parenthesized 
expressions, either with all the subtrees parenthesized, 
or only the right-side children subtrees parenthesized. 
So, the tree whose left subtree is the tree KS and whose 
right subtree is the tree SK is usually typed as ((KS)(SK)), 
or more simply as KS(SK), instead of being fully drawn as 
a tree (as formality and readability would require). 
Parenthesizing only the right subtree makes this notation 
left-associative: ISK means ((IS)K).

I is redundant, as it behaves the same as SKK. specifically: 
SKxy reduces to y, so SKx === I

So these are all equivalent: SKK, SKS, SK(SSSSSS) .

The choice of reduction strategy determines which terms diverge:
normal order vs. applicative order.

The SKI calculus is called synthetic (a theory) versus analytic
(a model). Theoretic means you've derived / proved it from 
logic fundamentals. Analytic means its fitted to existing 
data of some kind.

Const (K) enables point-free (no parameters) notation. Its a 
function that takes a value and returns a function that takes a
second value, but returns the first value:

\x -> \y -> x

In lambda calculus \x -> \x -> x , the returned x is from the 
second function (the middle term).

With (S) you can write it 2 ways:

S f g h =  f h  (g h)
        = (f h) (g h)

--------------------------------------------------------------

-- study:
1)

https://cs.stackexchange.com/questions/55441/what-is-the-purpose-of-the-ski-combinator-calculusor-even-lambda-calculus-wha/55444

2)

https://blog.ngzhian.com/ski.html
