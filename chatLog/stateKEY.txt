[wavemode_ , Axman6]  If we define:

newtype T a = TC a  

then the constructor TC is now a function of type 

a -> T a  

for example, TC 5 has the type: 
T Int


Likewise:

type ST = Int
newtype ST a = S (State -> (a, State))

ghci> :t S 
S :: (State -> (a, State)) -> ST a 
refers to the type of the constructor S, as a function.


If we wrote:

newtype ST a = S {runST :: State -> (a,State)} 

then we'd have the function 

runST :: ST a -> State -> (a,State) 

created automatically.


ghci> newtype MyState s a = MyState { runSt :: (s -> (a,s)) }
ghci> :t MyState (\x -> ("grace", x))
MyState s [Char]
ghci> let tt = runSt $ MyState (\x -> ("pax", x))
ghci> tt 5
("pax",5)
ghci> :t tt
tt :: s -> ([Char], s)
