LIST MONAD NOTES, jackdk :

Prelude> [1..3] >>= \x -> [x-1,x,x+1]

Prelude> (>>=) [1..3] (\x -> [x+10, x*5, 10^x])

----------------------------------------------------------------------

`pairs xs ys = xs >>= \x -> ys >>= \y -> return (x,y)` is the 
mechanical translation out of do notation and into operators


here is how do-notation desugars, with some strange layout to 
show the mechanics:  https://www.irccloud.com/pastebin/VUI1byoc/


the 9th line you are refering to is the implementation of the 
specific instance of >>= when the monad is []


`\x -> ...` and one `\y -> ...` inside it


here is an expansion of the previous paste. I wrote the type 
signatures of different parts underneath so you can see how 
the bits nest:  https://www.irccloud.com/pastebin/W11rxVaK/


>>= will appear in the desugaring of a do-block anywhere you 
bind a variable name like `x <- `


that is represented in the (>>=) signature as [a] -> (a -> [b])     ? 
in totality its m a -> (a -> m b) for each line of the do block 


you can often think of >>= as giving a name to some "thing", 
like the "result" of an action or "some element" of a list. 
This is why it's called "bind" - it binds a name to that "thing"


so for each line of the do block you are doing a ' m a -> (a -> m b) '   


yes, that's why I laid out the desugared version that way.
excellent work.


Something that helped me a lot was to write the Functor, 
Applicative, Monad instances for a bunch of different 
types ([], ((->) t), Maybe, (Either e)), and also writing 
out a bunch of functions that only use the monad operators 
(sequence, replicateM, join, most of Control.Monad really)


another useful exercise is to write (>=>)/(>>=)/join in 
terms of each other, as they're equally powerful
