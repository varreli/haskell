subseqs :: [a] -> [[a]]
subseqs [] = [[]]
subseqs (x:xs) = (subseqs xs) ++ map (x:) (subseqs xs)


-- subseqs [3]     = subseqs []    ++ (map (3:) (subseqs []))
--                 = [[]]          ++ (map (3:) [[]])
--                 = [[]]          ++ [[3]]
--                 = [[], [3]]
-- subseqs [2,3]   = subseqs [3]   ++ (map (2:) (subseqs [3]))
--                 = [[], [3]]     ++ (map (2:) [[], [3]])
--                 = [[], [3]]     ++ [[2], [2,3]]
--                 = [[], [3], [2], [2,3]]
-- subseqs [1,2,3] = subseqs [2,3] ++ (map (1:) (subseqs [2,3]))
--                 = [[], [3], [2], [2,3]] ++ (map (1:) [[], [3], [2], [2,3]])
--                 = [[], [3], [2], [2,3]] ++ [[1], [1,3], [1,2], [1,2,3]]
--                 = [[], [3], [2], [2,3], [1], [1,3], [1,2], [1,2,3]]



Evaluation order:

1)
subseqs [1,2,3] = subseqs (1:[2,3]) = subseqs [2,3] ++ map (1:) (subseqs [2,3])

-- Haskell: I need to know what ' subseqs [2,3] ' is to continue:

2)
subseqs [2,3] = subseqs (2:[3]) = subseqs [3] ++ map (2:) (subseqs [3]) 


-- Haskell: Now I need to know what 'subseqs [3]' is -- and 
-- what 'subseqs []' is: it's [[]] from definition! :

3)
subseqs [3] = subseqs (3:[]) = subseqs [] ++ map (3:) (subseqs [])

subseqs [3]     = subseqs []    ++ (map (3:) (subseqs []))
                = [[]]          ++ (map (3:) [[]])
                = [[]]          ++ [[3]]
                = [[], [3]]

4) 
now we can go back and finish step 2) :

-- subseqs [2,3]   = subseqs [3]   ++ (map (2:) (subseqs [3]))
--                 = [[], [3]]     ++ (map (2:) [[], [3]])
--                 = [[], [3]]     ++ [[2], [2,3]]
--                 = [[], [3], [2], [2,3]]

5)
and finish step 1) :

-- subseqs [1,2,3] = subseqs [2,3] ++ (map (1:) (subseqs [2,3]))
--                 = [[], [3], [2], [2,3]] ++ (map (1:) [[], [3], [2], [2,3]])
--                 = [[], [3], [2], [2,3]] ++ [[1], [1,3], [1,2], [1,2,3]]
--                 = [[], [3], [2], [2,3], [1], [1,3], [1,2], [1,2,3]]
