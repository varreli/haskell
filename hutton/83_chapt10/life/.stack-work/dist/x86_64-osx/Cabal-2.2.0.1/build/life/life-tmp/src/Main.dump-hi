
==================== FINAL INTERFACE ====================
2018-08-10 23:13:46.295899 UTC

interface main:Main 8043
  interface hash: 4cb294fbf8e482041c2bbb0f7340a530
  ABI hash: 17c35d1e5c96258085917155dad7249a
  export-list hash: 964454151815032da9be9b0fc59313e4
  orphan hash: 5169ceb90e9da698e4da630615a2e51c
  flag hash: 552e4140372e83e4ba80a9ab82798852
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.births
  Main.cls
  Main.glider
  Main.goto
  Main.height
  Main.isAlive
  Main.isEmpty
  Main.life
  Main.liveneighbs
  Main.main
  Main.neighbs
  Main.nextgen
  Main.rmdups
  Main.showcells
  Main.survivors
  Main.wait
  Main.width
  Main.wrap
  Main.writeat
  Main.Board
  Main.Pos
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Control.Concurrent ef40f102578b6e7296c2a2358b631ee7
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Conc.IO 327939b98a83ab2111bd6b71033bb8c9
import  -/  base-4.11.1.0:GHC.IO.Handle fb550f271baae6fe7b19205b8166986b
import  -/  base-4.11.1.0:GHC.IO.Handle.FD e69f914efff91201d4bcd54a391a46dd
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO ce09fff7d191d14067bddc2efd9b53a4
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
70fe008ecc420925c316daac7946fc07
  $s$fEq(,) :: GHC.Classes.Eq (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqInt)
                  Main.$s$fEq(,)_$s$fEq(,)_$c/= -}
d9c29de69e24759049df94d820948480
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (GHC.Types.Int, GHC.Types.Int))
                   (y :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Classes.eqInt a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.eqInt a2 b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
0d6a587985f106369396c9d07c8cae6a
  $wgoto ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U(U)>,
     Unfolding: (\ (ww :: GHC.Types.Int) (ww1 :: GHC.Types.Int) ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.CString.unpackAppendCString#
                      Main.goto4
                      (case ww1 of ww2 { GHC.Types.I# ww3 ->
                       case GHC.Show.$wshowSignedInt
                              0#
                              ww3
                              (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                       GHC.Base.++_$s++
                         @ GHC.Types.Char
                         (GHC.CString.unpackAppendCString#
                            Main.goto3
                            (case ww of ww8 { GHC.Types.I# ww9 ->
                             case GHC.Show.$wshowSignedInt
                                    0#
                                    ww9
                                    (GHC.Types.[] @ GHC.Types.Char) of ww10 { (#,#) ww11 ww12 ->
                             GHC.Base.++_$s++ @ GHC.Types.Char Main.goto1 ww11 ww12 } }))
                         ww5
                         ww6 } }))
                   GHC.Types.False) -}
e7e777961297b52b489bacbd3244fe20
  $wliveneighbs ::
    Main.Board -> GHC.Types.Int -> GHC.Types.Int -> GHC.Prim.Int#
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U(U)><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Board)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int) ->
                 case Main.$wneighbs ww ww1 of ww2 { (#,#) ww3 ww4 ->
                 letrec {
                   $wgo :: [(GHC.Types.Int, GHC.Types.Int)]
                           -> GHC.Prim.Int# -> GHC.Prim.Int#
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                   = \ (w1 :: [(GHC.Types.Int, GHC.Types.Int)])
                       (ww5 :: GHC.Prim.Int#) ->
                     case w1 of wild {
                       [] -> ww5
                       : y ys
                       -> case GHC.List.elem @ Main.Pos Main.$s$fEq(,) y w of wild1 {
                            GHC.Types.False -> $wgo ys ww5
                            GHC.Types.True -> $wgo ys (GHC.Prim.+# ww5 1#) } }
                 } in
                 $wgo (GHC.Types.: @ Main.Pos ww3 ww4) 0# }) -}
7a9b694ebc4f0defba7d5b1cdbb91cba
  $wneighbs ::
    GHC.Types.Int -> GHC.Types.Int -> (# Main.Pos, [Main.Pos] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><L,U(U)>,
     Inline: [0] -}
49e538e1d3ce3d82da1443af0aeb59e2
  type Board = [Main.Pos]
3a0550624c690eb4cf34a4aea084190b
  type Pos = (GHC.Types.Int, GHC.Types.Int)
e429813058b00716b1932e802f4fc947
  births :: Main.Board -> [Main.Pos]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (b :: Main.Board) ->
                 letrec {
                   go :: [Main.Pos] -> [Main.Pos] {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Main.Pos]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Main.Pos
                       : y ys
                       -> case GHC.List.elem @ Main.Pos Main.$s$fEq(,) y b of wild1 {
                            GHC.Types.False
                            -> case y of ww { (,) ww1 ww2 ->
                               case Main.$wliveneighbs b ww1 ww2 of ww3 {
                                 DEFAULT -> go ys 3# -> GHC.Types.: @ Main.Pos ww (go ys) } }
                            GHC.Types.True -> go ys } }
                 } in
                 go (Main.births_$srmdups (Main.births_go b))) -}
4746a0aeadb80ac09c2ec4eb0db588fe
  births_$srmdups :: [Main.Pos] -> [Main.Pos]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
1d0360f7b647f93855c5ec8fe0b4410a
  births_go :: [(GHC.Types.Int, GHC.Types.Int)] -> [Main.Pos]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
48bd64c4b668d60cc95f5bdb00a6279b
  cls :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.cls1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
4da300d0f430299bace2dc3832caa1c9
  cls1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.cls2
                   GHC.Types.False) -}
030a16f6068b24d1d2117b4755577171
  cls2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.cls3) -}
753acb164cead5696f02ec455507c76d
  cls3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\ESC[2J"#) -}
7978fccd7fb3b16dfaac600e04e4e428
  glider :: Main.Board
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Main.Pos Main.glider12 Main.glider1) -}
3b16bc3435696f49a2a803c266ebf693
  glider1 :: [Main.Pos]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Main.Pos Main.glider10 Main.glider2) -}
4da80caf08ec2218383fbf94f4843d64
  glider10 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.glider11, Main.glider8)) -}
28d3ac195dbb108e1c6879d85cf723ec
  glider11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
4a7d6bd2c669c2e974e0ca0af484c164
  glider12 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.glider6, Main.glider11)) -}
6e173d4369f5f1cf302f633d604d5210
  glider2 :: [Main.Pos]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Main.Pos Main.glider9 Main.glider3) -}
7931fba555325a8140b7fa93e3c9e1e7
  glider3 :: [Main.Pos]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Main.Pos Main.glider7 Main.glider4) -}
9db17fc20c653e08d8e7f76ae6a4d64b
  glider4 :: [Main.Pos]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Pos
                   Main.glider5
                   (GHC.Types.[] @ Main.Pos)) -}
3585b05b50bd5fb245e885e676a8622f
  glider5 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.glider6, Main.glider6)) -}
50fa139e8128d3b954791f1890037f38
  glider6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
82d47bc62bebc2b1c905f92bb637611c
  glider7 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.glider8, Main.glider6)) -}
66fc751ad7e0dbc101be849d088d62c7
  glider8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
4b8aefdff47a6d011c1b2eeb799d3eda
  glider9 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.glider6, Main.glider8)) -}
02339338ab8532c193ffa1984dd328f2
  goto :: Main.Pos -> GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Pos) ->
                 case w of ww { (,) ww1 ww2 ->
                 (Main.$wgoto ww1 ww2) `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
0eb902bd35df829f3dd86405c37205f9
  goto1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.goto2) -}
757d164d5d74ba6a978ba6c7305929f9
  goto2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("H"#) -}
7fab2be872ddf56454fc0a78f72df7c1
  goto3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (";"#) -}
0f47c0550667fdc5b9f78ae5e1b7d7b5
  goto4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\ESC["#) -}
aea9425c3ace3c6e1cc5a91245c82593
  height :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
fe30d4bfdfcc46d812d9a43554f4313b
  isAlive :: Main.Board -> Main.Pos -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (b :: Main.Board) (p :: Main.Pos) ->
                 GHC.List.elem @ Main.Pos Main.$s$fEq(,) p b) -}
9d57a82c86cb1759e436238ac2e8eb6f
  isEmpty :: Main.Board -> Main.Pos -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (b :: Main.Board) (p :: Main.Pos) ->
                 case GHC.List.elem @ Main.Pos Main.$s$fEq(,) p b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
168b29714c80057bba7deeb0f026d294
  life :: Main.Board -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.life1
                  `cast`
                (<Main.Board>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
76178f402b1dd7bd4013a039bcc47e6b
  life1 ::
    Main.Board
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U> -}
e74f2a4e5c1b340bc6488a9900e1dcb8
  liveneighbs :: Main.Board -> Main.Pos -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U(U),U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Board) (w1 :: Main.Pos) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case Main.$wliveneighbs w ww1 ww2 of ww3 { DEFAULT ->
                 GHC.Types.I# ww3 } }) -}
0f4010c378da6ed51e6b8dab243577cd
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
c20dbf5679ea8622fd72d96d4c31cf10
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Unfolding: (Main.life1 Main.glider) -}
51d6f0cc3723bb96abce29a6db6dd847
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
1de2c2ed73193644f7a0ac31f3120a7f
  neighbs :: Main.Pos -> [Main.Pos]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U(U),U(U))>m2,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Pos) ->
                 case w of ww { (,) ww1 ww2 ->
                 case Main.$wneighbs ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Types.: @ Main.Pos ww4 ww5 } }) -}
f287483883506d4c4642657e3aff9eb8
  nextgen :: Main.Board -> Main.Board
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (b :: Main.Board) ->
                 GHC.Base.augment
                   @ (GHC.Types.Int, GHC.Types.Int)
                   (\ @ b1
                      (c :: (GHC.Types.Int, GHC.Types.Int) -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ (GHC.Types.Int, GHC.Types.Int)
                      @ b1
                      c
                      n
                      (Main.survivors b))
                   (Main.births b)) -}
27c3f66d47a5b382744c705ef454d403
  rmdups :: GHC.Classes.Eq a => [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(A,C(C1(U)))><S,1*U> -}
281c28ea8562f140bea53f86a8a73065
  showcells :: Main.Board -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.showcells1
                  `cast`
                (<Main.Board>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
1e727ab6fdd1e0bb725aae2283181794
  showcells1 ::
    Main.Board
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (b :: Main.Board)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Main.showcells2 b eta) -}
bb001ac780a1f5d8baf128de6ca312b4
  showcells2 ::
    [Main.Pos]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
e2e2e3078fb72e7b71730898d825d07b
  survivors :: Main.Board -> [Main.Pos]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (b :: Main.Board) ->
                 letrec {
                   go :: [Main.Pos] -> [Main.Pos] {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Main.Pos]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Main.Pos
                       : y ys
                       -> case GHC.List.elem
                                 @ GHC.Types.Int
                                 GHC.Classes.$fEqInt
                                 (case y of ww { (,) ww1 ww2 ->
                                  case Main.$wliveneighbs b ww1 ww2 of ww3 { DEFAULT ->
                                  GHC.Types.I# ww3 } })
                                 Main.survivors1 of wild1 {
                            GHC.Types.False -> go ys
                            GHC.Types.True -> GHC.Types.: @ Main.Pos y (go ys) } }
                 } in
                 go b) -}
4247696be0e03bde3ccfe5d2e34e407a
  survivors1 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.glider11
                   Main.survivors2) -}
f2d9a1eaa6f82fa2ab544216d924d9cb
  survivors2 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.glider8
                   (GHC.Types.[] @ GHC.Types.Int)) -}
80bbf3e126f4e61c226c9b35b896435a
  wait :: GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Conc.IO.threadDelay1
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
bf2453ee809a5088c8285e53d5df1cf5
  width :: GHC.Types.Int
  {- Strictness: m, Unfolding: (Main.height) -}
56f8fbcf80a98d720b1e0d0ee0358190
  wrap :: Main.Pos -> Main.Pos
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Pos) ->
                 case w of ww { (,) ww1 ww2 ->
                 (case ww1 of wild { GHC.Types.I# x ->
                  case GHC.Classes.modInt# (GHC.Prim.-# x 1#) 10# of ww3 { DEFAULT ->
                  GHC.Types.I# (GHC.Prim.+# ww3 1#) } },
                  case ww2 of wild { GHC.Types.I# x ->
                  case GHC.Classes.modInt# (GHC.Prim.-# x 1#) 10# of ww3 { DEFAULT ->
                  GHC.Types.I# (GHC.Prim.+# ww3 1#) } }) }) -}
85b277ad5268224ccef985d8c7e76a85
  writeat :: Main.Pos -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <S,1*U(1*U(U),1*U(U))><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.writeat1
                  `cast`
                (<Main.Pos>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
77c443a06f3af5947e58d3c2169aa595
  writeat1 ::
    Main.Pos
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,1*U(1*U(U),1*U(U))><L,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (p :: Main.Pos)
                   (xs :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Main.goto p) `cast` (GHC.Types.N:IO[0] <()>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   xs
                   GHC.Types.False
                   ipv }) -}
"SPEC rmdups @ Pos" forall ($dEq :: GHC.Classes.Eq Main.Pos)
  Main.rmdups @ (GHC.Types.Int, GHC.Types.Int) $dEq
  = Main.births_$srmdups
"SPEC/Main $fEq(,) @ Int @ Int" [orphan] forall (v1 :: GHC.Classes.Eq
                                                         GHC.Types.Int)
                                                (v :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,) @ GHC.Types.Int @ GHC.Types.Int v v1
  = Main.$s$fEq(,)
"SPEC/Main $fEq(,)_$c/= @ Int @ Int" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                 GHC.Types.Int)
                                                     ($dEq :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,)_$c/= @ GHC.Types.Int @ GHC.Types.Int $dEq $dEq1
  = Main.$s$fEq(,)_$s$fEq(,)_$c/=
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

