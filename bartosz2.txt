Abstraction
Composition
identity

With Abstraction, we want to get rid of
details, like the Assembly and Machine
language levels of computing.
When we abstract away the details, things
that were different seem to become
identical.

This is the notion of identity.
Because of identity, there are things that
are identical, and things almost equal, or,
isomorphic. Are isomorphism and equality
the same, should we treat them the same?

Composition and Identity encompass Category
Theory.

A category is a bunch of objects, and arrows,
called morphisms. An object is just a point,
and the reason for objects is so you can mark
the ends of arrows. Higher and lower level
abstraction is actually a spatial relationship,
like how hunter-gatherers saw the world.
(Arrows !) Morphisms too, are spatial, they
travel from a -> b. A category can be seen as
graphical, a graph, spatial.

Two composable morphisms have arrows where
the end of one is the beginning of the other:
a -> b -> c = a -> c
Objects and arrows contain no information; the
composition contains information. Encode
everything in the composition.

f = a -> b;   id.b . f = f    - left identity
g = a -> b;   g . id.a = g    - right identity

Consider:

f = a -> b
g = b -> c
h = c -> d :

a -> b -> c -> d   =   h . (g . f)
a -> b -> c -> d   =   (h . g) . f

These are associative. Parentheses take
precedence.

Types are sets of values, functions
operate on sets of values, you can define
functions on sets. (video time 36:00 mins)
